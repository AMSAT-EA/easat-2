

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Mon Oct 31 20:59:01 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           	psect	mediumconst
    57  007EF4                     __pmediumconst:
    58                           	opt stack 0
    59  007EF4  00                 	db	0
    60  007EF5                     _dpowers:
    61                           	opt stack 0
    62  007EF5  0001               	dw	1
    63  007EF7  0000               	dw	0
    64  007EF9  000A               	dw	10
    65  007EFB  0000               	dw	0
    66  007EFD  0064               	dw	100
    67  007EFF  0000               	dw	0
    68  007F01  03E8               	dw	1000
    69  007F03  0000               	dw	0
    70  007F05  2710               	dw	10000
    71  007F07  0000               	dw	0
    72  007F09  86A0               	dw	34464
    73  007F0B  0001               	dw	1
    74  007F0D  4240               	dw	16960
    75  007F0F  000F               	dw	15
    76  007F11  9680               	dw	38528
    77  007F13  0098               	dw	152
    78  007F15  E100               	dw	57600
    79  007F17  05F5               	dw	1525
    80  007F19  CA00               	dw	51712
    81  007F1B  3B9A               	dw	15258
    82  007F1D                     __end_of_dpowers:
    83                           	opt stack 0
    84  007F1D                     __npowers_:
    85                           	opt stack 0
    86  007F1D  00                 	db	0
    87  007F1E  80                 	db	128
    88  007F1F  3F                 	db	63
    89  007F20  CD                 	db	205
    90  007F21  CC                 	db	204
    91  007F22  3D                 	db	61
    92  007F23  D7                 	db	215
    93  007F24  23                 	db	35
    94  007F25  3C                 	db	60
    95  007F26  12                 	db	18
    96  007F27  83                 	db	131
    97  007F28  3A                 	db	58
    98  007F29  B7                 	db	183
    99  007F2A  D1                 	db	209
   100  007F2B  38                 	db	56
   101  007F2C  C6                 	db	198
   102  007F2D  27                 	db	39
   103  007F2E  37                 	db	55
   104  007F2F  38                 	db	56
   105  007F30  86                 	db	134
   106  007F31  35                 	db	53
   107  007F32  C0                 	db	192
   108  007F33  D6                 	db	214
   109  007F34  33                 	db	51
   110  007F35  CC                 	db	204
   111  007F36  2B                 	db	43
   112  007F37  32                 	db	50
   113  007F38  70                 	db	112
   114  007F39  89                 	db	137
   115  007F3A  30                 	db	48
   116  007F3B  E7                 	db	231
   117  007F3C  DB                 	db	219
   118  007F3D  2E                 	db	46
   119  007F3E  E5                 	db	229
   120  007F3F  3C                 	db	60
   121  007F40  1E                 	db	30
   122  007F41  42                 	db	66
   123  007F42  A2                 	db	162
   124  007F43  0D                 	db	13
   125  007F44                     __end_of__npowers_:
   126                           	opt stack 0
   127  007F44                     __powers_:
   128                           	opt stack 0
   129  007F44  00                 	db	0
   130  007F45  80                 	db	128
   131  007F46  3F                 	db	63
   132  007F47  00                 	db	0
   133  007F48  20                 	db	32
   134  007F49  41                 	db	65
   135  007F4A  00                 	db	0
   136  007F4B  C8                 	db	200
   137  007F4C  42                 	db	66
   138  007F4D  00                 	db	0
   139  007F4E  7A                 	db	122
   140  007F4F  44                 	db	68
   141  007F50  40                 	db	64
   142  007F51  1C                 	db	28
   143  007F52  46                 	db	70
   144  007F53  50                 	db	80
   145  007F54  C3                 	db	195
   146  007F55  47                 	db	71
   147  007F56  24                 	db	36
   148  007F57  74                 	db	116
   149  007F58  49                 	db	73
   150  007F59  97                 	db	151
   151  007F5A  18                 	db	24
   152  007F5B  4B                 	db	75
   153  007F5C  BC                 	db	188
   154  007F5D  BE                 	db	190
   155  007F5E  4C                 	db	76
   156  007F5F  6B                 	db	107
   157  007F60  6E                 	db	110
   158  007F61  4E                 	db	78
   159  007F62  03                 	db	3
   160  007F63  15                 	db	21
   161  007F64  50                 	db	80
   162  007F65  79                 	db	121
   163  007F66  AD                 	db	173
   164  007F67  60                 	db	96
   165  007F68  F3                 	db	243
   166  007F69  49                 	db	73
   167  007F6A  71                 	db	113
   168  007F6B                     __end_of__powers_:
   169                           	opt stack 0
   170  0000                     _ANSELDbits	set	3899
   171  0000                     _LATDbits	set	3980
   172  0000                     _PORTDbits	set	3971
   173  0000                     _TRISDbits	set	3989
   174  007F6B                     STR_2:
   175                           
   176                           ; BSR set to: 15
   177  007F6B  20                 	db	32
   178  007F6C  25                 	db	37
   179  007F6D  2E                 	db	46
   180  007F6E  31                 	db	49	;'1'
   181  007F6F  66                 	db	102	;'f'
   182  007F70  20                 	db	32
   183  007F71  25                 	db	37
   184  007F72  2E                 	db	46
   185  007F73  31                 	db	49	;'1'
   186  007F74  66                 	db	102	;'f'
   187  007F75  20                 	db	32
   188  007F76  25                 	db	37
   189  007F77  33                 	db	51	;'3'
   190  007F78  2E                 	db	46
   191  007F79  30                 	db	48	;'0'
   192  007F7A  64                 	db	100	;'d'
   193  007F7B  20                 	db	32
   194  007F7C  25                 	db	37
   195  007F7D  33                 	db	51	;'3'
   196  007F7E  2E                 	db	46
   197  007F7F  30                 	db	48	;'0'
   198  007F80  64                 	db	100	;'d'
   199  007F81  00                 	db	0
   200  007F82                     STR_39:
   201                           
   202                           ; BSR set to: 15
   203  007F82  2D                 	db	45
   204  007F83  2D                 	db	45
   205  007F84  2E                 	db	46
   206  007F85  2E                 	db	46
   207  007F86  2D                 	db	45
   208  007F87  2D                 	db	45
   209  007F88  00                 	db	0
   210  007F89                     STR_42:
   211                           
   212                           ; BSR set to: 15
   213  007F89  2E                 	db	46
   214  007F8A  2D                 	db	45
   215  007F8B  2E                 	db	46
   216  007F8C  2D                 	db	45
   217  007F8D  2E                 	db	46
   218  007F8E  2D                 	db	45
   219  007F8F  00                 	db	0
   220  007F90                     STR_40:
   221                           
   222                           ; BSR set to: 15
   223  007F90  2E                 	db	46
   224  007F91  2E                 	db	46
   225  007F92  2D                 	db	45
   226  007F93  2D                 	db	45
   227  007F94  2E                 	db	46
   228  007F95  2E                 	db	46
   229  007F96  00                 	db	0
   230  007F97                     STR_1:
   231                           
   232                           ; BSR set to: 15
   233  007F97  45                 	db	69	;'E'
   234  007F98  41                 	db	65	;'A'
   235  007F99  53                 	db	83	;'S'
   236  007F9A  41                 	db	65	;'A'
   237  007F9B  54                 	db	84	;'T'
   238  007F9C  32                 	db	50	;'2'
   239  007F9D  00                 	db	0
   240  007F9E                     STR_29:
   241                           
   242                           ; BSR set to: 15
   243  007F9E  2D                 	db	45
   244  007F9F  2D                 	db	45
   245  007FA0  2D                 	db	45
   246  007FA1  2D                 	db	45
   247  007FA2  2D                 	db	45
   248  007FA3  00                 	db	0
   249  007FA4                     STR_30:
   250                           
   251                           ; BSR set to: 15
   252  007FA4  2E                 	db	46
   253  007FA5  2D                 	db	45
   254  007FA6  2D                 	db	45
   255  007FA7  2D                 	db	45
   256  007FA8  2D                 	db	45
   257  007FA9  00                 	db	0
   258  007FAA                     STR_31:
   259                           
   260                           ; BSR set to: 15
   261  007FAA  2E                 	db	46
   262  007FAB  2E                 	db	46
   263  007FAC  2D                 	db	45
   264  007FAD  2D                 	db	45
   265  007FAE  2D                 	db	45
   266  007FAF  00                 	db	0
   267  007FB0                     STR_32:
   268                           
   269                           ; BSR set to: 15
   270  007FB0  2E                 	db	46
   271  007FB1  2E                 	db	46
   272  007FB2  2E                 	db	46
   273  007FB3  2D                 	db	45
   274  007FB4  2D                 	db	45
   275  007FB5  00                 	db	0
   276  007FB6                     STR_33:
   277                           
   278                           ; BSR set to: 15
   279  007FB6  2E                 	db	46
   280  007FB7  2E                 	db	46
   281  007FB8  2E                 	db	46
   282  007FB9  2E                 	db	46
   283  007FBA  2D                 	db	45
   284  007FBB  00                 	db	0
   285  007FBC                     STR_38:
   286                           
   287                           ; BSR set to: 15
   288  007FBC  2D                 	db	45
   289  007FBD  2D                 	db	45
   290  007FBE  2D                 	db	45
   291  007FBF  2D                 	db	45
   292  007FC0  2E                 	db	46
   293  007FC1  00                 	db	0
   294  007FC2                     STR_41:
   295                           
   296                           ; BSR set to: 15
   297  007FC2  2D                 	db	45
   298  007FC3  2E                 	db	46
   299  007FC4  2E                 	db	46
   300  007FC5  2D                 	db	45
   301  007FC6  2E                 	db	46
   302  007FC7  00                 	db	0
   303  007FC8                     STR_37:
   304                           
   305                           ; BSR set to: 15
   306  007FC8  2D                 	db	45
   307  007FC9  2D                 	db	45
   308  007FCA  2D                 	db	45
   309  007FCB  2E                 	db	46
   310  007FCC  2E                 	db	46
   311  007FCD  00                 	db	0
   312  007FCE                     STR_36:
   313                           
   314                           ; BSR set to: 15
   315  007FCE  2D                 	db	45
   316  007FCF  2D                 	db	45
   317  007FD0  2E                 	db	46
   318  007FD1  2E                 	db	46
   319  007FD2  2E                 	db	46
   320  007FD3  00                 	db	0
   321  007FD4                     STR_35:
   322                           
   323                           ; BSR set to: 15
   324  007FD4  2D                 	db	45
   325  007FD5  2E                 	db	46
   326  007FD6  2E                 	db	46
   327  007FD7  2E                 	db	46
   328  007FD8  2E                 	db	46
   329  007FD9  00                 	db	0
   330  007FDA                     STR_34:
   331                           
   332                           ; BSR set to: 15
   333  007FDA  2E                 	db	46
   334  007FDB  2E                 	db	46
   335  007FDC  2E                 	db	46
   336  007FDD  2E                 	db	46
   337  007FDE  2E                 	db	46
   338  007FDF  00                 	db	0
   339  007FE0                     STR_27:
   340                           
   341                           ; BSR set to: 15
   342  007FE0  2D                 	db	45
   343  007FE1  2E                 	db	46
   344  007FE2  2D                 	db	45
   345  007FE3  2D                 	db	45
   346  007FE4  00                 	db	0
   347  007FE5                     STR_19:
   348                           
   349                           ; BSR set to: 15
   350  007FE5  2D                 	db	45
   351  007FE6  2D                 	db	45
   352  007FE7  2E                 	db	46
   353  007FE8  2D                 	db	45
   354  007FE9  00                 	db	0
   355  007FEA                     STR_26:
   356                           
   357                           ; BSR set to: 15
   358  007FEA  2D                 	db	45
   359  007FEB  2E                 	db	46
   360  007FEC  2E                 	db	46
   361  007FED  2D                 	db	45
   362  007FEE  00                 	db	0
   363  007FEF                     STR_18:
   364                           
   365                           ; BSR set to: 15
   366  007FEF  2E                 	db	46
   367  007FF0  2D                 	db	45
   368  007FF1  2D                 	db	45
   369  007FF2  2E                 	db	46
   370  007FF3  00                 	db	0
   371  007FF4                     STR_5:
   372                           
   373                           ; BSR set to: 15
   374  007FF4  2D                 	db	45
   375  007FF5  2E                 	db	46
   376  007FF6  2D                 	db	45
   377  007FF7  2E                 	db	46
   378  007FF8  00                 	db	0
   379  007FF9                     STR_14:
   380                           
   381                           ; BSR set to: 15
   382  007FF9  2E                 	db	46
   383  007FFA  2D                 	db	45
   384  007FFB  2E                 	db	46
   385  007FFC  2E                 	db	46
   386  007FFD  00                 	db	0
   387  0000                     
   388                           ; #config settings
   389  007FFE  00                 	db	0	; dummy byte at the end
   390  0000                     
   391                           	psect	cinit
   392  005BD8                     __pcinit:
   393                           	opt stack 0
   394  005BD8                     start_initialization:
   395                           	opt stack 0
   396  005BD8                     __initialization:
   397                           	opt stack 0
   398  005BD8                     end_of_initialization:
   399                           	opt stack 0
   400  005BD8                     __end_of__initialization:
   401                           	opt stack 0
   402  005BD8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   403  005BDA  6EF8               	movwf	tblptru,c
   404  005BDC  0100               	movlb	0
   405  005BDE  EFF1  F02D         	goto	_main	;jump to C main() function
   406                           tblptru	equ	0xFF8
   407                           
   408                           	psect	cstackBANK1
   409  000100                     __pcstackBANK1:
   410                           	opt stack 0
   411  000100                     util_beacon_transmission@BEACON_MESSAGE:
   412                           	opt stack 0
   413                           
   414                           ; 128 bytes @ 0x0
   415  000100                     	ds	128
   416  000180                     util_beacon_transmission@BEACON_BUFFER:
   417                           	opt stack 0
   418                           
   419                           ; 64 bytes @ 0x80
   420  000180                     	ds	64
   421  0001C0                     util_beacon_transmission@i:
   422                           	opt stack 0
   423                           
   424                           ; 2 bytes @ 0xC0
   425  0001C0                     	ds	2
   426                           tblptru	equ	0xFF8
   427                           
   428                           	psect	cstackBANK0
   429  000060                     __pcstackBANK0:
   430                           	opt stack 0
   431  000060                     _sprintf$1128:
   432                           	opt stack 0
   433                           
   434                           ; 3 bytes @ 0x0
   435  000060                     	ds	3
   436  000063                     sprintf@ap:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x3
   440  000063                     	ds	2
   441  000065                     sprintf@flag:
   442                           	opt stack 0
   443                           
   444                           ; 2 bytes @ 0x5
   445  000065                     	ds	2
   446  000067                     sprintf@width:
   447                           	opt stack 0
   448                           
   449                           ; 2 bytes @ 0x7
   450  000067                     	ds	2
   451  000069                     sprintf@tmpval:
   452                           	opt stack 0
   453                           
   454                           ; 4 bytes @ 0x9
   455  000069                     	ds	4
   456  00006D                     sprintf@val:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0xD
   460  00006D                     	ds	4
   461  000071                     sprintf@exp:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x11
   465  000071                     	ds	2
   466  000073                     sprintf@fval:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x13
   470  000073                     	ds	3
   471  000076                     sprintf@prec:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x16
   475  000076                     	ds	2
   476  000078                     sprintf@c:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x18
   480  000078                     	ds	1
   481  000079                     main_loop@temperature:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x19
   485  000079                     	ds	3
   486  00007C                     main_loop@solar_current:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x1C
   490  00007C                     	ds	2
   491  00007E                     main_loop@battery_current:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x1E
   495  00007E                     	ds	2
   496  000080                     main_loop@battery_voltage:
   497                           	opt stack 0
   498                           
   499                           ; 3 bytes @ 0x20
   500  000080                     	ds	3
   501                           tblptru	equ	0xFF8
   502                           
   503                           	psect	cstackCOMRAM
   504  000001                     __pcstackCOMRAM:
   505                           	opt stack 0
   506  000001                     ??_isdigit:
   507  000001                     ?_getSolarCurrent:
   508                           	opt stack 0
   509  000001                     ?_getBatteryCurrent:
   510                           	opt stack 0
   511  000001                     ?_strlen:
   512                           	opt stack 0
   513  000001                     ?___awmod:
   514                           	opt stack 0
   515  000001                     ?_getBatteryVoltage:
   516                           	opt stack 0
   517  000001                     ?_getTemperature:
   518                           	opt stack 0
   519  000001                     ?___ftpack:
   520                           	opt stack 0
   521  000001                     ?___ftneg:
   522                           	opt stack 0
   523  000001                     ?__tdiv_to_l_:
   524                           	opt stack 0
   525  000001                     ?__div_to_l_:
   526                           	opt stack 0
   527  000001                     ?___lldiv:
   528                           	opt stack 0
   529  000001                     util_waits_delay_ms@ms:
   530                           	opt stack 0
   531  000001                     util_waits_delay_hundred_us@hun_us:
   532                           	opt stack 0
   533  000001                     ___awmod@dividend:
   534                           	opt stack 0
   535  000001                     memset@p1:
   536                           	opt stack 0
   537  000001                     strcat@to:
   538                           	opt stack 0
   539  000001                     strcpy@to:
   540                           	opt stack 0
   541  000001                     strlen@s:
   542                           	opt stack 0
   543  000001                     __div_to_l_@f1:
   544                           	opt stack 0
   545  000001                     ___ftpack@arg:
   546                           	opt stack 0
   547  000001                     __tdiv_to_l_@f1:
   548                           	opt stack 0
   549  000001                     ___ftge@ff1:
   550                           	opt stack 0
   551  000001                     ___ftneg@f1:
   552                           	opt stack 0
   553  000001                     ___lldiv@dividend:
   554                           	opt stack 0
   555                           
   556                           ; 4 bytes @ 0x0
   557  000001                     	ds	1
   558  000002                     _isdigit$787:
   559                           	opt stack 0
   560                           
   561                           ; 1 bytes @ 0x1
   562  000002                     	ds	1
   563  000003                     ??_util_waits_delay_ms:
   564  000003                     ??_strlen:
   565  000003                     ??_util_waits_delay_hundred_us:
   566  000003                     isdigit@c:
   567                           	opt stack 0
   568  000003                     ___awmod@divisor:
   569                           	opt stack 0
   570  000003                     memset@c:
   571                           	opt stack 0
   572  000003                     strcat@from:
   573                           	opt stack 0
   574  000003                     strcpy@from:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x2
   578  000003                     	ds	1
   579  000004                     ___ftpack@exp:
   580                           	opt stack 0
   581  000004                     util_waits_delay_ms@i:
   582                           	opt stack 0
   583  000004                     util_waits_delay_hundred_us@i:
   584                           	opt stack 0
   585  000004                     __div_to_l_@f2:
   586                           	opt stack 0
   587  000004                     __tdiv_to_l_@f2:
   588                           	opt stack 0
   589  000004                     ___ftge@ff2:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x3
   593  000004                     	ds	1
   594  000005                     ___awmod@counter:
   595                           	opt stack 0
   596  000005                     ___ftpack@sign:
   597                           	opt stack 0
   598  000005                     memset@n:
   599                           	opt stack 0
   600  000005                     strcat@cp:
   601                           	opt stack 0
   602  000005                     strcpy@cp:
   603                           	opt stack 0
   604  000005                     strlen@cp:
   605                           	opt stack 0
   606  000005                     ___lldiv@divisor:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x4
   610  000005                     	ds	1
   611  000006                     ??___ftpack:
   612  000006                     ___awmod@sign:
   613                           	opt stack 0
   614  000006                     util_waits_delay_secs@secs:
   615                           	opt stack 0
   616  000006                     util_transmit_dot@i:
   617                           	opt stack 0
   618  000006                     util_transmit_dash@i:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x5
   622  000006                     	ds	1
   623  000007                     ??__tdiv_to_l_:
   624  000007                     ??___ftge:
   625  000007                     ?___awdiv:
   626                           	opt stack 0
   627  000007                     ___awdiv@dividend:
   628                           	opt stack 0
   629  000007                     memset@p:
   630                           	opt stack 0
   631  000007                     __div_to_l_@quot:
   632                           	opt stack 0
   633                           
   634                           ; 4 bytes @ 0x6
   635  000007                     	ds	1
   636  000008                     ??_util_waits_delay_secs:
   637  000008                     util_transmit_morse_sequence@morse_sequence:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x7
   641  000008                     	ds	1
   642  000009                     ?___lltoft:
   643                           	opt stack 0
   644  000009                     util_waits_delay_secs@i:
   645                           	opt stack 0
   646  000009                     ___awdiv@divisor:
   647                           	opt stack 0
   648  000009                     ___lldiv@quotient:
   649                           	opt stack 0
   650  000009                     ___lltoft@c:
   651                           	opt stack 0
   652                           
   653                           ; 4 bytes @ 0x8
   654  000009                     	ds	1
   655  00000A                     ??_util_transmit_morse_sequence:
   656  00000A                     __tdiv_to_l_@quot:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x9
   660  00000A                     	ds	1
   661  00000B                     ___awdiv@counter:
   662                           	opt stack 0
   663  00000B                     __div_to_l_@cntr:
   664                           	opt stack 0
   665  00000B                     util_waits_delay_secs@j:
   666                           	opt stack 0
   667                           
   668                           ; 2 bytes @ 0xA
   669  00000B                     	ds	1
   670  00000C                     ___awdiv@sign:
   671                           	opt stack 0
   672  00000C                     __div_to_l_@exp1:
   673                           	opt stack 0
   674  00000C                     util_transmit_morse_sequence@i:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0xB
   678  00000C                     	ds	1
   679  00000D                     ??___lltoft:
   680  00000D                     ___lldiv@counter:
   681                           	opt stack 0
   682  00000D                     util_waits_delay_mins@minutes:
   683                           	opt stack 0
   684  00000D                     ___awdiv@quotient:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0xC
   688  00000D                     	ds	1
   689  00000E                     ?___llmod:
   690                           	opt stack 0
   691  00000E                     util_transmit_letter@letter:
   692                           	opt stack 0
   693  00000E                     __tdiv_to_l_@cntr:
   694                           	opt stack 0
   695  00000E                     ___llmod@dividend:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0xD
   699  00000E                     	ds	1
   700  00000F                     ??_util_waits_delay_mins:
   701  00000F                     ?___wmul:
   702                           	opt stack 0
   703  00000F                     __tdiv_to_l_@exp1:
   704                           	opt stack 0
   705  00000F                     ___wmul@multiplier:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0xE
   709  00000F                     	ds	1
   710  000010                     util_waits_delay_mins@i:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0xF
   714  000010                     	ds	1
   715  000011                     ___lltoft@exp:
   716                           	opt stack 0
   717  000011                     ___wmul@multiplicand:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x10
   721  000011                     	ds	1
   722  000012                     ___llmod@divisor:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0x11
   726  000012                     	ds	1
   727  000013                     ___wmul@product:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x12
   731  000013                     	ds	2
   732  000015                     ?___ftmul:
   733                           	opt stack 0
   734  000015                     ___ftmul@f1:
   735                           	opt stack 0
   736                           
   737                           ; 3 bytes @ 0x14
   738  000015                     	ds	1
   739  000016                     ___llmod@counter:
   740                           	opt stack 0
   741                           
   742                           ; 1 bytes @ 0x15
   743  000016                     	ds	2
   744  000018                     ___ftmul@f2:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x17
   748  000018                     	ds	3
   749  00001B                     ??___ftmul:
   750                           
   751                           ; 1 bytes @ 0x1A
   752  00001B                     	ds	3
   753  00001E                     ___ftmul@exp:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x1D
   757  00001E                     	ds	1
   758  00001F                     ___ftmul@f3_as_product:
   759                           	opt stack 0
   760                           
   761                           ; 3 bytes @ 0x1E
   762  00001F                     	ds	3
   763  000022                     ___ftmul@cntr:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x21
   767  000022                     	ds	1
   768  000023                     ___ftmul@sign:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x22
   772  000023                     	ds	1
   773  000024                     ?_fround:
   774                           	opt stack 0
   775  000024                     ?_scale:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0x23
   779  000024                     	ds	3
   780  000027                     _fround$1126:
   781                           	opt stack 0
   782  000027                     _scale$1127:
   783                           	opt stack 0
   784                           
   785                           ; 3 bytes @ 0x26
   786  000027                     	ds	3
   787  00002A                     scale@scl:
   788                           	opt stack 0
   789  00002A                     _fround$1125:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x29
   793  00002A                     	ds	1
   794  00002B                     ?___fttol:
   795                           	opt stack 0
   796  00002B                     ___fttol@f1:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x2A
   800  00002B                     	ds	2
   801  00002D                     fround@prec:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x2C
   805  00002D                     	ds	1
   806  00002E                     ?___ftadd:
   807                           	opt stack 0
   808  00002E                     ___ftadd@f1:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x2D
   812  00002E                     	ds	1
   813  00002F                     ??___fttol:
   814                           
   815                           ; 1 bytes @ 0x2E
   816  00002F                     	ds	2
   817  000031                     ___ftadd@f2:
   818                           	opt stack 0
   819                           
   820                           ; 3 bytes @ 0x30
   821  000031                     	ds	3
   822  000034                     ??___ftadd:
   823  000034                     ___fttol@sign1:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0x33
   827  000034                     	ds	1
   828  000035                     ___fttol@lval:
   829                           	opt stack 0
   830                           
   831                           ; 4 bytes @ 0x34
   832  000035                     	ds	2
   833  000037                     ___ftadd@sign:
   834                           	opt stack 0
   835                           
   836                           ; 1 bytes @ 0x36
   837  000037                     	ds	1
   838  000038                     ___ftadd@exp2:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x37
   842  000038                     	ds	1
   843  000039                     ___ftadd@exp1:
   844                           	opt stack 0
   845  000039                     ___fttol@exp1:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x38
   849  000039                     	ds	1
   850  00003A                     ?___ftsub:
   851                           	opt stack 0
   852  00003A                     ___ftsub@f1:
   853                           	opt stack 0
   854                           
   855                           ; 3 bytes @ 0x39
   856  00003A                     	ds	3
   857  00003D                     ___ftsub@f2:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x3C
   861  00003D                     	ds	3
   862  000040                     ?_sprintf:
   863                           	opt stack 0
   864  000040                     sprintf@sp:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0x3F
   868  000040                     	ds	2
   869  000042                     sprintf@f:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x41
   873  000042                     	ds	12
   874  00004E                     ??_sprintf:
   875                           
   876                           ; 1 bytes @ 0x4D
   877  00004E                     	ds	6
   878  000054                     util_beacon_transmission@battery_voltage:
   879                           	opt stack 0
   880                           
   881                           ; 3 bytes @ 0x53
   882  000054                     	ds	3
   883  000057                     util_beacon_transmission@solar_current:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x56
   887  000057                     	ds	2
   888  000059                     util_beacon_transmission@battery_current:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x58
   892  000059                     	ds	2
   893  00005B                     util_beacon_transmission@temperature:
   894                           	opt stack 0
   895                           
   896                           ; 3 bytes @ 0x5A
   897  00005B                     	ds	3
   898  00005E                     tblptru	equ	0xFF8
   899                           
   900                           ; 1 bytes @ 0x5D
   901 ;;
   902 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   903 ;;
   904 ;; *************** function _main *****************
   905 ;; Defined at:
   906 ;;		line 19 in file "easat2_main_mcu.c"
   907 ;; Parameters:    Size  Location     Type
   908 ;;		None
   909 ;; Auto vars:     Size  Location     Type
   910 ;;		None
   911 ;; Return value:  Size  Location     Type
   912 ;;                  1    wreg      void 
   913 ;; Registers used:
   914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   915 ;; Tracked objects:
   916 ;;		On entry : 0/0
   917 ;;		On exit  : 0/0
   918 ;;		Unchanged: 0/0
   919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   920 ;;      Params:         0       0       0       0       0       0       0
   921 ;;      Locals:         0       0       0       0       0       0       0
   922 ;;      Temps:          0       0       0       0       0       0       0
   923 ;;      Totals:         0       0       0       0       0       0       0
   924 ;;Total ram usage:        0 bytes
   925 ;; Hardware stack levels required when called:    7
   926 ;; This function calls:
   927 ;;		_initialize
   928 ;;		_main_loop
   929 ;; This function is called by:
   930 ;;		Startup code after reset
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text0
   935  005BE2                     __ptext0:
   936                           	opt stack 0
   937  005BE2                     _main:
   938                           	opt stack 24
   939                           
   940                           ;easat2_main_mcu.c: 22: initialize();
   941                           
   942                           ; BSR set to: 15
   943                           ;incstack = 0
   944  005BE2  EC23  F02F         	call	_initialize	;wreg free
   945                           
   946                           ;easat2_main_mcu.c: 25: main_loop();
   947  005BE6  EC47  F031         	call	_main_loop	;wreg free
   948  005BEA  EF00  F000         	goto	start
   949  005BEE                     __end_of_main:
   950                           	opt stack 0
   951                           tblptru	equ	0xFF8
   952                           
   953 ;; *************** function _main_loop *****************
   954 ;; Defined at:
   955 ;;		line 31 in file "easat2_main_mcu.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  battery_volt    3   32[BANK0 ] float 
   960 ;;  temperature     3   25[BANK0 ] float 
   961 ;;  battery_curr    2   30[BANK0 ] int 
   962 ;;  solar_curren    2   28[BANK0 ] int 
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   972 ;;      Params:         0       0       0       0       0       0       0
   973 ;;      Locals:         0      10       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0
   975 ;;      Totals:         0      10       0       0       0       0       0
   976 ;;Total ram usage:       10 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    6
   979 ;; This function calls:
   980 ;;		___ftge
   981 ;;		_getBatteryCurrent
   982 ;;		_getBatteryVoltage
   983 ;;		_getSolarCurrent
   984 ;;		_getTemperature
   985 ;;		_util_beacon_transmission
   986 ;;		_util_waits_delay_mins
   987 ;; This function is called by:
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text1
   993  00628E                     __ptext1:
   994                           	opt stack 0
   995  00628E                     _main_loop:
   996                           	opt stack 24
   997  00628E                     
   998                           ;easat2_main_mcu.c: 43: battery_voltage = getBatteryVoltage();
   999  00628E  ECF7  F02D         	call	_getBatteryVoltage	;wreg free
  1000  006292  C001  F080         	movff	?_getBatteryVoltage,main_loop@battery_voltage
  1001  006296  C002  F081         	movff	?_getBatteryVoltage+1,main_loop@battery_voltage+1
  1002  00629A  C003  F082         	movff	?_getBatteryVoltage+2,main_loop@battery_voltage+2
  1003                           
  1004                           ;easat2_main_mcu.c: 46: solar_current = getSolarCurrent();
  1005  00629E  ECE7  F02D         	call	_getSolarCurrent	;wreg free
  1006  0062A2  C001  F07C         	movff	?_getSolarCurrent,main_loop@solar_current
  1007  0062A6  C002  F07D         	movff	?_getSolarCurrent+1,main_loop@solar_current+1
  1008                           
  1009                           ;easat2_main_mcu.c: 49: battery_current = getBatteryCurrent();
  1010  0062AA  ECE2  F02D         	call	_getBatteryCurrent	;wreg free
  1011  0062AE  C001  F07E         	movff	?_getBatteryCurrent,main_loop@battery_current
  1012  0062B2  C002  F07F         	movff	?_getBatteryCurrent+1,main_loop@battery_current+1
  1013                           
  1014                           ;easat2_main_mcu.c: 52: temperature = getTemperature();
  1015  0062B6  ECFE  F02D         	call	_getTemperature	;wreg free
  1016  0062BA  C001  F079         	movff	?_getTemperature,main_loop@temperature
  1017  0062BE  C002  F07A         	movff	?_getTemperature+1,main_loop@temperature+1
  1018  0062C2  C003  F07B         	movff	?_getTemperature+2,main_loop@temperature+2
  1019                           
  1020                           ;easat2_main_mcu.c: 56: if (battery_voltage > 2.8) {
  1021  0062C6  0E33               	movlw	51
  1022  0062C8  6E01               	movwf	___ftge@ff1,c
  1023  0062CA  0E33               	movlw	51
  1024  0062CC  6E02               	movwf	___ftge@ff1+1,c
  1025  0062CE  0E40               	movlw	64
  1026  0062D0  6E03               	movwf	___ftge@ff1+2,c
  1027  0062D2  C080  F004         	movff	main_loop@battery_voltage,___ftge@ff2
  1028  0062D6  C081  F005         	movff	main_loop@battery_voltage+1,___ftge@ff2+1
  1029  0062DA  C082  F006         	movff	main_loop@battery_voltage+2,___ftge@ff2+2
  1030  0062DE  ECFF  F030         	call	___ftge	;wreg free
  1031  0062E2  B0D8               	btfsc	status,0,c
  1032  0062E4  D016               	goto	l3259
  1033                           
  1034                           ;easat2_main_mcu.c: 57: util_beacon_transmission(battery_voltage, solar_current, battery
      +                          _current, temperature);
  1035  0062E6  C080  F054         	movff	main_loop@battery_voltage,util_beacon_transmission@battery_voltage
  1036  0062EA  C081  F055         	movff	main_loop@battery_voltage+1,util_beacon_transmission@battery_voltage+1
  1037  0062EE  C082  F056         	movff	main_loop@battery_voltage+2,util_beacon_transmission@battery_voltage+2
  1038  0062F2  C07C  F057         	movff	main_loop@solar_current,util_beacon_transmission@solar_current
  1039  0062F6  C07D  F058         	movff	main_loop@solar_current+1,util_beacon_transmission@solar_current+1
  1040  0062FA  C07E  F059         	movff	main_loop@battery_current,util_beacon_transmission@battery_current
  1041  0062FE  C07F  F05A         	movff	main_loop@battery_current+1,util_beacon_transmission@battery_current+1
  1042  006302  C079  F05B         	movff	main_loop@temperature,util_beacon_transmission@temperature
  1043  006306  C07A  F05C         	movff	main_loop@temperature+1,util_beacon_transmission@temperature+1
  1044  00630A  C07B  F05D         	movff	main_loop@temperature+2,util_beacon_transmission@temperature+2
  1045  00630E  ECE7  F031         	call	_util_beacon_transmission	;wreg free
  1046  006312                     l3259:
  1047                           
  1048                           ;easat2_main_mcu.c: 58: }
  1049                           ;easat2_main_mcu.c: 61: util_waits_delay_mins(3);
  1050  006312  0E00               	movlw	0
  1051  006314  6E0E               	movwf	util_waits_delay_mins@minutes+1,c
  1052  006316  0E03               	movlw	3
  1053  006318  6E0D               	movwf	util_waits_delay_mins@minutes,c
  1054  00631A  ECB7  F02E         	call	_util_waits_delay_mins	;wreg free
  1055                           
  1056                           ;easat2_main_mcu.c: 64: } while (1);
  1057  00631E  D7B7               	goto	l3253
  1058  006320                     __end_of_main_loop:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           status	equ	0xFD8
  1062                           
  1063 ;; *************** function _util_waits_delay_mins *****************
  1064 ;; Defined at:
  1065 ;;		line 24 in file "easat2_util_waits.c"
  1066 ;; Parameters:    Size  Location     Type
  1067 ;;  minutes         2   12[COMRAM] int 
  1068 ;; Auto vars:     Size  Location     Type
  1069 ;;  i               2   15[COMRAM] int 
  1070 ;; Return value:  Size  Location     Type
  1071 ;;                  1    wreg      void 
  1072 ;; Registers used:
  1073 ;;		wreg, status,2, status,0, cstack
  1074 ;; Tracked objects:
  1075 ;;		On entry : 0/0
  1076 ;;		On exit  : 0/0
  1077 ;;		Unchanged: 0/0
  1078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1079 ;;      Params:         2       0       0       0       0       0       0
  1080 ;;      Locals:         2       0       0       0       0       0       0
  1081 ;;      Temps:          1       0       0       0       0       0       0
  1082 ;;      Totals:         5       0       0       0       0       0       0
  1083 ;;Total ram usage:        5 bytes
  1084 ;; Hardware stack levels used:    1
  1085 ;; Hardware stack levels required when called:    2
  1086 ;; This function calls:
  1087 ;;		_util_waits_delay_secs
  1088 ;; This function is called by:
  1089 ;;		_main_loop
  1090 ;;		_util_waits_delay_hours
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text2
  1095  005D6E                     __ptext2:
  1096                           	opt stack 0
  1097  005D6E                     _util_waits_delay_mins:
  1098                           	opt stack 27
  1099                           
  1100                           ;easat2_util_waits.c: 25: for (int i = 0; i < minutes; i++)
  1101                           
  1102                           ;incstack = 0
  1103  005D6E  0E00               	movlw	0
  1104  005D70  6E11               	movwf	util_waits_delay_mins@i+1,c
  1105  005D72  0E00               	movlw	0
  1106  005D74  6E10               	movwf	util_waits_delay_mins@i,c
  1107  005D76  D008               	goto	l3251
  1108  005D78                     l3247:
  1109                           
  1110                           ;easat2_util_waits.c: 26: util_waits_delay_secs(60);
  1111  005D78  0E00               	movlw	0
  1112  005D7A  6E07               	movwf	util_waits_delay_secs@secs+1,c
  1113  005D7C  0E3C               	movlw	60
  1114  005D7E  6E06               	movwf	util_waits_delay_secs@secs,c
  1115  005D80  EC65  F02F         	call	_util_waits_delay_secs	;wreg free
  1116  005D84  4A10               	infsnz	util_waits_delay_mins@i,f,c
  1117  005D86  2A11               	incf	util_waits_delay_mins@i+1,f,c
  1118  005D88                     l3251:
  1119  005D88  500D               	movf	util_waits_delay_mins@minutes,w,c
  1120  005D8A  5C10               	subwf	util_waits_delay_mins@i,w,c
  1121  005D8C  5011               	movf	util_waits_delay_mins@i+1,w,c
  1122  005D8E  0A80               	xorlw	128
  1123  005D90  6E0F               	movwf	??_util_waits_delay_mins& (0+255),c
  1124  005D92  500E               	movf	util_waits_delay_mins@minutes+1,w,c
  1125  005D94  0A80               	xorlw	128
  1126  005D96  580F               	subwfb	??_util_waits_delay_mins& (0+255),w,c
  1127  005D98  B0D8               	btfsc	status,0,c
  1128  005D9A  0012               	return	
  1129  005D9C  D7ED               	goto	l3247
  1130  005D9E                     __end_of_util_waits_delay_mins:
  1131                           	opt stack 0
  1132                           tblptru	equ	0xFF8
  1133                           status	equ	0xFD8
  1134                           
  1135 ;; *************** function _util_waits_delay_secs *****************
  1136 ;; Defined at:
  1137 ;;		line 31 in file "easat2_util_waits.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  secs            2    5[COMRAM] int 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  j               2   10[COMRAM] int 
  1142 ;;  i               2    8[COMRAM] int 
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1152 ;;      Params:         2       0       0       0       0       0       0
  1153 ;;      Locals:         4       0       0       0       0       0       0
  1154 ;;      Temps:          1       0       0       0       0       0       0
  1155 ;;      Totals:         7       0       0       0       0       0       0
  1156 ;;Total ram usage:        7 bytes
  1157 ;; Hardware stack levels used:    1
  1158 ;; Hardware stack levels required when called:    1
  1159 ;; This function calls:
  1160 ;;		_util_waits_delay_ms
  1161 ;; This function is called by:
  1162 ;;		_util_waits_delay_mins
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166                           	psect	text3
  1167  005ECA                     __ptext3:
  1168                           	opt stack 0
  1169  005ECA                     _util_waits_delay_secs:
  1170                           	opt stack 27
  1171                           
  1172                           ;easat2_util_waits.c: 32: for (int i = 0; i < secs; i++) {
  1173                           
  1174                           ;incstack = 0
  1175  005ECA  0E00               	movlw	0
  1176  005ECC  6E0A               	movwf	util_waits_delay_secs@i+1,c
  1177  005ECE  0E00               	movlw	0
  1178  005ED0  6E09               	movwf	util_waits_delay_secs@i,c
  1179  005ED2  D017               	goto	l2801
  1180  005ED4                     l2787:
  1181                           
  1182                           ;easat2_util_waits.c: 33: for (int j = 0; j < 10; j++ )
  1183  005ED4  0E00               	movlw	0
  1184  005ED6  6E0C               	movwf	util_waits_delay_secs@j+1,c
  1185  005ED8  0E00               	movlw	0
  1186  005EDA  6E0B               	movwf	util_waits_delay_secs@j,c
  1187  005EDC                     l2789:
  1188  005EDC  BE0C               	btfsc	util_waits_delay_secs@j+1,7,c
  1189  005EDE  D006               	goto	l2793
  1190  005EE0  500C               	movf	util_waits_delay_secs@j+1,w,c
  1191  005EE2  E10D               	bnz	l2799
  1192  005EE4  0E0A               	movlw	10
  1193  005EE6  5C0B               	subwf	util_waits_delay_secs@j,w,c
  1194  005EE8  B0D8               	btfsc	status,0,c
  1195  005EEA  D009               	goto	l2799
  1196  005EEC                     l2793:
  1197                           
  1198                           ;easat2_util_waits.c: 34: util_waits_delay_ms(100);
  1199  005EEC  0E00               	movlw	0
  1200  005EEE  6E02               	movwf	util_waits_delay_ms@ms+1,c
  1201  005EF0  0E64               	movlw	100
  1202  005EF2  6E01               	movwf	util_waits_delay_ms@ms,c
  1203  005EF4  EC89  F02E         	call	_util_waits_delay_ms	;wreg free
  1204  005EF8  4A0B               	infsnz	util_waits_delay_secs@j,f,c
  1205  005EFA  2A0C               	incf	util_waits_delay_secs@j+1,f,c
  1206  005EFC  D7EF               	goto	l2789
  1207  005EFE                     l2799:
  1208  005EFE  4A09               	infsnz	util_waits_delay_secs@i,f,c
  1209  005F00  2A0A               	incf	util_waits_delay_secs@i+1,f,c
  1210  005F02                     l2801:
  1211  005F02  5006               	movf	util_waits_delay_secs@secs,w,c
  1212  005F04  5C09               	subwf	util_waits_delay_secs@i,w,c
  1213  005F06  500A               	movf	util_waits_delay_secs@i+1,w,c
  1214  005F08  0A80               	xorlw	128
  1215  005F0A  6E08               	movwf	??_util_waits_delay_secs& (0+255),c
  1216  005F0C  5007               	movf	util_waits_delay_secs@secs+1,w,c
  1217  005F0E  0A80               	xorlw	128
  1218  005F10  5808               	subwfb	??_util_waits_delay_secs& (0+255),w,c
  1219  005F12  B0D8               	btfsc	status,0,c
  1220  005F14  0012               	return	
  1221  005F16  D7DE               	goto	l2787
  1222  005F18                     __end_of_util_waits_delay_secs:
  1223                           	opt stack 0
  1224                           tblptru	equ	0xFF8
  1225                           status	equ	0xFD8
  1226                           
  1227 ;; *************** function _util_beacon_transmission *****************
  1228 ;; Defined at:
  1229 ;;		line 21 in file "easat2_util_transmission.c"
  1230 ;; Parameters:    Size  Location     Type
  1231 ;;  battery_volt    3   83[COMRAM] float 
  1232 ;;  solar_curren    2   86[COMRAM] int 
  1233 ;;  battery_curr    2   88[COMRAM] int 
  1234 ;;  temperature     3   90[COMRAM] float 
  1235 ;; Auto vars:     Size  Location     Type
  1236 ;;  i               2  192[BANK1 ] int 
  1237 ;;  BEACON_MESSA  128    0[BANK1 ] unsigned char [128]
  1238 ;;  BEACON_BUFFE   64  128[BANK1 ] unsigned char [64]
  1239 ;; Return value:  Size  Location     Type
  1240 ;;                  1    wreg      void 
  1241 ;; Registers used:
  1242 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1243 ;; Tracked objects:
  1244 ;;		On entry : 0/0
  1245 ;;		On exit  : 0/0
  1246 ;;		Unchanged: 0/0
  1247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1248 ;;      Params:        10       0       0       0       0       0       0
  1249 ;;      Locals:         0       0     194       0       0       0       0
  1250 ;;      Temps:          0       0       0       0       0       0       0
  1251 ;;      Totals:        10       0     194       0       0       0       0
  1252 ;;Total ram usage:      204 bytes
  1253 ;; Hardware stack levels used:    1
  1254 ;; Hardware stack levels required when called:    5
  1255 ;; This function calls:
  1256 ;;		_memset
  1257 ;;		_sprintf
  1258 ;;		_strcat
  1259 ;;		_strcpy
  1260 ;;		_strlen
  1261 ;;		_util_transmit_letter
  1262 ;; This function is called by:
  1263 ;;		_main_loop
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text4
  1268  0063CE                     __ptext4:
  1269                           	opt stack 0
  1270  0063CE                     _util_beacon_transmission:
  1271                           	opt stack 24
  1272                           
  1273                           ;easat2_util_transmission.c: 24: char BEACON_MESSAGE[128];
  1274                           ;easat2_util_transmission.c: 25: char BEACON_BUFFER[64];
  1275                           ;easat2_util_transmission.c: 29: memset(BEACON_MESSAGE, 0, sizeof(BEACON_MESSAGE));
  1276                           
  1277                           ;incstack = 0
  1278  0063CE  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1279  0063D0  6E01               	movwf	memset@p1,c
  1280  0063D2  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1281  0063D4  6E02               	movwf	memset@p1+1,c
  1282  0063D6  0E00               	movlw	0
  1283  0063D8  6E04               	movwf	memset@c+1,c
  1284  0063DA  0E00               	movlw	0
  1285  0063DC  6E03               	movwf	memset@c,c
  1286  0063DE  0E00               	movlw	0
  1287  0063E0  6E06               	movwf	memset@n+1,c
  1288  0063E2  0E80               	movlw	128
  1289  0063E4  6E05               	movwf	memset@n,c
  1290  0063E6  EC5D  F02E         	call	_memset	;wreg free
  1291                           
  1292                           ;easat2_util_transmission.c: 30: strcpy(BEACON_MESSAGE, "EASAT2");
  1293  0063EA  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1294  0063EC  6E01               	movwf	strcpy@to,c
  1295  0063EE  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1296  0063F0  6E02               	movwf	strcpy@to+1,c
  1297  0063F2  0E97               	movlw	low STR_1
  1298  0063F4  6E03               	movwf	strcpy@from,c
  1299  0063F6  0E7F               	movlw	high STR_1
  1300  0063F8  6E04               	movwf	strcpy@from+1,c
  1301  0063FA  EC9F  F02E         	call	_strcpy	;wreg free
  1302                           
  1303                           ;easat2_util_transmission.c: 32: memset(BEACON_BUFFER, 0, sizeof(BEACON_BUFFER));
  1304  0063FE  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1305  006400  6E01               	movwf	memset@p1,c
  1306  006402  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1307  006404  6E02               	movwf	memset@p1+1,c
  1308  006406  0E00               	movlw	0
  1309  006408  6E04               	movwf	memset@c+1,c
  1310  00640A  0E00               	movlw	0
  1311  00640C  6E03               	movwf	memset@c,c
  1312  00640E  0E00               	movlw	0
  1313  006410  6E06               	movwf	memset@n+1,c
  1314  006412  0E40               	movlw	64
  1315  006414  6E05               	movwf	memset@n,c
  1316  006416  EC5D  F02E         	call	_memset	;wreg free
  1317                           
  1318                           ;easat2_util_transmission.c: 33: sprintf(BEACON_BUFFER, " %.1f %.1f %3.0d %3.0d", temper
      +                          ature, battery_voltage,
  1319                           ;easat2_util_transmission.c: 34: solar_current, battery_current);
  1320  00641A  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1321  00641C  6E40               	movwf	sprintf@sp,c
  1322  00641E  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1323  006420  6E41               	movwf	sprintf@sp+1,c
  1324  006422  0E6B               	movlw	low STR_2
  1325  006424  6E42               	movwf	sprintf@f,c
  1326  006426  0E7F               	movlw	high STR_2
  1327  006428  6E43               	movwf	sprintf@f+1,c
  1328  00642A  C05B  F044         	movff	util_beacon_transmission@temperature,?_sprintf+4
  1329  00642E  C05C  F045         	movff	util_beacon_transmission@temperature+1,?_sprintf+5
  1330  006432  C05D  F046         	movff	util_beacon_transmission@temperature+2,?_sprintf+6
  1331  006436  C054  F047         	movff	util_beacon_transmission@battery_voltage,?_sprintf+7
  1332  00643A  C055  F048         	movff	util_beacon_transmission@battery_voltage+1,?_sprintf+8
  1333  00643E  C056  F049         	movff	util_beacon_transmission@battery_voltage+2,?_sprintf+9
  1334  006442  C057  F04A         	movff	util_beacon_transmission@solar_current,?_sprintf+10
  1335  006446  C058  F04B         	movff	util_beacon_transmission@solar_current+1,?_sprintf+11
  1336  00644A  C059  F04C         	movff	util_beacon_transmission@battery_current,?_sprintf+12
  1337  00644E  C05A  F04D         	movff	util_beacon_transmission@battery_current+1,?_sprintf+13
  1338  006452  EC06  F03A         	call	_sprintf	;wreg free
  1339                           
  1340                           ;easat2_util_transmission.c: 36: strcat(BEACON_MESSAGE, BEACON_BUFFER);
  1341  006456  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1342  006458  6E01               	movwf	strcat@to,c
  1343  00645A  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1344  00645C  6E02               	movwf	strcat@to+1,c
  1345  00645E  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1346  006460  6E03               	movwf	strcat@from,c
  1347  006462  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1348  006464  6E04               	movwf	strcat@from+1,c
  1349  006466  EC44  F02F         	call	_strcat	;wreg free
  1350                           
  1351                           ;easat2_util_transmission.c: 41: for (int i = 0; i < strlen(BEACON_MESSAGE); i++) {
  1352  00646A  0E00               	movlw	0
  1353  00646C  0101               	movlb	1	; () banked
  1354  00646E  6FC1               	movwf	(util_beacon_transmission@i+1)& (0+255),b
  1355  006470  0E00               	movlw	0
  1356  006472  6FC0               	movwf	util_beacon_transmission@i& (0+255),b
  1357  006474  D00E               	goto	l3243
  1358  006476                     l3239:
  1359                           
  1360                           ; BSR set to: 1
  1361                           ;easat2_util_transmission.c: 42: util_transmit_letter(BEACON_MESSAGE[i]);
  1362  006476  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1363  006478  0101               	movlb	1	; () banked
  1364  00647A  25C0               	addwf	util_beacon_transmission@i& (0+255),w,b
  1365  00647C  6ED9               	movwf	fsr2l,c
  1366  00647E  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1367  006480  0101               	movlb	1	; () banked
  1368  006482  21C1               	addwfc	(util_beacon_transmission@i+1)& (0+255),w,b
  1369  006484  6EDA               	movwf	fsr2h,c
  1370  006486  50DF               	movf	indf2,w,c
  1371  006488  EC72  F036         	call	_util_transmit_letter
  1372  00648C  0101               	movlb	1	; () banked
  1373  00648E  4BC0               	infsnz	util_beacon_transmission@i& (0+255),f,b
  1374  006490  2BC1               	incf	(util_beacon_transmission@i+1)& (0+255),f,b
  1375  006492                     l3243:
  1376                           
  1377                           ; BSR set to: 1
  1378  006492  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1379  006494  6E01               	movwf	strlen@s,c
  1380  006496  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1381  006498  6E02               	movwf	strlen@s+1,c
  1382  00649A  EC8C  F02F         	call	_strlen	;wreg free
  1383  00649E  5001               	movf	?_strlen,w,c
  1384  0064A0  0101               	movlb	1	; () banked
  1385  0064A2  5DC0               	subwf	util_beacon_transmission@i& (0+255),w,b
  1386  0064A4  5002               	movf	?_strlen+1,w,c
  1387  0064A6  0101               	movlb	1	; () banked
  1388  0064A8  59C1               	subwfb	(util_beacon_transmission@i+1)& (0+255),w,b
  1389  0064AA  B0D8               	btfsc	status,0,c
  1390  0064AC  0012               	return	
  1391  0064AE  D7E3               	goto	l3239
  1392  0064B0                     __end_of_util_beacon_transmission:
  1393                           	opt stack 0
  1394                           tblptru	equ	0xFF8
  1395                           indf2	equ	0xFDF
  1396                           fsr2h	equ	0xFDA
  1397                           fsr2l	equ	0xFD9
  1398                           status	equ	0xFD8
  1399                           
  1400 ;; *************** function _util_transmit_letter *****************
  1401 ;; Defined at:
  1402 ;;		line 52 in file "easat2_util_transmission.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;  letter          1    wreg     unsigned char 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  letter          1   13[COMRAM] unsigned char 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1416 ;;      Params:         0       0       0       0       0       0       0
  1417 ;;      Locals:         1       0       0       0       0       0       0
  1418 ;;      Temps:          0       0       0       0       0       0       0
  1419 ;;      Totals:         1       0       0       0       0       0       0
  1420 ;;Total ram usage:        1 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    4
  1423 ;; This function calls:
  1424 ;;		_util_transmit_morse_sequence
  1425 ;;		_util_transmit_space_between_letters
  1426 ;;		_util_transmit_space_between_words
  1427 ;; This function is called by:
  1428 ;;		_util_beacon_transmission
  1429 ;; This function uses a non-reentrant model
  1430 ;;
  1431                           
  1432                           	psect	text5
  1433  006CE4                     __ptext5:
  1434                           	opt stack 0
  1435  006CE4                     _util_transmit_letter:
  1436                           	opt stack 24
  1437                           
  1438                           ; BSR set to: 1
  1439                           ;incstack = 0
  1440                           ;util_transmit_letter@letter stored from wreg
  1441  006CE4  6E0E               	movwf	util_transmit_letter@letter,c
  1442                           
  1443                           ;easat2_util_transmission.c: 54: switch (letter) {
  1444  006CE6  D11B               	goto	l3207
  1445  006CE8                     l3123:
  1446                           
  1447                           ;easat2_util_transmission.c: 60: util_transmit_morse_sequence((char*)".-");
  1448  006CE8  0EE7               	movlw	low (STR_19+2)
  1449  006CEA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1450  006CEC  0E7F               	movlw	high (STR_19+2)
  1451  006CEE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1452  006CF0  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1453                           
  1454                           ;easat2_util_transmission.c: 61: break;
  1455  006CF4  D190               	goto	l3209
  1456  006CF6                     l3125:
  1457                           
  1458                           ;easat2_util_transmission.c: 63: util_transmit_morse_sequence((char*)"-...");
  1459  006CF6  0ECF               	movlw	low (STR_36+1)
  1460  006CF8  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1461  006CFA  0E7F               	movlw	high (STR_36+1)
  1462  006CFC  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1463  006CFE  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1464                           
  1465                           ;easat2_util_transmission.c: 64: break;
  1466  006D02  D189               	goto	l3209
  1467  006D04                     l3127:
  1468                           
  1469                           ;easat2_util_transmission.c: 66: util_transmit_morse_sequence((char*)"-.-.");
  1470  006D04  0EF4               	movlw	low STR_5
  1471  006D06  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1472  006D08  0E7F               	movlw	high STR_5
  1473  006D0A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1474  006D0C  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1475                           
  1476                           ;easat2_util_transmission.c: 67: break;
  1477  006D10  D182               	goto	l3209
  1478  006D12                     l3129:
  1479                           
  1480                           ;easat2_util_transmission.c: 69: util_transmit_morse_sequence((char*)"-..");
  1481  006D12  0ECA               	movlw	low (STR_37+2)
  1482  006D14  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1483  006D16  0E7F               	movlw	high (STR_37+2)
  1484  006D18  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1485  006D1A  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1486                           
  1487                           ;easat2_util_transmission.c: 70: break;
  1488  006D1E  D17B               	goto	l3209
  1489  006D20                     l3131:
  1490                           
  1491                           ;easat2_util_transmission.c: 72: util_transmit_morse_sequence((char*)".");
  1492  006D20  0EC0               	movlw	low (STR_38+4)
  1493  006D22  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1494  006D24  0E7F               	movlw	high (STR_38+4)
  1495  006D26  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1496  006D28  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1497                           
  1498                           ;easat2_util_transmission.c: 73: break;
  1499  006D2C  D174               	goto	l3209
  1500  006D2E                     l3133:
  1501                           
  1502                           ;easat2_util_transmission.c: 75: util_transmit_morse_sequence((char*)"..-.");
  1503  006D2E  0EC3               	movlw	low (STR_41+1)
  1504  006D30  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1505  006D32  0E7F               	movlw	high (STR_41+1)
  1506  006D34  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1507  006D36  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1508                           
  1509                           ;easat2_util_transmission.c: 76: break;
  1510  006D3A  D16D               	goto	l3209
  1511  006D3C                     l3135:
  1512                           
  1513                           ;easat2_util_transmission.c: 78: util_transmit_morse_sequence((char*)"--.");
  1514  006D3C  0EBE               	movlw	low (STR_38+2)
  1515  006D3E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1516  006D40  0E7F               	movlw	high (STR_38+2)
  1517  006D42  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1518  006D44  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1519                           
  1520                           ;easat2_util_transmission.c: 79: break;
  1521  006D48  D166               	goto	l3209
  1522  006D4A                     l3137:
  1523                           
  1524                           ;easat2_util_transmission.c: 81: util_transmit_morse_sequence((char*)"....");
  1525  006D4A  0ED5               	movlw	low (STR_35+1)
  1526  006D4C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1527  006D4E  0E7F               	movlw	high (STR_35+1)
  1528  006D50  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1529  006D52  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1530                           
  1531                           ;easat2_util_transmission.c: 82: break;
  1532  006D56  D15F               	goto	l3209
  1533  006D58                     l3139:
  1534                           
  1535                           ;easat2_util_transmission.c: 84: util_transmit_morse_sequence((char*)"..");
  1536  006D58  0ECB               	movlw	low (STR_37+3)
  1537  006D5A  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1538  006D5C  0E7F               	movlw	high (STR_37+3)
  1539  006D5E  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1540  006D60  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1541                           
  1542                           ;easat2_util_transmission.c: 85: break;
  1543  006D64  D158               	goto	l3209
  1544  006D66                     l3141:
  1545                           
  1546                           ;easat2_util_transmission.c: 87: util_transmit_morse_sequence((char*)".---");
  1547  006D66  0EAB               	movlw	low (STR_31+1)
  1548  006D68  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1549  006D6A  0E7F               	movlw	high (STR_31+1)
  1550  006D6C  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1551  006D6E  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1552                           
  1553                           ;easat2_util_transmission.c: 88: break;
  1554  006D72  D151               	goto	l3209
  1555  006D74                     l3143:
  1556                           
  1557                           ;easat2_util_transmission.c: 90: util_transmit_morse_sequence((char*)"-.-");
  1558  006D74  0EE6               	movlw	low (STR_19+1)
  1559  006D76  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1560  006D78  0E7F               	movlw	high (STR_19+1)
  1561  006D7A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1562  006D7C  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1563                           
  1564                           ;easat2_util_transmission.c: 91: break;
  1565  006D80  D14A               	goto	l3209
  1566  006D82                     l3145:
  1567                           
  1568                           ;easat2_util_transmission.c: 93: util_transmit_morse_sequence((char*)".-..");
  1569  006D82  0EF9               	movlw	low STR_14
  1570  006D84  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1571  006D86  0E7F               	movlw	high STR_14
  1572  006D88  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1573  006D8A  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1574                           
  1575                           ;easat2_util_transmission.c: 94: break;
  1576  006D8E  D143               	goto	l3209
  1577  006D90                     l3147:
  1578                           
  1579                           ;easat2_util_transmission.c: 96: util_transmit_morse_sequence((char*)"--");
  1580  006D90  0EA1               	movlw	low (STR_29+3)
  1581  006D92  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1582  006D94  0E7F               	movlw	high (STR_29+3)
  1583  006D96  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1584  006D98  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1585                           
  1586                           ;easat2_util_transmission.c: 97: break;
  1587  006D9C  D13C               	goto	l3209
  1588  006D9E                     l3149:
  1589                           
  1590                           ;easat2_util_transmission.c: 99: util_transmit_morse_sequence((char*)"-.");
  1591  006D9E  0EBF               	movlw	low (STR_38+3)
  1592  006DA0  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1593  006DA2  0E7F               	movlw	high (STR_38+3)
  1594  006DA4  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1595  006DA6  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1596                           
  1597                           ;easat2_util_transmission.c: 100: break;
  1598  006DAA  D135               	goto	l3209
  1599  006DAC                     l3151:
  1600                           
  1601                           ;easat2_util_transmission.c: 102: util_transmit_morse_sequence((char*)"---");
  1602  006DAC  0EA0               	movlw	low (STR_29+2)
  1603  006DAE  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1604  006DB0  0E7F               	movlw	high (STR_29+2)
  1605  006DB2  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1606  006DB4  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1607                           
  1608                           ;easat2_util_transmission.c: 103: break;
  1609  006DB8  D12E               	goto	l3209
  1610  006DBA                     l3153:
  1611                           
  1612                           ;easat2_util_transmission.c: 105: util_transmit_morse_sequence((char*)".--.");
  1613  006DBA  0EEF               	movlw	low STR_18
  1614  006DBC  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1615  006DBE  0E7F               	movlw	high STR_18
  1616  006DC0  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1617  006DC2  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1618                           
  1619                           ;easat2_util_transmission.c: 106: break;
  1620  006DC6  D127               	goto	l3209
  1621  006DC8                     l3155:
  1622                           
  1623                           ;easat2_util_transmission.c: 108: util_transmit_morse_sequence((char*)"--.-");
  1624  006DC8  0EE5               	movlw	low STR_19
  1625  006DCA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1626  006DCC  0E7F               	movlw	high STR_19
  1627  006DCE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1628  006DD0  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1629                           
  1630                           ;easat2_util_transmission.c: 109: break;
  1631  006DD4  D120               	goto	l3209
  1632  006DD6                     l3157:
  1633                           
  1634                           ;easat2_util_transmission.c: 111: util_transmit_morse_sequence((char*)".-.");
  1635  006DD6  0EF5               	movlw	low (STR_5+1)
  1636  006DD8  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1637  006DDA  0E7F               	movlw	high (STR_5+1)
  1638  006DDC  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1639  006DDE  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1640                           
  1641                           ;easat2_util_transmission.c: 112: break;
  1642  006DE2  D119               	goto	l3209
  1643  006DE4                     l3159:
  1644                           
  1645                           ;easat2_util_transmission.c: 114: util_transmit_morse_sequence((char*)"...");
  1646  006DE4  0ED0               	movlw	low (STR_36+2)
  1647  006DE6  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1648  006DE8  0E7F               	movlw	high (STR_36+2)
  1649  006DEA  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1650  006DEC  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1651                           
  1652                           ;easat2_util_transmission.c: 115: break;
  1653  006DF0  D112               	goto	l3209
  1654  006DF2                     l3161:
  1655                           
  1656                           ;easat2_util_transmission.c: 117: util_transmit_morse_sequence((char*)"-");
  1657  006DF2  0EA2               	movlw	low (STR_29+4)
  1658  006DF4  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1659  006DF6  0E7F               	movlw	high (STR_29+4)
  1660  006DF8  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1661  006DFA  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1662                           
  1663                           ;easat2_util_transmission.c: 118: break;
  1664  006DFE  D10B               	goto	l3209
  1665  006E00                     l3163:
  1666                           
  1667                           ;easat2_util_transmission.c: 120: util_transmit_morse_sequence((char*)"..-");
  1668  006E00  0EEB               	movlw	low (STR_26+1)
  1669  006E02  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1670  006E04  0E7F               	movlw	high (STR_26+1)
  1671  006E06  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1672  006E08  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1673                           
  1674                           ;easat2_util_transmission.c: 121: break;
  1675  006E0C  D104               	goto	l3209
  1676  006E0E                     l3165:
  1677                           
  1678                           ;easat2_util_transmission.c: 123: util_transmit_morse_sequence((char*)"...-");
  1679  006E0E  0EB7               	movlw	low (STR_33+1)
  1680  006E10  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1681  006E12  0E7F               	movlw	high (STR_33+1)
  1682  006E14  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1683  006E16  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1684                           
  1685                           ;easat2_util_transmission.c: 124: break;
  1686  006E1A  D0FD               	goto	l3209
  1687  006E1C                     l3167:
  1688                           
  1689                           ;easat2_util_transmission.c: 126: util_transmit_morse_sequence((char*)".--");
  1690  006E1C  0EE1               	movlw	low (STR_27+1)
  1691  006E1E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1692  006E20  0E7F               	movlw	high (STR_27+1)
  1693  006E22  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1694  006E24  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1695                           
  1696                           ;easat2_util_transmission.c: 127: break;
  1697  006E28  D0F6               	goto	l3209
  1698  006E2A                     l3169:
  1699                           
  1700                           ;easat2_util_transmission.c: 129: util_transmit_morse_sequence((char*)"-..-");
  1701  006E2A  0EEA               	movlw	low STR_26
  1702  006E2C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1703  006E2E  0E7F               	movlw	high STR_26
  1704  006E30  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1705  006E32  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1706                           
  1707                           ;easat2_util_transmission.c: 130: break;
  1708  006E36  D0EF               	goto	l3209
  1709  006E38                     l3171:
  1710                           
  1711                           ;easat2_util_transmission.c: 132: util_transmit_morse_sequence((char*)"-.--");
  1712  006E38  0EE0               	movlw	low STR_27
  1713  006E3A  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1714  006E3C  0E7F               	movlw	high STR_27
  1715  006E3E  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1716  006E40  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1717                           
  1718                           ;easat2_util_transmission.c: 133: break;
  1719  006E44  D0E8               	goto	l3209
  1720  006E46                     l3173:
  1721                           
  1722                           ;easat2_util_transmission.c: 135: util_transmit_morse_sequence((char*)"--..");
  1723  006E46  0EC9               	movlw	low (STR_37+1)
  1724  006E48  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1725  006E4A  0E7F               	movlw	high (STR_37+1)
  1726  006E4C  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1727  006E4E  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1728                           
  1729                           ;easat2_util_transmission.c: 136: break;
  1730  006E52  D0E1               	goto	l3209
  1731  006E54                     l3175:
  1732                           
  1733                           ;easat2_util_transmission.c: 138: util_transmit_morse_sequence((char*)"-----");
  1734  006E54  0E9E               	movlw	low STR_29
  1735  006E56  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1736  006E58  0E7F               	movlw	high STR_29
  1737  006E5A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1738  006E5C  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1739                           
  1740                           ;easat2_util_transmission.c: 139: break;
  1741  006E60  D0DA               	goto	l3209
  1742  006E62                     l3177:
  1743                           
  1744                           ;easat2_util_transmission.c: 141: util_transmit_morse_sequence((char*)".----");
  1745  006E62  0EA4               	movlw	low STR_30
  1746  006E64  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1747  006E66  0E7F               	movlw	high STR_30
  1748  006E68  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1749  006E6A  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1750                           
  1751                           ;easat2_util_transmission.c: 142: break;
  1752  006E6E  D0D3               	goto	l3209
  1753  006E70                     l3179:
  1754                           
  1755                           ;easat2_util_transmission.c: 144: util_transmit_morse_sequence((char*)"..---");
  1756  006E70  0EAA               	movlw	low STR_31
  1757  006E72  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1758  006E74  0E7F               	movlw	high STR_31
  1759  006E76  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1760  006E78  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1761                           
  1762                           ;easat2_util_transmission.c: 145: break;
  1763  006E7C  D0CC               	goto	l3209
  1764  006E7E                     l3181:
  1765                           
  1766                           ;easat2_util_transmission.c: 147: util_transmit_morse_sequence((char*)"...--");
  1767  006E7E  0EB0               	movlw	low STR_32
  1768  006E80  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1769  006E82  0E7F               	movlw	high STR_32
  1770  006E84  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1771  006E86  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1772                           
  1773                           ;easat2_util_transmission.c: 148: break;
  1774  006E8A  D0C5               	goto	l3209
  1775  006E8C                     l3183:
  1776                           
  1777                           ;easat2_util_transmission.c: 150: util_transmit_morse_sequence((char*)"....-");
  1778  006E8C  0EB6               	movlw	low STR_33
  1779  006E8E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1780  006E90  0E7F               	movlw	high STR_33
  1781  006E92  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1782  006E94  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1783                           
  1784                           ;easat2_util_transmission.c: 151: break;
  1785  006E98  D0BE               	goto	l3209
  1786  006E9A                     l3185:
  1787                           
  1788                           ;easat2_util_transmission.c: 153: util_transmit_morse_sequence((char*)".....");
  1789  006E9A  0EDA               	movlw	low STR_34
  1790  006E9C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1791  006E9E  0E7F               	movlw	high STR_34
  1792  006EA0  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1793  006EA2  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1794                           
  1795                           ;easat2_util_transmission.c: 154: break;
  1796  006EA6  D0B7               	goto	l3209
  1797  006EA8                     l3187:
  1798                           
  1799                           ;easat2_util_transmission.c: 156: util_transmit_morse_sequence((char*)"-....");
  1800  006EA8  0ED4               	movlw	low STR_35
  1801  006EAA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1802  006EAC  0E7F               	movlw	high STR_35
  1803  006EAE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1804  006EB0  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1805                           
  1806                           ;easat2_util_transmission.c: 157: break;
  1807  006EB4  D0B0               	goto	l3209
  1808  006EB6                     l3189:
  1809                           
  1810                           ;easat2_util_transmission.c: 159: util_transmit_morse_sequence((char*)"--...");
  1811  006EB6  0ECE               	movlw	low STR_36
  1812  006EB8  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1813  006EBA  0E7F               	movlw	high STR_36
  1814  006EBC  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1815  006EBE  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1816                           
  1817                           ;easat2_util_transmission.c: 160: break;
  1818  006EC2  D0A9               	goto	l3209
  1819  006EC4                     l3191:
  1820                           
  1821                           ;easat2_util_transmission.c: 162: util_transmit_morse_sequence((char*)"---..");
  1822  006EC4  0EC8               	movlw	low STR_37
  1823  006EC6  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1824  006EC8  0E7F               	movlw	high STR_37
  1825  006ECA  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1826  006ECC  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1827                           
  1828                           ;easat2_util_transmission.c: 163: break;
  1829  006ED0  D0A2               	goto	l3209
  1830  006ED2                     l3193:
  1831                           
  1832                           ;easat2_util_transmission.c: 165: util_transmit_morse_sequence((char*)"----.");
  1833  006ED2  0EBC               	movlw	low STR_38
  1834  006ED4  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1835  006ED6  0E7F               	movlw	high STR_38
  1836  006ED8  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1837  006EDA  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1838                           
  1839                           ;easat2_util_transmission.c: 166: break;
  1840  006EDE  D09B               	goto	l3209
  1841  006EE0                     l3195:
  1842                           
  1843                           ;easat2_util_transmission.c: 168: util_transmit_morse_sequence((char*)"--..--");
  1844  006EE0  0E82               	movlw	low STR_39
  1845  006EE2  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1846  006EE4  0E7F               	movlw	high STR_39
  1847  006EE6  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1848  006EE8  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1849                           
  1850                           ;easat2_util_transmission.c: 169: break;
  1851  006EEC  D094               	goto	l3209
  1852  006EEE                     l3197:
  1853                           
  1854                           ;easat2_util_transmission.c: 171: util_transmit_morse_sequence((char*)"..--..");
  1855  006EEE  0E90               	movlw	low STR_40
  1856  006EF0  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1857  006EF2  0E7F               	movlw	high STR_40
  1858  006EF4  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1859  006EF6  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1860                           
  1861                           ;easat2_util_transmission.c: 172: break;
  1862  006EFA  D08D               	goto	l3209
  1863  006EFC                     l3199:
  1864                           
  1865                           ;easat2_util_transmission.c: 174: util_transmit_morse_sequence((char*)"-..-.");
  1866  006EFC  0EC2               	movlw	low STR_41
  1867  006EFE  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1868  006F00  0E7F               	movlw	high STR_41
  1869  006F02  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1870  006F04  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1871                           
  1872                           ;easat2_util_transmission.c: 175: break;
  1873  006F08  D086               	goto	l3209
  1874  006F0A                     l3201:
  1875                           
  1876                           ;easat2_util_transmission.c: 177: util_transmit_morse_sequence((char*)".-.-.-");
  1877  006F0A  0E89               	movlw	low STR_42
  1878  006F0C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1879  006F0E  0E7F               	movlw	high STR_42
  1880  006F10  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1881  006F12  ECE3  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1882                           
  1883                           ;easat2_util_transmission.c: 178: break;
  1884  006F16  D07F               	goto	l3209
  1885  006F18                     l3203:
  1886                           
  1887                           ;easat2_util_transmission.c: 180: util_transmit_space_between_words();
  1888  006F18  EC13  F02E         	call	_util_transmit_space_between_words	;wreg free
  1889                           
  1890                           ;easat2_util_transmission.c: 185: }
  1891                           
  1892                           ;easat2_util_transmission.c: 183: break;
  1893                           
  1894                           ;easat2_util_transmission.c: 182: default:
  1895                           
  1896                           ;easat2_util_transmission.c: 181: break;
  1897  006F1C  D07C               	goto	l3209
  1898  006F1E                     l3207:
  1899  006F1E  500E               	movf	util_transmit_letter@letter,w,c
  1900                           
  1901                           ; Switch size 1, requested type "space"
  1902                           ; Number of cases is 41, Range of values is 32 to 90
  1903                           ; switch strategies available:
  1904                           ; Name         Instructions Cycles
  1905                           ; simple_byte          124    63 (average)
  1906                           ;	Chosen strategy is simple_byte
  1907  006F20  0A20               	xorlw	32	; case 32
  1908  006F22  B4D8               	btfsc	status,2,c
  1909  006F24  D7F9               	goto	l3203
  1910  006F26  0A0C               	xorlw	12	; case 44
  1911  006F28  B4D8               	btfsc	status,2,c
  1912  006F2A  D7DA               	goto	l3195
  1913  006F2C  0A02               	xorlw	2	; case 46
  1914  006F2E  B4D8               	btfsc	status,2,c
  1915  006F30  D7EC               	goto	l3201
  1916  006F32  0A01               	xorlw	1	; case 47
  1917  006F34  B4D8               	btfsc	status,2,c
  1918  006F36  D7E2               	goto	l3199
  1919  006F38  0A1F               	xorlw	31	; case 48
  1920  006F3A  B4D8               	btfsc	status,2,c
  1921  006F3C  D78B               	goto	l3175
  1922  006F3E  0A01               	xorlw	1	; case 49
  1923  006F40  B4D8               	btfsc	status,2,c
  1924  006F42  D78F               	goto	l3177
  1925  006F44  0A03               	xorlw	3	; case 50
  1926  006F46  B4D8               	btfsc	status,2,c
  1927  006F48  D793               	goto	l3179
  1928  006F4A  0A01               	xorlw	1	; case 51
  1929  006F4C  B4D8               	btfsc	status,2,c
  1930  006F4E  D797               	goto	l3181
  1931  006F50  0A07               	xorlw	7	; case 52
  1932  006F52  B4D8               	btfsc	status,2,c
  1933  006F54  D79B               	goto	l3183
  1934  006F56  0A01               	xorlw	1	; case 53
  1935  006F58  B4D8               	btfsc	status,2,c
  1936  006F5A  D79F               	goto	l3185
  1937  006F5C  0A03               	xorlw	3	; case 54
  1938  006F5E  B4D8               	btfsc	status,2,c
  1939  006F60  D7A3               	goto	l3187
  1940  006F62  0A01               	xorlw	1	; case 55
  1941  006F64  B4D8               	btfsc	status,2,c
  1942  006F66  D7A7               	goto	l3189
  1943  006F68  0A0F               	xorlw	15	; case 56
  1944  006F6A  B4D8               	btfsc	status,2,c
  1945  006F6C  D7AB               	goto	l3191
  1946  006F6E  0A01               	xorlw	1	; case 57
  1947  006F70  B4D8               	btfsc	status,2,c
  1948  006F72  D7AF               	goto	l3193
  1949  006F74  0A06               	xorlw	6	; case 63
  1950  006F76  B4D8               	btfsc	status,2,c
  1951  006F78  D7BA               	goto	l3197
  1952  006F7A  0A7E               	xorlw	126	; case 65
  1953  006F7C  B4D8               	btfsc	status,2,c
  1954  006F7E  D6B4               	goto	l3123
  1955  006F80  0A03               	xorlw	3	; case 66
  1956  006F82  B4D8               	btfsc	status,2,c
  1957  006F84  D6B8               	goto	l3125
  1958  006F86  0A01               	xorlw	1	; case 67
  1959  006F88  B4D8               	btfsc	status,2,c
  1960  006F8A  D6BC               	goto	l3127
  1961  006F8C  0A07               	xorlw	7	; case 68
  1962  006F8E  B4D8               	btfsc	status,2,c
  1963  006F90  D6C0               	goto	l3129
  1964  006F92  0A01               	xorlw	1	; case 69
  1965  006F94  B4D8               	btfsc	status,2,c
  1966  006F96  D6C4               	goto	l3131
  1967  006F98  0A03               	xorlw	3	; case 70
  1968  006F9A  B4D8               	btfsc	status,2,c
  1969  006F9C  D6C8               	goto	l3133
  1970  006F9E  0A01               	xorlw	1	; case 71
  1971  006FA0  B4D8               	btfsc	status,2,c
  1972  006FA2  D6CC               	goto	l3135
  1973  006FA4  0A0F               	xorlw	15	; case 72
  1974  006FA6  B4D8               	btfsc	status,2,c
  1975  006FA8  D6D0               	goto	l3137
  1976  006FAA  0A01               	xorlw	1	; case 73
  1977  006FAC  B4D8               	btfsc	status,2,c
  1978  006FAE  D6D4               	goto	l3139
  1979  006FB0  0A03               	xorlw	3	; case 74
  1980  006FB2  B4D8               	btfsc	status,2,c
  1981  006FB4  D6D8               	goto	l3141
  1982  006FB6  0A01               	xorlw	1	; case 75
  1983  006FB8  B4D8               	btfsc	status,2,c
  1984  006FBA  D6DC               	goto	l3143
  1985  006FBC  0A07               	xorlw	7	; case 76
  1986  006FBE  B4D8               	btfsc	status,2,c
  1987  006FC0  D6E0               	goto	l3145
  1988  006FC2  0A01               	xorlw	1	; case 77
  1989  006FC4  B4D8               	btfsc	status,2,c
  1990  006FC6  D6E4               	goto	l3147
  1991  006FC8  0A03               	xorlw	3	; case 78
  1992  006FCA  B4D8               	btfsc	status,2,c
  1993  006FCC  D6E8               	goto	l3149
  1994  006FCE  0A01               	xorlw	1	; case 79
  1995  006FD0  B4D8               	btfsc	status,2,c
  1996  006FD2  D6EC               	goto	l3151
  1997  006FD4  0A1F               	xorlw	31	; case 80
  1998  006FD6  B4D8               	btfsc	status,2,c
  1999  006FD8  D6F0               	goto	l3153
  2000  006FDA  0A01               	xorlw	1	; case 81
  2001  006FDC  B4D8               	btfsc	status,2,c
  2002  006FDE  D6F4               	goto	l3155
  2003  006FE0  0A03               	xorlw	3	; case 82
  2004  006FE2  B4D8               	btfsc	status,2,c
  2005  006FE4  D6F8               	goto	l3157
  2006  006FE6  0A01               	xorlw	1	; case 83
  2007  006FE8  B4D8               	btfsc	status,2,c
  2008  006FEA  D6FC               	goto	l3159
  2009  006FEC  0A07               	xorlw	7	; case 84
  2010  006FEE  B4D8               	btfsc	status,2,c
  2011  006FF0  D700               	goto	l3161
  2012  006FF2  0A01               	xorlw	1	; case 85
  2013  006FF4  B4D8               	btfsc	status,2,c
  2014  006FF6  D704               	goto	l3163
  2015  006FF8  0A03               	xorlw	3	; case 86
  2016  006FFA  B4D8               	btfsc	status,2,c
  2017  006FFC  D708               	goto	l3165
  2018  006FFE  0A01               	xorlw	1	; case 87
  2019  007000  B4D8               	btfsc	status,2,c
  2020  007002  D70C               	goto	l3167
  2021  007004  0A0F               	xorlw	15	; case 88
  2022  007006  B4D8               	btfsc	status,2,c
  2023  007008  D710               	goto	l3169
  2024  00700A  0A01               	xorlw	1	; case 89
  2025  00700C  B4D8               	btfsc	status,2,c
  2026  00700E  D714               	goto	l3171
  2027  007010  0A03               	xorlw	3	; case 90
  2028  007012  B4D8               	btfsc	status,2,c
  2029  007014  D718               	goto	l3173
  2030  007016                     l3209:
  2031                           
  2032                           ;easat2_util_transmission.c: 188: util_transmit_space_between_letters();
  2033  007016  EC0C  F02E         	call	_util_transmit_space_between_letters	;wreg free
  2034  00701A  0012               	return		;funcret
  2035  00701C                     __end_of_util_transmit_letter:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           indf2	equ	0xFDF
  2039                           fsr2h	equ	0xFDA
  2040                           fsr2l	equ	0xFD9
  2041                           status	equ	0xFD8
  2042                           
  2043 ;; *************** function _util_transmit_space_between_words *****************
  2044 ;; Defined at:
  2045 ;;		line 301 in file "easat2_util_transmission.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, status,2, status,0, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2059 ;;      Params:         0       0       0       0       0       0       0
  2060 ;;      Locals:         0       0       0       0       0       0       0
  2061 ;;      Temps:          0       0       0       0       0       0       0
  2062 ;;      Totals:         0       0       0       0       0       0       0
  2063 ;;Total ram usage:        0 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    1
  2066 ;; This function calls:
  2067 ;;		_util_waits_delay_ms
  2068 ;; This function is called by:
  2069 ;;		_util_transmit_letter
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text6
  2074  005C26                     __ptext6:
  2075                           	opt stack 0
  2076  005C26                     _util_transmit_space_between_words:
  2077                           	opt stack 26
  2078                           
  2079                           ;easat2_util_transmission.c: 302: util_waits_delay_ms(7*(int)(2400/32));
  2080                           
  2081                           ;incstack = 0
  2082  005C26  0E02               	movlw	2
  2083  005C28  6E02               	movwf	util_waits_delay_ms@ms+1,c
  2084  005C2A  0E0D               	movlw	13
  2085  005C2C  6E01               	movwf	util_waits_delay_ms@ms,c
  2086  005C2E  EC89  F02E         	call	_util_waits_delay_ms	;wreg free
  2087  005C32  0012               	return		;funcret
  2088  005C34                     __end_of_util_transmit_space_between_words:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           indf2	equ	0xFDF
  2092                           fsr2h	equ	0xFDA
  2093                           fsr2l	equ	0xFD9
  2094                           status	equ	0xFD8
  2095                           
  2096 ;; *************** function _util_transmit_space_between_letters *****************
  2097 ;; Defined at:
  2098 ;;		line 294 in file "easat2_util_transmission.c"
  2099 ;; Parameters:    Size  Location     Type
  2100 ;;		None
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;		None
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  1    wreg      void 
  2105 ;; Registers used:
  2106 ;;		wreg, status,2, status,0, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2112 ;;      Params:         0       0       0       0       0       0       0
  2113 ;;      Locals:         0       0       0       0       0       0       0
  2114 ;;      Temps:          0       0       0       0       0       0       0
  2115 ;;      Totals:         0       0       0       0       0       0       0
  2116 ;;Total ram usage:        0 bytes
  2117 ;; Hardware stack levels used:    1
  2118 ;; Hardware stack levels required when called:    1
  2119 ;; This function calls:
  2120 ;;		_util_waits_delay_ms
  2121 ;; This function is called by:
  2122 ;;		_util_transmit_letter
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text7
  2127  005C18                     __ptext7:
  2128                           	opt stack 0
  2129  005C18                     _util_transmit_space_between_letters:
  2130                           	opt stack 26
  2131                           
  2132                           ;easat2_util_transmission.c: 295: util_waits_delay_ms(3*(int)(2400/32));
  2133                           
  2134                           ;incstack = 0
  2135  005C18  0E00               	movlw	0
  2136  005C1A  6E02               	movwf	util_waits_delay_ms@ms+1,c
  2137  005C1C  0EE1               	movlw	225
  2138  005C1E  6E01               	movwf	util_waits_delay_ms@ms,c
  2139  005C20  EC89  F02E         	call	_util_waits_delay_ms	;wreg free
  2140  005C24  0012               	return		;funcret
  2141  005C26                     __end_of_util_transmit_space_between_letters:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           indf2	equ	0xFDF
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _util_transmit_morse_sequence *****************
  2150 ;; Defined at:
  2151 ;;		line 198 in file "easat2_util_transmission.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  morse_sequen    2    7[COMRAM] PTR unsigned char 
  2154 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  2155 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  2156 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  2157 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  2158 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  2159 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  2160 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  2161 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  2162 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  2163 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;  i               2   11[COMRAM] int 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2175 ;;      Params:         2       0       0       0       0       0       0
  2176 ;;      Locals:         2       0       0       0       0       0       0
  2177 ;;      Temps:          2       0       0       0       0       0       0
  2178 ;;      Totals:         6       0       0       0       0       0       0
  2179 ;;Total ram usage:        6 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    3
  2182 ;; This function calls:
  2183 ;;		_strlen
  2184 ;;		_util_transmit_dash
  2185 ;;		_util_transmit_dot
  2186 ;;		_util_transmit_space_between_dots_dashes
  2187 ;; This function is called by:
  2188 ;;		_util_transmit_letter
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text8
  2193  005FC6                     __ptext8:
  2194                           	opt stack 0
  2195  005FC6                     _util_transmit_morse_sequence:
  2196                           	opt stack 24
  2197                           
  2198                           ;easat2_util_transmission.c: 202: for (int i = 0; i < strlen(morse_sequence); i++) {
  2199                           
  2200                           ;incstack = 0
  2201  005FC6  0E00               	movlw	0
  2202  005FC8  6E0D               	movwf	util_transmit_morse_sequence@i+1,c
  2203  005FCA  0E00               	movlw	0
  2204  005FCC  6E0C               	movwf	util_transmit_morse_sequence@i,c
  2205  005FCE  D01C               	goto	l2467
  2206  005FD0                     l2455:
  2207                           
  2208                           ;easat2_util_transmission.c: 207: util_transmit_dot();
  2209  005FD0  ECE9  F02E         	call	_util_transmit_dot	;wreg free
  2210                           
  2211                           ;easat2_util_transmission.c: 208: break;
  2212  005FD4  D015               	goto	l2463
  2213  005FD6                     l2457:
  2214                           
  2215                           ;easat2_util_transmission.c: 210: util_transmit_dash();
  2216  005FD6  ECCF  F02E         	call	_util_transmit_dash	;wreg free
  2217                           
  2218                           ;easat2_util_transmission.c: 214: }
  2219                           
  2220                           ;easat2_util_transmission.c: 213: break;
  2221                           
  2222                           ;easat2_util_transmission.c: 212: default:
  2223                           
  2224                           ;easat2_util_transmission.c: 211: break;
  2225  005FDA  D012               	goto	l2463
  2226  005FDC                     l2461:
  2227  005FDC  500C               	movf	util_transmit_morse_sequence@i,w,c
  2228  005FDE  2408               	addwf	util_transmit_morse_sequence@morse_sequence,w,c
  2229  005FE0  6E0A               	movwf	??_util_transmit_morse_sequence& (0+255),c
  2230  005FE2  500D               	movf	util_transmit_morse_sequence@i+1,w,c
  2231  005FE4  2009               	addwfc	util_transmit_morse_sequence@morse_sequence+1,w,c
  2232  005FE6  6E0B               	movwf	(??_util_transmit_morse_sequence+1)& (0+255),c
  2233  005FE8  C00A  FFF6         	movff	??_util_transmit_morse_sequence,tblptrl
  2234  005FEC  C00B  FFF7         	movff	??_util_transmit_morse_sequence+1,tblptrh
  2235  005FF0                     	if	0	;tblptru may be non-zero
  2236  005FF0                     	endif
  2237  005FF0                     	if	0	;tblptru may be non-zero
  2238  005FF0                     	endif
  2239  005FF0  0008               	tblrd		*
  2240  005FF2  50F5               	movf	tablat,w,c
  2241                           
  2242                           ; Switch size 1, requested type "space"
  2243                           ; Number of cases is 2, Range of values is 45 to 46
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte            7     4 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248  005FF4  0A2D               	xorlw	45	; case 45
  2249  005FF6  B4D8               	btfsc	status,2,c
  2250  005FF8  D7EE               	goto	l2457
  2251  005FFA  0A03               	xorlw	3	; case 46
  2252  005FFC  B4D8               	btfsc	status,2,c
  2253  005FFE  D7E8               	goto	l2455
  2254  006000                     l2463:
  2255                           
  2256                           ;easat2_util_transmission.c: 217: util_transmit_space_between_dots_dashes();
  2257  006000  EC05  F02E         	call	_util_transmit_space_between_dots_dashes	;wreg free
  2258  006004  4A0C               	infsnz	util_transmit_morse_sequence@i,f,c
  2259  006006  2A0D               	incf	util_transmit_morse_sequence@i+1,f,c
  2260  006008                     l2467:
  2261  006008  C008  F001         	movff	util_transmit_morse_sequence@morse_sequence,strlen@s
  2262  00600C  C009  F002         	movff	util_transmit_morse_sequence@morse_sequence+1,strlen@s+1
  2263  006010  EC8C  F02F         	call	_strlen	;wreg free
  2264  006014  5001               	movf	?_strlen,w,c
  2265  006016  5C0C               	subwf	util_transmit_morse_sequence@i,w,c
  2266  006018  5002               	movf	?_strlen+1,w,c
  2267  00601A  580D               	subwfb	util_transmit_morse_sequence@i+1,w,c
  2268  00601C  B0D8               	btfsc	status,0,c
  2269  00601E  0012               	return	
  2270  006020  D7DD               	goto	l2461
  2271  006022                     __end_of_util_transmit_morse_sequence:
  2272                           	opt stack 0
  2273                           tblptru	equ	0xFF8
  2274                           tblptrh	equ	0xFF7
  2275                           tblptrl	equ	0xFF6
  2276                           tablat	equ	0xFF5
  2277                           indf2	equ	0xFDF
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282 ;; *************** function _util_transmit_space_between_dots_dashes *****************
  2283 ;; Defined at:
  2284 ;;		line 286 in file "easat2_util_transmission.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;		None
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2, status,0, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2298 ;;      Params:         0       0       0       0       0       0       0
  2299 ;;      Locals:         0       0       0       0       0       0       0
  2300 ;;      Temps:          0       0       0       0       0       0       0
  2301 ;;      Totals:         0       0       0       0       0       0       0
  2302 ;;Total ram usage:        0 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    1
  2305 ;; This function calls:
  2306 ;;		_util_waits_delay_ms
  2307 ;; This function is called by:
  2308 ;;		_util_transmit_morse_sequence
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           	psect	text9
  2313  005C0A                     __ptext9:
  2314                           	opt stack 0
  2315  005C0A                     _util_transmit_space_between_dots_dashes:
  2316                           	opt stack 25
  2317                           
  2318                           ;easat2_util_transmission.c: 287: util_waits_delay_ms((int)(2400/32));
  2319                           
  2320                           ;incstack = 0
  2321  005C0A  0E00               	movlw	0
  2322  005C0C  6E02               	movwf	util_waits_delay_ms@ms+1,c
  2323  005C0E  0E4B               	movlw	75
  2324  005C10  6E01               	movwf	util_waits_delay_ms@ms,c
  2325  005C12  EC89  F02E         	call	_util_waits_delay_ms	;wreg free
  2326  005C16  0012               	return		;funcret
  2327  005C18                     __end_of_util_transmit_space_between_dots_dashes:
  2328                           	opt stack 0
  2329                           tblptru	equ	0xFF8
  2330                           tblptrh	equ	0xFF7
  2331                           tblptrl	equ	0xFF6
  2332                           tablat	equ	0xFF5
  2333                           indf2	equ	0xFDF
  2334                           fsr2h	equ	0xFDA
  2335                           fsr2l	equ	0xFD9
  2336                           status	equ	0xFD8
  2337                           
  2338 ;; *************** function _util_transmit_dot *****************
  2339 ;; Defined at:
  2340 ;;		line 228 in file "easat2_util_transmission.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;		None
  2343 ;; Auto vars:     Size  Location     Type
  2344 ;;  i               2    5[COMRAM] int 
  2345 ;; Return value:  Size  Location     Type
  2346 ;;                  1    wreg      void 
  2347 ;; Registers used:
  2348 ;;		wreg, status,2, status,0, cstack
  2349 ;; Tracked objects:
  2350 ;;		On entry : 0/0
  2351 ;;		On exit  : 0/0
  2352 ;;		Unchanged: 0/0
  2353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2354 ;;      Params:         0       0       0       0       0       0       0
  2355 ;;      Locals:         2       0       0       0       0       0       0
  2356 ;;      Temps:          0       0       0       0       0       0       0
  2357 ;;      Totals:         2       0       0       0       0       0       0
  2358 ;;Total ram usage:        2 bytes
  2359 ;; Hardware stack levels used:    1
  2360 ;; Hardware stack levels required when called:    2
  2361 ;; This function calls:
  2362 ;;		_util_transmit_buzzer_1ms_cycle
  2363 ;;		_util_waits_delay_ms
  2364 ;; This function is called by:
  2365 ;;		_util_transmit_morse_sequence
  2366 ;; This function uses a non-reentrant model
  2367 ;;
  2368                           
  2369                           	psect	text10
  2370  005DD2                     __ptext10:
  2371                           	opt stack 0
  2372  005DD2                     _util_transmit_dot:
  2373                           	opt stack 24
  2374                           
  2375                           ;easat2_util_transmission.c: 232: PORTDbits.RD1 = 1;
  2376                           
  2377                           ;incstack = 0
  2378  005DD2  8283               	bsf	3971,1,c	;volatile
  2379                           
  2380                           ;easat2_util_transmission.c: 233: PORTDbits.RD3 = 1;
  2381  005DD4  8683               	bsf	3971,3,c	;volatile
  2382                           
  2383                           ;easat2_util_transmission.c: 235: for (int i = 0; i < (int)(2400/32); i++) {
  2384  005DD6  0E00               	movlw	0
  2385  005DD8  6E07               	movwf	util_transmit_dot@i+1,c
  2386  005DDA  0E00               	movlw	0
  2387  005DDC  6E06               	movwf	util_transmit_dot@i,c
  2388  005DDE  BE07               	btfsc	util_transmit_dot@i+1,7,c
  2389  005DE0  D006               	goto	l2223
  2390  005DE2  5007               	movf	util_transmit_dot@i+1,w,c
  2391  005DE4  E10D               	bnz	l186
  2392  005DE6  0E4B               	movlw	75
  2393  005DE8  5C06               	subwf	util_transmit_dot@i,w,c
  2394  005DEA  B0D8               	btfsc	status,0,c
  2395  005DEC  D009               	goto	l186
  2396  005DEE                     l2223:
  2397                           
  2398                           ;easat2_util_transmission.c: 242: util_transmit_buzzer_1ms_cycle();
  2399  005DEE  EC29  F02E         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  2400                           
  2401                           ;easat2_util_transmission.c: 243: else
  2402                           ;easat2_util_transmission.c: 244: util_waits_delay_ms(1);
  2403  005DF2  4A06               	infsnz	util_transmit_dot@i,f,c
  2404  005DF4  2A07               	incf	util_transmit_dot@i+1,f,c
  2405  005DF6  BE07               	btfsc	util_transmit_dot@i+1,7,c
  2406  005DF8  D7FA               	goto	l2223
  2407  005DFA  5007               	movf	util_transmit_dot@i+1,w,c
  2408  005DFC  E101               	bnz	u1760
  2409  005DFE  D7F3               	goto	L1
  2410  005E00                     u1760:
  2411  005E00                     l186:
  2412                           
  2413                           ;easat2_util_transmission.c: 246: }
  2414                           ;easat2_util_transmission.c: 248: PORTDbits.RD1 = 0;
  2415  005E00  9283               	bcf	3971,1,c	;volatile
  2416                           
  2417                           ;easat2_util_transmission.c: 249: PORTDbits.RD3 = 0;
  2418  005E02  9683               	bcf	3971,3,c	;volatile
  2419  005E04  0012               	return		;funcret
  2420  005E06                     __end_of_util_transmit_dot:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           indf2	equ	0xFDF
  2427                           fsr2h	equ	0xFDA
  2428                           fsr2l	equ	0xFD9
  2429                           status	equ	0xFD8
  2430                           
  2431 ;; *************** function _util_transmit_dash *****************
  2432 ;; Defined at:
  2433 ;;		line 259 in file "easat2_util_transmission.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;  i               2    5[COMRAM] int 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, status,2, status,0, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2447 ;;      Params:         0       0       0       0       0       0       0
  2448 ;;      Locals:         2       0       0       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0       0       0
  2450 ;;      Totals:         2       0       0       0       0       0       0
  2451 ;;Total ram usage:        2 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    2
  2454 ;; This function calls:
  2455 ;;		_util_transmit_buzzer_1ms_cycle
  2456 ;;		_util_waits_delay_ms
  2457 ;; This function is called by:
  2458 ;;		_util_transmit_morse_sequence
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           	psect	text11
  2463  005D9E                     __ptext11:
  2464                           	opt stack 0
  2465  005D9E                     _util_transmit_dash:
  2466                           	opt stack 24
  2467                           
  2468                           ;easat2_util_transmission.c: 263: PORTDbits.RD1 = 1;
  2469                           
  2470                           ;incstack = 0
  2471  005D9E  8283               	bsf	3971,1,c	;volatile
  2472                           
  2473                           ;easat2_util_transmission.c: 264: PORTDbits.RD3 = 1;
  2474  005DA0  8683               	bsf	3971,3,c	;volatile
  2475                           
  2476                           ;easat2_util_transmission.c: 266: for (int i = 0; i < ((int)(2400/32)*3); i++) {
  2477  005DA2  0E00               	movlw	0
  2478  005DA4  6E07               	movwf	util_transmit_dash@i+1,c
  2479  005DA6  0E00               	movlw	0
  2480  005DA8  6E06               	movwf	util_transmit_dash@i,c
  2481  005DAA  BE07               	btfsc	util_transmit_dash@i+1,7,c
  2482  005DAC  D006               	goto	l2239
  2483  005DAE  5007               	movf	util_transmit_dash@i+1,w,c
  2484  005DB0  E10D               	bnz	l193
  2485  005DB2  0EE1               	movlw	225
  2486  005DB4  5C06               	subwf	util_transmit_dash@i,w,c
  2487  005DB6  B0D8               	btfsc	status,0,c
  2488  005DB8  D009               	goto	l193
  2489  005DBA                     l2239:
  2490                           
  2491                           ;easat2_util_transmission.c: 273: util_transmit_buzzer_1ms_cycle();
  2492  005DBA  EC29  F02E         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  2493                           
  2494                           ;easat2_util_transmission.c: 274: else
  2495                           ;easat2_util_transmission.c: 275: util_waits_delay_ms(1);
  2496  005DBE  4A06               	infsnz	util_transmit_dash@i,f,c
  2497  005DC0  2A07               	incf	util_transmit_dash@i+1,f,c
  2498  005DC2  BE07               	btfsc	util_transmit_dash@i+1,7,c
  2499  005DC4  D7FA               	goto	l2239
  2500  005DC6  5007               	movf	util_transmit_dash@i+1,w,c
  2501  005DC8  E101               	bnz	u1780
  2502  005DCA  D7F3               	goto	L2
  2503  005DCC                     u1780:
  2504  005DCC                     l193:
  2505                           
  2506                           ;easat2_util_transmission.c: 277: }
  2507                           ;easat2_util_transmission.c: 279: PORTDbits.RD1 = 0;
  2508  005DCC  9283               	bcf	3971,1,c	;volatile
  2509                           
  2510                           ;easat2_util_transmission.c: 280: PORTDbits.RD3 = 0;
  2511  005DCE  9683               	bcf	3971,3,c	;volatile
  2512  005DD0  0012               	return		;funcret
  2513  005DD2                     __end_of_util_transmit_dash:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           indf2	equ	0xFDF
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _util_waits_delay_ms *****************
  2525 ;; Defined at:
  2526 ;;		line 40 in file "easat2_util_waits.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;  ms              2    0[COMRAM] int 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  i               2    3[COMRAM] int 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  1    wreg      void 
  2533 ;; Registers used:
  2534 ;;		wreg, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2540 ;;      Params:         2       0       0       0       0       0       0
  2541 ;;      Locals:         2       0       0       0       0       0       0
  2542 ;;      Temps:          1       0       0       0       0       0       0
  2543 ;;      Totals:         5       0       0       0       0       0       0
  2544 ;;Total ram usage:        5 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; This function calls:
  2547 ;;		Nothing
  2548 ;; This function is called by:
  2549 ;;		_util_waits_delay_secs
  2550 ;;		_util_transmit_dot
  2551 ;;		_util_transmit_dash
  2552 ;;		_util_transmit_space_between_dots_dashes
  2553 ;;		_util_transmit_space_between_letters
  2554 ;;		_util_transmit_space_between_words
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text12
  2559  005D12                     __ptext12:
  2560                           	opt stack 0
  2561  005D12                     _util_waits_delay_ms:
  2562                           	opt stack 27
  2563                           
  2564                           ;easat2_util_waits.c: 41: for (int i = 0; i < ms; i++)
  2565                           
  2566                           ;incstack = 0
  2567  005D12  0E00               	movlw	0
  2568  005D14  6E05               	movwf	util_waits_delay_ms@i+1,c
  2569  005D16  0E00               	movlw	0
  2570  005D18  6E04               	movwf	util_waits_delay_ms@i,c
  2571  005D1A  D006               	goto	l56
  2572  005D1C                     l2159:
  2573                           
  2574                           ;easat2_util_waits.c: 42: _delay((unsigned long)((1)*(2000000/4000.0)));
  2575  005D1C  0EA6               	movlw	166
  2576  005D1E                     u3257:
  2577  005D1E  2EE8               	decfsz	wreg,f,c
  2578  005D20  D7FE               	goto	u3257
  2579  005D22  D000               	nop2		;nop
  2580  005D24  4A04               	infsnz	util_waits_delay_ms@i,f,c
  2581  005D26  2A05               	incf	util_waits_delay_ms@i+1,f,c
  2582  005D28                     l56:
  2583  005D28  5001               	movf	util_waits_delay_ms@ms,w,c
  2584  005D2A  5C04               	subwf	util_waits_delay_ms@i,w,c
  2585  005D2C  5005               	movf	util_waits_delay_ms@i+1,w,c
  2586  005D2E  0A80               	xorlw	128
  2587  005D30  6E03               	movwf	??_util_waits_delay_ms& (0+255),c
  2588  005D32  5002               	movf	util_waits_delay_ms@ms+1,w,c
  2589  005D34  0A80               	xorlw	128
  2590  005D36  5803               	subwfb	??_util_waits_delay_ms& (0+255),w,c
  2591  005D38  B0D8               	btfsc	status,0,c
  2592  005D3A  0012               	return	
  2593  005D3C  D7EF               	goto	l2159
  2594  005D3E                     __end_of_util_waits_delay_ms:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           wreg	equ	0xFE8
  2601                           indf2	equ	0xFDF
  2602                           fsr2h	equ	0xFDA
  2603                           fsr2l	equ	0xFD9
  2604                           status	equ	0xFD8
  2605                           
  2606 ;; *************** function _util_transmit_buzzer_1ms_cycle *****************
  2607 ;; Defined at:
  2608 ;;		line 307 in file "easat2_util_transmission.c"
  2609 ;; Parameters:    Size  Location     Type
  2610 ;;		None
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;		None
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  1    wreg      void 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, cstack
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2622 ;;      Params:         0       0       0       0       0       0       0
  2623 ;;      Locals:         0       0       0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0
  2625 ;;      Totals:         0       0       0       0       0       0       0
  2626 ;;Total ram usage:        0 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; Hardware stack levels required when called:    1
  2629 ;; This function calls:
  2630 ;;		_util_waits_delay_hundred_us
  2631 ;; This function is called by:
  2632 ;;		_util_transmit_dot
  2633 ;;		_util_transmit_dash
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           	psect	text13
  2638  005C52                     __ptext13:
  2639                           	opt stack 0
  2640  005C52                     _util_transmit_buzzer_1ms_cycle:
  2641                           	opt stack 24
  2642                           
  2643                           ;easat2_util_transmission.c: 309: PORTDbits.RD2 = 1;
  2644                           
  2645                           ;incstack = 0
  2646  005C52  8483               	bsf	3971,2,c	;volatile
  2647                           
  2648                           ;easat2_util_transmission.c: 310: util_waits_delay_hundred_us((int)(10/2));
  2649  005C54  0E00               	movlw	0
  2650  005C56  6E02               	movwf	util_waits_delay_hundred_us@hun_us+1,c
  2651  005C58  0E05               	movlw	5
  2652  005C5A  6E01               	movwf	util_waits_delay_hundred_us@hun_us,c
  2653  005C5C  EC73  F02E         	call	_util_waits_delay_hundred_us	;wreg free
  2654                           
  2655                           ;easat2_util_transmission.c: 311: PORTDbits.RD2 = 0;
  2656  005C60  9483               	bcf	3971,2,c	;volatile
  2657                           
  2658                           ;easat2_util_transmission.c: 312: util_waits_delay_hundred_us((int)(10/2));
  2659  005C62  0E00               	movlw	0
  2660  005C64  6E02               	movwf	util_waits_delay_hundred_us@hun_us+1,c
  2661  005C66  0E05               	movlw	5
  2662  005C68  6E01               	movwf	util_waits_delay_hundred_us@hun_us,c
  2663  005C6A  EC73  F02E         	call	_util_waits_delay_hundred_us	;wreg free
  2664  005C6E  0012               	return		;funcret
  2665  005C70                     __end_of_util_transmit_buzzer_1ms_cycle:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           wreg	equ	0xFE8
  2672                           indf2	equ	0xFDF
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _util_waits_delay_hundred_us *****************
  2678 ;; Defined at:
  2679 ;;		line 47 in file "easat2_util_waits.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;  hun_us          2    0[COMRAM] int 
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;  i               2    3[COMRAM] int 
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, status,2, status,0
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2693 ;;      Params:         2       0       0       0       0       0       0
  2694 ;;      Locals:         2       0       0       0       0       0       0
  2695 ;;      Temps:          1       0       0       0       0       0       0
  2696 ;;      Totals:         5       0       0       0       0       0       0
  2697 ;;Total ram usage:        5 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_util_transmit_buzzer_1ms_cycle
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text14
  2707  005CE6                     __ptext14:
  2708                           	opt stack 0
  2709  005CE6                     _util_waits_delay_hundred_us:
  2710                           	opt stack 24
  2711                           
  2712                           ;easat2_util_waits.c: 48: for (int i = 0; i < hun_us; i++)
  2713                           
  2714                           ;incstack = 0
  2715  005CE6  0E00               	movlw	0
  2716  005CE8  6E05               	movwf	util_waits_delay_hundred_us@i+1,c
  2717  005CEA  0E00               	movlw	0
  2718  005CEC  6E04               	movwf	util_waits_delay_hundred_us@i,c
  2719  005CEE  D006               	goto	l62
  2720  005CF0                     l2153:
  2721                           
  2722                           ;easat2_util_waits.c: 49: _delay((unsigned long)((100)*(2000000/4000000.0)));
  2723  005CF0  0E10               	movlw	16
  2724  005CF2                     u3267:
  2725  005CF2  2EE8               	decfsz	wreg,f,c
  2726  005CF4  D7FE               	goto	u3267
  2727  005CF6  D000               	nop2		;nop
  2728  005CF8  4A04               	infsnz	util_waits_delay_hundred_us@i,f,c
  2729  005CFA  2A05               	incf	util_waits_delay_hundred_us@i+1,f,c
  2730  005CFC                     l62:
  2731  005CFC  5001               	movf	util_waits_delay_hundred_us@hun_us,w,c
  2732  005CFE  5C04               	subwf	util_waits_delay_hundred_us@i,w,c
  2733  005D00  5005               	movf	util_waits_delay_hundred_us@i+1,w,c
  2734  005D02  0A80               	xorlw	128
  2735  005D04  6E03               	movwf	??_util_waits_delay_hundred_us& (0+255),c
  2736  005D06  5002               	movf	util_waits_delay_hundred_us@hun_us+1,w,c
  2737  005D08  0A80               	xorlw	128
  2738  005D0A  5803               	subwfb	??_util_waits_delay_hundred_us& (0+255),w,c
  2739  005D0C  B0D8               	btfsc	status,0,c
  2740  005D0E  0012               	return	
  2741  005D10  D7EF               	goto	l2153
  2742  005D12                     __end_of_util_waits_delay_hundred_us:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           wreg	equ	0xFE8
  2749                           indf2	equ	0xFDF
  2750                           fsr2h	equ	0xFDA
  2751                           fsr2l	equ	0xFD9
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function _strlen *****************
  2755 ;; Defined at:
  2756 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2759 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  2760 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  2761 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  2762 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  2763 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  2764 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  2765 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  2766 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  2767 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  2768 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  2769 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  2772 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  2773 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  2774 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  2775 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  2776 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  2777 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  2778 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  2779 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  2780 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  2781 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  2782 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  2    0[COMRAM] unsigned int 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2792 ;;      Params:         2       0       0       0       0       0       0
  2793 ;;      Locals:         2       0       0       0       0       0       0
  2794 ;;      Temps:          2       0       0       0       0       0       0
  2795 ;;      Totals:         6       0       0       0       0       0       0
  2796 ;;Total ram usage:        6 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_util_beacon_transmission
  2802 ;;		_util_transmit_morse_sequence
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text15
  2807  005F18                     __ptext15:
  2808                           	opt stack 0
  2809  005F18                     _strlen:
  2810                           	opt stack 26
  2811                           
  2812                           ;incstack = 0
  2813  005F18  C001  F005         	movff	strlen@s,strlen@cp
  2814  005F1C  C002  F006         	movff	strlen@s+1,strlen@cp+1
  2815  005F20  D002               	goto	l2209
  2816  005F22                     l2207:
  2817  005F22  4A05               	infsnz	strlen@cp,f,c
  2818  005F24  2A06               	incf	strlen@cp+1,f,c
  2819  005F26                     l2209:
  2820  005F26  C005  FFF6         	movff	strlen@cp,tblptrl
  2821  005F2A  C006  FFF7         	movff	strlen@cp+1,tblptrh
  2822  005F2E  6AF8               	clrf	tblptru,c
  2823  005F30  0E05               	movlw	(high __ramtop+-1)
  2824  005F32  64F7               	cpfsgt	tblptrh,c
  2825  005F34  D003               	bra	u1737
  2826  005F36  0008               	tblrd		*
  2827  005F38  50F5               	movf	tablat,w,c
  2828  005F3A  D005               	bra	u1730
  2829  005F3C                     u1737:
  2830  005F3C  CFF6 FFE9          	movff	tblptrl,fsr0l
  2831  005F40  CFF7 FFEA          	movff	tblptrh,fsr0h
  2832  005F44  50EF               	movf	indf0,w,c
  2833  005F46                     u1730:
  2834  005F46  0900               	iorlw	0
  2835  005F48  A4D8               	btfss	status,2,c
  2836  005F4A  D7EB               	goto	l2207
  2837  005F4C  C001  F003         	movff	strlen@s,??_strlen
  2838  005F50  C002  F004         	movff	strlen@s+1,??_strlen+1
  2839  005F54  1E03               	comf	??_strlen,f,c
  2840  005F56  1E04               	comf	??_strlen+1,f,c
  2841  005F58  4A03               	infsnz	??_strlen,f,c
  2842  005F5A  2A04               	incf	??_strlen+1,f,c
  2843  005F5C  5005               	movf	strlen@cp,w,c
  2844  005F5E  2403               	addwf	??_strlen,w,c
  2845  005F60  6E01               	movwf	?_strlen,c
  2846  005F62  5006               	movf	strlen@cp+1,w,c
  2847  005F64  2004               	addwfc	??_strlen+1,w,c
  2848  005F66  6E02               	movwf	?_strlen+1,c
  2849  005F68  0012               	return	
  2850  005F6A                     __end_of_strlen:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           indf0	equ	0xFEF
  2857                           fsr0h	equ	0xFEA
  2858                           fsr0l	equ	0xFE9
  2859                           wreg	equ	0xFE8
  2860                           indf2	equ	0xFDF
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _strcpy *****************
  2866 ;; Defined at:
  2867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcpy.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  to              2    0[COMRAM] PTR unsigned char 
  2870 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2871 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2872 ;;		 -> STR_1(7), 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2875 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  2    0[COMRAM] PTR unsigned char 
  2878 ;; Registers used:
  2879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2885 ;;      Params:         4       0       0       0       0       0       0
  2886 ;;      Locals:         2       0       0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0       0       0
  2888 ;;      Totals:         6       0       0       0       0       0       0
  2889 ;;Total ram usage:        6 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_util_beacon_transmission
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text16
  2899  005D3E                     __ptext16:
  2900                           	opt stack 0
  2901  005D3E                     _strcpy:
  2902                           	opt stack 28
  2903                           
  2904                           ;incstack = 0
  2905  005D3E  C001  F005         	movff	strcpy@to,strcpy@cp
  2906  005D42  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  2907  005D46  D004               	goto	l2815
  2908  005D48                     l2813:
  2909  005D48  4A05               	infsnz	strcpy@cp,f,c
  2910  005D4A  2A06               	incf	strcpy@cp+1,f,c
  2911  005D4C  4A03               	infsnz	strcpy@from,f,c
  2912  005D4E  2A04               	incf	strcpy@from+1,f,c
  2913  005D50                     l2815:
  2914  005D50  C003  FFF6         	movff	strcpy@from,tblptrl
  2915  005D54  C004  FFF7         	movff	strcpy@from+1,tblptrh
  2916  005D58                     	if	0	;tblptru may be non-zero
  2917  005D58                     	endif
  2918  005D58                     	if	0	;tblptru may be non-zero
  2919  005D58                     	endif
  2920  005D58  C005  FFD9         	movff	strcpy@cp,fsr2l
  2921  005D5C  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  2922  005D60  0008               	tblrd		*
  2923  005D62  CFF5 FFDF          	movff	tablat,indf2
  2924  005D66  50DF               	movf	indf2,w,c
  2925  005D68  B4D8               	btfsc	status,2,c
  2926  005D6A  0012               	return	
  2927  005D6C  D7ED               	goto	l2813
  2928  005D6E                     __end_of_strcpy:
  2929                           	opt stack 0
  2930                           tblptru	equ	0xFF8
  2931                           tblptrh	equ	0xFF7
  2932                           tblptrl	equ	0xFF6
  2933                           tablat	equ	0xFF5
  2934                           indf0	equ	0xFEF
  2935                           fsr0h	equ	0xFEA
  2936                           fsr0l	equ	0xFE9
  2937                           wreg	equ	0xFE8
  2938                           indf2	equ	0xFDF
  2939                           fsr2h	equ	0xFDA
  2940                           fsr2l	equ	0xFD9
  2941                           status	equ	0xFD8
  2942                           
  2943 ;; *************** function _strcat *****************
  2944 ;; Defined at:
  2945 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcat.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  to              2    0[COMRAM] PTR unsigned char 
  2948 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2949 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2950 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2953 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  2    0[COMRAM] PTR unsigned char 
  2956 ;; Registers used:
  2957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         4       0       0       0       0       0       0
  2964 ;;      Locals:         2       0       0       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         6       0       0       0       0       0       0
  2967 ;;Total ram usage:        6 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_util_beacon_transmission
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           	psect	text17
  2977  005E88                     __ptext17:
  2978                           	opt stack 0
  2979  005E88                     _strcat:
  2980                           	opt stack 28
  2981                           
  2982                           ;incstack = 0
  2983  005E88  C001  F005         	movff	strcat@to,strcat@cp
  2984  005E8C  C002  F006         	movff	strcat@to+1,strcat@cp+1
  2985  005E90  D002               	goto	l3115
  2986  005E92                     l3113:
  2987  005E92  4A05               	infsnz	strcat@cp,f,c
  2988  005E94  2A06               	incf	strcat@cp+1,f,c
  2989  005E96                     l3115:
  2990  005E96  C005  FFD9         	movff	strcat@cp,fsr2l
  2991  005E9A  C006  FFDA         	movff	strcat@cp+1,fsr2h
  2992  005E9E  50DF               	movf	indf2,w,c
  2993  005EA0  B4D8               	btfsc	status,2,c
  2994  005EA2  D005               	goto	l3119
  2995  005EA4  D7F6               	goto	l3113
  2996  005EA6                     l3117:
  2997  005EA6  4A05               	infsnz	strcat@cp,f,c
  2998  005EA8  2A06               	incf	strcat@cp+1,f,c
  2999  005EAA  4A03               	infsnz	strcat@from,f,c
  3000  005EAC  2A04               	incf	strcat@from+1,f,c
  3001  005EAE                     l3119:
  3002  005EAE  C003  FFD9         	movff	strcat@from,fsr2l
  3003  005EB2  C004  FFDA         	movff	strcat@from+1,fsr2h
  3004  005EB6  C005  FFE1         	movff	strcat@cp,fsr1l
  3005  005EBA  C006  FFE2         	movff	strcat@cp+1,fsr1h
  3006  005EBE  CFDF FFE7          	movff	indf2,indf1
  3007  005EC2  50E7               	movf	indf1,w,c
  3008  005EC4  B4D8               	btfsc	status,2,c
  3009  005EC6  0012               	return	
  3010  005EC8  D7EE               	goto	l3117
  3011  005ECA                     __end_of_strcat:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           indf0	equ	0xFEF
  3018                           fsr0h	equ	0xFEA
  3019                           fsr0l	equ	0xFE9
  3020                           wreg	equ	0xFE8
  3021                           indf1	equ	0xFE7
  3022                           fsr1h	equ	0xFE2
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _sprintf *****************
  3030 ;; Defined at:
  3031 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  sp              2   63[COMRAM] PTR unsigned char 
  3034 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  3035 ;;  f               2   65[COMRAM] PTR const unsigned char 
  3036 ;;		 -> STR_2(23), 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  val             4   13[BANK0 ] unsigned long 
  3039 ;;  tmpval          4    9[BANK0 ] struct .
  3040 ;;  fval            3   19[BANK0 ] struct .
  3041 ;;  cp              3    0        PTR const unsigned char 
  3042 ;;  prec            2   22[BANK0 ] int 
  3043 ;;  exp             2   17[BANK0 ] int 
  3044 ;;  width           2    7[BANK0 ] int 
  3045 ;;  flag            2    5[BANK0 ] unsigned short 
  3046 ;;  ap              2    3[BANK0 ] PTR void [1]
  3047 ;;		 -> ?_sprintf(2), 
  3048 ;;  len             2    0        unsigned int 
  3049 ;;  c               1   24[BANK0 ] char 
  3050 ;;  d               1    0        unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  2   63[COMRAM] int 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 0/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3060 ;;      Params:        14       0       0       0       0       0       0
  3061 ;;      Locals:         0      25       0       0       0       0       0
  3062 ;;      Temps:          6       0       0       0       0       0       0
  3063 ;;      Totals:        20      25       0       0       0       0       0
  3064 ;;Total ram usage:       45 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:    3
  3067 ;; This function calls:
  3068 ;;		___awdiv
  3069 ;;		___ftadd
  3070 ;;		___ftge
  3071 ;;		___ftmul
  3072 ;;		___ftneg
  3073 ;;		___ftsub
  3074 ;;		___fttol
  3075 ;;		___lldiv
  3076 ;;		___llmod
  3077 ;;		___lltoft
  3078 ;;		___wmul
  3079 ;;		__div_to_l_
  3080 ;;		__tdiv_to_l_
  3081 ;;		_fround
  3082 ;;		_isdigit
  3083 ;;		_scale
  3084 ;; This function is called by:
  3085 ;;		_util_beacon_transmission
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text18
  3090  00740C                     __ptext18:
  3091                           	opt stack 0
  3092  00740C                     _sprintf:
  3093                           	opt stack 25
  3094                           
  3095                           ;doprnt.c: 494: va_list ap;
  3096                           ;doprnt.c: 499: signed char c;
  3097                           ;doprnt.c: 501: int width;
  3098                           ;doprnt.c: 504: int prec;
  3099                           ;doprnt.c: 508: unsigned short flag;
  3100                           ;doprnt.c: 515: char d;
  3101                           ;doprnt.c: 516: double fval;
  3102                           ;doprnt.c: 517: int exp;
  3103                           ;doprnt.c: 523: union {
  3104                           ;doprnt.c: 524: unsigned long vd;
  3105                           ;doprnt.c: 525: double integ;
  3106                           ;doprnt.c: 526: } tmpval;
  3107                           ;doprnt.c: 528: unsigned long val;
  3108                           ;doprnt.c: 529: unsigned len;
  3109                           ;doprnt.c: 530: const char * cp;
  3110                           ;doprnt.c: 533: *ap = __va_start();
  3111                           
  3112                           ;incstack = 0
  3113  00740C  0E44               	movlw	low (?_sprintf+4)
  3114  00740E  0100               	movlb	0	; () banked
  3115  007410  6F63               	movwf	sprintf@ap& (0+255),b
  3116  007412  0E00               	movlw	high (?_sprintf+4)
  3117  007414  0100               	movlb	0	; () banked
  3118  007416  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  3119                           
  3120                           ;doprnt.c: 536: while(c = *f++) {
  3121  007418  EF65  F03F         	goto	l3105
  3122  00741C                     l2819:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;doprnt.c: 538: if(c != '%')
  3126  00741C  0E25               	movlw	37
  3127  00741E  0100               	movlb	0	; () banked
  3128  007420  1978               	xorwf	sprintf@c& (0+255),w,b
  3129  007422  B4D8               	btfsc	status,2,c
  3130  007424  D00A               	goto	l2825
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;doprnt.c: 540: {
  3134                           ;doprnt.c: 541: ((*sp++ = (c)));
  3135  007426  C040  FFD9         	movff	sprintf@sp,fsr2l
  3136  00742A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3137  00742E  C078  FFDF         	movff	sprintf@c,indf2
  3138                           
  3139                           ; BSR set to: 0
  3140  007432  4A40               	infsnz	sprintf@sp,f,c
  3141  007434  2A41               	incf	sprintf@sp+1,f,c
  3142                           
  3143                           ;doprnt.c: 542: continue;
  3144  007436  EF65  F03F         	goto	l3105
  3145  00743A                     l2825:
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;doprnt.c: 543: }
  3149                           ;doprnt.c: 546: width = 0;
  3150  00743A  0E00               	movlw	0
  3151  00743C  0100               	movlb	0	; () banked
  3152  00743E  6F68               	movwf	(sprintf@width+1)& (0+255),b
  3153  007440  0E00               	movlw	0
  3154  007442  6F67               	movwf	sprintf@width& (0+255),b
  3155                           
  3156                           ;doprnt.c: 548: flag = 0;
  3157  007444  0E00               	movlw	0
  3158  007446  0100               	movlb	0	; () banked
  3159  007448  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  3160  00744A  0E00               	movlw	0
  3161  00744C  6F65               	movwf	sprintf@flag& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3165  00744E  C042  FFF6         	movff	sprintf@f,tblptrl
  3166  007452  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3167  007456                     	if	0	;tblptru may be non-zero
  3168  007456                     	endif
  3169  007456                     	if	0	;tblptru may be non-zero
  3170  007456                     	endif
  3171  007456  0008               	tblrd		*
  3172  007458  50F5               	movf	tablat,w,c
  3173  00745A  EC1A  F02E         	call	_isdigit
  3174  00745E  A0D8               	btfss	status,0,c
  3175  007460  D035               	goto	l2839
  3176                           
  3177                           ;doprnt.c: 598: width = 0;
  3178  007462  0E00               	movlw	0
  3179  007464  0100               	movlb	0	; () banked
  3180  007466  6F68               	movwf	(sprintf@width+1)& (0+255),b
  3181  007468  0E00               	movlw	0
  3182  00746A  6F67               	movwf	sprintf@width& (0+255),b
  3183  00746C                     l2831:
  3184                           
  3185                           ;doprnt.c: 600: width *= 10;
  3186  00746C  C067  F00F         	movff	sprintf@width,___wmul@multiplier
  3187  007470  C068  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  3188  007474  0E00               	movlw	0
  3189  007476  6E12               	movwf	___wmul@multiplicand+1,c
  3190  007478  0E0A               	movlw	10
  3191  00747A  6E11               	movwf	___wmul@multiplicand,c
  3192  00747C  EC4A  F02E         	call	___wmul	;wreg free
  3193  007480  C00F  F067         	movff	?___wmul,sprintf@width
  3194  007484  C010  F068         	movff	?___wmul+1,sprintf@width+1
  3195                           
  3196                           ;doprnt.c: 601: width += *f++ - '0';
  3197  007488  0ED0               	movlw	208
  3198  00748A  6E4E               	movwf	??_sprintf& (0+255),c
  3199  00748C  0EFF               	movlw	255
  3200  00748E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3201  007490  C042  FFF6         	movff	sprintf@f,tblptrl
  3202  007494  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3203  007498                     	if	0	;tblptru may be non-zero
  3204  007498                     	endif
  3205  007498                     	if	0	;tblptru may be non-zero
  3206  007498                     	endif
  3207  007498  0008               	tblrd		*
  3208  00749A  50F5               	movf	tablat,w,c
  3209  00749C  6E50               	movwf	(??_sprintf+2)& (0+255),c
  3210  00749E  6A51               	clrf	(??_sprintf+3)& (0+255),c
  3211  0074A0  504E               	movf	??_sprintf,w,c
  3212  0074A2  2650               	addwf	??_sprintf+2,f,c
  3213  0074A4  504F               	movf	??_sprintf+1,w,c
  3214  0074A6  2251               	addwfc	??_sprintf+3,f,c
  3215  0074A8  5050               	movf	??_sprintf+2,w,c
  3216  0074AA  0100               	movlb	0	; () banked
  3217  0074AC  2767               	addwf	sprintf@width& (0+255),f,b
  3218  0074AE  5051               	movf	??_sprintf+3,w,c
  3219  0074B0  0100               	movlb	0	; () banked
  3220  0074B2  2368               	addwfc	(sprintf@width+1)& (0+255),f,b
  3221                           
  3222                           ; BSR set to: 0
  3223  0074B4  4A42               	infsnz	sprintf@f,f,c
  3224  0074B6  2A43               	incf	sprintf@f+1,f,c
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3228  0074B8  C042  FFF6         	movff	sprintf@f,tblptrl
  3229  0074BC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3230  0074C0                     	if	0	;tblptru may be non-zero
  3231  0074C0                     	endif
  3232  0074C0                     	if	0	;tblptru may be non-zero
  3233  0074C0                     	endif
  3234  0074C0  0008               	tblrd		*
  3235  0074C2  50F5               	movf	tablat,w,c
  3236  0074C4  EC1A  F02E         	call	_isdigit
  3237  0074C8  B0D8               	btfsc	status,0,c
  3238  0074CA  D7D0               	goto	l2831
  3239  0074CC                     l2839:
  3240                           
  3241                           ;doprnt.c: 608: }
  3242                           ;doprnt.c: 611: if(*f == '.') {
  3243  0074CC  C042  FFF6         	movff	sprintf@f,tblptrl
  3244  0074D0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3245  0074D4                     	if	0	;tblptru may be non-zero
  3246  0074D4                     	endif
  3247  0074D4                     	if	0	;tblptru may be non-zero
  3248  0074D4                     	endif
  3249  0074D4  0008               	tblrd		*
  3250  0074D6  50F5               	movf	tablat,w,c
  3251  0074D8  0A2E               	xorlw	46
  3252  0074DA  A4D8               	btfss	status,2,c
  3253  0074DC  D032               	goto	l2851
  3254                           
  3255                           ;doprnt.c: 612: flag |= 0x4000;
  3256  0074DE  0100               	movlb	0	; () banked
  3257  0074E0  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  3258                           
  3259                           ;doprnt.c: 613: f++;
  3260  0074E2  4A42               	infsnz	sprintf@f,f,c
  3261  0074E4  2A43               	incf	sprintf@f+1,f,c
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;doprnt.c: 620: {
  3265                           ;doprnt.c: 621: prec = 0;
  3266  0074E6  0E00               	movlw	0
  3267  0074E8  0100               	movlb	0	; () banked
  3268  0074EA  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3269  0074EC  0E00               	movlw	0
  3270  0074EE  6F76               	movwf	sprintf@prec& (0+255),b
  3271                           
  3272                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3273  0074F0  D01D               	goto	l2849
  3274  0074F2                     l2845:
  3275                           
  3276                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3277  0074F2  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  3278  0074F6  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  3279  0074FA  0E00               	movlw	0
  3280  0074FC  6E12               	movwf	___wmul@multiplicand+1,c
  3281  0074FE  0E0A               	movlw	10
  3282  007500  6E11               	movwf	___wmul@multiplicand,c
  3283  007502  EC4A  F02E         	call	___wmul	;wreg free
  3284  007506  C042  FFF6         	movff	sprintf@f,tblptrl
  3285  00750A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3286  00750E                     	if	0	;tblptru may be non-zero
  3287  00750E                     	endif
  3288  00750E                     	if	0	;tblptru may be non-zero
  3289  00750E                     	endif
  3290  00750E  0008               	tblrd		*
  3291  007510  50F5               	movf	tablat,w,c
  3292  007512  260F               	addwf	?___wmul,f,c
  3293  007514  0E00               	movlw	0
  3294  007516  2210               	addwfc	?___wmul+1,f,c
  3295  007518  0ED0               	movlw	208
  3296  00751A  240F               	addwf	?___wmul,w,c
  3297  00751C  0100               	movlb	0	; () banked
  3298  00751E  6F76               	movwf	sprintf@prec& (0+255),b
  3299  007520  0EFF               	movlw	255
  3300  007522  2010               	addwfc	?___wmul+1,w,c
  3301  007524  0100               	movlb	0	; () banked
  3302  007526  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3303                           
  3304                           ; BSR set to: 0
  3305  007528  4A42               	infsnz	sprintf@f,f,c
  3306  00752A  2A43               	incf	sprintf@f+1,f,c
  3307  00752C                     l2849:
  3308                           
  3309                           ; BSR set to: 0
  3310  00752C  C042  FFF6         	movff	sprintf@f,tblptrl
  3311  007530  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3312  007534                     	if	0	;tblptru may be non-zero
  3313  007534                     	endif
  3314  007534                     	if	0	;tblptru may be non-zero
  3315  007534                     	endif
  3316  007534  0008               	tblrd		*
  3317  007536  50F5               	movf	tablat,w,c
  3318  007538  EC1A  F02E         	call	_isdigit
  3319  00753C  A0D8               	btfss	status,0,c
  3320  00753E  D00C               	goto	l2859
  3321  007540  D7D8               	goto	l2845
  3322  007542                     l2851:
  3323                           
  3324                           ;doprnt.c: 626: prec = 0;
  3325  007542  0E00               	movlw	0
  3326  007544  0100               	movlb	0	; () banked
  3327  007546  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3328  007548  0E00               	movlw	0
  3329  00754A  6F76               	movwf	sprintf@prec& (0+255),b
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;doprnt.c: 628: flag |= 0x1000;
  3333  00754C  0100               	movlb	0	; () banked
  3334  00754E  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 630: }
  3338                           ;doprnt.c: 635: switch(c = *f++) {
  3339  007550  D003               	goto	l2859
  3340  007552                     l2855:
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;doprnt.c: 663: flag |= 0x400;
  3344  007552  0100               	movlb	0	; () banked
  3345  007554  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;doprnt.c: 698: case 'i':
  3349                           ;doprnt.c: 699: break;
  3350                           
  3351                           ; BSR set to: 0
  3352                           
  3353                           ;doprnt.c: 697: case 'd':
  3354                           
  3355                           ;doprnt.c: 664: break;
  3356  007556  D019               	goto	l2861
  3357  007558                     l2859:
  3358  007558  C042  FFF6         	movff	sprintf@f,tblptrl
  3359  00755C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3360  007560  4A42               	infsnz	sprintf@f,f,c
  3361  007562  2A43               	incf	sprintf@f+1,f,c
  3362  007564                     	if	0	;tblptru may be non-zero
  3363  007564                     	endif
  3364  007564                     	if	0	;tblptru may be non-zero
  3365  007564                     	endif
  3366  007564  0008               	tblrd		*
  3367  007566  CFF5 F078          	movff	tablat,sprintf@c
  3368  00756A  0100               	movlb	0	; () banked
  3369  00756C  5178               	movf	sprintf@c& (0+255),w,b
  3370                           
  3371                           ; Switch size 1, requested type "space"
  3372                           ; Number of cases is 4, Range of values is 0 to 105
  3373                           ; switch strategies available:
  3374                           ; Name         Instructions Cycles
  3375                           ; simple_byte           13     7 (average)
  3376                           ;	Chosen strategy is simple_byte
  3377  00756E  0A00               	xorlw	0	; case 0
  3378  007570  B4D8               	btfsc	status,2,c
  3379  007572  EF73  F03F         	goto	l3107
  3380  007576  0A64               	xorlw	100	; case 100
  3381  007578  B4D8               	btfsc	status,2,c
  3382  00757A  D007               	goto	l2861
  3383  00757C  0A02               	xorlw	2	; case 102
  3384  00757E  B4D8               	btfsc	status,2,c
  3385  007580  D7E8               	goto	l2855
  3386  007582  0A0F               	xorlw	15	; case 105
  3387  007584  A4D8               	btfss	status,2,c
  3388  007586  EF65  F03F         	goto	l3105
  3389  00758A                     l2861:
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;doprnt.c: 825: if(flag & (0x700)) {
  3393  00758A  0E07               	movlw	7
  3394  00758C  0100               	movlb	0	; () banked
  3395  00758E  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3396  007590  B4D8               	btfsc	status,2,c
  3397  007592  D34A               	goto	l3025
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;doprnt.c: 827: if(flag & 0x1000)
  3401  007594  0100               	movlb	0	; () banked
  3402  007596  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  3403  007598  D005               	goto	l2867
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;doprnt.c: 829: prec = 6;
  3407  00759A  0E00               	movlw	0
  3408  00759C  0100               	movlb	0	; () banked
  3409  00759E  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3410  0075A0  0E06               	movlw	6
  3411  0075A2  6F76               	movwf	sprintf@prec& (0+255),b
  3412  0075A4                     l2867:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3416  0075A4  C063  FFD9         	movff	sprintf@ap,fsr2l
  3417  0075A8  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  3418  0075AC  CFDE F073          	movff	postinc2,sprintf@fval
  3419  0075B0  CFDE F074          	movff	postinc2,sprintf@fval+1
  3420  0075B4  CFDD F075          	movff	postdec2,sprintf@fval+2
  3421                           
  3422                           ; BSR set to: 0
  3423  0075B8  0E03               	movlw	3
  3424  0075BA  0100               	movlb	0	; () banked
  3425  0075BC  2763               	addwf	sprintf@ap& (0+255),f,b
  3426  0075BE  0E00               	movlw	0
  3427  0075C0  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 831: if(fval < 0.0) {
  3431  0075C2  0100               	movlb	0	; () banked
  3432  0075C4  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  3433  0075C6  D011               	goto	l2877
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;doprnt.c: 832: fval = -fval;
  3437  0075C8  C073  F001         	movff	sprintf@fval,___ftneg@f1
  3438  0075CC  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  3439  0075D0  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  3440  0075D4  EC38  F02E         	call	___ftneg	;wreg free
  3441  0075D8  C001  F073         	movff	?___ftneg,sprintf@fval
  3442  0075DC  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  3443  0075E0  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  3444                           
  3445                           ;doprnt.c: 833: flag |= 0x03;
  3446  0075E4  0E03               	movlw	3
  3447  0075E6  0100               	movlb	0	; () banked
  3448  0075E8  1365               	iorwf	sprintf@flag& (0+255),f,b
  3449  0075EA                     l2877:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;doprnt.c: 834: }
  3453                           ;doprnt.c: 835: exp = 0;
  3454  0075EA  0E00               	movlw	0
  3455  0075EC  0100               	movlb	0	; () banked
  3456  0075EE  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3457  0075F0  0E00               	movlw	0
  3458  0075F2  6F71               	movwf	sprintf@exp& (0+255),b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;doprnt.c: 836: if( fval!=0) {
  3462  0075F4  0100               	movlb	0	; () banked
  3463  0075F6  5173               	movf	sprintf@fval& (0+255),w,b
  3464  0075F8  0100               	movlb	0	; () banked
  3465  0075FA  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3466  0075FC  0100               	movlb	0	; () banked
  3467  0075FE  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3468  007600  B4D8               	btfsc	status,2,c
  3469  007602  D08B               	goto	l2905
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3473  007604  0E82               	movlw	130
  3474  007606  6E4E               	movwf	??_sprintf& (0+255),c
  3475  007608  0EFF               	movlw	255
  3476  00760A  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3477  00760C  C073  F050         	movff	sprintf@fval,??_sprintf+2
  3478  007610  C074  F051         	movff	sprintf@fval+1,??_sprintf+3
  3479  007614  C075  F052         	movff	sprintf@fval+2,??_sprintf+4
  3480  007618  C076  F053         	movff	sprintf@fval+3,??_sprintf+5
  3481  00761C  0E10               	movlw	16
  3482  00761E  D005               	goto	u2780
  3483  007620                     u2785:
  3484  007620  90D8               	bcf	status,0,c
  3485  007622  3253               	rrcf	??_sprintf+5,f,c
  3486  007624  3252               	rrcf	??_sprintf+4,f,c
  3487  007626  3251               	rrcf	??_sprintf+3,f,c
  3488  007628  3250               	rrcf	??_sprintf+2,f,c
  3489  00762A                     u2780:
  3490  00762A  2EE8               	decfsz	wreg,f,c
  3491  00762C  D7F9               	goto	u2785
  3492  00762E  5050               	movf	??_sprintf+2,w,c
  3493  007630  244E               	addwf	??_sprintf,w,c
  3494  007632  0100               	movlb	0	; () banked
  3495  007634  6F71               	movwf	sprintf@exp& (0+255),b
  3496  007636  0E00               	movlw	0
  3497  007638  204F               	addwfc	??_sprintf+1,w,c
  3498  00763A  0100               	movlb	0	; () banked
  3499  00763C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;doprnt.c: 838: exp--;
  3503  00763E  0100               	movlb	0	; () banked
  3504  007640  0771               	decf	sprintf@exp& (0+255),f,b
  3505  007642  A0D8               	btfss	status,0,c
  3506  007644  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;doprnt.c: 839: exp *= 3;
  3510  007646  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  3511  00764A  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  3512  00764E  0E00               	movlw	0
  3513  007650  6E12               	movwf	___wmul@multiplicand+1,c
  3514  007652  0E03               	movlw	3
  3515  007654  6E11               	movwf	___wmul@multiplicand,c
  3516  007656  EC4A  F02E         	call	___wmul	;wreg free
  3517  00765A  C00F  F071         	movff	?___wmul,sprintf@exp
  3518  00765E  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  3519                           
  3520                           ;doprnt.c: 840: exp /= 10;
  3521  007662  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  3522  007666  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  3523  00766A  0E00               	movlw	0
  3524  00766C  6E0A               	movwf	___awdiv@divisor+1,c
  3525  00766E  0E0A               	movlw	10
  3526  007670  6E09               	movwf	___awdiv@divisor,c
  3527  007672  ECBD  F030         	call	___awdiv	;wreg free
  3528  007676  C007  F071         	movff	?___awdiv,sprintf@exp
  3529  00767A  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  3530                           
  3531                           ;doprnt.c: 841: if(exp < 0)
  3532  00767E  0100               	movlb	0	; () banked
  3533  007680  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  3534  007682  D004               	goto	l2893
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;doprnt.c: 842: exp--;
  3538  007684  0100               	movlb	0	; () banked
  3539  007686  0771               	decf	sprintf@exp& (0+255),f,b
  3540  007688  A0D8               	btfss	status,0,c
  3541  00768A  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3542  00768C                     l2893:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3546  00768C  0100               	movlb	0	; () banked
  3547  00768E  5171               	movf	sprintf@exp& (0+255),w,b
  3548  007690  0800               	sublw	0
  3549  007692  EC0E  F038         	call	_scale
  3550  007696  C024  F069         	movff	?_scale,sprintf@tmpval
  3551  00769A  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  3552  00769E  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  3553                           
  3554                           ;doprnt.c: 847: tmpval.integ *= fval;
  3555  0076A2  C069  F015         	movff	sprintf@tmpval,___ftmul@f1
  3556  0076A6  C06A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3557  0076AA  C06B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3558  0076AE  C073  F018         	movff	sprintf@fval,___ftmul@f2
  3559  0076B2  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  3560  0076B6  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  3561  0076BA  ECD2  F032         	call	___ftmul	;wreg free
  3562  0076BE  C015  F069         	movff	?___ftmul,sprintf@tmpval
  3563  0076C2  C016  F06A         	movff	?___ftmul+1,sprintf@tmpval+1
  3564  0076C6  C017  F06B         	movff	?___ftmul+2,sprintf@tmpval+2
  3565                           
  3566                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3567  0076CA  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3568  0076CE  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3569  0076D2  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3570  0076D6  0E00               	movlw	0
  3571  0076D8  6E04               	movwf	___ftge@ff2,c
  3572  0076DA  0E80               	movlw	128
  3573  0076DC  6E05               	movwf	___ftge@ff2+1,c
  3574  0076DE  0E3F               	movlw	63
  3575  0076E0  6E06               	movwf	___ftge@ff2+2,c
  3576  0076E2  ECFF  F030         	call	___ftge	;wreg free
  3577  0076E6  B0D8               	btfsc	status,0,c
  3578  0076E8  D005               	goto	l2901
  3579                           
  3580                           ;doprnt.c: 849: exp--;
  3581  0076EA  0100               	movlb	0	; () banked
  3582  0076EC  0771               	decf	sprintf@exp& (0+255),f,b
  3583  0076EE  A0D8               	btfss	status,0,c
  3584  0076F0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3585  0076F2  D013               	goto	l2905
  3586  0076F4                     l2901:
  3587                           
  3588                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3589  0076F4  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3590  0076F8  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3591  0076FC  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3592  007700  0E00               	movlw	0
  3593  007702  6E04               	movwf	___ftge@ff2,c
  3594  007704  0E20               	movlw	32
  3595  007706  6E05               	movwf	___ftge@ff2+1,c
  3596  007708  0E41               	movlw	65
  3597  00770A  6E06               	movwf	___ftge@ff2+2,c
  3598  00770C  ECFF  F030         	call	___ftge	;wreg free
  3599  007710  A0D8               	btfss	status,0,c
  3600  007712  D003               	goto	l2905
  3601                           
  3602                           ;doprnt.c: 851: exp++;
  3603  007714  0100               	movlb	0	; () banked
  3604  007716  4B71               	infsnz	sprintf@exp& (0+255),f,b
  3605  007718  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  3606  00771A                     l2905:
  3607                           
  3608                           ;doprnt.c: 852: }
  3609                           ;doprnt.c: 1112: if(prec <= 12)
  3610  00771A  0100               	movlb	0	; () banked
  3611  00771C  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3612  00771E  D008               	goto	l2907
  3613  007720  0100               	movlb	0	; () banked
  3614  007722  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  3615  007724  E11D               	bnz	l2909
  3616  007726  0E0D               	movlw	13
  3617  007728  0100               	movlb	0	; () banked
  3618  00772A  5D76               	subwf	sprintf@prec& (0+255),w,b
  3619  00772C  B0D8               	btfsc	status,0,c
  3620  00772E  D018               	goto	l2909
  3621  007730                     l2907:
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;doprnt.c: 1113: fval += fround(prec);
  3625  007730  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  3626  007734  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  3627  007738  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  3628  00773C  0100               	movlb	0	; () banked
  3629  00773E  5176               	movf	sprintf@prec& (0+255),w,b
  3630  007740  EC4F  F035         	call	_fround
  3631  007744  C024  F031         	movff	?_fround,___ftadd@f2
  3632  007748  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  3633  00774C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  3634  007750  EC79  F034         	call	___ftadd	;wreg free
  3635  007754  C02E  F073         	movff	?___ftadd,sprintf@fval
  3636  007758  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  3637  00775C  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  3638  007760                     l2909:
  3639                           
  3640                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3641  007760  0100               	movlb	0	; () banked
  3642  007762  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3643  007764  D008               	goto	l2911
  3644  007766  0100               	movlb	0	; () banked
  3645  007768  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3646  00776A  E126               	bnz	l2917
  3647  00776C  0E0A               	movlw	10
  3648  00776E  0100               	movlb	0	; () banked
  3649  007770  5D71               	subwf	sprintf@exp& (0+255),w,b
  3650  007772  B0D8               	btfsc	status,0,c
  3651  007774  D021               	goto	l2917
  3652  007776                     l2911:
  3653                           
  3654                           ; BSR set to: 0
  3655  007776  0100               	movlb	0	; () banked
  3656  007778  5173               	movf	sprintf@fval& (0+255),w,b
  3657  00777A  0100               	movlb	0	; () banked
  3658  00777C  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3659  00777E  0100               	movlb	0	; () banked
  3660  007780  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3661  007782  B4D8               	btfsc	status,2,c
  3662  007784  D05B               	goto	l2931
  3663                           
  3664                           ; BSR set to: 0
  3665  007786  C073  F02B         	movff	sprintf@fval,___fttol@f1
  3666  00778A  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  3667  00778E  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  3668  007792  EC58  F032         	call	___fttol	;wreg free
  3669  007796  502B               	movf	?___fttol,w,c
  3670  007798  102C               	iorwf	?___fttol+1,w,c
  3671  00779A  102D               	iorwf	?___fttol+2,w,c
  3672  00779C  102E               	iorwf	?___fttol+3,w,c
  3673  00779E  A4D8               	btfss	status,2,c
  3674  0077A0  D04D               	goto	l2931
  3675  0077A2  0100               	movlb	0	; () banked
  3676  0077A4  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3677  0077A6  D04A               	goto	l2931
  3678  0077A8  0100               	movlb	0	; () banked
  3679  0077AA  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3680  0077AC  E105               	bnz	l2917
  3681  0077AE  0E02               	movlw	2
  3682  0077B0  0100               	movlb	0	; () banked
  3683  0077B2  5D71               	subwf	sprintf@exp& (0+255),w,b
  3684  0077B4  A0D8               	btfss	status,0,c
  3685  0077B6  D042               	goto	l2931
  3686  0077B8                     l2917:
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3690  0077B8  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3691  0077BC  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3692  0077C0  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3693  0077C4  0E70               	movlw	112
  3694  0077C6  6E04               	movwf	___ftge@ff2,c
  3695  0077C8  0E89               	movlw	137
  3696  0077CA  6E05               	movwf	___ftge@ff2+1,c
  3697  0077CC  0E40               	movlw	64
  3698  0077CE  6E06               	movwf	___ftge@ff2+2,c
  3699  0077D0  ECFF  F030         	call	___ftge	;wreg free
  3700  0077D4  B0D8               	btfsc	status,0,c
  3701  0077D6  D003               	goto	l2921
  3702                           
  3703                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3704  0077D8  0100               	movlb	0	; () banked
  3705  0077DA  0EF7               	movlw	247
  3706  0077DC  D002               	goto	L3
  3707  0077DE                     l2921:
  3708                           
  3709                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3710  0077DE  0100               	movlb	0	; () banked
  3711  0077E0  0EF8               	movlw	248
  3712  0077E2                     L3:
  3713  0077E2  2771               	addwf	sprintf@exp& (0+255),f,b
  3714  0077E4  0EFF               	movlw	255
  3715  0077E6  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;doprnt.c: 1124: }
  3719                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3720                           
  3721                           ; BSR set to: 0
  3722  0077E8  0100               	movlb	0	; () banked
  3723  0077EA  5171               	movf	sprintf@exp& (0+255),w,b
  3724  0077EC  EC0E  F038         	call	_scale
  3725  0077F0  C024  F069         	movff	?_scale,sprintf@tmpval
  3726  0077F4  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  3727  0077F8  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  3728                           
  3729                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3730  0077FC  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3731  007800  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3732  007804  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3733  007808  C069  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3734  00780C  C06A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3735  007810  C06B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3736  007814  ECE0  F033         	call	__tdiv_to_l_	;wreg free
  3737  007818  C001  F06D         	movff	?__tdiv_to_l_,sprintf@val
  3738  00781C  C002  F06E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3739  007820  C003  F06F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3740  007824  C004  F070         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3741                           
  3742                           ;doprnt.c: 1129: fval = 0.0;
  3743  007828  0E00               	movlw	0
  3744  00782A  0100               	movlb	0	; () banked
  3745  00782C  6F73               	movwf	sprintf@fval& (0+255),b
  3746  00782E  0E00               	movlw	0
  3747  007830  0100               	movlb	0	; () banked
  3748  007832  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  3749  007834  0E00               	movlw	0
  3750  007836  0100               	movlb	0	; () banked
  3751  007838  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  3752                           
  3753                           ;doprnt.c: 1130: } else {
  3754  00783A  D033               	goto	l2935
  3755  00783C                     l2931:
  3756                           
  3757                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3758  00783C  C073  F02B         	movff	sprintf@fval,___fttol@f1
  3759  007840  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  3760  007844  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  3761  007848  EC58  F032         	call	___fttol	;wreg free
  3762  00784C  C02B  F06D         	movff	?___fttol,sprintf@val
  3763  007850  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  3764  007854  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  3765  007858  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  3766                           
  3767                           ;doprnt.c: 1132: fval -= (double)val;
  3768  00785C  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  3769  007860  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  3770  007864  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  3771  007868  C06D  F009         	movff	sprintf@val,___lltoft@c
  3772  00786C  C06E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  3773  007870  C06F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  3774  007874  C070  F00C         	movff	sprintf@val+3,___lltoft@c+3
  3775  007878  ECB5  F02F         	call	___lltoft	;wreg free
  3776  00787C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  3777  007880  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  3778  007884  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  3779  007888  EC03  F02F         	call	___ftsub	;wreg free
  3780  00788C  C03A  F073         	movff	?___ftsub,sprintf@fval
  3781  007890  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  3782  007894  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  3783                           
  3784                           ;doprnt.c: 1133: exp = 0;
  3785  007898  0E00               	movlw	0
  3786  00789A  0100               	movlb	0	; () banked
  3787  00789C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3788  00789E  0E00               	movlw	0
  3789  0078A0  6F71               	movwf	sprintf@exp& (0+255),b
  3790  0078A2                     l2935:
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;doprnt.c: 1134: }
  3794                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3795  0078A2  0E01               	movlw	1
  3796  0078A4  0100               	movlb	0	; () banked
  3797  0078A6  6F78               	movwf	sprintf@c& (0+255),b
  3798  0078A8                     l2937:
  3799                           
  3800                           ; BSR set to: 0
  3801  0078A8  0E0A               	movlw	10
  3802  0078AA  0100               	movlb	0	; () banked
  3803  0078AC  1978               	xorwf	sprintf@c& (0+255),w,b
  3804  0078AE  B4D8               	btfsc	status,2,c
  3805  0078B0  D01E               	goto	l2949
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;doprnt.c: 1137: if(val < dpowers[c])
  3809                           
  3810                           ; BSR set to: 0
  3811                           
  3812                           ; BSR set to: 0
  3813  0078B2  0100               	movlb	0	; () banked
  3814  0078B4  5178               	movf	sprintf@c& (0+255),w,b
  3815  0078B6  0D04               	mullw	4
  3816  0078B8  0EF5               	movlw	low _dpowers
  3817  0078BA  24F3               	addwf	prodl,w,c
  3818  0078BC  6EF6               	movwf	tblptrl,c
  3819  0078BE  0E7E               	movlw	high _dpowers
  3820  0078C0  20F4               	addwfc	prodh,w,c
  3821  0078C2  6EF7               	movwf	tblptrh,c
  3822  0078C4                     	if	0	;There are less than 3 active tblptr bytes
  3823  0078C4                     	endif
  3824  0078C4  0009               	tblrd		*+
  3825  0078C6  50F5               	movf	tablat,w,c
  3826  0078C8  0100               	movlb	0	; () banked
  3827  0078CA  5D6D               	subwf	sprintf@val& (0+255),w,b
  3828  0078CC  0009               	tblrd		*+
  3829  0078CE  50F5               	movf	tablat,w,c
  3830  0078D0  0100               	movlb	0	; () banked
  3831  0078D2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3832  0078D4  0009               	tblrd		*+
  3833  0078D6  50F5               	movf	tablat,w,c
  3834  0078D8  0100               	movlb	0	; () banked
  3835  0078DA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3836  0078DC  0009               	tblrd		*+
  3837  0078DE  50F5               	movf	tablat,w,c
  3838  0078E0  0100               	movlb	0	; () banked
  3839  0078E2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  3840  0078E4  A0D8               	btfss	status,0,c
  3841  0078E6  D003               	goto	l2949
  3842                           
  3843                           ; BSR set to: 0
  3844                           
  3845                           ; BSR set to: 0
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;doprnt.c: 1138: break;
  3849  0078E8  0100               	movlb	0	; () banked
  3850  0078EA  2B78               	incf	sprintf@c& (0+255),f,b
  3851  0078EC  D7DD               	goto	l2937
  3852  0078EE                     l2949:
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;doprnt.c: 1142: width -= prec + c + exp;
  3856  0078EE  C078  F04E         	movff	sprintf@c,??_sprintf
  3857  0078F2  6A4F               	clrf	(??_sprintf+1)& (0+255),c
  3858  0078F4  BE4E               	btfsc	??_sprintf& (0+255),7,c
  3859  0078F6  064F               	decf	(??_sprintf+1)& (0+255),f,c
  3860  0078F8  0100               	movlb	0	; () banked
  3861  0078FA  5176               	movf	sprintf@prec& (0+255),w,b
  3862  0078FC  264E               	addwf	??_sprintf,f,c
  3863  0078FE  0100               	movlb	0	; () banked
  3864  007900  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  3865  007902  224F               	addwfc	??_sprintf+1,f,c
  3866  007904  0100               	movlb	0	; () banked
  3867  007906  5171               	movf	sprintf@exp& (0+255),w,b
  3868  007908  264E               	addwf	??_sprintf,f,c
  3869  00790A  0100               	movlb	0	; () banked
  3870  00790C  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3871  00790E  224F               	addwfc	??_sprintf+1,f,c
  3872  007910  504E               	movf	??_sprintf,w,c
  3873  007912  0100               	movlb	0	; () banked
  3874  007914  5F67               	subwf	sprintf@width& (0+255),f,b
  3875  007916  504F               	movf	??_sprintf+1,w,c
  3876  007918  0100               	movlb	0	; () banked
  3877  00791A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  3878                           
  3879                           ;doprnt.c: 1143: if(
  3880                           ;doprnt.c: 1147: prec)
  3881  00791C  0100               	movlb	0	; () banked
  3882  00791E  5176               	movf	sprintf@prec& (0+255),w,b
  3883  007920  0100               	movlb	0	; () banked
  3884  007922  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3885  007924  B4D8               	btfsc	status,2,c
  3886  007926  D004               	goto	l2953
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;doprnt.c: 1148: width--;
  3890  007928  0100               	movlb	0	; () banked
  3891  00792A  0767               	decf	sprintf@width& (0+255),f,b
  3892  00792C  A0D8               	btfss	status,0,c
  3893  00792E  0768               	decf	(sprintf@width+1)& (0+255),f,b
  3894  007930                     l2953:
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;doprnt.c: 1149: if(flag & 0x03)
  3898  007930  0E03               	movlw	3
  3899  007932  0100               	movlb	0	; () banked
  3900  007934  1565               	andwf	sprintf@flag& (0+255),w,b
  3901  007936  6E4E               	movwf	??_sprintf& (0+255),c
  3902  007938  0E00               	movlw	0
  3903  00793A  0100               	movlb	0	; () banked
  3904  00793C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3905  00793E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3906  007940  504E               	movf	??_sprintf,w,c
  3907  007942  104F               	iorwf	??_sprintf+1,w,c
  3908  007944  B4D8               	btfsc	status,2,c
  3909  007946  D00D               	goto	l2963
  3910  007948  D008               	goto	l2961
  3911  00794A                     l2957:
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3915  00794A  C040  FFD9         	movff	sprintf@sp,fsr2l
  3916  00794E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3917  007952  0E20               	movlw	32
  3918  007954  6EDF               	movwf	indf2,c
  3919                           
  3920                           ; BSR set to: 0
  3921  007956  4A40               	infsnz	sprintf@sp,f,c
  3922  007958  2A41               	incf	sprintf@sp+1,f,c
  3923  00795A                     l2961:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1182: width--;
  3927  00795A  0100               	movlb	0	; () banked
  3928  00795C  0767               	decf	sprintf@width& (0+255),f,b
  3929  00795E  A0D8               	btfss	status,0,c
  3930  007960  0768               	decf	(sprintf@width+1)& (0+255),f,b
  3931  007962                     l2963:
  3932                           
  3933                           ; BSR set to: 0
  3934  007962  0100               	movlb	0	; () banked
  3935  007964  BF68               	btfsc	(sprintf@width+1)& (0+255),7,b
  3936  007966  D007               	goto	l2965
  3937  007968  0100               	movlb	0	; () banked
  3938  00796A  5168               	movf	(sprintf@width+1)& (0+255),w,b
  3939  00796C  E1EE               	bnz	l2957
  3940  00796E  0100               	movlb	0	; () banked
  3941  007970  0567               	decf	sprintf@width& (0+255),w,b
  3942  007972  B0D8               	btfsc	status,0,c
  3943  007974  D7EA               	goto	l2957
  3944  007976                     l2965:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;doprnt.c: 1183: }
  3948                           ;doprnt.c: 1188: if(flag & 0x03)
  3949  007976  0E03               	movlw	3
  3950  007978  0100               	movlb	0	; () banked
  3951  00797A  1565               	andwf	sprintf@flag& (0+255),w,b
  3952  00797C  6E4E               	movwf	??_sprintf& (0+255),c
  3953  00797E  0E00               	movlw	0
  3954  007980  0100               	movlb	0	; () banked
  3955  007982  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3956  007984  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3957  007986  504E               	movf	??_sprintf,w,c
  3958  007988  104F               	iorwf	??_sprintf+1,w,c
  3959  00798A  B4D8               	btfsc	status,2,c
  3960  00798C  D053               	goto	l2979
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3964  00798E  C040  FFD9         	movff	sprintf@sp,fsr2l
  3965  007992  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3966  007996  0E2D               	movlw	45
  3967  007998  D04B               	goto	L4
  3968  00799A                     l2969:
  3969                           
  3970                           ; BSR set to: 0
  3971  00799A  4A40               	infsnz	sprintf@sp,f,c
  3972  00799C  2A41               	incf	sprintf@sp+1,f,c
  3973                           
  3974                           ; BSR set to: 0
  3975                           ;doprnt.c: 1195: }
  3976                           ;doprnt.c: 1196: while(c--) {
  3977  00799E  D04A               	goto	l2979
  3978  0079A0                     l2971:
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;doprnt.c: 1200: {
  3982                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3983  0079A0  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  3984  0079A4  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3985  0079A8  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3986  0079AC  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3987  0079B0  0100               	movlb	0	; () banked
  3988  0079B2  5178               	movf	sprintf@c& (0+255),w,b
  3989  0079B4  0D04               	mullw	4
  3990  0079B6  0EF5               	movlw	low _dpowers
  3991  0079B8  24F3               	addwf	prodl,w,c
  3992  0079BA  6EF6               	movwf	tblptrl,c
  3993  0079BC  0E7E               	movlw	high _dpowers
  3994  0079BE  20F4               	addwfc	prodh,w,c
  3995  0079C0  6EF7               	movwf	tblptrh,c
  3996  0079C2                     	if	0	;There are less than 3 active tblptr bytes
  3997  0079C2                     	endif
  3998  0079C2  0009               	tblrd		*+
  3999  0079C4  CFF5 F005          	movff	tablat,___lldiv@divisor
  4000  0079C8  0009               	tblrd		*+
  4001  0079CA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4002  0079CE  0009               	tblrd		*+
  4003  0079D0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4004  0079D4  000A               	tblrd		*-
  4005  0079D6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4006  0079DA  EC7C  F030         	call	___lldiv	;wreg free
  4007  0079DE  C001  F069         	movff	?___lldiv,sprintf@tmpval
  4008  0079E2  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  4009  0079E6  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  4010  0079EA  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  4011                           
  4012                           ;doprnt.c: 1202: tmpval.vd %= 10;
  4013  0079EE  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4014  0079F2  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4015  0079F6  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4016  0079FA  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4017  0079FE  0E0A               	movlw	10
  4018  007A00  6E12               	movwf	___llmod@divisor,c
  4019  007A02  0E00               	movlw	0
  4020  007A04  6E13               	movwf	___llmod@divisor+1,c
  4021  007A06  0E00               	movlw	0
  4022  007A08  6E14               	movwf	___llmod@divisor+2,c
  4023  007A0A  0E00               	movlw	0
  4024  007A0C  6E15               	movwf	___llmod@divisor+3,c
  4025  007A0E  EC11  F030         	call	___llmod	;wreg free
  4026  007A12  C00E  F069         	movff	?___llmod,sprintf@tmpval
  4027  007A16  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  4028  007A1A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  4029  007A1E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  4030                           
  4031                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  4032  007A22  0100               	movlb	0	; () banked
  4033  007A24  5169               	movf	sprintf@tmpval& (0+255),w,b
  4034  007A26  0F30               	addlw	48
  4035  007A28  C040  FFD9         	movff	sprintf@sp,fsr2l
  4036  007A2C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4037  007A30                     L4:
  4038  007A30  6EDF               	movwf	indf2,c
  4039  007A32  D7B3               	goto	l2969
  4040  007A34                     l2979:
  4041                           
  4042                           ; BSR set to: 0
  4043  007A34  0100               	movlb	0	; () banked
  4044  007A36  0778               	decf	sprintf@c& (0+255),f,b
  4045  007A38  0100               	movlb	0	; () banked
  4046  007A3A  2978               	incf	sprintf@c& (0+255),w,b
  4047  007A3C  B4D8               	btfsc	status,2,c
  4048  007A3E  D00D               	goto	l2987
  4049  007A40  D7AF               	goto	l2971
  4050  007A42                     l2981:
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  4054  007A42  C040  FFD9         	movff	sprintf@sp,fsr2l
  4055  007A46  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4056  007A4A  0E30               	movlw	48
  4057  007A4C  6EDF               	movwf	indf2,c
  4058                           
  4059                           ; BSR set to: 0
  4060  007A4E  4A40               	infsnz	sprintf@sp,f,c
  4061  007A50  2A41               	incf	sprintf@sp+1,f,c
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;doprnt.c: 1209: exp--;
  4065  007A52  0100               	movlb	0	; () banked
  4066  007A54  0771               	decf	sprintf@exp& (0+255),f,b
  4067  007A56  A0D8               	btfss	status,0,c
  4068  007A58  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  4069  007A5A                     l2987:
  4070                           
  4071                           ; BSR set to: 0
  4072  007A5A  0100               	movlb	0	; () banked
  4073  007A5C  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  4074  007A5E  D007               	goto	l2989
  4075  007A60  0100               	movlb	0	; () banked
  4076  007A62  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  4077  007A64  E1EE               	bnz	l2981
  4078  007A66  0100               	movlb	0	; () banked
  4079  007A68  0571               	decf	sprintf@exp& (0+255),w,b
  4080  007A6A  B0D8               	btfsc	status,0,c
  4081  007A6C  D7EA               	goto	l2981
  4082  007A6E                     l2989:
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 1210: }
  4086                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4087  007A6E  0100               	movlb	0	; () banked
  4088  007A70  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  4089  007A72  D00C               	goto	l296
  4090  007A74  0100               	movlb	0	; () banked
  4091  007A76  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4092  007A78  E105               	bnz	u2970
  4093  007A7A  0E09               	movlw	9
  4094  007A7C  0100               	movlb	0	; () banked
  4095  007A7E  5D76               	subwf	sprintf@prec& (0+255),w,b
  4096  007A80  A0D8               	btfss	status,0,c
  4097  007A82  D004               	goto	l296
  4098  007A84                     u2970:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4102  007A84  0E08               	movlw	8
  4103  007A86  0100               	movlb	0	; () banked
  4104  007A88  6F78               	movwf	sprintf@c& (0+255),b
  4105  007A8A  D002               	goto	l2993
  4106  007A8C                     l296:
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;doprnt.c: 1213: else
  4110                           ;doprnt.c: 1214: c = prec;
  4111  007A8C  C076  F078         	movff	sprintf@prec,sprintf@c
  4112  007A90                     l2993:
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;doprnt.c: 1215: prec -= c;
  4116  007A90  0100               	movlb	0	; () banked
  4117  007A92  5178               	movf	sprintf@c& (0+255),w,b
  4118  007A94  0100               	movlb	0	; () banked
  4119  007A96  5F76               	subwf	sprintf@prec& (0+255),f,b
  4120  007A98  0E00               	movlw	0
  4121  007A9A  0100               	movlb	0	; () banked
  4122  007A9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  4123  007A9E  0EFF               	movlw	255
  4124  007AA0  0100               	movlb	0	; () banked
  4125  007AA2  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;doprnt.c: 1219: if(c)
  4129  007AA4  0100               	movlb	0	; () banked
  4130  007AA6  5178               	movf	sprintf@c& (0+255),w,b
  4131  007AA8  0100               	movlb	0	; () banked
  4132  007AAA  B4D8               	btfsc	status,2,c
  4133  007AAC  D008               	goto	l3001
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4137  007AAE  C040  FFD9         	movff	sprintf@sp,fsr2l
  4138  007AB2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4139  007AB6  0E2E               	movlw	46
  4140  007AB8  6EDF               	movwf	indf2,c
  4141                           
  4142                           ; BSR set to: 0
  4143  007ABA  4A40               	infsnz	sprintf@sp,f,c
  4144  007ABC  2A41               	incf	sprintf@sp+1,f,c
  4145  007ABE                     l3001:
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4149  007ABE  0100               	movlb	0	; () banked
  4150  007AC0  5178               	movf	sprintf@c& (0+255),w,b
  4151  007AC2  EC0E  F038         	call	_scale
  4152  007AC6  C024  F060         	movff	?_scale,_sprintf$1128
  4153  007ACA  C025  F061         	movff	?_scale+1,_sprintf$1128+1
  4154  007ACE  C026  F062         	movff	?_scale+2,_sprintf$1128+2
  4155                           
  4156                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4157  007AD2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  4158  007AD6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  4159  007ADA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  4160  007ADE  C060  F015         	movff	_sprintf$1128,___ftmul@f1
  4161  007AE2  C061  F016         	movff	_sprintf$1128+1,___ftmul@f1+1
  4162  007AE6  C062  F017         	movff	_sprintf$1128+2,___ftmul@f1+2
  4163  007AEA  ECD2  F032         	call	___ftmul	;wreg free
  4164  007AEE  C015  F02B         	movff	?___ftmul,___fttol@f1
  4165  007AF2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  4166  007AF6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  4167  007AFA  EC58  F032         	call	___fttol	;wreg free
  4168  007AFE  C02B  F06D         	movff	?___fttol,sprintf@val
  4169  007B02  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  4170  007B06  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  4171  007B0A  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  4172                           
  4173                           ;doprnt.c: 1228: while(c--) {
  4174  007B0E  D072               	goto	l3015
  4175  007B10                     l3005:
  4176                           
  4177                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4178  007B10  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  4179  007B14  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4180  007B18  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4181  007B1C  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4182  007B20  0100               	movlb	0	; () banked
  4183  007B22  5178               	movf	sprintf@c& (0+255),w,b
  4184  007B24  0D04               	mullw	4
  4185  007B26  0EF5               	movlw	low _dpowers
  4186  007B28  24F3               	addwf	prodl,w,c
  4187  007B2A  6EF6               	movwf	tblptrl,c
  4188  007B2C  0E7E               	movlw	high _dpowers
  4189  007B2E  20F4               	addwfc	prodh,w,c
  4190  007B30  6EF7               	movwf	tblptrh,c
  4191  007B32                     	if	0	;There are less than 3 active tblptr bytes
  4192  007B32                     	endif
  4193  007B32  0009               	tblrd		*+
  4194  007B34  CFF5 F005          	movff	tablat,___lldiv@divisor
  4195  007B38  0009               	tblrd		*+
  4196  007B3A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4197  007B3E  0009               	tblrd		*+
  4198  007B40  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4199  007B44  000A               	tblrd		*-
  4200  007B46  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4201  007B4A  EC7C  F030         	call	___lldiv	;wreg free
  4202  007B4E  C001  F069         	movff	?___lldiv,sprintf@tmpval
  4203  007B52  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  4204  007B56  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  4205  007B5A  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  4206                           
  4207                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4208  007B5E  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4209  007B62  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4210  007B66  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4211  007B6A  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4212  007B6E  0E0A               	movlw	10
  4213  007B70  6E12               	movwf	___llmod@divisor,c
  4214  007B72  0E00               	movlw	0
  4215  007B74  6E13               	movwf	___llmod@divisor+1,c
  4216  007B76  0E00               	movlw	0
  4217  007B78  6E14               	movwf	___llmod@divisor+2,c
  4218  007B7A  0E00               	movlw	0
  4219  007B7C  6E15               	movwf	___llmod@divisor+3,c
  4220  007B7E  EC11  F030         	call	___llmod	;wreg free
  4221  007B82  C00E  F069         	movff	?___llmod,sprintf@tmpval
  4222  007B86  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  4223  007B8A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  4224  007B8E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  4225                           
  4226                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4227  007B92  0100               	movlb	0	; () banked
  4228  007B94  5169               	movf	sprintf@tmpval& (0+255),w,b
  4229  007B96  0F30               	addlw	48
  4230  007B98  C040  FFD9         	movff	sprintf@sp,fsr2l
  4231  007B9C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4232  007BA0  6EDF               	movwf	indf2,c
  4233                           
  4234                           ; BSR set to: 0
  4235  007BA2  4A40               	infsnz	sprintf@sp,f,c
  4236  007BA4  2A41               	incf	sprintf@sp+1,f,c
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;doprnt.c: 1232: val %= dpowers[c];
  4240  007BA6  C06D  F00E         	movff	sprintf@val,___llmod@dividend
  4241  007BAA  C06E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  4242  007BAE  C06F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  4243  007BB2  C070  F011         	movff	sprintf@val+3,___llmod@dividend+3
  4244  007BB6  0100               	movlb	0	; () banked
  4245  007BB8  5178               	movf	sprintf@c& (0+255),w,b
  4246  007BBA  0D04               	mullw	4
  4247  007BBC  0EF5               	movlw	low _dpowers
  4248  007BBE  24F3               	addwf	prodl,w,c
  4249  007BC0  6EF6               	movwf	tblptrl,c
  4250  007BC2  0E7E               	movlw	high _dpowers
  4251  007BC4  20F4               	addwfc	prodh,w,c
  4252  007BC6  6EF7               	movwf	tblptrh,c
  4253  007BC8                     	if	0	;There are less than 3 active tblptr bytes
  4254  007BC8                     	endif
  4255  007BC8  0009               	tblrd		*+
  4256  007BCA  CFF5 F012          	movff	tablat,___llmod@divisor
  4257  007BCE  0009               	tblrd		*+
  4258  007BD0  CFF5 F013          	movff	tablat,___llmod@divisor+1
  4259  007BD4  0009               	tblrd		*+
  4260  007BD6  CFF5 F014          	movff	tablat,___llmod@divisor+2
  4261  007BDA  000A               	tblrd		*-
  4262  007BDC  CFF5 F015          	movff	tablat,___llmod@divisor+3
  4263  007BE0  EC11  F030         	call	___llmod	;wreg free
  4264  007BE4  C00E  F06D         	movff	?___llmod,sprintf@val
  4265  007BE8  C00F  F06E         	movff	?___llmod+1,sprintf@val+1
  4266  007BEC  C010  F06F         	movff	?___llmod+2,sprintf@val+2
  4267  007BF0  C011  F070         	movff	?___llmod+3,sprintf@val+3
  4268  007BF4                     l3015:
  4269  007BF4  0100               	movlb	0	; () banked
  4270  007BF6  0778               	decf	sprintf@c& (0+255),f,b
  4271  007BF8  0100               	movlb	0	; () banked
  4272  007BFA  2978               	incf	sprintf@c& (0+255),w,b
  4273  007BFC  B4D8               	btfsc	status,2,c
  4274  007BFE  D00D               	goto	l3023
  4275  007C00  D787               	goto	l3005
  4276  007C02                     l3017:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4280  007C02  C040  FFD9         	movff	sprintf@sp,fsr2l
  4281  007C06  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4282  007C0A  0E30               	movlw	48
  4283  007C0C  6EDF               	movwf	indf2,c
  4284                           
  4285                           ; BSR set to: 0
  4286  007C0E  4A40               	infsnz	sprintf@sp,f,c
  4287  007C10  2A41               	incf	sprintf@sp+1,f,c
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;doprnt.c: 1237: prec--;
  4291  007C12  0100               	movlb	0	; () banked
  4292  007C14  0776               	decf	sprintf@prec& (0+255),f,b
  4293  007C16  A0D8               	btfss	status,0,c
  4294  007C18  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4295  007C1A                     l3023:
  4296                           
  4297                           ; BSR set to: 0
  4298  007C1A  0100               	movlb	0	; () banked
  4299  007C1C  5176               	movf	sprintf@prec& (0+255),w,b
  4300  007C1E  0100               	movlb	0	; () banked
  4301  007C20  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4302  007C22  B4D8               	btfsc	status,2,c
  4303  007C24  D152               	goto	l3105
  4304  007C26  D7ED               	goto	l3017
  4305  007C28                     l3025:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;doprnt.c: 1246: }
  4309                           ;doprnt.c: 1253: {
  4310                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4311  007C28  C063  FFD9         	movff	sprintf@ap,fsr2l
  4312  007C2C  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  4313  007C30  CFDE F06D          	movff	postinc2,sprintf@val
  4314  007C34  CFDD F06E          	movff	postdec2,sprintf@val+1
  4315  007C38  0100               	movlb	0	; () banked
  4316  007C3A  0E00               	movlw	0
  4317  007C3C  BF6E               	btfsc	(sprintf@val+1)& (0+255),7,b
  4318  007C3E  0EFF               	movlw	-1
  4319  007C40  6F6F               	movwf	(sprintf@val+2)& (0+255),b
  4320  007C42  6F70               	movwf	(sprintf@val+3)& (0+255),b
  4321                           
  4322                           ; BSR set to: 0
  4323  007C44  0E02               	movlw	2
  4324  007C46  0100               	movlb	0	; () banked
  4325  007C48  2763               	addwf	sprintf@ap& (0+255),f,b
  4326  007C4A  0E00               	movlw	0
  4327  007C4C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;doprnt.c: 1261: if((long)val < 0) {
  4331  007C4E  0100               	movlb	0	; () banked
  4332  007C50  AF70               	btfss	(sprintf@val+3)& (0+255),7,b
  4333  007C52  D00C               	goto	l3035
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;doprnt.c: 1262: flag |= 0x03;
  4337  007C54  0E03               	movlw	3
  4338  007C56  0100               	movlb	0	; () banked
  4339  007C58  1365               	iorwf	sprintf@flag& (0+255),f,b
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1263: val = -val;
  4343  007C5A  0100               	movlb	0	; () banked
  4344  007C5C  1F70               	comf	(sprintf@val+3)& (0+255),f,b
  4345  007C5E  1F6F               	comf	(sprintf@val+2)& (0+255),f,b
  4346  007C60  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  4347  007C62  6D6D               	negf	sprintf@val& (0+255),b
  4348  007C64  0E00               	movlw	0
  4349  007C66  236E               	addwfc	(sprintf@val+1)& (0+255),f,b
  4350  007C68  236F               	addwfc	(sprintf@val+2)& (0+255),f,b
  4351  007C6A  2370               	addwfc	(sprintf@val+3)& (0+255),f,b
  4352  007C6C                     l3035:
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;doprnt.c: 1264: }
  4356                           ;doprnt.c: 1266: }
  4357                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4358  007C6C  0100               	movlb	0	; () banked
  4359  007C6E  5176               	movf	sprintf@prec& (0+255),w,b
  4360  007C70  0100               	movlb	0	; () banked
  4361  007C72  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4362  007C74  A4D8               	btfss	status,2,c
  4363  007C76  D00D               	goto	l3041
  4364                           
  4365                           ; BSR set to: 0
  4366  007C78  0100               	movlb	0	; () banked
  4367  007C7A  516D               	movf	sprintf@val& (0+255),w,b
  4368  007C7C  0100               	movlb	0	; () banked
  4369  007C7E  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  4370  007C80  0100               	movlb	0	; () banked
  4371  007C82  116F               	iorwf	(sprintf@val+2)& (0+255),w,b
  4372  007C84  0100               	movlb	0	; () banked
  4373  007C86  1170               	iorwf	(sprintf@val+3)& (0+255),w,b
  4374  007C88  A4D8               	btfss	status,2,c
  4375  007C8A  D003               	goto	l3041
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1291: prec++;
  4379  007C8C  0100               	movlb	0	; () banked
  4380  007C8E  4B76               	infsnz	sprintf@prec& (0+255),f,b
  4381  007C90  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  4382  007C92                     l3041:
  4383                           
  4384                           ; BSR set to: 0
  4385                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4386  007C92  0E01               	movlw	1
  4387  007C94  0100               	movlb	0	; () banked
  4388  007C96  6F78               	movwf	sprintf@c& (0+255),b
  4389  007C98                     l3043:
  4390                           
  4391                           ; BSR set to: 0
  4392  007C98  0E0A               	movlw	10
  4393  007C9A  0100               	movlb	0	; () banked
  4394  007C9C  1978               	xorwf	sprintf@c& (0+255),w,b
  4395  007C9E  B4D8               	btfsc	status,2,c
  4396  007CA0  D01E               	goto	l3055
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;doprnt.c: 1306: if(val < dpowers[c])
  4400                           
  4401                           ; BSR set to: 0
  4402                           
  4403                           ; BSR set to: 0
  4404  007CA2  0100               	movlb	0	; () banked
  4405  007CA4  5178               	movf	sprintf@c& (0+255),w,b
  4406  007CA6  0D04               	mullw	4
  4407  007CA8  0EF5               	movlw	low _dpowers
  4408  007CAA  24F3               	addwf	prodl,w,c
  4409  007CAC  6EF6               	movwf	tblptrl,c
  4410  007CAE  0E7E               	movlw	high _dpowers
  4411  007CB0  20F4               	addwfc	prodh,w,c
  4412  007CB2  6EF7               	movwf	tblptrh,c
  4413  007CB4                     	if	0	;There are less than 3 active tblptr bytes
  4414  007CB4                     	endif
  4415  007CB4  0009               	tblrd		*+
  4416  007CB6  50F5               	movf	tablat,w,c
  4417  007CB8  0100               	movlb	0	; () banked
  4418  007CBA  5D6D               	subwf	sprintf@val& (0+255),w,b
  4419  007CBC  0009               	tblrd		*+
  4420  007CBE  50F5               	movf	tablat,w,c
  4421  007CC0  0100               	movlb	0	; () banked
  4422  007CC2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  4423  007CC4  0009               	tblrd		*+
  4424  007CC6  50F5               	movf	tablat,w,c
  4425  007CC8  0100               	movlb	0	; () banked
  4426  007CCA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  4427  007CCC  0009               	tblrd		*+
  4428  007CCE  50F5               	movf	tablat,w,c
  4429  007CD0  0100               	movlb	0	; () banked
  4430  007CD2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  4431  007CD4  A0D8               	btfss	status,0,c
  4432  007CD6  D003               	goto	l3055
  4433                           
  4434                           ; BSR set to: 0
  4435                           
  4436                           ; BSR set to: 0
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;doprnt.c: 1307: break;
  4440  007CD8  0100               	movlb	0	; () banked
  4441  007CDA  2B78               	incf	sprintf@c& (0+255),f,b
  4442  007CDC  D7DD               	goto	l3043
  4443  007CDE                     l3055:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;doprnt.c: 1339: if(c < prec)
  4447  007CDE  0E80               	movlw	128
  4448  007CE0  0100               	movlb	0	; () banked
  4449  007CE2  BF78               	btfsc	sprintf@c& (0+255),7,b
  4450  007CE4  0E7F               	movlw	127
  4451  007CE6  6E4E               	movwf	??_sprintf& (0+255),c
  4452  007CE8  0100               	movlb	0	; () banked
  4453  007CEA  5176               	movf	sprintf@prec& (0+255),w,b
  4454  007CEC  0100               	movlb	0	; () banked
  4455  007CEE  5D78               	subwf	sprintf@c& (0+255),w,b
  4456  007CF0  0100               	movlb	0	; () banked
  4457  007CF2  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4458  007CF4  0A80               	xorlw	128
  4459  007CF6  584E               	subwfb	??_sprintf& (0+255),w,c
  4460  007CF8  B0D8               	btfsc	status,0,c
  4461  007CFA  D003               	goto	l3059
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;doprnt.c: 1340: c = prec;
  4465  007CFC  C076  F078         	movff	sprintf@prec,sprintf@c
  4466  007D00  D016               	goto	l3063
  4467  007D02                     l3059:
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;doprnt.c: 1341: else if(prec < c)
  4471  007D02  0100               	movlb	0	; () banked
  4472  007D04  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4473  007D06  0A80               	xorlw	128
  4474  007D08  6E4E               	movwf	??_sprintf& (0+255),c
  4475  007D0A  0100               	movlb	0	; () banked
  4476  007D0C  5178               	movf	sprintf@c& (0+255),w,b
  4477  007D0E  0100               	movlb	0	; () banked
  4478  007D10  5D76               	subwf	sprintf@prec& (0+255),w,b
  4479  007D12  0E80               	movlw	128
  4480  007D14  0100               	movlb	0	; () banked
  4481  007D16  BF78               	btfsc	sprintf@c& (0+255),7,b
  4482  007D18  0E7F               	movlw	127
  4483  007D1A  584E               	subwfb	??_sprintf& (0+255),w,c
  4484  007D1C  B0D8               	btfsc	status,0,c
  4485  007D1E  D007               	goto	l3063
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;doprnt.c: 1342: prec = c;
  4489  007D20  0100               	movlb	0	; () banked
  4490  007D22  5178               	movf	sprintf@c& (0+255),w,b
  4491  007D24  0100               	movlb	0	; () banked
  4492  007D26  6F76               	movwf	sprintf@prec& (0+255),b
  4493  007D28  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  4494  007D2A  BF76               	btfsc	sprintf@prec& (0+255),7,b
  4495  007D2C  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4496  007D2E                     l3063:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4500  007D2E  0100               	movlb	0	; () banked
  4501  007D30  5167               	movf	sprintf@width& (0+255),w,b
  4502  007D32  0100               	movlb	0	; () banked
  4503  007D34  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4504  007D36  B4D8               	btfsc	status,2,c
  4505  007D38  D010               	goto	l3069
  4506                           
  4507                           ; BSR set to: 0
  4508  007D3A  0E03               	movlw	3
  4509  007D3C  0100               	movlb	0	; () banked
  4510  007D3E  1565               	andwf	sprintf@flag& (0+255),w,b
  4511  007D40  6E4E               	movwf	??_sprintf& (0+255),c
  4512  007D42  0E00               	movlw	0
  4513  007D44  0100               	movlb	0	; () banked
  4514  007D46  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  4515  007D48  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  4516  007D4A  504E               	movf	??_sprintf,w,c
  4517  007D4C  104F               	iorwf	??_sprintf+1,w,c
  4518  007D4E  B4D8               	btfsc	status,2,c
  4519  007D50  D004               	goto	l3069
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;doprnt.c: 1346: width--;
  4523  007D52  0100               	movlb	0	; () banked
  4524  007D54  0767               	decf	sprintf@width& (0+255),f,b
  4525  007D56  A0D8               	btfss	status,0,c
  4526  007D58  0768               	decf	(sprintf@width+1)& (0+255),f,b
  4527  007D5A                     l3069:
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4531  007D5A  0100               	movlb	0	; () banked
  4532  007D5C  AD66               	btfss	(sprintf@flag+1)& (0+255),6,b
  4533  007D5E  D01C               	goto	l3077
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;doprnt.c: 1349: if(width > prec)
  4537  007D60  0100               	movlb	0	; () banked
  4538  007D62  5167               	movf	sprintf@width& (0+255),w,b
  4539  007D64  0100               	movlb	0	; () banked
  4540  007D66  5D76               	subwf	sprintf@prec& (0+255),w,b
  4541  007D68  0100               	movlb	0	; () banked
  4542  007D6A  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4543  007D6C  0A80               	xorlw	128
  4544  007D6E  6E4E               	movwf	??_sprintf& (0+255),c
  4545  007D70  0100               	movlb	0	; () banked
  4546  007D72  5168               	movf	(sprintf@width+1)& (0+255),w,b
  4547  007D74  0A80               	xorlw	128
  4548  007D76  584E               	subwfb	??_sprintf& (0+255),w,c
  4549  007D78  B0D8               	btfsc	status,0,c
  4550  007D7A  D009               	goto	l3075
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;doprnt.c: 1350: width -= prec;
  4554  007D7C  0100               	movlb	0	; () banked
  4555  007D7E  5176               	movf	sprintf@prec& (0+255),w,b
  4556  007D80  0100               	movlb	0	; () banked
  4557  007D82  5F67               	subwf	sprintf@width& (0+255),f,b
  4558  007D84  0100               	movlb	0	; () banked
  4559  007D86  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4560  007D88  0100               	movlb	0	; () banked
  4561  007D8A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  4562  007D8C  D005               	goto	l3077
  4563  007D8E                     l3075:
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;doprnt.c: 1351: else
  4567                           ;doprnt.c: 1352: width = 0;
  4568  007D8E  0E00               	movlw	0
  4569  007D90  0100               	movlb	0	; () banked
  4570  007D92  6F68               	movwf	(sprintf@width+1)& (0+255),b
  4571  007D94  0E00               	movlw	0
  4572  007D96  6F67               	movwf	sprintf@width& (0+255),b
  4573  007D98                     l3077:
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;doprnt.c: 1353: }
  4577                           ;doprnt.c: 1381: if(width > c)
  4578  007D98  0E80               	movlw	128
  4579  007D9A  0100               	movlb	0	; () banked
  4580  007D9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  4581  007D9E  0E7F               	movlw	127
  4582  007DA0  6E4E               	movwf	??_sprintf& (0+255),c
  4583  007DA2  0100               	movlb	0	; () banked
  4584  007DA4  5167               	movf	sprintf@width& (0+255),w,b
  4585  007DA6  0100               	movlb	0	; () banked
  4586  007DA8  5D78               	subwf	sprintf@c& (0+255),w,b
  4587  007DAA  0100               	movlb	0	; () banked
  4588  007DAC  5168               	movf	(sprintf@width+1)& (0+255),w,b
  4589  007DAE  0A80               	xorlw	128
  4590  007DB0  584E               	subwfb	??_sprintf& (0+255),w,c
  4591  007DB2  B0D8               	btfsc	status,0,c
  4592  007DB4  D00B               	goto	l3081
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;doprnt.c: 1382: width -= c;
  4596  007DB6  0100               	movlb	0	; () banked
  4597  007DB8  5178               	movf	sprintf@c& (0+255),w,b
  4598  007DBA  0100               	movlb	0	; () banked
  4599  007DBC  5F67               	subwf	sprintf@width& (0+255),f,b
  4600  007DBE  0E00               	movlw	0
  4601  007DC0  0100               	movlb	0	; () banked
  4602  007DC2  BF78               	btfsc	sprintf@c& (0+255),7,b
  4603  007DC4  0EFF               	movlw	255
  4604  007DC6  0100               	movlb	0	; () banked
  4605  007DC8  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  4606  007DCA  D005               	goto	l3083
  4607  007DCC                     l3081:
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;doprnt.c: 1383: else
  4611                           ;doprnt.c: 1384: width = 0;
  4612  007DCC  0E00               	movlw	0
  4613  007DCE  0100               	movlb	0	; () banked
  4614  007DD0  6F68               	movwf	(sprintf@width+1)& (0+255),b
  4615  007DD2  0E00               	movlw	0
  4616  007DD4  6F67               	movwf	sprintf@width& (0+255),b
  4617  007DD6                     l3083:
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;doprnt.c: 1422: {
  4621                           ;doprnt.c: 1424: if(width
  4622                           ;doprnt.c: 1428: )
  4623  007DD6  0100               	movlb	0	; () banked
  4624  007DD8  5167               	movf	sprintf@width& (0+255),w,b
  4625  007DDA  0100               	movlb	0	; () banked
  4626  007DDC  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4627  007DDE  B4D8               	btfsc	status,2,c
  4628  007DE0  D012               	goto	l3091
  4629  007DE2                     l3085:
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4633  007DE2  C040  FFD9         	movff	sprintf@sp,fsr2l
  4634  007DE6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4635  007DEA  0E20               	movlw	32
  4636  007DEC  6EDF               	movwf	indf2,c
  4637                           
  4638                           ; BSR set to: 0
  4639  007DEE  4A40               	infsnz	sprintf@sp,f,c
  4640  007DF0  2A41               	incf	sprintf@sp+1,f,c
  4641                           
  4642                           ; BSR set to: 0
  4643                           ;doprnt.c: 1431: while(--width);
  4644  007DF2  0100               	movlb	0	; () banked
  4645  007DF4  0767               	decf	sprintf@width& (0+255),f,b
  4646  007DF6  A0D8               	btfss	status,0,c
  4647  007DF8  0768               	decf	(sprintf@width+1)& (0+255),f,b
  4648  007DFA  0100               	movlb	0	; () banked
  4649  007DFC  5167               	movf	sprintf@width& (0+255),w,b
  4650  007DFE  0100               	movlb	0	; () banked
  4651  007E00  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4652  007E02  A4D8               	btfss	status,2,c
  4653  007E04  D7EE               	goto	l3085
  4654  007E06                     l3091:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;doprnt.c: 1438: if(flag & 0x03)
  4658  007E06  0E03               	movlw	3
  4659  007E08  0100               	movlb	0	; () banked
  4660  007E0A  1565               	andwf	sprintf@flag& (0+255),w,b
  4661  007E0C  6E4E               	movwf	??_sprintf& (0+255),c
  4662  007E0E  0E00               	movlw	0
  4663  007E10  0100               	movlb	0	; () banked
  4664  007E12  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  4665  007E14  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  4666  007E16  504E               	movf	??_sprintf,w,c
  4667  007E18  104F               	iorwf	??_sprintf+1,w,c
  4668  007E1A  B4D8               	btfsc	status,2,c
  4669  007E1C  D04B               	goto	l3103
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4673  007E1E  C040  FFD9         	movff	sprintf@sp,fsr2l
  4674  007E22  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4675  007E26  0E2D               	movlw	45
  4676  007E28  6EDF               	movwf	indf2,c
  4677  007E2A  D042               	goto	l3101
  4678  007E2C                     l3097:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;doprnt.c: 1478: {
  4682                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4683  007E2C  C076  F04E         	movff	sprintf@prec,??_sprintf
  4684  007E30  C077  F04F         	movff	sprintf@prec+1,??_sprintf+1
  4685  007E34  90D8               	bcf	status,0,c
  4686  007E36  364E               	rlcf	??_sprintf,f,c
  4687  007E38  364F               	rlcf	??_sprintf+1,f,c
  4688  007E3A  90D8               	bcf	status,0,c
  4689  007E3C  364E               	rlcf	??_sprintf,f,c
  4690  007E3E  364F               	rlcf	??_sprintf+1,f,c
  4691  007E40  0EF5               	movlw	low _dpowers
  4692  007E42  244E               	addwf	??_sprintf,w,c
  4693  007E44  6EF6               	movwf	tblptrl,c
  4694  007E46  0E7E               	movlw	high _dpowers
  4695  007E48  204F               	addwfc	??_sprintf+1,w,c
  4696  007E4A  6EF7               	movwf	tblptrh,c
  4697  007E4C                     	if	0	;There are less than 3 active tblptr bytes
  4698  007E4C                     	endif
  4699  007E4C  0009               	tblrd		*+
  4700  007E4E  CFF5 F005          	movff	tablat,___lldiv@divisor
  4701  007E52  0009               	tblrd		*+
  4702  007E54  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4703  007E58  0009               	tblrd		*+
  4704  007E5A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4705  007E5E  000A               	tblrd		*-
  4706  007E60  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4707  007E64  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  4708  007E68  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4709  007E6C  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4710  007E70  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4711  007E74  EC7C  F030         	call	___lldiv	;wreg free
  4712  007E78  C001  F00E         	movff	?___lldiv,___llmod@dividend
  4713  007E7C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  4714  007E80  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  4715  007E84  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  4716  007E88  0E0A               	movlw	10
  4717  007E8A  6E12               	movwf	___llmod@divisor,c
  4718  007E8C  0E00               	movlw	0
  4719  007E8E  6E13               	movwf	___llmod@divisor+1,c
  4720  007E90  0E00               	movlw	0
  4721  007E92  6E14               	movwf	___llmod@divisor+2,c
  4722  007E94  0E00               	movlw	0
  4723  007E96  6E15               	movwf	___llmod@divisor+3,c
  4724  007E98  EC11  F030         	call	___llmod	;wreg free
  4725  007E9C  500E               	movf	?___llmod,w,c
  4726  007E9E  0F30               	addlw	48
  4727  007EA0  0100               	movlb	0	; () banked
  4728  007EA2  6F78               	movwf	sprintf@c& (0+255),b
  4729                           
  4730                           ; BSR set to: 0
  4731                           ;doprnt.c: 1523: }
  4732                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4733  007EA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  4734  007EA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4735  007EAC  C078  FFDF         	movff	sprintf@c,indf2
  4736  007EB0                     l3101:
  4737                           
  4738                           ; BSR set to: 0
  4739  007EB0  4A40               	infsnz	sprintf@sp,f,c
  4740  007EB2  2A41               	incf	sprintf@sp+1,f,c
  4741  007EB4                     l3103:
  4742                           
  4743                           ; BSR set to: 0
  4744  007EB4  0100               	movlb	0	; () banked
  4745  007EB6  0776               	decf	sprintf@prec& (0+255),f,b
  4746  007EB8  A0D8               	btfss	status,0,c
  4747  007EBA  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4748  007EBC  0100               	movlb	0	; () banked
  4749  007EBE  2976               	incf	sprintf@prec& (0+255),w,b
  4750  007EC0  E1B5               	bnz	l3097
  4751  007EC2  0100               	movlb	0	; () banked
  4752  007EC4  2977               	incf	(sprintf@prec+1)& (0+255),w,b
  4753  007EC6  A4D8               	btfss	status,2,c
  4754  007EC8  D7B1               	goto	l3097
  4755  007ECA                     l3105:
  4756                           
  4757                           ; BSR set to: 0
  4758  007ECA  C042  FFF6         	movff	sprintf@f,tblptrl
  4759  007ECE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4760  007ED2  4A42               	infsnz	sprintf@f,f,c
  4761  007ED4  2A43               	incf	sprintf@f+1,f,c
  4762  007ED6                     	if	0	;tblptru may be non-zero
  4763  007ED6                     	endif
  4764  007ED6                     	if	0	;tblptru may be non-zero
  4765  007ED6                     	endif
  4766  007ED6  0008               	tblrd		*
  4767  007ED8  CFF5 F078          	movff	tablat,sprintf@c
  4768  007EDC  0100               	movlb	0	; () banked
  4769  007EDE  5178               	movf	sprintf@c& (0+255),w,b
  4770  007EE0  A4D8               	btfss	status,2,c
  4771  007EE2  EF0E  F03A         	goto	l2819
  4772  007EE6                     l3107:
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;doprnt.c: 1538: *sp = 0;
  4776  007EE6  C040  FFD9         	movff	sprintf@sp,fsr2l
  4777  007EEA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4778  007EEE  0E00               	movlw	0
  4779  007EF0  6EDF               	movwf	indf2,c
  4780  007EF2  0012               	return	
  4781  007EF4                     __end_of_sprintf:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           prodh	equ	0xFF4
  4788                           prodl	equ	0xFF3
  4789                           indf0	equ	0xFEF
  4790                           fsr0h	equ	0xFEA
  4791                           fsr0l	equ	0xFE9
  4792                           wreg	equ	0xFE8
  4793                           indf1	equ	0xFE7
  4794                           fsr1h	equ	0xFE2
  4795                           fsr1l	equ	0xFE1
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           fsr2h	equ	0xFDA
  4800                           fsr2l	equ	0xFD9
  4801                           status	equ	0xFD8
  4802                           
  4803 ;; *************** function _scale *****************
  4804 ;; Defined at:
  4805 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4806 ;; Parameters:    Size  Location     Type
  4807 ;;  scl             1    wreg     char 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  scl             1   41[COMRAM] char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  3   35[COMRAM] char 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4819 ;;      Params:         3       0       0       0       0       0       0
  4820 ;;      Locals:         4       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0
  4822 ;;      Totals:         7       0       0       0       0       0       0
  4823 ;;Total ram usage:        7 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    2
  4826 ;; This function calls:
  4827 ;;		___awdiv
  4828 ;;		___awmod
  4829 ;;		___ftmul
  4830 ;;		___wmul
  4831 ;; This function is called by:
  4832 ;;		_sprintf
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text19
  4837  00701C                     __ptext19:
  4838                           	opt stack 0
  4839  00701C                     _scale:
  4840                           	opt stack 25
  4841                           
  4842                           ; BSR set to: 0
  4843                           ;incstack = 0
  4844                           ;scale@scl stored from wreg
  4845  00701C  6E2A               	movwf	scale@scl,c
  4846                           
  4847                           ;doprnt.c: 428: if(scl < 0) {
  4848  00701E  AE2A               	btfss	scale@scl,7,c
  4849  007020  D0FB               	goto	l2515
  4850                           
  4851                           ;doprnt.c: 429: scl = -scl;
  4852  007022  6C2A               	negf	scale@scl,c
  4853                           
  4854                           ;doprnt.c: 430: if(scl>=110)
  4855  007024  502A               	movf	scale@scl,w,c
  4856  007026  0A80               	xorlw	128
  4857  007028  0F12               	addlw	-238
  4858  00702A  A0D8               	btfss	status,0,c
  4859  00702C  D091               	goto	l2505
  4860                           
  4861                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4862  00702E  0E00               	movlw	0
  4863  007030  6E12               	movwf	___wmul@multiplicand+1,c
  4864  007032  0E03               	movlw	3
  4865  007034  6E11               	movwf	___wmul@multiplicand,c
  4866  007036  0E00               	movlw	0
  4867  007038  6E0A               	movwf	___awdiv@divisor+1,c
  4868  00703A  0E0A               	movlw	10
  4869  00703C  6E09               	movwf	___awdiv@divisor,c
  4870  00703E  0E00               	movlw	0
  4871  007040  6E04               	movwf	___awmod@divisor+1,c
  4872  007042  0E64               	movlw	100
  4873  007044  6E03               	movwf	___awmod@divisor,c
  4874  007046  502A               	movf	scale@scl,w,c
  4875  007048  6E01               	movwf	___awmod@dividend,c
  4876  00704A  6A02               	clrf	___awmod@dividend+1,c
  4877  00704C  BE01               	btfsc	___awmod@dividend,7,c
  4878  00704E  0602               	decf	___awmod@dividend+1,f,c
  4879  007050  EC44  F030         	call	___awmod	;wreg free
  4880  007054  C001  F007         	movff	?___awmod,___awdiv@dividend
  4881  007058  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4882  00705C  ECBD  F030         	call	___awdiv	;wreg free
  4883  007060  0E09               	movlw	9
  4884  007062  2407               	addwf	?___awdiv,w,c
  4885  007064  6E0F               	movwf	___wmul@multiplier,c
  4886  007066  0E00               	movlw	0
  4887  007068  2008               	addwfc	?___awdiv+1,w,c
  4888  00706A  6E10               	movwf	___wmul@multiplier+1,c
  4889  00706C  EC4A  F02E         	call	___wmul	;wreg free
  4890  007070  0E1D               	movlw	low __npowers_
  4891  007072  240F               	addwf	?___wmul,w,c
  4892  007074  6EF6               	movwf	tblptrl,c
  4893  007076  0E7F               	movlw	high __npowers_
  4894  007078  2010               	addwfc	?___wmul+1,w,c
  4895  00707A  6EF7               	movwf	tblptrh,c
  4896  00707C                     	if	0	;There are less than 3 active tblptr bytes
  4897  00707C                     	endif
  4898  00707C  0009               	tblrd		*+
  4899  00707E  CFF5 F018          	movff	tablat,___ftmul@f2
  4900  007082  0009               	tblrd		*+
  4901  007084  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4902  007088  000A               	tblrd		*-
  4903  00708A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4904  00708E  0E00               	movlw	0
  4905  007090  6E0A               	movwf	___awdiv@divisor+1,c
  4906  007092  0E64               	movlw	100
  4907  007094  6E09               	movwf	___awdiv@divisor,c
  4908  007096  502A               	movf	scale@scl,w,c
  4909  007098  6E07               	movwf	___awdiv@dividend,c
  4910  00709A  6A08               	clrf	___awdiv@dividend+1,c
  4911  00709C  BE07               	btfsc	___awdiv@dividend,7,c
  4912  00709E  0608               	decf	___awdiv@dividend+1,f,c
  4913  0070A0  ECBD  F030         	call	___awdiv	;wreg free
  4914  0070A4  0E12               	movlw	18
  4915  0070A6  2407               	addwf	?___awdiv,w,c
  4916  0070A8  6E0F               	movwf	___wmul@multiplier,c
  4917  0070AA  0E00               	movlw	0
  4918  0070AC  2008               	addwfc	?___awdiv+1,w,c
  4919  0070AE  6E10               	movwf	___wmul@multiplier+1,c
  4920  0070B0  0E00               	movlw	0
  4921  0070B2  6E12               	movwf	___wmul@multiplicand+1,c
  4922  0070B4  0E03               	movlw	3
  4923  0070B6  6E11               	movwf	___wmul@multiplicand,c
  4924  0070B8  EC4A  F02E         	call	___wmul	;wreg free
  4925  0070BC  0E1D               	movlw	low __npowers_
  4926  0070BE  240F               	addwf	?___wmul,w,c
  4927  0070C0  6EF6               	movwf	tblptrl,c
  4928  0070C2  0E7F               	movlw	high __npowers_
  4929  0070C4  2010               	addwfc	?___wmul+1,w,c
  4930  0070C6  6EF7               	movwf	tblptrh,c
  4931  0070C8                     	if	0	;There are less than 3 active tblptr bytes
  4932  0070C8                     	endif
  4933  0070C8  0009               	tblrd		*+
  4934  0070CA  CFF5 F015          	movff	tablat,___ftmul@f1
  4935  0070CE  0009               	tblrd		*+
  4936  0070D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4937  0070D4  000A               	tblrd		*-
  4938  0070D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4939  0070DA  ECD2  F032         	call	___ftmul	;wreg free
  4940  0070DE  C015  F027         	movff	?___ftmul,_scale$1127
  4941  0070E2  C016  F028         	movff	?___ftmul+1,_scale$1127+1
  4942  0070E6  C017  F029         	movff	?___ftmul+2,_scale$1127+2
  4943                           
  4944                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4945  0070EA  C027  F015         	movff	_scale$1127,___ftmul@f1
  4946  0070EE  C028  F016         	movff	_scale$1127+1,___ftmul@f1+1
  4947  0070F2  C029  F017         	movff	_scale$1127+2,___ftmul@f1+2
  4948  0070F6  0E00               	movlw	0
  4949  0070F8  6E12               	movwf	___wmul@multiplicand+1,c
  4950  0070FA  0E03               	movlw	3
  4951  0070FC  6E11               	movwf	___wmul@multiplicand,c
  4952  0070FE  0E00               	movlw	0
  4953  007100  6E04               	movwf	___awmod@divisor+1,c
  4954  007102  0E0A               	movlw	10
  4955  007104  6E03               	movwf	___awmod@divisor,c
  4956  007106  502A               	movf	scale@scl,w,c
  4957  007108  6E01               	movwf	___awmod@dividend,c
  4958  00710A  6A02               	clrf	___awmod@dividend+1,c
  4959  00710C  BE01               	btfsc	___awmod@dividend,7,c
  4960  00710E  0602               	decf	___awmod@dividend+1,f,c
  4961  007110  EC44  F030         	call	___awmod	;wreg free
  4962  007114  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4963  007118  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4964  00711C  EC4A  F02E         	call	___wmul	;wreg free
  4965  007120  0E1D               	movlw	low __npowers_
  4966  007122  240F               	addwf	?___wmul,w,c
  4967  007124  6EF6               	movwf	tblptrl,c
  4968  007126  0E7F               	movlw	high __npowers_
  4969  007128  2010               	addwfc	?___wmul+1,w,c
  4970  00712A  6EF7               	movwf	tblptrh,c
  4971  00712C                     	if	0	;There are less than 3 active tblptr bytes
  4972  00712C                     	endif
  4973  00712C  0009               	tblrd		*+
  4974  00712E  CFF5 F018          	movff	tablat,___ftmul@f2
  4975  007132  0009               	tblrd		*+
  4976  007134  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4977  007138  000A               	tblrd		*-
  4978  00713A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4979  00713E  ECD2  F032         	call	___ftmul	;wreg free
  4980  007142  C015  F024         	movff	?___ftmul,?_scale
  4981  007146  C016  F025         	movff	?___ftmul+1,?_scale+1
  4982  00714A  C017  F026         	movff	?___ftmul+2,?_scale+2
  4983  00714E  0012               	return	
  4984  007150                     l2505:
  4985                           
  4986                           ;doprnt.c: 432: else if(scl > 10)
  4987  007150  502A               	movf	scale@scl,w,c
  4988  007152  0A80               	xorlw	128
  4989  007154  0F75               	addlw	-139
  4990  007156  A0D8               	btfss	status,0,c
  4991  007158  D04D               	goto	l2511
  4992                           
  4993                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4994  00715A  0E00               	movlw	0
  4995  00715C  6E0A               	movwf	___awdiv@divisor+1,c
  4996  00715E  0E0A               	movlw	10
  4997  007160  6E09               	movwf	___awdiv@divisor,c
  4998  007162  502A               	movf	scale@scl,w,c
  4999  007164  6E07               	movwf	___awdiv@dividend,c
  5000  007166  6A08               	clrf	___awdiv@dividend+1,c
  5001  007168  BE07               	btfsc	___awdiv@dividend,7,c
  5002  00716A  0608               	decf	___awdiv@dividend+1,f,c
  5003  00716C  ECBD  F030         	call	___awdiv	;wreg free
  5004  007170  0E09               	movlw	9
  5005  007172  2407               	addwf	?___awdiv,w,c
  5006  007174  6E0F               	movwf	___wmul@multiplier,c
  5007  007176  0E00               	movlw	0
  5008  007178  2008               	addwfc	?___awdiv+1,w,c
  5009  00717A  6E10               	movwf	___wmul@multiplier+1,c
  5010  00717C  0E00               	movlw	0
  5011  00717E  6E12               	movwf	___wmul@multiplicand+1,c
  5012  007180  0E03               	movlw	3
  5013  007182  6E11               	movwf	___wmul@multiplicand,c
  5014  007184  EC4A  F02E         	call	___wmul	;wreg free
  5015  007188  0E1D               	movlw	low __npowers_
  5016  00718A  240F               	addwf	?___wmul,w,c
  5017  00718C  6EF6               	movwf	tblptrl,c
  5018  00718E  0E7F               	movlw	high __npowers_
  5019  007190  2010               	addwfc	?___wmul+1,w,c
  5020  007192  6EF7               	movwf	tblptrh,c
  5021  007194                     	if	0	;There are less than 3 active tblptr bytes
  5022  007194                     	endif
  5023  007194  0009               	tblrd		*+
  5024  007196  CFF5 F015          	movff	tablat,___ftmul@f1
  5025  00719A  0009               	tblrd		*+
  5026  00719C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5027  0071A0  000A               	tblrd		*-
  5028  0071A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5029  0071A6  0E00               	movlw	0
  5030  0071A8  6E12               	movwf	___wmul@multiplicand+1,c
  5031  0071AA  0E03               	movlw	3
  5032  0071AC  6E11               	movwf	___wmul@multiplicand,c
  5033  0071AE  0E00               	movlw	0
  5034  0071B0  6E04               	movwf	___awmod@divisor+1,c
  5035  0071B2  0E0A               	movlw	10
  5036  0071B4  6E03               	movwf	___awmod@divisor,c
  5037  0071B6  502A               	movf	scale@scl,w,c
  5038  0071B8  6E01               	movwf	___awmod@dividend,c
  5039  0071BA  6A02               	clrf	___awmod@dividend+1,c
  5040  0071BC  BE01               	btfsc	___awmod@dividend,7,c
  5041  0071BE  0602               	decf	___awmod@dividend+1,f,c
  5042  0071C0  EC44  F030         	call	___awmod	;wreg free
  5043  0071C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5044  0071C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5045  0071CC  EC4A  F02E         	call	___wmul	;wreg free
  5046  0071D0  0E1D               	movlw	low __npowers_
  5047  0071D2  240F               	addwf	?___wmul,w,c
  5048  0071D4  6EF6               	movwf	tblptrl,c
  5049  0071D6  0E7F               	movlw	high __npowers_
  5050  0071D8  2010               	addwfc	?___wmul+1,w,c
  5051  0071DA  6EF7               	movwf	tblptrh,c
  5052  0071DC                     	if	0	;There are less than 3 active tblptr bytes
  5053  0071DC                     	endif
  5054  0071DC  0009               	tblrd		*+
  5055  0071DE  CFF5 F018          	movff	tablat,___ftmul@f2
  5056  0071E2  0009               	tblrd		*+
  5057  0071E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5058  0071E8  000A               	tblrd		*-
  5059  0071EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5060  0071EE  ECD2  F032         	call	___ftmul	;wreg free
  5061  0071F2  D7A7               	goto	L5
  5062  0071F4                     l2511:
  5063                           
  5064                           ;doprnt.c: 434: return _npowers_[scl];
  5065  0071F4  502A               	movf	scale@scl,w,c
  5066  0071F6  0D03               	mullw	3
  5067  0071F8  0E1D               	movlw	low __npowers_
  5068  0071FA  24F3               	addwf	prodl,w,c
  5069  0071FC  6EF6               	movwf	tblptrl,c
  5070  0071FE  0E7F               	movlw	high __npowers_
  5071  007200  20F4               	addwfc	prodh,w,c
  5072  007202  6EF7               	movwf	tblptrh,c
  5073  007204                     	if	0	;There are less than 3 active tblptr bytes
  5074  007204                     	endif
  5075  007204  0009               	tblrd		*+
  5076  007206  CFF5 F024          	movff	tablat,?_scale
  5077  00720A  0009               	tblrd		*+
  5078  00720C  CFF5 F025          	movff	tablat,?_scale+1
  5079  007210  000A               	tblrd		*-
  5080  007212  CFF5 F026          	movff	tablat,?_scale+2
  5081  007216  0012               	return	
  5082  007218                     l2515:
  5083                           
  5084                           ;doprnt.c: 435: }
  5085                           ;doprnt.c: 436: if(scl>=110)
  5086  007218  502A               	movf	scale@scl,w,c
  5087  00721A  0A80               	xorlw	128
  5088  00721C  0F12               	addlw	-238
  5089  00721E  A0D8               	btfss	status,0,c
  5090  007220  D091               	goto	l2523
  5091                           
  5092                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5093  007222  0E00               	movlw	0
  5094  007224  6E12               	movwf	___wmul@multiplicand+1,c
  5095  007226  0E03               	movlw	3
  5096  007228  6E11               	movwf	___wmul@multiplicand,c
  5097  00722A  0E00               	movlw	0
  5098  00722C  6E0A               	movwf	___awdiv@divisor+1,c
  5099  00722E  0E0A               	movlw	10
  5100  007230  6E09               	movwf	___awdiv@divisor,c
  5101  007232  0E00               	movlw	0
  5102  007234  6E04               	movwf	___awmod@divisor+1,c
  5103  007236  0E64               	movlw	100
  5104  007238  6E03               	movwf	___awmod@divisor,c
  5105  00723A  502A               	movf	scale@scl,w,c
  5106  00723C  6E01               	movwf	___awmod@dividend,c
  5107  00723E  6A02               	clrf	___awmod@dividend+1,c
  5108  007240  BE01               	btfsc	___awmod@dividend,7,c
  5109  007242  0602               	decf	___awmod@dividend+1,f,c
  5110  007244  EC44  F030         	call	___awmod	;wreg free
  5111  007248  C001  F007         	movff	?___awmod,___awdiv@dividend
  5112  00724C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5113  007250  ECBD  F030         	call	___awdiv	;wreg free
  5114  007254  0E09               	movlw	9
  5115  007256  2407               	addwf	?___awdiv,w,c
  5116  007258  6E0F               	movwf	___wmul@multiplier,c
  5117  00725A  0E00               	movlw	0
  5118  00725C  2008               	addwfc	?___awdiv+1,w,c
  5119  00725E  6E10               	movwf	___wmul@multiplier+1,c
  5120  007260  EC4A  F02E         	call	___wmul	;wreg free
  5121  007264  0E44               	movlw	low __powers_
  5122  007266  240F               	addwf	?___wmul,w,c
  5123  007268  6EF6               	movwf	tblptrl,c
  5124  00726A  0E7F               	movlw	high __powers_
  5125  00726C  2010               	addwfc	?___wmul+1,w,c
  5126  00726E  6EF7               	movwf	tblptrh,c
  5127  007270                     	if	0	;There are less than 3 active tblptr bytes
  5128  007270                     	endif
  5129  007270  0009               	tblrd		*+
  5130  007272  CFF5 F018          	movff	tablat,___ftmul@f2
  5131  007276  0009               	tblrd		*+
  5132  007278  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5133  00727C  000A               	tblrd		*-
  5134  00727E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5135  007282  0E00               	movlw	0
  5136  007284  6E0A               	movwf	___awdiv@divisor+1,c
  5137  007286  0E64               	movlw	100
  5138  007288  6E09               	movwf	___awdiv@divisor,c
  5139  00728A  502A               	movf	scale@scl,w,c
  5140  00728C  6E07               	movwf	___awdiv@dividend,c
  5141  00728E  6A08               	clrf	___awdiv@dividend+1,c
  5142  007290  BE07               	btfsc	___awdiv@dividend,7,c
  5143  007292  0608               	decf	___awdiv@dividend+1,f,c
  5144  007294  ECBD  F030         	call	___awdiv	;wreg free
  5145  007298  0E12               	movlw	18
  5146  00729A  2407               	addwf	?___awdiv,w,c
  5147  00729C  6E0F               	movwf	___wmul@multiplier,c
  5148  00729E  0E00               	movlw	0
  5149  0072A0  2008               	addwfc	?___awdiv+1,w,c
  5150  0072A2  6E10               	movwf	___wmul@multiplier+1,c
  5151  0072A4  0E00               	movlw	0
  5152  0072A6  6E12               	movwf	___wmul@multiplicand+1,c
  5153  0072A8  0E03               	movlw	3
  5154  0072AA  6E11               	movwf	___wmul@multiplicand,c
  5155  0072AC  EC4A  F02E         	call	___wmul	;wreg free
  5156  0072B0  0E44               	movlw	low __powers_
  5157  0072B2  240F               	addwf	?___wmul,w,c
  5158  0072B4  6EF6               	movwf	tblptrl,c
  5159  0072B6  0E7F               	movlw	high __powers_
  5160  0072B8  2010               	addwfc	?___wmul+1,w,c
  5161  0072BA  6EF7               	movwf	tblptrh,c
  5162  0072BC                     	if	0	;There are less than 3 active tblptr bytes
  5163  0072BC                     	endif
  5164  0072BC  0009               	tblrd		*+
  5165  0072BE  CFF5 F015          	movff	tablat,___ftmul@f1
  5166  0072C2  0009               	tblrd		*+
  5167  0072C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5168  0072C8  000A               	tblrd		*-
  5169  0072CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5170  0072CE  ECD2  F032         	call	___ftmul	;wreg free
  5171  0072D2  C015  F027         	movff	?___ftmul,_scale$1127
  5172  0072D6  C016  F028         	movff	?___ftmul+1,_scale$1127+1
  5173  0072DA  C017  F029         	movff	?___ftmul+2,_scale$1127+2
  5174                           
  5175                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5176  0072DE  C027  F015         	movff	_scale$1127,___ftmul@f1
  5177  0072E2  C028  F016         	movff	_scale$1127+1,___ftmul@f1+1
  5178  0072E6  C029  F017         	movff	_scale$1127+2,___ftmul@f1+2
  5179  0072EA  0E00               	movlw	0
  5180  0072EC  6E12               	movwf	___wmul@multiplicand+1,c
  5181  0072EE  0E03               	movlw	3
  5182  0072F0  6E11               	movwf	___wmul@multiplicand,c
  5183  0072F2  0E00               	movlw	0
  5184  0072F4  6E04               	movwf	___awmod@divisor+1,c
  5185  0072F6  0E0A               	movlw	10
  5186  0072F8  6E03               	movwf	___awmod@divisor,c
  5187  0072FA  502A               	movf	scale@scl,w,c
  5188  0072FC  6E01               	movwf	___awmod@dividend,c
  5189  0072FE  6A02               	clrf	___awmod@dividend+1,c
  5190  007300  BE01               	btfsc	___awmod@dividend,7,c
  5191  007302  0602               	decf	___awmod@dividend+1,f,c
  5192  007304  EC44  F030         	call	___awmod	;wreg free
  5193  007308  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5194  00730C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5195  007310  EC4A  F02E         	call	___wmul	;wreg free
  5196  007314  0E44               	movlw	low __powers_
  5197  007316  240F               	addwf	?___wmul,w,c
  5198  007318  6EF6               	movwf	tblptrl,c
  5199  00731A  0E7F               	movlw	high __powers_
  5200  00731C  2010               	addwfc	?___wmul+1,w,c
  5201  00731E  6EF7               	movwf	tblptrh,c
  5202  007320                     	if	0	;There are less than 3 active tblptr bytes
  5203  007320                     	endif
  5204  007320  0009               	tblrd		*+
  5205  007322  CFF5 F018          	movff	tablat,___ftmul@f2
  5206  007326  0009               	tblrd		*+
  5207  007328  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5208  00732C  000A               	tblrd		*-
  5209  00732E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5210  007332  ECD2  F032         	call	___ftmul	;wreg free
  5211  007336  C015  F024         	movff	?___ftmul,?_scale
  5212  00733A  C016  F025         	movff	?___ftmul+1,?_scale+1
  5213  00733E  C017  F026         	movff	?___ftmul+2,?_scale+2
  5214  007342  0012               	return	
  5215  007344                     l2523:
  5216                           
  5217                           ;doprnt.c: 438: else if(scl > 10)
  5218  007344  502A               	movf	scale@scl,w,c
  5219  007346  0A80               	xorlw	128
  5220  007348  0F75               	addlw	-139
  5221  00734A  A0D8               	btfss	status,0,c
  5222  00734C  D04D               	goto	l2529
  5223                           
  5224                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5225  00734E  0E00               	movlw	0
  5226  007350  6E0A               	movwf	___awdiv@divisor+1,c
  5227  007352  0E0A               	movlw	10
  5228  007354  6E09               	movwf	___awdiv@divisor,c
  5229  007356  502A               	movf	scale@scl,w,c
  5230  007358  6E07               	movwf	___awdiv@dividend,c
  5231  00735A  6A08               	clrf	___awdiv@dividend+1,c
  5232  00735C  BE07               	btfsc	___awdiv@dividend,7,c
  5233  00735E  0608               	decf	___awdiv@dividend+1,f,c
  5234  007360  ECBD  F030         	call	___awdiv	;wreg free
  5235  007364  0E09               	movlw	9
  5236  007366  2407               	addwf	?___awdiv,w,c
  5237  007368  6E0F               	movwf	___wmul@multiplier,c
  5238  00736A  0E00               	movlw	0
  5239  00736C  2008               	addwfc	?___awdiv+1,w,c
  5240  00736E  6E10               	movwf	___wmul@multiplier+1,c
  5241  007370  0E00               	movlw	0
  5242  007372  6E12               	movwf	___wmul@multiplicand+1,c
  5243  007374  0E03               	movlw	3
  5244  007376  6E11               	movwf	___wmul@multiplicand,c
  5245  007378  EC4A  F02E         	call	___wmul	;wreg free
  5246  00737C  0E44               	movlw	low __powers_
  5247  00737E  240F               	addwf	?___wmul,w,c
  5248  007380  6EF6               	movwf	tblptrl,c
  5249  007382  0E7F               	movlw	high __powers_
  5250  007384  2010               	addwfc	?___wmul+1,w,c
  5251  007386  6EF7               	movwf	tblptrh,c
  5252  007388                     	if	0	;There are less than 3 active tblptr bytes
  5253  007388                     	endif
  5254  007388  0009               	tblrd		*+
  5255  00738A  CFF5 F015          	movff	tablat,___ftmul@f1
  5256  00738E  0009               	tblrd		*+
  5257  007390  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5258  007394  000A               	tblrd		*-
  5259  007396  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5260  00739A  0E00               	movlw	0
  5261  00739C  6E12               	movwf	___wmul@multiplicand+1,c
  5262  00739E  0E03               	movlw	3
  5263  0073A0  6E11               	movwf	___wmul@multiplicand,c
  5264  0073A2  0E00               	movlw	0
  5265  0073A4  6E04               	movwf	___awmod@divisor+1,c
  5266  0073A6  0E0A               	movlw	10
  5267  0073A8  6E03               	movwf	___awmod@divisor,c
  5268  0073AA  502A               	movf	scale@scl,w,c
  5269  0073AC  6E01               	movwf	___awmod@dividend,c
  5270  0073AE  6A02               	clrf	___awmod@dividend+1,c
  5271  0073B0  BE01               	btfsc	___awmod@dividend,7,c
  5272  0073B2  0602               	decf	___awmod@dividend+1,f,c
  5273  0073B4  EC44  F030         	call	___awmod	;wreg free
  5274  0073B8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5275  0073BC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5276  0073C0  EC4A  F02E         	call	___wmul	;wreg free
  5277  0073C4  0E44               	movlw	low __powers_
  5278  0073C6  240F               	addwf	?___wmul,w,c
  5279  0073C8  6EF6               	movwf	tblptrl,c
  5280  0073CA  0E7F               	movlw	high __powers_
  5281  0073CC  2010               	addwfc	?___wmul+1,w,c
  5282  0073CE  6EF7               	movwf	tblptrh,c
  5283  0073D0                     	if	0	;There are less than 3 active tblptr bytes
  5284  0073D0                     	endif
  5285  0073D0  0009               	tblrd		*+
  5286  0073D2  CFF5 F018          	movff	tablat,___ftmul@f2
  5287  0073D6  0009               	tblrd		*+
  5288  0073D8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5289  0073DC  000A               	tblrd		*-
  5290  0073DE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5291  0073E2  ECD2  F032         	call	___ftmul	;wreg free
  5292  0073E6  D7A7               	goto	L6
  5293  0073E8                     l2529:
  5294                           
  5295                           ;doprnt.c: 440: return _powers_[scl];
  5296  0073E8  502A               	movf	scale@scl,w,c
  5297  0073EA  0D03               	mullw	3
  5298  0073EC  0E44               	movlw	low __powers_
  5299  0073EE  24F3               	addwf	prodl,w,c
  5300  0073F0  6EF6               	movwf	tblptrl,c
  5301  0073F2  0E7F               	movlw	high __powers_
  5302  0073F4  20F4               	addwfc	prodh,w,c
  5303  0073F6  6EF7               	movwf	tblptrh,c
  5304  0073F8                     	if	0	;There are less than 3 active tblptr bytes
  5305  0073F8                     	endif
  5306  0073F8  0009               	tblrd		*+
  5307  0073FA  CFF5 F024          	movff	tablat,?_scale
  5308  0073FE  0009               	tblrd		*+
  5309  007400  CFF5 F025          	movff	tablat,?_scale+1
  5310  007404  000A               	tblrd		*-
  5311  007406  CFF5 F026          	movff	tablat,?_scale+2
  5312  00740A  0012               	return	
  5313  00740C                     __end_of_scale:
  5314                           	opt stack 0
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           indf0	equ	0xFEF
  5322                           fsr0h	equ	0xFEA
  5323                           fsr0l	equ	0xFE9
  5324                           wreg	equ	0xFE8
  5325                           indf1	equ	0xFE7
  5326                           fsr1h	equ	0xFE2
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           postinc2	equ	0xFDE
  5330                           postdec2	equ	0xFDD
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _isdigit *****************
  5336 ;; Defined at:
  5337 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;  c               1    wreg     unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  c               1    2[COMRAM] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;		None               void
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5351 ;;      Params:         0       0       0       0       0       0       0
  5352 ;;      Locals:         2       0       0       0       0       0       0
  5353 ;;      Temps:          1       0       0       0       0       0       0
  5354 ;;      Totals:         3       0       0       0       0       0       0
  5355 ;;Total ram usage:        3 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; This function calls:
  5358 ;;		Nothing
  5359 ;; This function is called by:
  5360 ;;		_sprintf
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           	psect	text20
  5365  005C34                     __ptext20:
  5366                           	opt stack 0
  5367  005C34                     _isdigit:
  5368                           	opt stack 27
  5369                           
  5370                           ;incstack = 0
  5371                           ;isdigit@c stored from wreg
  5372  005C34  6E03               	movwf	isdigit@c,c
  5373  005C36  0E00               	movlw	0
  5374  005C38  6E02               	movwf	_isdigit$787,c
  5375  005C3A  0E3A               	movlw	58
  5376  005C3C  6003               	cpfslt	isdigit@c,c
  5377  005C3E  D005               	goto	l2541
  5378  005C40  0E2F               	movlw	47
  5379  005C42  6403               	cpfsgt	isdigit@c,c
  5380  005C44  D002               	goto	l2541
  5381  005C46  0E01               	movlw	1
  5382  005C48  6E02               	movwf	_isdigit$787,c
  5383  005C4A                     l2541:
  5384  005C4A  C002  F001         	movff	_isdigit$787,??_isdigit
  5385  005C4E  3001               	rrcf	??_isdigit,w,c
  5386  005C50  0012               	return	
  5387  005C52                     __end_of_isdigit:
  5388                           	opt stack 0
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           indf0	equ	0xFEF
  5396                           fsr0h	equ	0xFEA
  5397                           fsr0l	equ	0xFE9
  5398                           wreg	equ	0xFE8
  5399                           indf1	equ	0xFE7
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function _fround *****************
  5410 ;; Defined at:
  5411 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  prec            1    wreg     unsigned char 
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  prec            1   44[COMRAM] unsigned char 
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  3   35[COMRAM] unsigned char 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5425 ;;      Params:         3       0       0       0       0       0       0
  5426 ;;      Locals:         7       0       0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0
  5428 ;;      Totals:        10       0       0       0       0       0       0
  5429 ;;Total ram usage:       10 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    2
  5432 ;; This function calls:
  5433 ;;		___awdiv
  5434 ;;		___awmod
  5435 ;;		___ftmul
  5436 ;;		___wmul
  5437 ;; This function is called by:
  5438 ;;		_sprintf
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text21
  5443  006A9E                     __ptext21:
  5444                           	opt stack 0
  5445  006A9E                     _fround:
  5446                           	opt stack 25
  5447                           
  5448                           ;incstack = 0
  5449                           ;fround@prec stored from wreg
  5450  006A9E  6E2D               	movwf	fround@prec,c
  5451                           
  5452                           ;doprnt.c: 413: if(prec>=110)
  5453  006AA0  0E6D               	movlw	109
  5454  006AA2  642D               	cpfsgt	fround@prec,c
  5455  006AA4  D09F               	goto	l2483
  5456                           
  5457                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5458  006AA6  0E00               	movlw	0
  5459  006AA8  6E12               	movwf	___wmul@multiplicand+1,c
  5460  006AAA  0E03               	movlw	3
  5461  006AAC  6E11               	movwf	___wmul@multiplicand,c
  5462  006AAE  0E00               	movlw	0
  5463  006AB0  6E0A               	movwf	___awdiv@divisor+1,c
  5464  006AB2  0E0A               	movlw	10
  5465  006AB4  6E09               	movwf	___awdiv@divisor,c
  5466  006AB6  0E00               	movlw	0
  5467  006AB8  6E04               	movwf	___awmod@divisor+1,c
  5468  006ABA  0E64               	movlw	100
  5469  006ABC  6E03               	movwf	___awmod@divisor,c
  5470  006ABE  C02D  F001         	movff	fround@prec,___awmod@dividend
  5471  006AC2  6A02               	clrf	___awmod@dividend+1,c
  5472  006AC4  EC44  F030         	call	___awmod	;wreg free
  5473  006AC8  C001  F007         	movff	?___awmod,___awdiv@dividend
  5474  006ACC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5475  006AD0  ECBD  F030         	call	___awdiv	;wreg free
  5476  006AD4  0E09               	movlw	9
  5477  006AD6  2407               	addwf	?___awdiv,w,c
  5478  006AD8  6E0F               	movwf	___wmul@multiplier,c
  5479  006ADA  0E00               	movlw	0
  5480  006ADC  2008               	addwfc	?___awdiv+1,w,c
  5481  006ADE  6E10               	movwf	___wmul@multiplier+1,c
  5482  006AE0  EC4A  F02E         	call	___wmul	;wreg free
  5483  006AE4  0E1D               	movlw	low __npowers_
  5484  006AE6  240F               	addwf	?___wmul,w,c
  5485  006AE8  6EF6               	movwf	tblptrl,c
  5486  006AEA  0E7F               	movlw	high __npowers_
  5487  006AEC  2010               	addwfc	?___wmul+1,w,c
  5488  006AEE  6EF7               	movwf	tblptrh,c
  5489  006AF0                     	if	0	;There are less than 3 active tblptr bytes
  5490  006AF0                     	endif
  5491  006AF0  0009               	tblrd		*+
  5492  006AF2  CFF5 F018          	movff	tablat,___ftmul@f2
  5493  006AF6  0009               	tblrd		*+
  5494  006AF8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5495  006AFC  000A               	tblrd		*-
  5496  006AFE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5497  006B02  0E00               	movlw	0
  5498  006B04  6E0A               	movwf	___awdiv@divisor+1,c
  5499  006B06  0E64               	movlw	100
  5500  006B08  6E09               	movwf	___awdiv@divisor,c
  5501  006B0A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5502  006B0E  6A08               	clrf	___awdiv@dividend+1,c
  5503  006B10  ECBD  F030         	call	___awdiv	;wreg free
  5504  006B14  0E12               	movlw	18
  5505  006B16  2407               	addwf	?___awdiv,w,c
  5506  006B18  6E0F               	movwf	___wmul@multiplier,c
  5507  006B1A  0E00               	movlw	0
  5508  006B1C  2008               	addwfc	?___awdiv+1,w,c
  5509  006B1E  6E10               	movwf	___wmul@multiplier+1,c
  5510  006B20  0E00               	movlw	0
  5511  006B22  6E12               	movwf	___wmul@multiplicand+1,c
  5512  006B24  0E03               	movlw	3
  5513  006B26  6E11               	movwf	___wmul@multiplicand,c
  5514  006B28  EC4A  F02E         	call	___wmul	;wreg free
  5515  006B2C  0E1D               	movlw	low __npowers_
  5516  006B2E  240F               	addwf	?___wmul,w,c
  5517  006B30  6EF6               	movwf	tblptrl,c
  5518  006B32  0E7F               	movlw	high __npowers_
  5519  006B34  2010               	addwfc	?___wmul+1,w,c
  5520  006B36  6EF7               	movwf	tblptrh,c
  5521  006B38                     	if	0	;There are less than 3 active tblptr bytes
  5522  006B38                     	endif
  5523  006B38  0009               	tblrd		*+
  5524  006B3A  CFF5 F015          	movff	tablat,___ftmul@f1
  5525  006B3E  0009               	tblrd		*+
  5526  006B40  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5527  006B44  000A               	tblrd		*-
  5528  006B46  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5529  006B4A  ECD2  F032         	call	___ftmul	;wreg free
  5530  006B4E  C015  F02A         	movff	?___ftmul,_fround$1125
  5531  006B52  C016  F02B         	movff	?___ftmul+1,_fround$1125+1
  5532  006B56  C017  F02C         	movff	?___ftmul+2,_fround$1125+2
  5533                           
  5534                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5535  006B5A  0E00               	movlw	0
  5536  006B5C  6E12               	movwf	___wmul@multiplicand+1,c
  5537  006B5E  0E03               	movlw	3
  5538  006B60  6E11               	movwf	___wmul@multiplicand,c
  5539  006B62  0E00               	movlw	0
  5540  006B64  6E04               	movwf	___awmod@divisor+1,c
  5541  006B66  0E0A               	movlw	10
  5542  006B68  6E03               	movwf	___awmod@divisor,c
  5543  006B6A  C02D  F001         	movff	fround@prec,___awmod@dividend
  5544  006B6E  6A02               	clrf	___awmod@dividend+1,c
  5545  006B70  EC44  F030         	call	___awmod	;wreg free
  5546  006B74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5547  006B78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5548  006B7C  EC4A  F02E         	call	___wmul	;wreg free
  5549  006B80  0E1D               	movlw	low __npowers_
  5550  006B82  240F               	addwf	?___wmul,w,c
  5551  006B84  6EF6               	movwf	tblptrl,c
  5552  006B86  0E7F               	movlw	high __npowers_
  5553  006B88  2010               	addwfc	?___wmul+1,w,c
  5554  006B8A  6EF7               	movwf	tblptrh,c
  5555  006B8C                     	if	0	;There are less than 3 active tblptr bytes
  5556  006B8C                     	endif
  5557  006B8C  0009               	tblrd		*+
  5558  006B8E  CFF5 F018          	movff	tablat,___ftmul@f2
  5559  006B92  0009               	tblrd		*+
  5560  006B94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5561  006B98  000A               	tblrd		*-
  5562  006B9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5563  006B9E  C02A  F015         	movff	_fround$1125,___ftmul@f1
  5564  006BA2  C02B  F016         	movff	_fround$1125+1,___ftmul@f1+1
  5565  006BA6  C02C  F017         	movff	_fround$1125+2,___ftmul@f1+2
  5566  006BAA  ECD2  F032         	call	___ftmul	;wreg free
  5567  006BAE  C015  F027         	movff	?___ftmul,_fround$1126
  5568  006BB2  C016  F028         	movff	?___ftmul+1,_fround$1126+1
  5569  006BB6  C017  F029         	movff	?___ftmul+2,_fround$1126+2
  5570                           
  5571                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5572  006BBA  C027  F015         	movff	_fround$1126,___ftmul@f1
  5573  006BBE  C028  F016         	movff	_fround$1126+1,___ftmul@f1+1
  5574  006BC2  C029  F017         	movff	_fround$1126+2,___ftmul@f1+2
  5575  006BC6  0E00               	movlw	0
  5576  006BC8  6E18               	movwf	___ftmul@f2,c
  5577  006BCA  0E00               	movlw	0
  5578  006BCC  6E19               	movwf	___ftmul@f2+1,c
  5579  006BCE  0E3F               	movlw	63
  5580  006BD0  6E1A               	movwf	___ftmul@f2+2,c
  5581  006BD2  ECD2  F032         	call	___ftmul	;wreg free
  5582  006BD6  C015  F024         	movff	?___ftmul,?_fround
  5583  006BDA  C016  F025         	movff	?___ftmul+1,?_fround+1
  5584  006BDE  C017  F026         	movff	?___ftmul+2,?_fround+2
  5585  006BE2  0012               	return	
  5586  006BE4                     l2483:
  5587                           
  5588                           ;doprnt.c: 415: else if(prec > 10)
  5589  006BE4  0E0A               	movlw	10
  5590  006BE6  642D               	cpfsgt	fround@prec,c
  5591  006BE8  D05D               	goto	l2491
  5592                           
  5593                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5594  006BEA  0E00               	movlw	0
  5595  006BEC  6E12               	movwf	___wmul@multiplicand+1,c
  5596  006BEE  0E03               	movlw	3
  5597  006BF0  6E11               	movwf	___wmul@multiplicand,c
  5598  006BF2  0E00               	movlw	0
  5599  006BF4  6E04               	movwf	___awmod@divisor+1,c
  5600  006BF6  0E0A               	movlw	10
  5601  006BF8  6E03               	movwf	___awmod@divisor,c
  5602  006BFA  C02D  F001         	movff	fround@prec,___awmod@dividend
  5603  006BFE  6A02               	clrf	___awmod@dividend+1,c
  5604  006C00  EC44  F030         	call	___awmod	;wreg free
  5605  006C04  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5606  006C08  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5607  006C0C  EC4A  F02E         	call	___wmul	;wreg free
  5608  006C10  0E1D               	movlw	low __npowers_
  5609  006C12  240F               	addwf	?___wmul,w,c
  5610  006C14  6EF6               	movwf	tblptrl,c
  5611  006C16  0E7F               	movlw	high __npowers_
  5612  006C18  2010               	addwfc	?___wmul+1,w,c
  5613  006C1A  6EF7               	movwf	tblptrh,c
  5614  006C1C                     	if	0	;There are less than 3 active tblptr bytes
  5615  006C1C                     	endif
  5616  006C1C  0009               	tblrd		*+
  5617  006C1E  CFF5 F018          	movff	tablat,___ftmul@f2
  5618  006C22  0009               	tblrd		*+
  5619  006C24  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5620  006C28  000A               	tblrd		*-
  5621  006C2A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5622  006C2E  0E00               	movlw	0
  5623  006C30  6E0A               	movwf	___awdiv@divisor+1,c
  5624  006C32  0E0A               	movlw	10
  5625  006C34  6E09               	movwf	___awdiv@divisor,c
  5626  006C36  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5627  006C3A  6A08               	clrf	___awdiv@dividend+1,c
  5628  006C3C  ECBD  F030         	call	___awdiv	;wreg free
  5629  006C40  0E09               	movlw	9
  5630  006C42  2407               	addwf	?___awdiv,w,c
  5631  006C44  6E0F               	movwf	___wmul@multiplier,c
  5632  006C46  0E00               	movlw	0
  5633  006C48  2008               	addwfc	?___awdiv+1,w,c
  5634  006C4A  6E10               	movwf	___wmul@multiplier+1,c
  5635  006C4C  0E00               	movlw	0
  5636  006C4E  6E12               	movwf	___wmul@multiplicand+1,c
  5637  006C50  0E03               	movlw	3
  5638  006C52  6E11               	movwf	___wmul@multiplicand,c
  5639  006C54  EC4A  F02E         	call	___wmul	;wreg free
  5640  006C58  0E1D               	movlw	low __npowers_
  5641  006C5A  240F               	addwf	?___wmul,w,c
  5642  006C5C  6EF6               	movwf	tblptrl,c
  5643  006C5E  0E7F               	movlw	high __npowers_
  5644  006C60  2010               	addwfc	?___wmul+1,w,c
  5645  006C62  6EF7               	movwf	tblptrh,c
  5646  006C64                     	if	0	;There are less than 3 active tblptr bytes
  5647  006C64                     	endif
  5648  006C64  0009               	tblrd		*+
  5649  006C66  CFF5 F015          	movff	tablat,___ftmul@f1
  5650  006C6A  0009               	tblrd		*+
  5651  006C6C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5652  006C70  000A               	tblrd		*-
  5653  006C72  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5654  006C76  ECD2  F032         	call	___ftmul	;wreg free
  5655  006C7A  C015  F02A         	movff	?___ftmul,_fround$1125
  5656  006C7E  C016  F02B         	movff	?___ftmul+1,_fround$1125+1
  5657  006C82  C017  F02C         	movff	?___ftmul+2,_fround$1125+2
  5658                           
  5659                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5660  006C86  C02A  F015         	movff	_fround$1125,___ftmul@f1
  5661  006C8A  C02B  F016         	movff	_fround$1125+1,___ftmul@f1+1
  5662  006C8E  C02C  F017         	movff	_fround$1125+2,___ftmul@f1+2
  5663  006C92  0E00               	movlw	0
  5664  006C94  6E18               	movwf	___ftmul@f2,c
  5665  006C96  0E00               	movlw	0
  5666  006C98  6E19               	movwf	___ftmul@f2+1,c
  5667  006C9A  0E3F               	movlw	63
  5668  006C9C  6E1A               	movwf	___ftmul@f2+2,c
  5669  006C9E  ECD2  F032         	call	___ftmul	;wreg free
  5670  006CA2  D799               	goto	L7
  5671  006CA4                     l2491:
  5672                           
  5673                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5674  006CA4  502D               	movf	fround@prec,w,c
  5675  006CA6  0D03               	mullw	3
  5676  006CA8  0E1D               	movlw	low __npowers_
  5677  006CAA  24F3               	addwf	prodl,w,c
  5678  006CAC  6EF6               	movwf	tblptrl,c
  5679  006CAE  0E7F               	movlw	high __npowers_
  5680  006CB0  20F4               	addwfc	prodh,w,c
  5681  006CB2  6EF7               	movwf	tblptrh,c
  5682  006CB4                     	if	0	;There are less than 3 active tblptr bytes
  5683  006CB4                     	endif
  5684  006CB4  0009               	tblrd		*+
  5685  006CB6  CFF5 F015          	movff	tablat,___ftmul@f1
  5686  006CBA  0009               	tblrd		*+
  5687  006CBC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5688  006CC0  000A               	tblrd		*-
  5689  006CC2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5690  006CC6  0E00               	movlw	0
  5691  006CC8  6E18               	movwf	___ftmul@f2,c
  5692  006CCA  0E00               	movlw	0
  5693  006CCC  6E19               	movwf	___ftmul@f2+1,c
  5694  006CCE  0E3F               	movlw	63
  5695  006CD0  6E1A               	movwf	___ftmul@f2+2,c
  5696  006CD2  ECD2  F032         	call	___ftmul	;wreg free
  5697  006CD6  C015  F024         	movff	?___ftmul,?_fround
  5698  006CDA  C016  F025         	movff	?___ftmul+1,?_fround+1
  5699  006CDE  C017  F026         	movff	?___ftmul+2,?_fround+2
  5700  006CE2  0012               	return	
  5701  006CE4                     __end_of_fround:
  5702                           	opt stack 0
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           indf0	equ	0xFEF
  5710                           fsr0h	equ	0xFEA
  5711                           fsr0l	equ	0xFE9
  5712                           wreg	equ	0xFE8
  5713                           indf1	equ	0xFE7
  5714                           fsr1h	equ	0xFE2
  5715                           fsr1l	equ	0xFE1
  5716                           indf2	equ	0xFDF
  5717                           postinc2	equ	0xFDE
  5718                           postdec2	equ	0xFDD
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function ___wmul *****************
  5724 ;; Defined at:
  5725 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  multiplier      2   14[COMRAM] unsigned int 
  5728 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  product         2   18[COMRAM] unsigned int 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  2   14[COMRAM] unsigned int 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, prodl, prodh
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5740 ;;      Params:         4       0       0       0       0       0       0
  5741 ;;      Locals:         2       0       0       0       0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0
  5743 ;;      Totals:         6       0       0       0       0       0       0
  5744 ;;Total ram usage:        6 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; This function calls:
  5747 ;;		Nothing
  5748 ;; This function is called by:
  5749 ;;		_fround
  5750 ;;		_scale
  5751 ;;		_sprintf
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text22
  5756  005C94                     __ptext22:
  5757                           	opt stack 0
  5758  005C94                     ___wmul:
  5759                           	opt stack 26
  5760                           
  5761                           ;incstack = 0
  5762  005C94  500F               	movf	___wmul@multiplier,w,c
  5763  005C96  0211               	mulwf	___wmul@multiplicand,c
  5764  005C98  CFF3 F013          	movff	prodl,___wmul@product
  5765  005C9C  CFF4 F014          	movff	prodh,___wmul@product+1
  5766  005CA0  500F               	movf	___wmul@multiplier,w,c
  5767  005CA2  0212               	mulwf	___wmul@multiplicand+1,c
  5768  005CA4  50F3               	movf	prodl,w,c
  5769  005CA6  2614               	addwf	___wmul@product+1,f,c
  5770  005CA8  5010               	movf	___wmul@multiplier+1,w,c
  5771  005CAA  0211               	mulwf	___wmul@multiplicand,c
  5772  005CAC  50F3               	movf	prodl,w,c
  5773  005CAE  2614               	addwf	___wmul@product+1,f,c
  5774  005CB0  C013  F00F         	movff	___wmul@product,?___wmul
  5775  005CB4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5776  005CB8  0012               	return	
  5777  005CBA                     __end_of___wmul:
  5778                           	opt stack 0
  5779                           tblptru	equ	0xFF8
  5780                           tblptrh	equ	0xFF7
  5781                           tblptrl	equ	0xFF6
  5782                           tablat	equ	0xFF5
  5783                           prodh	equ	0xFF4
  5784                           prodl	equ	0xFF3
  5785                           indf0	equ	0xFEF
  5786                           fsr0h	equ	0xFEA
  5787                           fsr0l	equ	0xFE9
  5788                           wreg	equ	0xFE8
  5789                           indf1	equ	0xFE7
  5790                           fsr1h	equ	0xFE2
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function ___ftmul *****************
  5800 ;; Defined at:
  5801 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  f1              3   20[COMRAM] float 
  5804 ;;  f2              3   23[COMRAM] float 
  5805 ;; Auto vars:     Size  Location     Type
  5806 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5807 ;;  sign            1   34[COMRAM] unsigned char 
  5808 ;;  cntr            1   33[COMRAM] unsigned char 
  5809 ;;  exp             1   29[COMRAM] unsigned char 
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  3   20[COMRAM] float 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5819 ;;      Params:         6       0       0       0       0       0       0
  5820 ;;      Locals:         6       0       0       0       0       0       0
  5821 ;;      Temps:          3       0       0       0       0       0       0
  5822 ;;      Totals:        15       0       0       0       0       0       0
  5823 ;;Total ram usage:       15 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    1
  5826 ;; This function calls:
  5827 ;;		___ftpack
  5828 ;; This function is called by:
  5829 ;;		_fround
  5830 ;;		_scale
  5831 ;;		_sprintf
  5832 ;; This function uses a non-reentrant model
  5833 ;;
  5834                           
  5835                           	psect	text23
  5836  0065A4                     __ptext23:
  5837                           	opt stack 0
  5838  0065A4                     ___ftmul:
  5839                           	opt stack 25
  5840                           
  5841                           ;incstack = 0
  5842  0065A4  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5843  0065A8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5844  0065AA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5845  0065AC  3416               	rlcf	___ftmul@f1+1,w,c
  5846  0065AE  361B               	rlcf	??___ftmul& (0+255),f,c
  5847  0065B0  E301               	bnc	u2001
  5848  0065B2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5849  0065B4                     u2001:
  5850  0065B4  501B               	movf	??___ftmul,w,c
  5851  0065B6  6E1E               	movwf	___ftmul@exp,c
  5852  0065B8  501E               	movf	___ftmul@exp,w,c
  5853  0065BA  A4D8               	btfss	status,2,c
  5854  0065BC  D007               	goto	l2331
  5855  0065BE  0E00               	movlw	0
  5856  0065C0  6E15               	movwf	?___ftmul,c
  5857  0065C2  0E00               	movlw	0
  5858  0065C4  6E16               	movwf	?___ftmul+1,c
  5859  0065C6  0E00               	movlw	0
  5860  0065C8  6E17               	movwf	?___ftmul+2,c
  5861  0065CA  0012               	return	
  5862  0065CC                     l2331:
  5863  0065CC  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5864  0065D0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5865  0065D2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5866  0065D4  3419               	rlcf	___ftmul@f2+1,w,c
  5867  0065D6  361B               	rlcf	??___ftmul& (0+255),f,c
  5868  0065D8  E301               	bnc	u2021
  5869  0065DA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5870  0065DC                     u2021:
  5871  0065DC  501B               	movf	??___ftmul,w,c
  5872  0065DE  6E23               	movwf	___ftmul@sign,c
  5873  0065E0  5023               	movf	___ftmul@sign,w,c
  5874  0065E2  A4D8               	btfss	status,2,c
  5875  0065E4  D007               	goto	l2337
  5876  0065E6  0E00               	movlw	0
  5877  0065E8  6E15               	movwf	?___ftmul,c
  5878  0065EA  0E00               	movlw	0
  5879  0065EC  6E16               	movwf	?___ftmul+1,c
  5880  0065EE  0E00               	movlw	0
  5881  0065F0  6E17               	movwf	?___ftmul+2,c
  5882  0065F2  0012               	return	
  5883  0065F4                     l2337:
  5884  0065F4  5023               	movf	___ftmul@sign,w,c
  5885  0065F6  0F7B               	addlw	123
  5886  0065F8  261E               	addwf	___ftmul@exp,f,c
  5887  0065FA  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5888  0065FE  501A               	movf	___ftmul@f2+2,w,c
  5889  006600  1A23               	xorwf	___ftmul@sign,f,c
  5890  006602  0E80               	movlw	128
  5891  006604  1623               	andwf	___ftmul@sign,f,c
  5892  006606  8E16               	bsf	___ftmul@f1+1,7,c
  5893  006608  8E19               	bsf	___ftmul@f2+1,7,c
  5894  00660A  0EFF               	movlw	255
  5895  00660C  1618               	andwf	___ftmul@f2,f,c
  5896  00660E  0EFF               	movlw	255
  5897  006610  1619               	andwf	___ftmul@f2+1,f,c
  5898  006612  0E00               	movlw	0
  5899  006614  161A               	andwf	___ftmul@f2+2,f,c
  5900  006616  0E00               	movlw	0
  5901  006618  6E1F               	movwf	___ftmul@f3_as_product,c
  5902  00661A  0E00               	movlw	0
  5903  00661C  6E20               	movwf	___ftmul@f3_as_product+1,c
  5904  00661E  0E00               	movlw	0
  5905  006620  6E21               	movwf	___ftmul@f3_as_product+2,c
  5906  006622  0E07               	movlw	7
  5907  006624  6E22               	movwf	___ftmul@cntr,c
  5908  006626                     l2351:
  5909  006626  A015               	btfss	___ftmul@f1,0,c
  5910  006628  D006               	goto	l2355
  5911  00662A  5018               	movf	___ftmul@f2,w,c
  5912  00662C  261F               	addwf	___ftmul@f3_as_product,f,c
  5913  00662E  5019               	movf	___ftmul@f2+1,w,c
  5914  006630  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5915  006632  501A               	movf	___ftmul@f2+2,w,c
  5916  006634  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5917  006636                     l2355:
  5918  006636  90D8               	bcf	status,0,c
  5919  006638  3217               	rrcf	___ftmul@f1+2,f,c
  5920  00663A  3216               	rrcf	___ftmul@f1+1,f,c
  5921  00663C  3215               	rrcf	___ftmul@f1,f,c
  5922  00663E  90D8               	bcf	status,0,c
  5923  006640  3618               	rlcf	___ftmul@f2,f,c
  5924  006642  3619               	rlcf	___ftmul@f2+1,f,c
  5925  006644  361A               	rlcf	___ftmul@f2+2,f,c
  5926  006646  2E22               	decfsz	___ftmul@cntr,f,c
  5927  006648  D7EE               	goto	l2351
  5928  00664A  0E09               	movlw	9
  5929  00664C  6E22               	movwf	___ftmul@cntr,c
  5930  00664E                     l2361:
  5931  00664E  A015               	btfss	___ftmul@f1,0,c
  5932  006650  D006               	goto	l2365
  5933  006652  5018               	movf	___ftmul@f2,w,c
  5934  006654  261F               	addwf	___ftmul@f3_as_product,f,c
  5935  006656  5019               	movf	___ftmul@f2+1,w,c
  5936  006658  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5937  00665A  501A               	movf	___ftmul@f2+2,w,c
  5938  00665C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5939  00665E                     l2365:
  5940  00665E  90D8               	bcf	status,0,c
  5941  006660  3217               	rrcf	___ftmul@f1+2,f,c
  5942  006662  3216               	rrcf	___ftmul@f1+1,f,c
  5943  006664  3215               	rrcf	___ftmul@f1,f,c
  5944  006666  90D8               	bcf	status,0,c
  5945  006668  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  5946  00666A  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  5947  00666C  321F               	rrcf	___ftmul@f3_as_product,f,c
  5948  00666E  2E22               	decfsz	___ftmul@cntr,f,c
  5949  006670  D7EE               	goto	l2361
  5950  006672  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5951  006676  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5952  00667A  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5953  00667E  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  5954  006682  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  5955  006686  EC90  F031         	call	___ftpack	;wreg free
  5956  00668A  C001  F015         	movff	?___ftpack,?___ftmul
  5957  00668E  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  5958  006692  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  5959  006696  0012               	return	
  5960  006698                     __end_of___ftmul:
  5961                           	opt stack 0
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           indf0	equ	0xFEF
  5969                           fsr0h	equ	0xFEA
  5970                           fsr0l	equ	0xFE9
  5971                           wreg	equ	0xFE8
  5972                           indf1	equ	0xFE7
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           indf2	equ	0xFDF
  5976                           postinc2	equ	0xFDE
  5977                           postdec2	equ	0xFDD
  5978                           fsr2h	equ	0xFDA
  5979                           fsr2l	equ	0xFD9
  5980                           status	equ	0xFD8
  5981                           
  5982 ;; *************** function ___awmod *****************
  5983 ;; Defined at:
  5984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  dividend        2    0[COMRAM] int 
  5987 ;;  divisor         2    2[COMRAM] int 
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  sign            1    5[COMRAM] unsigned char 
  5990 ;;  counter         1    4[COMRAM] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  2    0[COMRAM] int 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6000 ;;      Params:         4       0       0       0       0       0       0
  6001 ;;      Locals:         2       0       0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0
  6003 ;;      Totals:         6       0       0       0       0       0       0
  6004 ;;Total ram usage:        6 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; This function calls:
  6007 ;;		Nothing
  6008 ;; This function is called by:
  6009 ;;		_fround
  6010 ;;		_scale
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text24
  6015  006088                     __ptext24:
  6016                           	opt stack 0
  6017  006088                     ___awmod:
  6018                           	opt stack 26
  6019                           
  6020                           ;incstack = 0
  6021  006088  0E00               	movlw	0
  6022  00608A  6E06               	movwf	___awmod@sign,c
  6023  00608C  AE02               	btfss	___awmod@dividend+1,7,c
  6024  00608E  D006               	goto	l2425
  6025  006090  6C01               	negf	___awmod@dividend,c
  6026  006092  1E02               	comf	___awmod@dividend+1,f,c
  6027  006094  B0D8               	btfsc	status,0,c
  6028  006096  2A02               	incf	___awmod@dividend+1,f,c
  6029  006098  0E01               	movlw	1
  6030  00609A  6E06               	movwf	___awmod@sign,c
  6031  00609C                     l2425:
  6032  00609C  AE04               	btfss	___awmod@divisor+1,7,c
  6033  00609E  D004               	goto	l2429
  6034  0060A0  6C03               	negf	___awmod@divisor,c
  6035  0060A2  1E04               	comf	___awmod@divisor+1,f,c
  6036  0060A4  B0D8               	btfsc	status,0,c
  6037  0060A6  2A04               	incf	___awmod@divisor+1,f,c
  6038  0060A8                     l2429:
  6039  0060A8  5003               	movf	___awmod@divisor,w,c
  6040  0060AA  1004               	iorwf	___awmod@divisor+1,w,c
  6041  0060AC  B4D8               	btfsc	status,2,c
  6042  0060AE  D018               	goto	l2445
  6043  0060B0  0E01               	movlw	1
  6044  0060B2  6E05               	movwf	___awmod@counter,c
  6045  0060B4  D004               	goto	l2435
  6046  0060B6                     l2433:
  6047  0060B6  90D8               	bcf	status,0,c
  6048  0060B8  3603               	rlcf	___awmod@divisor,f,c
  6049  0060BA  3604               	rlcf	___awmod@divisor+1,f,c
  6050  0060BC  2A05               	incf	___awmod@counter,f,c
  6051  0060BE                     l2435:
  6052  0060BE  AE04               	btfss	___awmod@divisor+1,7,c
  6053  0060C0  D7FA               	goto	l2433
  6054  0060C2                     l2437:
  6055  0060C2  5003               	movf	___awmod@divisor,w,c
  6056  0060C4  5C01               	subwf	___awmod@dividend,w,c
  6057  0060C6  5004               	movf	___awmod@divisor+1,w,c
  6058  0060C8  5802               	subwfb	___awmod@dividend+1,w,c
  6059  0060CA  A0D8               	btfss	status,0,c
  6060  0060CC  D004               	goto	l2441
  6061  0060CE  5003               	movf	___awmod@divisor,w,c
  6062  0060D0  5E01               	subwf	___awmod@dividend,f,c
  6063  0060D2  5004               	movf	___awmod@divisor+1,w,c
  6064  0060D4  5A02               	subwfb	___awmod@dividend+1,f,c
  6065  0060D6                     l2441:
  6066  0060D6  90D8               	bcf	status,0,c
  6067  0060D8  3204               	rrcf	___awmod@divisor+1,f,c
  6068  0060DA  3203               	rrcf	___awmod@divisor,f,c
  6069  0060DC  2E05               	decfsz	___awmod@counter,f,c
  6070  0060DE  D7F1               	goto	l2437
  6071  0060E0                     l2445:
  6072  0060E0  5006               	movf	___awmod@sign,w,c
  6073  0060E2  B4D8               	btfsc	status,2,c
  6074  0060E4  D004               	goto	l2449
  6075  0060E6  6C01               	negf	___awmod@dividend,c
  6076  0060E8  1E02               	comf	___awmod@dividend+1,f,c
  6077  0060EA  B0D8               	btfsc	status,0,c
  6078  0060EC  2A02               	incf	___awmod@dividend+1,f,c
  6079  0060EE                     l2449:
  6080  0060EE  C001  F001         	movff	___awmod@dividend,?___awmod
  6081  0060F2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  6082  0060F6  0012               	return	
  6083  0060F8                     __end_of___awmod:
  6084                           	opt stack 0
  6085                           tblptru	equ	0xFF8
  6086                           tblptrh	equ	0xFF7
  6087                           tblptrl	equ	0xFF6
  6088                           tablat	equ	0xFF5
  6089                           prodh	equ	0xFF4
  6090                           prodl	equ	0xFF3
  6091                           indf0	equ	0xFEF
  6092                           fsr0h	equ	0xFEA
  6093                           fsr0l	equ	0xFE9
  6094                           wreg	equ	0xFE8
  6095                           indf1	equ	0xFE7
  6096                           fsr1h	equ	0xFE2
  6097                           fsr1l	equ	0xFE1
  6098                           indf2	equ	0xFDF
  6099                           postinc2	equ	0xFDE
  6100                           postdec2	equ	0xFDD
  6101                           fsr2h	equ	0xFDA
  6102                           fsr2l	equ	0xFD9
  6103                           status	equ	0xFD8
  6104                           
  6105 ;; *************** function ___awdiv *****************
  6106 ;; Defined at:
  6107 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  dividend        2    6[COMRAM] int 
  6110 ;;  divisor         2    8[COMRAM] int 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  quotient        2   12[COMRAM] int 
  6113 ;;  sign            1   11[COMRAM] unsigned char 
  6114 ;;  counter         1   10[COMRAM] unsigned char 
  6115 ;; Return value:  Size  Location     Type
  6116 ;;                  2    6[COMRAM] int 
  6117 ;; Registers used:
  6118 ;;		wreg, status,2, status,0
  6119 ;; Tracked objects:
  6120 ;;		On entry : 0/0
  6121 ;;		On exit  : 0/0
  6122 ;;		Unchanged: 0/0
  6123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6124 ;;      Params:         4       0       0       0       0       0       0
  6125 ;;      Locals:         4       0       0       0       0       0       0
  6126 ;;      Temps:          0       0       0       0       0       0       0
  6127 ;;      Totals:         8       0       0       0       0       0       0
  6128 ;;Total ram usage:        8 bytes
  6129 ;; Hardware stack levels used:    1
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_fround
  6134 ;;		_scale
  6135 ;;		_sprintf
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text25
  6140  00617A                     __ptext25:
  6141                           	opt stack 0
  6142  00617A                     ___awdiv:
  6143                           	opt stack 26
  6144                           
  6145                           ;incstack = 0
  6146  00617A  0E00               	movlw	0
  6147  00617C  6E0C               	movwf	___awdiv@sign,c
  6148  00617E  AE0A               	btfss	___awdiv@divisor+1,7,c
  6149  006180  D006               	goto	l2381
  6150  006182  6C09               	negf	___awdiv@divisor,c
  6151  006184  1E0A               	comf	___awdiv@divisor+1,f,c
  6152  006186  B0D8               	btfsc	status,0,c
  6153  006188  2A0A               	incf	___awdiv@divisor+1,f,c
  6154  00618A  0E01               	movlw	1
  6155  00618C  6E0C               	movwf	___awdiv@sign,c
  6156  00618E                     l2381:
  6157  00618E  AE08               	btfss	___awdiv@dividend+1,7,c
  6158  006190  D006               	goto	l2387
  6159  006192  6C07               	negf	___awdiv@dividend,c
  6160  006194  1E08               	comf	___awdiv@dividend+1,f,c
  6161  006196  B0D8               	btfsc	status,0,c
  6162  006198  2A08               	incf	___awdiv@dividend+1,f,c
  6163  00619A  0E01               	movlw	1
  6164  00619C  1A0C               	xorwf	___awdiv@sign,f,c
  6165  00619E                     l2387:
  6166  00619E  0E00               	movlw	0
  6167  0061A0  6E0E               	movwf	___awdiv@quotient+1,c
  6168  0061A2  0E00               	movlw	0
  6169  0061A4  6E0D               	movwf	___awdiv@quotient,c
  6170  0061A6  5009               	movf	___awdiv@divisor,w,c
  6171  0061A8  100A               	iorwf	___awdiv@divisor+1,w,c
  6172  0061AA  B4D8               	btfsc	status,2,c
  6173  0061AC  D01C               	goto	l2409
  6174  0061AE  0E01               	movlw	1
  6175  0061B0  6E0B               	movwf	___awdiv@counter,c
  6176  0061B2  D004               	goto	l2395
  6177  0061B4                     l2393:
  6178  0061B4  90D8               	bcf	status,0,c
  6179  0061B6  3609               	rlcf	___awdiv@divisor,f,c
  6180  0061B8  360A               	rlcf	___awdiv@divisor+1,f,c
  6181  0061BA  2A0B               	incf	___awdiv@counter,f,c
  6182  0061BC                     l2395:
  6183  0061BC  AE0A               	btfss	___awdiv@divisor+1,7,c
  6184  0061BE  D7FA               	goto	l2393
  6185  0061C0                     l2397:
  6186  0061C0  90D8               	bcf	status,0,c
  6187  0061C2  360D               	rlcf	___awdiv@quotient,f,c
  6188  0061C4  360E               	rlcf	___awdiv@quotient+1,f,c
  6189  0061C6  5009               	movf	___awdiv@divisor,w,c
  6190  0061C8  5C07               	subwf	___awdiv@dividend,w,c
  6191  0061CA  500A               	movf	___awdiv@divisor+1,w,c
  6192  0061CC  5808               	subwfb	___awdiv@dividend+1,w,c
  6193  0061CE  A0D8               	btfss	status,0,c
  6194  0061D0  D005               	goto	l2405
  6195  0061D2  5009               	movf	___awdiv@divisor,w,c
  6196  0061D4  5E07               	subwf	___awdiv@dividend,f,c
  6197  0061D6  500A               	movf	___awdiv@divisor+1,w,c
  6198  0061D8  5A08               	subwfb	___awdiv@dividend+1,f,c
  6199  0061DA  800D               	bsf	___awdiv@quotient,0,c
  6200  0061DC                     l2405:
  6201  0061DC  90D8               	bcf	status,0,c
  6202  0061DE  320A               	rrcf	___awdiv@divisor+1,f,c
  6203  0061E0  3209               	rrcf	___awdiv@divisor,f,c
  6204  0061E2  2E0B               	decfsz	___awdiv@counter,f,c
  6205  0061E4  D7ED               	goto	l2397
  6206  0061E6                     l2409:
  6207  0061E6  500C               	movf	___awdiv@sign,w,c
  6208  0061E8  B4D8               	btfsc	status,2,c
  6209  0061EA  D004               	goto	l2413
  6210  0061EC  6C0D               	negf	___awdiv@quotient,c
  6211  0061EE  1E0E               	comf	___awdiv@quotient+1,f,c
  6212  0061F0  B0D8               	btfsc	status,0,c
  6213  0061F2  2A0E               	incf	___awdiv@quotient+1,f,c
  6214  0061F4                     l2413:
  6215  0061F4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  6216  0061F8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  6217  0061FC  0012               	return	
  6218  0061FE                     __end_of___awdiv:
  6219                           	opt stack 0
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           indf0	equ	0xFEF
  6227                           fsr0h	equ	0xFEA
  6228                           fsr0l	equ	0xFE9
  6229                           wreg	equ	0xFE8
  6230                           indf1	equ	0xFE7
  6231                           fsr1h	equ	0xFE2
  6232                           fsr1l	equ	0xFE1
  6233                           indf2	equ	0xFDF
  6234                           postinc2	equ	0xFDE
  6235                           postdec2	equ	0xFDD
  6236                           fsr2h	equ	0xFDA
  6237                           fsr2l	equ	0xFD9
  6238                           status	equ	0xFD8
  6239                           
  6240 ;; *************** function __tdiv_to_l_ *****************
  6241 ;; Defined at:
  6242 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  6243 ;; Parameters:    Size  Location     Type
  6244 ;;  f1              3    0[COMRAM] float 
  6245 ;;  f2              3    3[COMRAM] float 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  quot            4    9[COMRAM] unsigned long 
  6248 ;;  exp1            1   14[COMRAM] unsigned char 
  6249 ;;  cntr            1   13[COMRAM] unsigned char 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  4    0[COMRAM] unsigned long 
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6259 ;;      Params:         6       0       0       0       0       0       0
  6260 ;;      Locals:         6       0       0       0       0       0       0
  6261 ;;      Temps:          3       0       0       0       0       0       0
  6262 ;;      Totals:        15       0       0       0       0       0       0
  6263 ;;Total ram usage:       15 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; This function calls:
  6266 ;;		Nothing
  6267 ;; This function is called by:
  6268 ;;		_sprintf
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text26
  6273  0067C0                     __ptext26:
  6274                           	opt stack 0
  6275  0067C0                     __tdiv_to_l_:
  6276                           	opt stack 27
  6277                           
  6278                           ;incstack = 0
  6279  0067C0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6280  0067C4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6281  0067C6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6282  0067C8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  6283  0067CA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6284  0067CC  E301               	bnc	u2281
  6285  0067CE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6286  0067D0                     u2281:
  6287  0067D0  5007               	movf	??__tdiv_to_l_,w,c
  6288  0067D2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  6289  0067D4  500F               	movf	__tdiv_to_l_@exp1,w,c
  6290  0067D6  A4D8               	btfss	status,2,c
  6291  0067D8  D009               	goto	l2551
  6292  0067DA  0E00               	movlw	0
  6293  0067DC  6E01               	movwf	?__tdiv_to_l_,c
  6294  0067DE  0E00               	movlw	0
  6295  0067E0  6E02               	movwf	?__tdiv_to_l_+1,c
  6296  0067E2  0E00               	movlw	0
  6297  0067E4  6E03               	movwf	?__tdiv_to_l_+2,c
  6298  0067E6  0E00               	movlw	0
  6299  0067E8  6E04               	movwf	?__tdiv_to_l_+3,c
  6300  0067EA  0012               	return	
  6301  0067EC                     l2551:
  6302  0067EC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6303  0067F0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6304  0067F2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6305  0067F4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  6306  0067F6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6307  0067F8  E301               	bnc	u2301
  6308  0067FA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6309  0067FC                     u2301:
  6310  0067FC  5007               	movf	??__tdiv_to_l_,w,c
  6311  0067FE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6312  006800  500E               	movf	__tdiv_to_l_@cntr,w,c
  6313  006802  A4D8               	btfss	status,2,c
  6314  006804  D009               	goto	l2557
  6315  006806  0E00               	movlw	0
  6316  006808  6E01               	movwf	?__tdiv_to_l_,c
  6317  00680A  0E00               	movlw	0
  6318  00680C  6E02               	movwf	?__tdiv_to_l_+1,c
  6319  00680E  0E00               	movlw	0
  6320  006810  6E03               	movwf	?__tdiv_to_l_+2,c
  6321  006812  0E00               	movlw	0
  6322  006814  6E04               	movwf	?__tdiv_to_l_+3,c
  6323  006816  0012               	return	
  6324  006818                     l2557:
  6325  006818  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  6326  00681A  0EFF               	movlw	255
  6327  00681C  1601               	andwf	__tdiv_to_l_@f1,f,c
  6328  00681E  0EFF               	movlw	255
  6329  006820  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  6330  006822  0E00               	movlw	0
  6331  006824  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  6332  006826  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  6333  006828  0EFF               	movlw	255
  6334  00682A  1604               	andwf	__tdiv_to_l_@f2,f,c
  6335  00682C  0EFF               	movlw	255
  6336  00682E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  6337  006830  0E00               	movlw	0
  6338  006832  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  6339  006834  0E00               	movlw	0
  6340  006836  6E0A               	movwf	__tdiv_to_l_@quot,c
  6341  006838  0E00               	movlw	0
  6342  00683A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  6343  00683C  0E00               	movlw	0
  6344  00683E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  6345  006840  0E00               	movlw	0
  6346  006842  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  6347  006844  0E7F               	movlw	127
  6348  006846  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6349  006848  500E               	movf	__tdiv_to_l_@cntr,w,c
  6350  00684A  0F98               	addlw	152
  6351  00684C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6352  00684E  0E18               	movlw	24
  6353  006850  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6354  006852                     l634:
  6355  006852  90D8               	bcf	status,0,c
  6356  006854  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6357  006856  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6358  006858  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6359  00685A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6360  00685C  5004               	movf	__tdiv_to_l_@f2,w,c
  6361  00685E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  6362  006860  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6363  006862  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  6364  006864  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6365  006866  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  6366  006868  A0D8               	btfss	status,0,c
  6367  00686A  D007               	goto	l635
  6368  00686C  5004               	movf	__tdiv_to_l_@f2,w,c
  6369  00686E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  6370  006870  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6371  006872  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  6372  006874  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6373  006876  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  6374  006878  800A               	bsf	__tdiv_to_l_@quot,0,c
  6375  00687A                     l635:
  6376  00687A  90D8               	bcf	status,0,c
  6377  00687C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  6378  00687E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  6379  006880  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  6380  006882  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  6381  006884  D7E6               	goto	l634
  6382  006886  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  6383  006888  D016               	goto	l2591
  6384  00688A  500F               	movf	__tdiv_to_l_@exp1,w,c
  6385  00688C  0A80               	xorlw	128
  6386  00688E  0F97               	addlw	151
  6387  006890  B0D8               	btfsc	status,0,c
  6388  006892  D009               	goto	l2587
  6389  006894  0E00               	movlw	0
  6390  006896  6E01               	movwf	?__tdiv_to_l_,c
  6391  006898  0E00               	movlw	0
  6392  00689A  6E02               	movwf	?__tdiv_to_l_+1,c
  6393  00689C  0E00               	movlw	0
  6394  00689E  6E03               	movwf	?__tdiv_to_l_+2,c
  6395  0068A0  0E00               	movlw	0
  6396  0068A2  6E04               	movwf	?__tdiv_to_l_+3,c
  6397  0068A4  0012               	return	
  6398  0068A6                     l2587:
  6399  0068A6  90D8               	bcf	status,0,c
  6400  0068A8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  6401  0068AA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  6402  0068AC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  6403  0068AE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  6404  0068B0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  6405  0068B2  D7F9               	goto	l2587
  6406  0068B4  D015               	goto	l641
  6407  0068B6                     l2591:
  6408  0068B6  0E17               	movlw	23
  6409  0068B8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  6410  0068BA  D00F               	goto	l2599
  6411  0068BC  0E00               	movlw	0
  6412  0068BE  6E01               	movwf	?__tdiv_to_l_,c
  6413  0068C0  0E00               	movlw	0
  6414  0068C2  6E02               	movwf	?__tdiv_to_l_+1,c
  6415  0068C4  0E00               	movlw	0
  6416  0068C6  6E03               	movwf	?__tdiv_to_l_+2,c
  6417  0068C8  0E00               	movlw	0
  6418  0068CA  6E04               	movwf	?__tdiv_to_l_+3,c
  6419  0068CC  0012               	return	
  6420  0068CE                     l2597:
  6421  0068CE  90D8               	bcf	status,0,c
  6422  0068D0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6423  0068D2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6424  0068D4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6425  0068D6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6426  0068D8  060F               	decf	__tdiv_to_l_@exp1,f,c
  6427  0068DA                     l2599:
  6428  0068DA  500F               	movf	__tdiv_to_l_@exp1,w,c
  6429  0068DC  A4D8               	btfss	status,2,c
  6430  0068DE  D7F7               	goto	l2597
  6431  0068E0                     l641:
  6432  0068E0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6433  0068E4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6434  0068E8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6435  0068EC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6436  0068F0  0012               	return		;funcret
  6437  0068F2                     __end_of__tdiv_to_l_:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           indf0	equ	0xFEF
  6446                           fsr0h	equ	0xFEA
  6447                           fsr0l	equ	0xFE9
  6448                           wreg	equ	0xFE8
  6449                           indf1	equ	0xFE7
  6450                           fsr1h	equ	0xFE2
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function __div_to_l_ *****************
  6460 ;; Defined at:
  6461 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  f1              3    0[COMRAM] unsigned long 
  6464 ;;  f2              3    3[COMRAM] unsigned long 
  6465 ;; Auto vars:     Size  Location     Type
  6466 ;;  quot            4    6[COMRAM] unsigned long 
  6467 ;;  exp1            1   11[COMRAM] unsigned char 
  6468 ;;  cntr            1   10[COMRAM] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  4    0[COMRAM] unsigned long 
  6471 ;; Registers used:
  6472 ;;		wreg, status,2, status,0
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6478 ;;      Params:         6       0       0       0       0       0       0
  6479 ;;      Locals:         6       0       0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0
  6481 ;;      Totals:        12       0       0       0       0       0       0
  6482 ;;Total ram usage:       12 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; This function calls:
  6485 ;;		Nothing
  6486 ;; This function is called by:
  6487 ;;		_sprintf
  6488 ;; This function uses a non-reentrant model
  6489 ;;
  6490                           
  6491                           	psect	text27
  6492  006698                     __ptext27:
  6493                           	opt stack 0
  6494  006698                     __div_to_l_:
  6495                           	opt stack 27
  6496                           
  6497                           ;incstack = 0
  6498  006698  3403               	rlcf	__div_to_l_@f1+2,w,c
  6499  00669A  3404               	rlcf	__div_to_l_@f1+3,w,c
  6500  00669C  6E0C               	movwf	__div_to_l_@exp1,c
  6501  00669E  500C               	movf	__div_to_l_@exp1,w,c
  6502  0066A0  A4D8               	btfss	status,2,c
  6503  0066A2  D009               	goto	l2607
  6504  0066A4  0E00               	movlw	0
  6505  0066A6  6E01               	movwf	?__div_to_l_,c
  6506  0066A8  0E00               	movlw	0
  6507  0066AA  6E02               	movwf	?__div_to_l_+1,c
  6508  0066AC  0E00               	movlw	0
  6509  0066AE  6E03               	movwf	?__div_to_l_+2,c
  6510  0066B0  0E00               	movlw	0
  6511  0066B2  6E04               	movwf	?__div_to_l_+3,c
  6512  0066B4  0012               	return	
  6513  0066B6                     l2607:
  6514  0066B6  3406               	rlcf	__div_to_l_@f2+2,w,c
  6515  0066B8  3407               	rlcf	__div_to_l_@f2+3,w,c
  6516  0066BA  6E0B               	movwf	__div_to_l_@cntr,c
  6517  0066BC  500B               	movf	__div_to_l_@cntr,w,c
  6518  0066BE  A4D8               	btfss	status,2,c
  6519  0066C0  D009               	goto	l2613
  6520  0066C2  0E00               	movlw	0
  6521  0066C4  6E01               	movwf	?__div_to_l_,c
  6522  0066C6  0E00               	movlw	0
  6523  0066C8  6E02               	movwf	?__div_to_l_+1,c
  6524  0066CA  0E00               	movlw	0
  6525  0066CC  6E03               	movwf	?__div_to_l_+2,c
  6526  0066CE  0E00               	movlw	0
  6527  0066D0  6E04               	movwf	?__div_to_l_+3,c
  6528  0066D2  0012               	return	
  6529  0066D4                     l2613:
  6530  0066D4  8E03               	bsf	__div_to_l_@f1+2,7,c
  6531  0066D6  0EFF               	movlw	255
  6532  0066D8  1601               	andwf	__div_to_l_@f1,f,c
  6533  0066DA  0EFF               	movlw	255
  6534  0066DC  1602               	andwf	__div_to_l_@f1+1,f,c
  6535  0066DE  0EFF               	movlw	255
  6536  0066E0  1603               	andwf	__div_to_l_@f1+2,f,c
  6537  0066E2  0E00               	movlw	0
  6538  0066E4  1604               	andwf	__div_to_l_@f1+3,f,c
  6539  0066E6  8E06               	bsf	__div_to_l_@f2+2,7,c
  6540  0066E8  0EFF               	movlw	255
  6541  0066EA  1604               	andwf	__div_to_l_@f2,f,c
  6542  0066EC  0EFF               	movlw	255
  6543  0066EE  1605               	andwf	__div_to_l_@f2+1,f,c
  6544  0066F0  0EFF               	movlw	255
  6545  0066F2  1606               	andwf	__div_to_l_@f2+2,f,c
  6546  0066F4  0E00               	movlw	0
  6547  0066F6  1607               	andwf	__div_to_l_@f2+3,f,c
  6548  0066F8  0E00               	movlw	0
  6549  0066FA  6E07               	movwf	__div_to_l_@quot,c
  6550  0066FC  0E00               	movlw	0
  6551  0066FE  6E08               	movwf	__div_to_l_@quot+1,c
  6552  006700  0E00               	movlw	0
  6553  006702  6E09               	movwf	__div_to_l_@quot+2,c
  6554  006704  0E00               	movlw	0
  6555  006706  6E0A               	movwf	__div_to_l_@quot+3,c
  6556  006708  0E7F               	movlw	127
  6557  00670A  5E0C               	subwf	__div_to_l_@exp1,f,c
  6558  00670C  500B               	movf	__div_to_l_@cntr,w,c
  6559  00670E  0FA0               	addlw	160
  6560  006710  5E0C               	subwf	__div_to_l_@exp1,f,c
  6561  006712  0E20               	movlw	32
  6562  006714  6E0B               	movwf	__div_to_l_@cntr,c
  6563  006716                     l2627:
  6564  006716  90D8               	bcf	status,0,c
  6565  006718  3607               	rlcf	__div_to_l_@quot,f,c
  6566  00671A  3608               	rlcf	__div_to_l_@quot+1,f,c
  6567  00671C  3609               	rlcf	__div_to_l_@quot+2,f,c
  6568  00671E  360A               	rlcf	__div_to_l_@quot+3,f,c
  6569  006720  5004               	movf	__div_to_l_@f2,w,c
  6570  006722  5C01               	subwf	__div_to_l_@f1,w,c
  6571  006724  5005               	movf	__div_to_l_@f2+1,w,c
  6572  006726  5802               	subwfb	__div_to_l_@f1+1,w,c
  6573  006728  5006               	movf	__div_to_l_@f2+2,w,c
  6574  00672A  5803               	subwfb	__div_to_l_@f1+2,w,c
  6575  00672C  5007               	movf	__div_to_l_@f2+3,w,c
  6576  00672E  5804               	subwfb	__div_to_l_@f1+3,w,c
  6577  006730  A0D8               	btfss	status,0,c
  6578  006732  D009               	goto	l2635
  6579  006734  5004               	movf	__div_to_l_@f2,w,c
  6580  006736  5E01               	subwf	__div_to_l_@f1,f,c
  6581  006738  5005               	movf	__div_to_l_@f2+1,w,c
  6582  00673A  5A02               	subwfb	__div_to_l_@f1+1,f,c
  6583  00673C  5006               	movf	__div_to_l_@f2+2,w,c
  6584  00673E  5A03               	subwfb	__div_to_l_@f1+2,f,c
  6585  006740  5007               	movf	__div_to_l_@f2+3,w,c
  6586  006742  5A04               	subwfb	__div_to_l_@f1+3,f,c
  6587  006744  8007               	bsf	__div_to_l_@quot,0,c
  6588  006746                     l2635:
  6589  006746  90D8               	bcf	status,0,c
  6590  006748  3601               	rlcf	__div_to_l_@f1,f,c
  6591  00674A  3602               	rlcf	__div_to_l_@f1+1,f,c
  6592  00674C  3603               	rlcf	__div_to_l_@f1+2,f,c
  6593  00674E  3604               	rlcf	__div_to_l_@f1+3,f,c
  6594  006750  2E0B               	decfsz	__div_to_l_@cntr,f,c
  6595  006752  D7E1               	goto	l2627
  6596  006754  AE0C               	btfss	__div_to_l_@exp1,7,c
  6597  006756  D016               	goto	l2651
  6598  006758  500C               	movf	__div_to_l_@exp1,w,c
  6599  00675A  0A80               	xorlw	128
  6600  00675C  0F9F               	addlw	159
  6601  00675E  B0D8               	btfsc	status,0,c
  6602  006760  D009               	goto	l2647
  6603  006762  0E00               	movlw	0
  6604  006764  6E01               	movwf	?__div_to_l_,c
  6605  006766  0E00               	movlw	0
  6606  006768  6E02               	movwf	?__div_to_l_+1,c
  6607  00676A  0E00               	movlw	0
  6608  00676C  6E03               	movwf	?__div_to_l_+2,c
  6609  00676E  0E00               	movlw	0
  6610  006770  6E04               	movwf	?__div_to_l_+3,c
  6611  006772  0012               	return	
  6612  006774                     l2647:
  6613  006774  90D8               	bcf	status,0,c
  6614  006776  320A               	rrcf	__div_to_l_@quot+3,f,c
  6615  006778  3209               	rrcf	__div_to_l_@quot+2,f,c
  6616  00677A  3208               	rrcf	__div_to_l_@quot+1,f,c
  6617  00677C  3207               	rrcf	__div_to_l_@quot,f,c
  6618  00677E  3E0C               	incfsz	__div_to_l_@exp1,f,c
  6619  006780  D7F9               	goto	l2647
  6620  006782  D015               	goto	l537
  6621  006784                     l2651:
  6622  006784  0E1F               	movlw	31
  6623  006786  640C               	cpfsgt	__div_to_l_@exp1,c
  6624  006788  D00F               	goto	l2659
  6625  00678A  0E00               	movlw	0
  6626  00678C  6E01               	movwf	?__div_to_l_,c
  6627  00678E  0E00               	movlw	0
  6628  006790  6E02               	movwf	?__div_to_l_+1,c
  6629  006792  0E00               	movlw	0
  6630  006794  6E03               	movwf	?__div_to_l_+2,c
  6631  006796  0E00               	movlw	0
  6632  006798  6E04               	movwf	?__div_to_l_+3,c
  6633  00679A  0012               	return	
  6634  00679C                     l2657:
  6635  00679C  90D8               	bcf	status,0,c
  6636  00679E  3607               	rlcf	__div_to_l_@quot,f,c
  6637  0067A0  3608               	rlcf	__div_to_l_@quot+1,f,c
  6638  0067A2  3609               	rlcf	__div_to_l_@quot+2,f,c
  6639  0067A4  360A               	rlcf	__div_to_l_@quot+3,f,c
  6640  0067A6  060C               	decf	__div_to_l_@exp1,f,c
  6641  0067A8                     l2659:
  6642  0067A8  500C               	movf	__div_to_l_@exp1,w,c
  6643  0067AA  A4D8               	btfss	status,2,c
  6644  0067AC  D7F7               	goto	l2657
  6645  0067AE                     l537:
  6646  0067AE  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6647  0067B2  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6648  0067B6  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6649  0067BA  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6650  0067BE  0012               	return		;funcret
  6651  0067C0                     __end_of__div_to_l_:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           indf0	equ	0xFEF
  6660                           fsr0h	equ	0xFEA
  6661                           fsr0l	equ	0xFE9
  6662                           wreg	equ	0xFE8
  6663                           indf1	equ	0xFE7
  6664                           fsr1h	equ	0xFE2
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function ___lltoft *****************
  6674 ;; Defined at:
  6675 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  c               4    8[COMRAM] unsigned long 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  exp             1   16[COMRAM] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;                  3    8[COMRAM] float 
  6682 ;; Registers used:
  6683 ;;		wreg, status,2, status,0, cstack
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : 0/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6689 ;;      Params:         4       0       0       0       0       0       0
  6690 ;;      Locals:         1       0       0       0       0       0       0
  6691 ;;      Temps:          4       0       0       0       0       0       0
  6692 ;;      Totals:         9       0       0       0       0       0       0
  6693 ;;Total ram usage:        9 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:    1
  6696 ;; This function calls:
  6697 ;;		___ftpack
  6698 ;; This function is called by:
  6699 ;;		_sprintf
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text28
  6704  005F6A                     __ptext28:
  6705                           	opt stack 0
  6706  005F6A                     ___lltoft:
  6707                           	opt stack 26
  6708                           
  6709                           ;incstack = 0
  6710  005F6A  0E8E               	movlw	142
  6711  005F6C  6E11               	movwf	___lltoft@exp,c
  6712  005F6E  D006               	goto	l2779
  6713  005F70                     l2777:
  6714  005F70  90D8               	bcf	status,0,c
  6715  005F72  320C               	rrcf	___lltoft@c+3,f,c
  6716  005F74  320B               	rrcf	___lltoft@c+2,f,c
  6717  005F76  320A               	rrcf	___lltoft@c+1,f,c
  6718  005F78  3209               	rrcf	___lltoft@c,f,c
  6719  005F7A  2A11               	incf	___lltoft@exp,f,c
  6720  005F7C                     l2779:
  6721  005F7C  0E00               	movlw	0
  6722  005F7E  1409               	andwf	___lltoft@c,w,c
  6723  005F80  6E0D               	movwf	??___lltoft& (0+255),c
  6724  005F82  0E00               	movlw	0
  6725  005F84  140A               	andwf	___lltoft@c+1,w,c
  6726  005F86  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6727  005F88  0E00               	movlw	0
  6728  005F8A  140B               	andwf	___lltoft@c+2,w,c
  6729  005F8C  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6730  005F8E  0EFF               	movlw	255
  6731  005F90  140C               	andwf	___lltoft@c+3,w,c
  6732  005F92  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6733  005F94  500D               	movf	??___lltoft,w,c
  6734  005F96  100E               	iorwf	??___lltoft+1,w,c
  6735  005F98  100F               	iorwf	??___lltoft+2,w,c
  6736  005F9A  1010               	iorwf	??___lltoft+3,w,c
  6737  005F9C  A4D8               	btfss	status,2,c
  6738  005F9E  D7E8               	goto	l2777
  6739  005FA0  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6740  005FA4  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6741  005FA8  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6742  005FAC  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6743  005FB0  0E00               	movlw	0
  6744  005FB2  6E05               	movwf	___ftpack@sign,c
  6745  005FB4  EC90  F031         	call	___ftpack	;wreg free
  6746  005FB8  C001  F009         	movff	?___ftpack,?___lltoft
  6747  005FBC  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6748  005FC0  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6749  005FC4  0012               	return	
  6750  005FC6                     __end_of___lltoft:
  6751                           	opt stack 0
  6752                           tblptru	equ	0xFF8
  6753                           tblptrh	equ	0xFF7
  6754                           tblptrl	equ	0xFF6
  6755                           tablat	equ	0xFF5
  6756                           prodh	equ	0xFF4
  6757                           prodl	equ	0xFF3
  6758                           indf0	equ	0xFEF
  6759                           fsr0h	equ	0xFEA
  6760                           fsr0l	equ	0xFE9
  6761                           wreg	equ	0xFE8
  6762                           indf1	equ	0xFE7
  6763                           fsr1h	equ	0xFE2
  6764                           fsr1l	equ	0xFE1
  6765                           indf2	equ	0xFDF
  6766                           postinc2	equ	0xFDE
  6767                           postdec2	equ	0xFDD
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function ___llmod *****************
  6773 ;; Defined at:
  6774 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;  dividend        4   13[COMRAM] unsigned long 
  6777 ;;  divisor         4   17[COMRAM] unsigned long 
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;  counter         1   21[COMRAM] unsigned char 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  4   13[COMRAM] unsigned long 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6789 ;;      Params:         8       0       0       0       0       0       0
  6790 ;;      Locals:         1       0       0       0       0       0       0
  6791 ;;      Temps:          0       0       0       0       0       0       0
  6792 ;;      Totals:         9       0       0       0       0       0       0
  6793 ;;Total ram usage:        9 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_sprintf
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text29
  6803  006022                     __ptext29:
  6804                           	opt stack 0
  6805  006022                     ___llmod:
  6806                           	opt stack 27
  6807                           
  6808                           ;incstack = 0
  6809  006022  5012               	movf	___llmod@divisor,w,c
  6810  006024  1013               	iorwf	___llmod@divisor+1,w,c
  6811  006026  1014               	iorwf	___llmod@divisor+2,w,c
  6812  006028  1015               	iorwf	___llmod@divisor+3,w,c
  6813  00602A  B4D8               	btfsc	status,2,c
  6814  00602C  D024               	goto	l726
  6815  00602E  0E01               	movlw	1
  6816  006030  6E16               	movwf	___llmod@counter,c
  6817  006032  D006               	goto	l2765
  6818  006034                     l2763:
  6819  006034  90D8               	bcf	status,0,c
  6820  006036  3612               	rlcf	___llmod@divisor,f,c
  6821  006038  3613               	rlcf	___llmod@divisor+1,f,c
  6822  00603A  3614               	rlcf	___llmod@divisor+2,f,c
  6823  00603C  3615               	rlcf	___llmod@divisor+3,f,c
  6824  00603E  2A16               	incf	___llmod@counter,f,c
  6825  006040                     l2765:
  6826  006040  AE15               	btfss	___llmod@divisor+3,7,c
  6827  006042  D7F8               	goto	l2763
  6828  006044                     l2767:
  6829  006044  5012               	movf	___llmod@divisor,w,c
  6830  006046  5C0E               	subwf	___llmod@dividend,w,c
  6831  006048  5013               	movf	___llmod@divisor+1,w,c
  6832  00604A  580F               	subwfb	___llmod@dividend+1,w,c
  6833  00604C  5014               	movf	___llmod@divisor+2,w,c
  6834  00604E  5810               	subwfb	___llmod@dividend+2,w,c
  6835  006050  5015               	movf	___llmod@divisor+3,w,c
  6836  006052  5811               	subwfb	___llmod@dividend+3,w,c
  6837  006054  A0D8               	btfss	status,0,c
  6838  006056  D008               	goto	l2771
  6839  006058  5012               	movf	___llmod@divisor,w,c
  6840  00605A  5E0E               	subwf	___llmod@dividend,f,c
  6841  00605C  5013               	movf	___llmod@divisor+1,w,c
  6842  00605E  5A0F               	subwfb	___llmod@dividend+1,f,c
  6843  006060  5014               	movf	___llmod@divisor+2,w,c
  6844  006062  5A10               	subwfb	___llmod@dividend+2,f,c
  6845  006064  5015               	movf	___llmod@divisor+3,w,c
  6846  006066  5A11               	subwfb	___llmod@dividend+3,f,c
  6847  006068                     l2771:
  6848  006068  90D8               	bcf	status,0,c
  6849  00606A  3215               	rrcf	___llmod@divisor+3,f,c
  6850  00606C  3214               	rrcf	___llmod@divisor+2,f,c
  6851  00606E  3213               	rrcf	___llmod@divisor+1,f,c
  6852  006070  3212               	rrcf	___llmod@divisor,f,c
  6853  006072  2E16               	decfsz	___llmod@counter,f,c
  6854  006074  D7E7               	goto	l2767
  6855  006076                     l726:
  6856  006076  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6857  00607A  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6858  00607E  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6859  006082  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6860  006086  0012               	return		;funcret
  6861  006088                     __end_of___llmod:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           indf0	equ	0xFEF
  6870                           fsr0h	equ	0xFEA
  6871                           fsr0l	equ	0xFE9
  6872                           wreg	equ	0xFE8
  6873                           indf1	equ	0xFE7
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function ___lldiv *****************
  6884 ;; Defined at:
  6885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  dividend        4    0[COMRAM] unsigned long 
  6888 ;;  divisor         4    4[COMRAM] unsigned long 
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  quotient        4    8[COMRAM] unsigned long 
  6891 ;;  counter         1   12[COMRAM] unsigned char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  4    0[COMRAM] unsigned long 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6901 ;;      Params:         8       0       0       0       0       0       0
  6902 ;;      Locals:         5       0       0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0
  6904 ;;      Totals:        13       0       0       0       0       0       0
  6905 ;;Total ram usage:       13 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_sprintf
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text30
  6915  0060F8                     __ptext30:
  6916                           	opt stack 0
  6917  0060F8                     ___lldiv:
  6918                           	opt stack 27
  6919                           
  6920                           ;incstack = 0
  6921  0060F8  0E00               	movlw	0
  6922  0060FA  6E09               	movwf	___lldiv@quotient,c
  6923  0060FC  0E00               	movlw	0
  6924  0060FE  6E0A               	movwf	___lldiv@quotient+1,c
  6925  006100  0E00               	movlw	0
  6926  006102  6E0B               	movwf	___lldiv@quotient+2,c
  6927  006104  0E00               	movlw	0
  6928  006106  6E0C               	movwf	___lldiv@quotient+3,c
  6929  006108  5005               	movf	___lldiv@divisor,w,c
  6930  00610A  1006               	iorwf	___lldiv@divisor+1,w,c
  6931  00610C  1007               	iorwf	___lldiv@divisor+2,w,c
  6932  00610E  1008               	iorwf	___lldiv@divisor+3,w,c
  6933  006110  B4D8               	btfsc	status,2,c
  6934  006112  D02A               	goto	l716
  6935  006114  0E01               	movlw	1
  6936  006116  6E0D               	movwf	___lldiv@counter,c
  6937  006118  D006               	goto	l2745
  6938  00611A                     l2743:
  6939  00611A  90D8               	bcf	status,0,c
  6940  00611C  3605               	rlcf	___lldiv@divisor,f,c
  6941  00611E  3606               	rlcf	___lldiv@divisor+1,f,c
  6942  006120  3607               	rlcf	___lldiv@divisor+2,f,c
  6943  006122  3608               	rlcf	___lldiv@divisor+3,f,c
  6944  006124  2A0D               	incf	___lldiv@counter,f,c
  6945  006126                     l2745:
  6946  006126  AE08               	btfss	___lldiv@divisor+3,7,c
  6947  006128  D7F8               	goto	l2743
  6948  00612A                     l2747:
  6949  00612A  90D8               	bcf	status,0,c
  6950  00612C  3609               	rlcf	___lldiv@quotient,f,c
  6951  00612E  360A               	rlcf	___lldiv@quotient+1,f,c
  6952  006130  360B               	rlcf	___lldiv@quotient+2,f,c
  6953  006132  360C               	rlcf	___lldiv@quotient+3,f,c
  6954  006134  5005               	movf	___lldiv@divisor,w,c
  6955  006136  5C01               	subwf	___lldiv@dividend,w,c
  6956  006138  5006               	movf	___lldiv@divisor+1,w,c
  6957  00613A  5802               	subwfb	___lldiv@dividend+1,w,c
  6958  00613C  5007               	movf	___lldiv@divisor+2,w,c
  6959  00613E  5803               	subwfb	___lldiv@dividend+2,w,c
  6960  006140  5008               	movf	___lldiv@divisor+3,w,c
  6961  006142  5804               	subwfb	___lldiv@dividend+3,w,c
  6962  006144  A0D8               	btfss	status,0,c
  6963  006146  D009               	goto	l2755
  6964  006148  5005               	movf	___lldiv@divisor,w,c
  6965  00614A  5E01               	subwf	___lldiv@dividend,f,c
  6966  00614C  5006               	movf	___lldiv@divisor+1,w,c
  6967  00614E  5A02               	subwfb	___lldiv@dividend+1,f,c
  6968  006150  5007               	movf	___lldiv@divisor+2,w,c
  6969  006152  5A03               	subwfb	___lldiv@dividend+2,f,c
  6970  006154  5008               	movf	___lldiv@divisor+3,w,c
  6971  006156  5A04               	subwfb	___lldiv@dividend+3,f,c
  6972  006158  8009               	bsf	___lldiv@quotient,0,c
  6973  00615A                     l2755:
  6974  00615A  90D8               	bcf	status,0,c
  6975  00615C  3208               	rrcf	___lldiv@divisor+3,f,c
  6976  00615E  3207               	rrcf	___lldiv@divisor+2,f,c
  6977  006160  3206               	rrcf	___lldiv@divisor+1,f,c
  6978  006162  3205               	rrcf	___lldiv@divisor,f,c
  6979  006164  2E0D               	decfsz	___lldiv@counter,f,c
  6980  006166  D7E1               	goto	l2747
  6981  006168                     l716:
  6982  006168  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6983  00616C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6984  006170  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6985  006174  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6986  006178  0012               	return		;funcret
  6987  00617A                     __end_of___lldiv:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           indf0	equ	0xFEF
  6996                           fsr0h	equ	0xFEA
  6997                           fsr0l	equ	0xFE9
  6998                           wreg	equ	0xFE8
  6999                           indf1	equ	0xFE7
  7000                           fsr1h	equ	0xFE2
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function ___fttol *****************
  7010 ;; Defined at:
  7011 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  f1              3   42[COMRAM] float 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  lval            4   52[COMRAM] unsigned long 
  7016 ;;  exp1            1   56[COMRAM] unsigned char 
  7017 ;;  sign1           1   51[COMRAM] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  4   42[COMRAM] long 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7027 ;;      Params:         4       0       0       0       0       0       0
  7028 ;;      Locals:         6       0       0       0       0       0       0
  7029 ;;      Temps:          5       0       0       0       0       0       0
  7030 ;;      Totals:        15       0       0       0       0       0       0
  7031 ;;Total ram usage:       15 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; This function calls:
  7034 ;;		Nothing
  7035 ;; This function is called by:
  7036 ;;		_sprintf
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           	psect	text31
  7041  0064B0                     __ptext31:
  7042                           	opt stack 0
  7043  0064B0                     ___fttol:
  7044                           	opt stack 27
  7045                           
  7046                           ;incstack = 0
  7047  0064B0  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7048  0064B4  6A30               	clrf	(??___fttol+1)& (0+255),c
  7049  0064B6  6A31               	clrf	(??___fttol+2)& (0+255),c
  7050  0064B8  342C               	rlcf	___fttol@f1+1,w,c
  7051  0064BA  362F               	rlcf	??___fttol& (0+255),f,c
  7052  0064BC  E301               	bnc	u2491
  7053  0064BE  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7054  0064C0                     u2491:
  7055  0064C0  502F               	movf	??___fttol,w,c
  7056  0064C2  6E39               	movwf	___fttol@exp1,c
  7057  0064C4  5039               	movf	___fttol@exp1,w,c
  7058  0064C6  A4D8               	btfss	status,2,c
  7059  0064C8  D009               	goto	l2697
  7060  0064CA  0E00               	movlw	0
  7061  0064CC  6E2B               	movwf	?___fttol,c
  7062  0064CE  0E00               	movlw	0
  7063  0064D0  6E2C               	movwf	?___fttol+1,c
  7064  0064D2  0E00               	movlw	0
  7065  0064D4  6E2D               	movwf	?___fttol+2,c
  7066  0064D6  0E00               	movlw	0
  7067  0064D8  6E2E               	movwf	?___fttol+3,c
  7068  0064DA  0012               	return	
  7069  0064DC                     l2697:
  7070  0064DC  0E17               	movlw	23
  7071  0064DE  6E2F               	movwf	??___fttol& (0+255),c
  7072  0064E0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7073  0064E4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7074  0064E8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7075  0064EC  282F               	incf	??___fttol,w,c
  7076  0064EE  6E33               	movwf	(??___fttol+4)& (0+255),c
  7077  0064F0  D004               	goto	u2510
  7078  0064F2                     u2515:
  7079  0064F2  90D8               	bcf	status,0,c
  7080  0064F4  3232               	rrcf	??___fttol+3,f,c
  7081  0064F6  3231               	rrcf	??___fttol+2,f,c
  7082  0064F8  3230               	rrcf	??___fttol+1,f,c
  7083  0064FA                     u2510:
  7084  0064FA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7085  0064FC  D7FA               	goto	u2515
  7086  0064FE  5030               	movf	??___fttol+1,w,c
  7087  006500  6E34               	movwf	___fttol@sign1,c
  7088  006502  8E2C               	bsf	___fttol@f1+1,7,c
  7089  006504  0EFF               	movlw	255
  7090  006506  162B               	andwf	___fttol@f1,f,c
  7091  006508  0EFF               	movlw	255
  7092  00650A  162C               	andwf	___fttol@f1+1,f,c
  7093  00650C  0E00               	movlw	0
  7094  00650E  162D               	andwf	___fttol@f1+2,f,c
  7095  006510  502B               	movf	___fttol@f1,w,c
  7096  006512  6E35               	movwf	___fttol@lval,c
  7097  006514  502C               	movf	___fttol@f1+1,w,c
  7098  006516  6E36               	movwf	___fttol@lval+1,c
  7099  006518  502D               	movf	___fttol@f1+2,w,c
  7100  00651A  6E37               	movwf	___fttol@lval+2,c
  7101  00651C  6A38               	clrf	___fttol@lval+3,c
  7102  00651E  0E8E               	movlw	142
  7103  006520  5E39               	subwf	___fttol@exp1,f,c
  7104  006522  AE39               	btfss	___fttol@exp1,7,c
  7105  006524  D016               	goto	l2719
  7106  006526  5039               	movf	___fttol@exp1,w,c
  7107  006528  0A80               	xorlw	128
  7108  00652A  0F8F               	addlw	143
  7109  00652C  B0D8               	btfsc	status,0,c
  7110  00652E  D009               	goto	l2715
  7111  006530  0E00               	movlw	0
  7112  006532  6E2B               	movwf	?___fttol,c
  7113  006534  0E00               	movlw	0
  7114  006536  6E2C               	movwf	?___fttol+1,c
  7115  006538  0E00               	movlw	0
  7116  00653A  6E2D               	movwf	?___fttol+2,c
  7117  00653C  0E00               	movlw	0
  7118  00653E  6E2E               	movwf	?___fttol+3,c
  7119  006540  0012               	return	
  7120  006542                     l2715:
  7121  006542  90D8               	bcf	status,0,c
  7122  006544  3238               	rrcf	___fttol@lval+3,f,c
  7123  006546  3237               	rrcf	___fttol@lval+2,f,c
  7124  006548  3236               	rrcf	___fttol@lval+1,f,c
  7125  00654A  3235               	rrcf	___fttol@lval,f,c
  7126  00654C  3E39               	incfsz	___fttol@exp1,f,c
  7127  00654E  D7F9               	goto	l2715
  7128  006550  D015               	goto	l2729
  7129  006552                     l2719:
  7130  006552  0E17               	movlw	23
  7131  006554  6439               	cpfsgt	___fttol@exp1,c
  7132  006556  D00F               	goto	l2727
  7133  006558  0E00               	movlw	0
  7134  00655A  6E2B               	movwf	?___fttol,c
  7135  00655C  0E00               	movlw	0
  7136  00655E  6E2C               	movwf	?___fttol+1,c
  7137  006560  0E00               	movlw	0
  7138  006562  6E2D               	movwf	?___fttol+2,c
  7139  006564  0E00               	movlw	0
  7140  006566  6E2E               	movwf	?___fttol+3,c
  7141  006568  0012               	return	
  7142  00656A                     l2725:
  7143  00656A  90D8               	bcf	status,0,c
  7144  00656C  3635               	rlcf	___fttol@lval,f,c
  7145  00656E  3636               	rlcf	___fttol@lval+1,f,c
  7146  006570  3637               	rlcf	___fttol@lval+2,f,c
  7147  006572  3638               	rlcf	___fttol@lval+3,f,c
  7148  006574  0639               	decf	___fttol@exp1,f,c
  7149  006576                     l2727:
  7150  006576  5039               	movf	___fttol@exp1,w,c
  7151  006578  A4D8               	btfss	status,2,c
  7152  00657A  D7F7               	goto	l2725
  7153  00657C                     l2729:
  7154  00657C  5034               	movf	___fttol@sign1,w,c
  7155  00657E  B4D8               	btfsc	status,2,c
  7156  006580  D008               	goto	l2733
  7157  006582  1E38               	comf	___fttol@lval+3,f,c
  7158  006584  1E37               	comf	___fttol@lval+2,f,c
  7159  006586  1E36               	comf	___fttol@lval+1,f,c
  7160  006588  6C35               	negf	___fttol@lval,c
  7161  00658A  0E00               	movlw	0
  7162  00658C  2236               	addwfc	___fttol@lval+1,f,c
  7163  00658E  2237               	addwfc	___fttol@lval+2,f,c
  7164  006590  2238               	addwfc	___fttol@lval+3,f,c
  7165  006592                     l2733:
  7166  006592  C035  F02B         	movff	___fttol@lval,?___fttol
  7167  006596  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7168  00659A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7169  00659E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7170  0065A2  0012               	return	
  7171  0065A4                     __end_of___fttol:
  7172                           	opt stack 0
  7173                           tblptru	equ	0xFF8
  7174                           tblptrh	equ	0xFF7
  7175                           tblptrl	equ	0xFF6
  7176                           tablat	equ	0xFF5
  7177                           prodh	equ	0xFF4
  7178                           prodl	equ	0xFF3
  7179                           indf0	equ	0xFEF
  7180                           fsr0h	equ	0xFEA
  7181                           fsr0l	equ	0xFE9
  7182                           wreg	equ	0xFE8
  7183                           indf1	equ	0xFE7
  7184                           fsr1h	equ	0xFE2
  7185                           fsr1l	equ	0xFE1
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function ___ftsub *****************
  7194 ;; Defined at:
  7195 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  f1              3   57[COMRAM] float 
  7198 ;;  f2              3   60[COMRAM] float 
  7199 ;; Auto vars:     Size  Location     Type
  7200 ;;		None
  7201 ;; Return value:  Size  Location     Type
  7202 ;;                  3   57[COMRAM] float 
  7203 ;; Registers used:
  7204 ;;		wreg, status,2, status,0, cstack
  7205 ;; Tracked objects:
  7206 ;;		On entry : 0/0
  7207 ;;		On exit  : 0/0
  7208 ;;		Unchanged: 0/0
  7209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7210 ;;      Params:         6       0       0       0       0       0       0
  7211 ;;      Locals:         0       0       0       0       0       0       0
  7212 ;;      Temps:          0       0       0       0       0       0       0
  7213 ;;      Totals:         6       0       0       0       0       0       0
  7214 ;;Total ram usage:        6 bytes
  7215 ;; Hardware stack levels used:    1
  7216 ;; Hardware stack levels required when called:    2
  7217 ;; This function calls:
  7218 ;;		___ftadd
  7219 ;; This function is called by:
  7220 ;;		_sprintf
  7221 ;; This function uses a non-reentrant model
  7222 ;;
  7223                           
  7224                           	psect	text32
  7225  005E06                     __ptext32:
  7226                           	opt stack 0
  7227  005E06                     ___ftsub:
  7228                           	opt stack 25
  7229                           
  7230                           ;incstack = 0
  7231  005E06  503D               	movf	___ftsub@f2,w,c
  7232  005E08  103E               	iorwf	___ftsub@f2+1,w,c
  7233  005E0A  103F               	iorwf	___ftsub@f2+2,w,c
  7234  005E0C  B4D8               	btfsc	status,2,c
  7235  005E0E  D006               	goto	l2665
  7236  005E10  0E00               	movlw	0
  7237  005E12  1A3D               	xorwf	___ftsub@f2,f,c
  7238  005E14  0E00               	movlw	0
  7239  005E16  1A3E               	xorwf	___ftsub@f2+1,f,c
  7240  005E18  0E80               	movlw	128
  7241  005E1A  1A3F               	xorwf	___ftsub@f2+2,f,c
  7242  005E1C                     l2665:
  7243  005E1C  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  7244  005E20  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  7245  005E24  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  7246  005E28  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  7247  005E2C  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  7248  005E30  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  7249  005E34  EC79  F034         	call	___ftadd	;wreg free
  7250  005E38  C02E  F03A         	movff	?___ftadd,?___ftsub
  7251  005E3C  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  7252  005E40  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  7253  005E44  0012               	return	
  7254  005E46                     __end_of___ftsub:
  7255                           	opt stack 0
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           indf0	equ	0xFEF
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           fsr1h	equ	0xFE2
  7268                           fsr1l	equ	0xFE1
  7269                           indf2	equ	0xFDF
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           
  7276 ;; *************** function ___ftadd *****************
  7277 ;; Defined at:
  7278 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  f1              3   45[COMRAM] float 
  7281 ;;  f2              3   48[COMRAM] float 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  exp1            1   56[COMRAM] unsigned char 
  7284 ;;  exp2            1   55[COMRAM] unsigned char 
  7285 ;;  sign            1   54[COMRAM] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  3   45[COMRAM] float 
  7288 ;; Registers used:
  7289 ;;		wreg, status,2, status,0, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         6       0       0       0       0       0       0
  7296 ;;      Locals:         3       0       0       0       0       0       0
  7297 ;;      Temps:          3       0       0       0       0       0       0
  7298 ;;      Totals:        12       0       0       0       0       0       0
  7299 ;;Total ram usage:       12 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    1
  7302 ;; This function calls:
  7303 ;;		___ftpack
  7304 ;; This function is called by:
  7305 ;;		_sprintf
  7306 ;;		___ftsub
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text33
  7311  0068F2                     __ptext33:
  7312                           	opt stack 0
  7313  0068F2                     ___ftadd:
  7314                           	opt stack 25
  7315                           
  7316                           ;incstack = 0
  7317  0068F2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  7318  0068F6  6A35               	clrf	(??___ftadd+1)& (0+255),c
  7319  0068F8  6A36               	clrf	(??___ftadd+2)& (0+255),c
  7320  0068FA  342F               	rlcf	___ftadd@f1+1,w,c
  7321  0068FC  3634               	rlcf	??___ftadd& (0+255),f,c
  7322  0068FE  E301               	bnc	u1791
  7323  006900  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  7324  006902                     u1791:
  7325  006902  5034               	movf	??___ftadd,w,c
  7326  006904  6E39               	movwf	___ftadd@exp1,c
  7327  006906  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  7328  00690A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  7329  00690C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  7330  00690E  3432               	rlcf	___ftadd@f2+1,w,c
  7331  006910  3634               	rlcf	??___ftadd& (0+255),f,c
  7332  006912  E301               	bnc	u1801
  7333  006914  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  7334  006916                     u1801:
  7335  006916  5034               	movf	??___ftadd,w,c
  7336  006918  6E38               	movwf	___ftadd@exp2,c
  7337  00691A  5039               	movf	___ftadd@exp1,w,c
  7338  00691C  B4D8               	btfsc	status,2,c
  7339  00691E  D00B               	goto	l592
  7340  006920  5038               	movf	___ftadd@exp2,w,c
  7341  006922  5C39               	subwf	___ftadd@exp1,w,c
  7342  006924  B0D8               	btfsc	status,0,c
  7343  006926  D00E               	goto	l2263
  7344  006928  5039               	movf	___ftadd@exp1,w,c
  7345  00692A  0800               	sublw	0
  7346  00692C  2438               	addwf	___ftadd@exp2,w,c
  7347  00692E  6E34               	movwf	??___ftadd& (0+255),c
  7348  006930  0E18               	movlw	24
  7349  006932  6434               	cpfsgt	??___ftadd,c
  7350  006934  D007               	goto	l2263
  7351  006936                     l592:
  7352  006936  C031  F02E         	movff	___ftadd@f2,?___ftadd
  7353  00693A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  7354  00693E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  7355  006942  0012               	return	
  7356  006944                     l2263:
  7357  006944  5038               	movf	___ftadd@exp2,w,c
  7358  006946  B4D8               	btfsc	status,2,c
  7359  006948  D00B               	goto	l596
  7360  00694A  5039               	movf	___ftadd@exp1,w,c
  7361  00694C  5C38               	subwf	___ftadd@exp2,w,c
  7362  00694E  B0D8               	btfsc	status,0,c
  7363  006950  D00E               	goto	l2269
  7364  006952  5038               	movf	___ftadd@exp2,w,c
  7365  006954  0800               	sublw	0
  7366  006956  2439               	addwf	___ftadd@exp1,w,c
  7367  006958  6E34               	movwf	??___ftadd& (0+255),c
  7368  00695A  0E18               	movlw	24
  7369  00695C  6434               	cpfsgt	??___ftadd,c
  7370  00695E  D007               	goto	l2269
  7371  006960                     l596:
  7372  006960  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  7373  006964  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  7374  006968  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  7375  00696C  0012               	return	
  7376  00696E                     l2269:
  7377  00696E  0E06               	movlw	6
  7378  006970  6E37               	movwf	___ftadd@sign,c
  7379  006972  BE30               	btfsc	___ftadd@f1+2,7,c
  7380  006974  8E37               	bsf	___ftadd@sign,7,c
  7381  006976  BE33               	btfsc	___ftadd@f2+2,7,c
  7382  006978  8C37               	bsf	___ftadd@sign,6,c
  7383  00697A  8E2F               	bsf	___ftadd@f1+1,7,c
  7384  00697C  0EFF               	movlw	255
  7385  00697E  162E               	andwf	___ftadd@f1,f,c
  7386  006980  0EFF               	movlw	255
  7387  006982  162F               	andwf	___ftadd@f1+1,f,c
  7388  006984  0E00               	movlw	0
  7389  006986  1630               	andwf	___ftadd@f1+2,f,c
  7390  006988  8E32               	bsf	___ftadd@f2+1,7,c
  7391  00698A  0EFF               	movlw	255
  7392  00698C  1631               	andwf	___ftadd@f2,f,c
  7393  00698E  0EFF               	movlw	255
  7394  006990  1632               	andwf	___ftadd@f2+1,f,c
  7395  006992  0E00               	movlw	0
  7396  006994  1633               	andwf	___ftadd@f2+2,f,c
  7397  006996  5038               	movf	___ftadd@exp2,w,c
  7398  006998  5C39               	subwf	___ftadd@exp1,w,c
  7399  00699A  B0D8               	btfsc	status,0,c
  7400  00699C  D01B               	goto	l2295
  7401  00699E                     l2285:
  7402  00699E  90D8               	bcf	status,0,c
  7403  0069A0  3631               	rlcf	___ftadd@f2,f,c
  7404  0069A2  3632               	rlcf	___ftadd@f2+1,f,c
  7405  0069A4  3633               	rlcf	___ftadd@f2+2,f,c
  7406  0069A6  0638               	decf	___ftadd@exp2,f,c
  7407  0069A8  5039               	movf	___ftadd@exp1,w,c
  7408  0069AA  1838               	xorwf	___ftadd@exp2,w,c
  7409  0069AC  B4D8               	btfsc	status,2,c
  7410  0069AE  D00D               	goto	l2293
  7411  0069B0  0637               	decf	___ftadd@sign,f,c
  7412  0069B2  C037  F034         	movff	___ftadd@sign,??___ftadd
  7413  0069B6  0E07               	movlw	7
  7414  0069B8  1634               	andwf	??___ftadd,f,c
  7415  0069BA  B4D8               	btfsc	status,2,c
  7416  0069BC  D006               	goto	l2293
  7417  0069BE  D7EF               	goto	l2285
  7418  0069C0                     l2291:
  7419  0069C0  90D8               	bcf	status,0,c
  7420  0069C2  3230               	rrcf	___ftadd@f1+2,f,c
  7421  0069C4  322F               	rrcf	___ftadd@f1+1,f,c
  7422  0069C6  322E               	rrcf	___ftadd@f1,f,c
  7423  0069C8  2A39               	incf	___ftadd@exp1,f,c
  7424  0069CA                     l2293:
  7425  0069CA  5038               	movf	___ftadd@exp2,w,c
  7426  0069CC  1839               	xorwf	___ftadd@exp1,w,c
  7427  0069CE  B4D8               	btfsc	status,2,c
  7428  0069D0  D01F               	goto	l607
  7429  0069D2  D7F6               	goto	l2291
  7430  0069D4                     l2295:
  7431  0069D4  5039               	movf	___ftadd@exp1,w,c
  7432  0069D6  5C38               	subwf	___ftadd@exp2,w,c
  7433  0069D8  B0D8               	btfsc	status,0,c
  7434  0069DA  D01A               	goto	l607
  7435  0069DC                     l2297:
  7436  0069DC  90D8               	bcf	status,0,c
  7437  0069DE  362E               	rlcf	___ftadd@f1,f,c
  7438  0069E0  362F               	rlcf	___ftadd@f1+1,f,c
  7439  0069E2  3630               	rlcf	___ftadd@f1+2,f,c
  7440  0069E4  0639               	decf	___ftadd@exp1,f,c
  7441  0069E6  5039               	movf	___ftadd@exp1,w,c
  7442  0069E8  1838               	xorwf	___ftadd@exp2,w,c
  7443  0069EA  B4D8               	btfsc	status,2,c
  7444  0069EC  D00D               	goto	l2305
  7445  0069EE  0637               	decf	___ftadd@sign,f,c
  7446  0069F0  C037  F034         	movff	___ftadd@sign,??___ftadd
  7447  0069F4  0E07               	movlw	7
  7448  0069F6  1634               	andwf	??___ftadd,f,c
  7449  0069F8  B4D8               	btfsc	status,2,c
  7450  0069FA  D006               	goto	l2305
  7451  0069FC  D7EF               	goto	l2297
  7452  0069FE                     l2303:
  7453  0069FE  90D8               	bcf	status,0,c
  7454  006A00  3233               	rrcf	___ftadd@f2+2,f,c
  7455  006A02  3232               	rrcf	___ftadd@f2+1,f,c
  7456  006A04  3231               	rrcf	___ftadd@f2,f,c
  7457  006A06  2A38               	incf	___ftadd@exp2,f,c
  7458  006A08                     l2305:
  7459  006A08  5038               	movf	___ftadd@exp2,w,c
  7460  006A0A  1839               	xorwf	___ftadd@exp1,w,c
  7461  006A0C  A4D8               	btfss	status,2,c
  7462  006A0E  D7F7               	goto	l2303
  7463  006A10                     l607:
  7464  006A10  AE37               	btfss	___ftadd@sign,7,c
  7465  006A12  D00C               	goto	l616
  7466  006A14  0EFF               	movlw	255
  7467  006A16  1A2E               	xorwf	___ftadd@f1,f,c
  7468  006A18  0EFF               	movlw	255
  7469  006A1A  1A2F               	xorwf	___ftadd@f1+1,f,c
  7470  006A1C  0EFF               	movlw	255
  7471  006A1E  1A30               	xorwf	___ftadd@f1+2,f,c
  7472  006A20  0E01               	movlw	1
  7473  006A22  262E               	addwf	___ftadd@f1,f,c
  7474  006A24  0E00               	movlw	0
  7475  006A26  222F               	addwfc	___ftadd@f1+1,f,c
  7476  006A28  0E00               	movlw	0
  7477  006A2A  2230               	addwfc	___ftadd@f1+2,f,c
  7478  006A2C                     l616:
  7479  006A2C  AC37               	btfss	___ftadd@sign,6,c
  7480  006A2E  D00C               	goto	l2311
  7481  006A30  0EFF               	movlw	255
  7482  006A32  1A31               	xorwf	___ftadd@f2,f,c
  7483  006A34  0EFF               	movlw	255
  7484  006A36  1A32               	xorwf	___ftadd@f2+1,f,c
  7485  006A38  0EFF               	movlw	255
  7486  006A3A  1A33               	xorwf	___ftadd@f2+2,f,c
  7487  006A3C  0E01               	movlw	1
  7488  006A3E  2631               	addwf	___ftadd@f2,f,c
  7489  006A40  0E00               	movlw	0
  7490  006A42  2232               	addwfc	___ftadd@f2+1,f,c
  7491  006A44  0E00               	movlw	0
  7492  006A46  2233               	addwfc	___ftadd@f2+2,f,c
  7493  006A48                     l2311:
  7494  006A48  0E00               	movlw	0
  7495  006A4A  6E37               	movwf	___ftadd@sign,c
  7496  006A4C  502E               	movf	___ftadd@f1,w,c
  7497  006A4E  2631               	addwf	___ftadd@f2,f,c
  7498  006A50  502F               	movf	___ftadd@f1+1,w,c
  7499  006A52  2232               	addwfc	___ftadd@f2+1,f,c
  7500  006A54  5030               	movf	___ftadd@f1+2,w,c
  7501  006A56  2233               	addwfc	___ftadd@f2+2,f,c
  7502  006A58  AE33               	btfss	___ftadd@f2+2,7,c
  7503  006A5A  D00E               	goto	l2321
  7504  006A5C  0EFF               	movlw	255
  7505  006A5E  1A31               	xorwf	___ftadd@f2,f,c
  7506  006A60  0EFF               	movlw	255
  7507  006A62  1A32               	xorwf	___ftadd@f2+1,f,c
  7508  006A64  0EFF               	movlw	255
  7509  006A66  1A33               	xorwf	___ftadd@f2+2,f,c
  7510  006A68  0E01               	movlw	1
  7511  006A6A  2631               	addwf	___ftadd@f2,f,c
  7512  006A6C  0E00               	movlw	0
  7513  006A6E  2232               	addwfc	___ftadd@f2+1,f,c
  7514  006A70  0E00               	movlw	0
  7515  006A72  2233               	addwfc	___ftadd@f2+2,f,c
  7516  006A74  0E01               	movlw	1
  7517  006A76  6E37               	movwf	___ftadd@sign,c
  7518  006A78                     l2321:
  7519  006A78  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  7520  006A7C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7521  006A80  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7522  006A84  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  7523  006A88  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  7524  006A8C  EC90  F031         	call	___ftpack	;wreg free
  7525  006A90  C001  F02E         	movff	?___ftpack,?___ftadd
  7526  006A94  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  7527  006A98  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  7528  006A9C  0012               	return	
  7529  006A9E                     __end_of___ftadd:
  7530                           	opt stack 0
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           indf0	equ	0xFEF
  7538                           fsr0h	equ	0xFEA
  7539                           fsr0l	equ	0xFE9
  7540                           wreg	equ	0xFE8
  7541                           indf1	equ	0xFE7
  7542                           fsr1h	equ	0xFE2
  7543                           fsr1l	equ	0xFE1
  7544                           indf2	equ	0xFDF
  7545                           postinc2	equ	0xFDE
  7546                           postdec2	equ	0xFDD
  7547                           fsr2h	equ	0xFDA
  7548                           fsr2l	equ	0xFD9
  7549                           status	equ	0xFD8
  7550                           
  7551 ;; *************** function ___ftpack *****************
  7552 ;; Defined at:
  7553 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  7554 ;; Parameters:    Size  Location     Type
  7555 ;;  arg             3    0[COMRAM] unsigned um
  7556 ;;  exp             1    3[COMRAM] unsigned char 
  7557 ;;  sign            1    4[COMRAM] unsigned char 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;		None
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  3    0[COMRAM] float 
  7562 ;; Registers used:
  7563 ;;		wreg, status,2, status,0
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7569 ;;      Params:         5       0       0       0       0       0       0
  7570 ;;      Locals:         0       0       0       0       0       0       0
  7571 ;;      Temps:          3       0       0       0       0       0       0
  7572 ;;      Totals:         8       0       0       0       0       0       0
  7573 ;;Total ram usage:        8 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		___ftadd
  7579 ;;		___ftmul
  7580 ;;		___lltoft
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           	psect	text34
  7585  006320                     __ptext34:
  7586                           	opt stack 0
  7587  006320                     ___ftpack:
  7588                           	opt stack 25
  7589                           
  7590                           ;incstack = 0
  7591  006320  5004               	movf	___ftpack@exp,w,c
  7592  006322  B4D8               	btfsc	status,2,c
  7593  006324  D005               	goto	l2173
  7594  006326  5001               	movf	___ftpack@arg,w,c
  7595  006328  1002               	iorwf	___ftpack@arg+1,w,c
  7596  00632A  1003               	iorwf	___ftpack@arg+2,w,c
  7597  00632C  A4D8               	btfss	status,2,c
  7598  00632E  D00C               	goto	l2179
  7599  006330                     l2173:
  7600  006330  0E00               	movlw	0
  7601  006332  6E01               	movwf	?___ftpack,c
  7602  006334  0E00               	movlw	0
  7603  006336  6E02               	movwf	?___ftpack+1,c
  7604  006338  0E00               	movlw	0
  7605  00633A  6E03               	movwf	?___ftpack+2,c
  7606  00633C  0012               	return	
  7607  00633E                     l2177:
  7608  00633E  2A04               	incf	___ftpack@exp,f,c
  7609  006340  90D8               	bcf	status,0,c
  7610  006342  3203               	rrcf	___ftpack@arg+2,f,c
  7611  006344  3202               	rrcf	___ftpack@arg+1,f,c
  7612  006346  3201               	rrcf	___ftpack@arg,f,c
  7613  006348                     l2179:
  7614  006348  0E00               	movlw	0
  7615  00634A  1401               	andwf	___ftpack@arg,w,c
  7616  00634C  6E06               	movwf	??___ftpack& (0+255),c
  7617  00634E  0E00               	movlw	0
  7618  006350  1402               	andwf	___ftpack@arg+1,w,c
  7619  006352  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7620  006354  0EFE               	movlw	254
  7621  006356  1403               	andwf	___ftpack@arg+2,w,c
  7622  006358  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7623  00635A  5006               	movf	??___ftpack,w,c
  7624  00635C  1007               	iorwf	??___ftpack+1,w,c
  7625  00635E  1008               	iorwf	??___ftpack+2,w,c
  7626  006360  B4D8               	btfsc	status,2,c
  7627  006362  D00C               	goto	l2185
  7628  006364  D7EC               	goto	l2177
  7629  006366                     l2181:
  7630  006366  2A04               	incf	___ftpack@exp,f,c
  7631  006368  0E01               	movlw	1
  7632  00636A  2601               	addwf	___ftpack@arg,f,c
  7633  00636C  0E00               	movlw	0
  7634  00636E  2202               	addwfc	___ftpack@arg+1,f,c
  7635  006370  0E00               	movlw	0
  7636  006372  2203               	addwfc	___ftpack@arg+2,f,c
  7637  006374  90D8               	bcf	status,0,c
  7638  006376  3203               	rrcf	___ftpack@arg+2,f,c
  7639  006378  3202               	rrcf	___ftpack@arg+1,f,c
  7640  00637A  3201               	rrcf	___ftpack@arg,f,c
  7641  00637C                     l2185:
  7642  00637C  0E00               	movlw	0
  7643  00637E  1401               	andwf	___ftpack@arg,w,c
  7644  006380  6E06               	movwf	??___ftpack& (0+255),c
  7645  006382  0E00               	movlw	0
  7646  006384  1402               	andwf	___ftpack@arg+1,w,c
  7647  006386  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7648  006388  0EFF               	movlw	255
  7649  00638A  1403               	andwf	___ftpack@arg+2,w,c
  7650  00638C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7651  00638E  5006               	movf	??___ftpack,w,c
  7652  006390  1007               	iorwf	??___ftpack+1,w,c
  7653  006392  1008               	iorwf	??___ftpack+2,w,c
  7654  006394  B4D8               	btfsc	status,2,c
  7655  006396  D006               	goto	l2189
  7656  006398  D7E6               	goto	l2181
  7657  00639A                     l2187:
  7658  00639A  0604               	decf	___ftpack@exp,f,c
  7659  00639C  90D8               	bcf	status,0,c
  7660  00639E  3601               	rlcf	___ftpack@arg,f,c
  7661  0063A0  3602               	rlcf	___ftpack@arg+1,f,c
  7662  0063A2  3603               	rlcf	___ftpack@arg+2,f,c
  7663  0063A4                     l2189:
  7664  0063A4  BE02               	btfsc	___ftpack@arg+1,7,c
  7665  0063A6  D003               	goto	l569
  7666  0063A8  0E02               	movlw	2
  7667  0063AA  6004               	cpfslt	___ftpack@exp,c
  7668  0063AC  D7F6               	goto	l2187
  7669  0063AE                     l569:
  7670  0063AE  A004               	btfss	___ftpack@exp,0,c
  7671  0063B0  9E02               	bcf	___ftpack@arg+1,7,c
  7672  0063B2  90D8               	bcf	status,0,c
  7673  0063B4  3204               	rrcf	___ftpack@exp,f,c
  7674  0063B6  5004               	movf	___ftpack@exp,w,c
  7675  0063B8  1203               	iorwf	___ftpack@arg+2,f,c
  7676  0063BA  5005               	movf	___ftpack@sign,w,c
  7677  0063BC  A4D8               	btfss	status,2,c
  7678  0063BE  8E03               	bsf	___ftpack@arg+2,7,c
  7679  0063C0  C001  F001         	movff	___ftpack@arg,?___ftpack
  7680  0063C4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7681  0063C8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7682  0063CC  0012               	return	
  7683  0063CE                     __end_of___ftpack:
  7684                           	opt stack 0
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           indf0	equ	0xFEF
  7692                           fsr0h	equ	0xFEA
  7693                           fsr0l	equ	0xFE9
  7694                           wreg	equ	0xFE8
  7695                           indf1	equ	0xFE7
  7696                           fsr1h	equ	0xFE2
  7697                           fsr1l	equ	0xFE1
  7698                           indf2	equ	0xFDF
  7699                           postinc2	equ	0xFDE
  7700                           postdec2	equ	0xFDD
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function ___ftneg *****************
  7706 ;; Defined at:
  7707 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  f1              3    0[COMRAM] float 
  7710 ;; Auto vars:     Size  Location     Type
  7711 ;;		None
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  3    0[COMRAM] float 
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7721 ;;      Params:         3       0       0       0       0       0       0
  7722 ;;      Locals:         0       0       0       0       0       0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0
  7724 ;;      Totals:         3       0       0       0       0       0       0
  7725 ;;Total ram usage:        3 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_sprintf
  7731 ;; This function uses a non-reentrant model
  7732 ;;
  7733                           
  7734                           	psect	text35
  7735  005C70                     __ptext35:
  7736                           	opt stack 0
  7737  005C70                     ___ftneg:
  7738                           	opt stack 27
  7739                           
  7740                           ;incstack = 0
  7741  005C70  5001               	movf	___ftneg@f1,w,c
  7742  005C72  1002               	iorwf	___ftneg@f1+1,w,c
  7743  005C74  1003               	iorwf	___ftneg@f1+2,w,c
  7744  005C76  B4D8               	btfsc	status,2,c
  7745  005C78  D006               	goto	l666
  7746  005C7A  0E00               	movlw	0
  7747  005C7C  1A01               	xorwf	___ftneg@f1,f,c
  7748  005C7E  0E00               	movlw	0
  7749  005C80  1A02               	xorwf	___ftneg@f1+1,f,c
  7750  005C82  0E80               	movlw	128
  7751  005C84  1A03               	xorwf	___ftneg@f1+2,f,c
  7752  005C86                     l666:
  7753  005C86  C001  F001         	movff	___ftneg@f1,?___ftneg
  7754  005C8A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7755  005C8E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7756  005C92  0012               	return		;funcret
  7757  005C94                     __end_of___ftneg:
  7758                           	opt stack 0
  7759                           tblptru	equ	0xFF8
  7760                           tblptrh	equ	0xFF7
  7761                           tblptrl	equ	0xFF6
  7762                           tablat	equ	0xFF5
  7763                           prodh	equ	0xFF4
  7764                           prodl	equ	0xFF3
  7765                           indf0	equ	0xFEF
  7766                           fsr0h	equ	0xFEA
  7767                           fsr0l	equ	0xFE9
  7768                           wreg	equ	0xFE8
  7769                           indf1	equ	0xFE7
  7770                           fsr1h	equ	0xFE2
  7771                           fsr1l	equ	0xFE1
  7772                           indf2	equ	0xFDF
  7773                           postinc2	equ	0xFDE
  7774                           postdec2	equ	0xFDD
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function ___ftge *****************
  7780 ;; Defined at:
  7781 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  ff1             3    0[COMRAM] float 
  7784 ;;  ff2             3    3[COMRAM] float 
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;		None
  7787 ;; Return value:  Size  Location     Type
  7788 ;;		None               void
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7796 ;;      Params:         6       0       0       0       0       0       0
  7797 ;;      Locals:         0       0       0       0       0       0       0
  7798 ;;      Temps:          3       0       0       0       0       0       0
  7799 ;;      Totals:         9       0       0       0       0       0       0
  7800 ;;Total ram usage:        9 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_main_loop
  7806 ;;		_sprintf
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text36
  7811  0061FE                     __ptext36:
  7812                           	opt stack 0
  7813  0061FE                     ___ftge:
  7814                           	opt stack 27
  7815                           
  7816                           ;incstack = 0
  7817  0061FE  AE03               	btfss	___ftge@ff1+2,7,c
  7818  006200  D016               	goto	l2673
  7819  006202  C001  F007         	movff	___ftge@ff1,??___ftge
  7820  006206  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7821  00620A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7822  00620E  1E07               	comf	??___ftge,f,c
  7823  006210  1E08               	comf	??___ftge+1,f,c
  7824  006212  1E09               	comf	??___ftge+2,f,c
  7825  006214  2A07               	incf	??___ftge,f,c
  7826  006216  0E00               	movlw	0
  7827  006218  2208               	addwfc	??___ftge+1,f,c
  7828  00621A  2209               	addwfc	??___ftge+2,f,c
  7829  00621C  0E00               	movlw	0
  7830  00621E  2407               	addwf	??___ftge,w,c
  7831  006220  6E01               	movwf	___ftge@ff1,c
  7832  006222  0E00               	movlw	0
  7833  006224  2008               	addwfc	??___ftge+1,w,c
  7834  006226  6E02               	movwf	___ftge@ff1+1,c
  7835  006228  0E80               	movlw	128
  7836  00622A  2009               	addwfc	??___ftge+2,w,c
  7837  00622C  6E03               	movwf	___ftge@ff1+2,c
  7838  00622E                     l2673:
  7839  00622E  AE06               	btfss	___ftge@ff2+2,7,c
  7840  006230  D016               	goto	l2677
  7841  006232  C004  F007         	movff	___ftge@ff2,??___ftge
  7842  006236  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7843  00623A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7844  00623E  1E07               	comf	??___ftge,f,c
  7845  006240  1E08               	comf	??___ftge+1,f,c
  7846  006242  1E09               	comf	??___ftge+2,f,c
  7847  006244  2A07               	incf	??___ftge,f,c
  7848  006246  0E00               	movlw	0
  7849  006248  2208               	addwfc	??___ftge+1,f,c
  7850  00624A  2209               	addwfc	??___ftge+2,f,c
  7851  00624C  0E00               	movlw	0
  7852  00624E  2407               	addwf	??___ftge,w,c
  7853  006250  6E04               	movwf	___ftge@ff2,c
  7854  006252  0E00               	movlw	0
  7855  006254  2008               	addwfc	??___ftge+1,w,c
  7856  006256  6E05               	movwf	___ftge@ff2+1,c
  7857  006258  0E80               	movlw	128
  7858  00625A  2009               	addwfc	??___ftge+2,w,c
  7859  00625C  6E06               	movwf	___ftge@ff2+2,c
  7860  00625E                     l2677:
  7861  00625E  0E00               	movlw	0
  7862  006260  1A01               	xorwf	___ftge@ff1,f,c
  7863  006262  0E00               	movlw	0
  7864  006264  1A02               	xorwf	___ftge@ff1+1,f,c
  7865  006266  0E80               	movlw	128
  7866  006268  1A03               	xorwf	___ftge@ff1+2,f,c
  7867  00626A  0E00               	movlw	0
  7868  00626C  1A04               	xorwf	___ftge@ff2,f,c
  7869  00626E  0E00               	movlw	0
  7870  006270  1A05               	xorwf	___ftge@ff2+1,f,c
  7871  006272  0E80               	movlw	128
  7872  006274  1A06               	xorwf	___ftge@ff2+2,f,c
  7873  006276  5004               	movf	___ftge@ff2,w,c
  7874  006278  5C01               	subwf	___ftge@ff1,w,c
  7875  00627A  5005               	movf	___ftge@ff2+1,w,c
  7876  00627C  5802               	subwfb	___ftge@ff1+1,w,c
  7877  00627E  5006               	movf	___ftge@ff2+2,w,c
  7878  006280  5803               	subwfb	___ftge@ff1+2,w,c
  7879  006282  B0D8               	btfsc	status,0,c
  7880  006284  D002               	goto	l2683
  7881  006286  90D8               	bcf	status,0,c
  7882  006288  0012               	return	
  7883  00628A                     l2683:
  7884  00628A  80D8               	bsf	status,0,c
  7885  00628C  0012               	return	
  7886  00628E                     __end_of___ftge:
  7887                           	opt stack 0
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           indf0	equ	0xFEF
  7895                           fsr0h	equ	0xFEA
  7896                           fsr0l	equ	0xFE9
  7897                           wreg	equ	0xFE8
  7898                           indf1	equ	0xFE7
  7899                           fsr1h	equ	0xFE2
  7900                           fsr1l	equ	0xFE1
  7901                           indf2	equ	0xFDF
  7902                           postinc2	equ	0xFDE
  7903                           postdec2	equ	0xFDD
  7904                           fsr2h	equ	0xFDA
  7905                           fsr2l	equ	0xFD9
  7906                           status	equ	0xFD8
  7907                           
  7908 ;; *************** function _memset *****************
  7909 ;; Defined at:
  7910 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  p1              2    0[COMRAM] PTR void 
  7913 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
  7914 ;;  c               2    2[COMRAM] int 
  7915 ;;  n               2    4[COMRAM] unsigned int 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  p               2    6[COMRAM] PTR unsigned char 
  7918 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
  7919 ;; Return value:  Size  Location     Type
  7920 ;;                  2    0[COMRAM] PTR void 
  7921 ;; Registers used:
  7922 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7923 ;; Tracked objects:
  7924 ;;		On entry : 0/0
  7925 ;;		On exit  : 0/0
  7926 ;;		Unchanged: 0/0
  7927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7928 ;;      Params:         6       0       0       0       0       0       0
  7929 ;;      Locals:         2       0       0       0       0       0       0
  7930 ;;      Temps:          0       0       0       0       0       0       0
  7931 ;;      Totals:         8       0       0       0       0       0       0
  7932 ;;Total ram usage:        8 bytes
  7933 ;; Hardware stack levels used:    1
  7934 ;; This function calls:
  7935 ;;		Nothing
  7936 ;; This function is called by:
  7937 ;;		_util_beacon_transmission
  7938 ;; This function uses a non-reentrant model
  7939 ;;
  7940                           
  7941                           	psect	text37
  7942  005CBA                     __ptext37:
  7943                           	opt stack 0
  7944  005CBA                     _memset:
  7945                           	opt stack 28
  7946                           
  7947                           ;incstack = 0
  7948  005CBA  C001  F007         	movff	memset@p1,memset@p
  7949  005CBE  C002  F008         	movff	memset@p1+1,memset@p+1
  7950  005CC2  D008               	goto	l2809
  7951  005CC4                     l2805:
  7952  005CC4  C007  FFD9         	movff	memset@p,fsr2l
  7953  005CC8  C008  FFDA         	movff	memset@p+1,fsr2h
  7954  005CCC  C003  FFDF         	movff	memset@c,indf2
  7955  005CD0  4A07               	infsnz	memset@p,f,c
  7956  005CD2  2A08               	incf	memset@p+1,f,c
  7957  005CD4                     l2809:
  7958  005CD4  0605               	decf	memset@n,f,c
  7959  005CD6  A0D8               	btfss	status,0,c
  7960  005CD8  0606               	decf	memset@n+1,f,c
  7961  005CDA  2805               	incf	memset@n,w,c
  7962  005CDC  E1F3               	bnz	l2805
  7963  005CDE  2806               	incf	memset@n+1,w,c
  7964  005CE0  B4D8               	btfsc	status,2,c
  7965  005CE2  0012               	return	
  7966  005CE4  D7EF               	goto	l2805
  7967  005CE6                     __end_of_memset:
  7968                           	opt stack 0
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           indf0	equ	0xFEF
  7976                           fsr0h	equ	0xFEA
  7977                           fsr0l	equ	0xFE9
  7978                           wreg	equ	0xFE8
  7979                           indf1	equ	0xFE7
  7980                           fsr1h	equ	0xFE2
  7981                           fsr1l	equ	0xFE1
  7982                           indf2	equ	0xFDF
  7983                           postinc2	equ	0xFDE
  7984                           postdec2	equ	0xFDD
  7985                           fsr2h	equ	0xFDA
  7986                           fsr2l	equ	0xFD9
  7987                           status	equ	0xFD8
  7988                           
  7989 ;; *************** function _getTemperature *****************
  7990 ;; Defined at:
  7991 ;;		line 39 in file "easat2_util_inputs.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;		None
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;		None
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  3    0[COMRAM] float 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8005 ;;      Params:         3       0       0       0       0       0       0
  8006 ;;      Locals:         0       0       0       0       0       0       0
  8007 ;;      Temps:          0       0       0       0       0       0       0
  8008 ;;      Totals:         3       0       0       0       0       0       0
  8009 ;;Total ram usage:        3 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; This function calls:
  8012 ;;		Nothing
  8013 ;; This function is called by:
  8014 ;;		_main_loop
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           	psect	text38
  8019  005BFC                     __ptext38:
  8020                           	opt stack 0
  8021  005BFC                     _getTemperature:
  8022                           	opt stack 29
  8023                           
  8024                           ;easat2_util_inputs.c: 41: return -12.502;
  8025                           
  8026                           ;incstack = 0
  8027  005BFC  0E08               	movlw	8
  8028  005BFE  6E01               	movwf	?_getTemperature,c
  8029  005C00  0E48               	movlw	72
  8030  005C02  6E02               	movwf	?_getTemperature+1,c
  8031  005C04  0EC1               	movlw	193
  8032  005C06  6E03               	movwf	?_getTemperature+2,c
  8033  005C08  0012               	return	
  8034  005C0A                     __end_of_getTemperature:
  8035                           	opt stack 0
  8036                           tblptru	equ	0xFF8
  8037                           tblptrh	equ	0xFF7
  8038                           tblptrl	equ	0xFF6
  8039                           tablat	equ	0xFF5
  8040                           prodh	equ	0xFF4
  8041                           prodl	equ	0xFF3
  8042                           indf0	equ	0xFEF
  8043                           fsr0h	equ	0xFEA
  8044                           fsr0l	equ	0xFE9
  8045                           wreg	equ	0xFE8
  8046                           indf1	equ	0xFE7
  8047                           fsr1h	equ	0xFE2
  8048                           fsr1l	equ	0xFE1
  8049                           indf2	equ	0xFDF
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function _getSolarCurrent *****************
  8057 ;; Defined at:
  8058 ;;		line 24 in file "easat2_util_inputs.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;		None
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;		None
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  2    0[COMRAM] int 
  8065 ;; Registers used:
  8066 ;;		wreg, status,2
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8072 ;;      Params:         2       0       0       0       0       0       0
  8073 ;;      Locals:         0       0       0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0
  8075 ;;      Totals:         2       0       0       0       0       0       0
  8076 ;;Total ram usage:        2 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; This function calls:
  8079 ;;		Nothing
  8080 ;; This function is called by:
  8081 ;;		_main_loop
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text39
  8086  005BCE                     __ptext39:
  8087                           	opt stack 0
  8088  005BCE                     _getSolarCurrent:
  8089                           	opt stack 29
  8090                           
  8091                           ;easat2_util_inputs.c: 26: return 120;
  8092                           
  8093                           ;incstack = 0
  8094  005BCE  0E00               	movlw	0
  8095  005BD0  6E02               	movwf	?_getSolarCurrent+1,c
  8096  005BD2  0E78               	movlw	120
  8097  005BD4  6E01               	movwf	?_getSolarCurrent,c
  8098  005BD6  0012               	return	
  8099  005BD8                     __end_of_getSolarCurrent:
  8100                           	opt stack 0
  8101                           tblptru	equ	0xFF8
  8102                           tblptrh	equ	0xFF7
  8103                           tblptrl	equ	0xFF6
  8104                           tablat	equ	0xFF5
  8105                           prodh	equ	0xFF4
  8106                           prodl	equ	0xFF3
  8107                           indf0	equ	0xFEF
  8108                           fsr0h	equ	0xFEA
  8109                           fsr0l	equ	0xFE9
  8110                           wreg	equ	0xFE8
  8111                           indf1	equ	0xFE7
  8112                           fsr1h	equ	0xFE2
  8113                           fsr1l	equ	0xFE1
  8114                           indf2	equ	0xFDF
  8115                           postinc2	equ	0xFDE
  8116                           postdec2	equ	0xFDD
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _getBatteryVoltage *****************
  8122 ;; Defined at:
  8123 ;;		line 17 in file "easat2_util_inputs.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;		None
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  3    0[COMRAM] float 
  8130 ;; Registers used:
  8131 ;;		wreg, status,2
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/0
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8137 ;;      Params:         3       0       0       0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0
  8139 ;;      Temps:          0       0       0       0       0       0       0
  8140 ;;      Totals:         3       0       0       0       0       0       0
  8141 ;;Total ram usage:        3 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; This function calls:
  8144 ;;		Nothing
  8145 ;; This function is called by:
  8146 ;;		_main_loop
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text40
  8151  005BEE                     __ptext40:
  8152                           	opt stack 0
  8153  005BEE                     _getBatteryVoltage:
  8154                           	opt stack 29
  8155                           
  8156                           ;easat2_util_inputs.c: 19: return 3.702;
  8157                           
  8158                           ;incstack = 0
  8159  005BEE  0EEE               	movlw	238
  8160  005BF0  6E01               	movwf	?_getBatteryVoltage,c
  8161  005BF2  0E6C               	movlw	108
  8162  005BF4  6E02               	movwf	?_getBatteryVoltage+1,c
  8163  005BF6  0E40               	movlw	64
  8164  005BF8  6E03               	movwf	?_getBatteryVoltage+2,c
  8165  005BFA  0012               	return	
  8166  005BFC                     __end_of_getBatteryVoltage:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           indf0	equ	0xFEF
  8175                           fsr0h	equ	0xFEA
  8176                           fsr0l	equ	0xFE9
  8177                           wreg	equ	0xFE8
  8178                           indf1	equ	0xFE7
  8179                           fsr1h	equ	0xFE2
  8180                           fsr1l	equ	0xFE1
  8181                           indf2	equ	0xFDF
  8182                           postinc2	equ	0xFDE
  8183                           postdec2	equ	0xFDD
  8184                           fsr2h	equ	0xFDA
  8185                           fsr2l	equ	0xFD9
  8186                           status	equ	0xFD8
  8187                           
  8188 ;; *************** function _getBatteryCurrent *****************
  8189 ;; Defined at:
  8190 ;;		line 31 in file "easat2_util_inputs.c"
  8191 ;; Parameters:    Size  Location     Type
  8192 ;;		None
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;		None
  8195 ;; Return value:  Size  Location     Type
  8196 ;;                  2    0[COMRAM] int 
  8197 ;; Registers used:
  8198 ;;		wreg, status,2
  8199 ;; Tracked objects:
  8200 ;;		On entry : 0/0
  8201 ;;		On exit  : 0/0
  8202 ;;		Unchanged: 0/0
  8203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8204 ;;      Params:         2       0       0       0       0       0       0
  8205 ;;      Locals:         0       0       0       0       0       0       0
  8206 ;;      Temps:          0       0       0       0       0       0       0
  8207 ;;      Totals:         2       0       0       0       0       0       0
  8208 ;;Total ram usage:        2 bytes
  8209 ;; Hardware stack levels used:    1
  8210 ;; This function calls:
  8211 ;;		Nothing
  8212 ;; This function is called by:
  8213 ;;		_main_loop
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           	psect	text41
  8218  005BC4                     __ptext41:
  8219                           	opt stack 0
  8220  005BC4                     _getBatteryCurrent:
  8221                           	opt stack 29
  8222                           
  8223                           ;easat2_util_inputs.c: 33: return 100;
  8224                           
  8225                           ;incstack = 0
  8226  005BC4  0E00               	movlw	0
  8227  005BC6  6E02               	movwf	?_getBatteryCurrent+1,c
  8228  005BC8  0E64               	movlw	100
  8229  005BCA  6E01               	movwf	?_getBatteryCurrent,c
  8230  005BCC  0012               	return	
  8231  005BCE                     __end_of_getBatteryCurrent:
  8232                           	opt stack 0
  8233                           tblptru	equ	0xFF8
  8234                           tblptrh	equ	0xFF7
  8235                           tblptrl	equ	0xFF6
  8236                           tablat	equ	0xFF5
  8237                           prodh	equ	0xFF4
  8238                           prodl	equ	0xFF3
  8239                           indf0	equ	0xFEF
  8240                           fsr0h	equ	0xFEA
  8241                           fsr0l	equ	0xFE9
  8242                           wreg	equ	0xFE8
  8243                           indf1	equ	0xFE7
  8244                           fsr1h	equ	0xFE2
  8245                           fsr1l	equ	0xFE1
  8246                           indf2	equ	0xFDF
  8247                           postinc2	equ	0xFDE
  8248                           postdec2	equ	0xFDD
  8249                           fsr2h	equ	0xFDA
  8250                           fsr2l	equ	0xFD9
  8251                           status	equ	0xFD8
  8252                           
  8253 ;; *************** function _initialize *****************
  8254 ;; Defined at:
  8255 ;;		line 16 in file "easat2_util_initialize.c"
  8256 ;; Parameters:    Size  Location     Type
  8257 ;;		None
  8258 ;; Auto vars:     Size  Location     Type
  8259 ;;		None
  8260 ;; Return value:  Size  Location     Type
  8261 ;;                  1    wreg      void 
  8262 ;; Registers used:
  8263 ;;		None
  8264 ;; Tracked objects:
  8265 ;;		On entry : 0/0
  8266 ;;		On exit  : 0/0
  8267 ;;		Unchanged: 0/0
  8268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8269 ;;      Params:         0       0       0       0       0       0       0
  8270 ;;      Locals:         0       0       0       0       0       0       0
  8271 ;;      Temps:          0       0       0       0       0       0       0
  8272 ;;      Totals:         0       0       0       0       0       0       0
  8273 ;;Total ram usage:        0 bytes
  8274 ;; Hardware stack levels used:    1
  8275 ;; This function calls:
  8276 ;;		Nothing
  8277 ;; This function is called by:
  8278 ;;		_main
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           	psect	text42
  8283  005E46                     __ptext42:
  8284                           	opt stack 0
  8285  005E46                     _initialize:
  8286                           	opt stack 30
  8287                           
  8288                           ;easat2_util_initialize.c: 23: TRISDbits.TRISD0 = 0;
  8289                           
  8290                           ;incstack = 0
  8291  005E46  9095               	bcf	3989,0,c	;volatile
  8292                           
  8293                           ;easat2_util_initialize.c: 24: TRISDbits.TRISD1 = 0;
  8294  005E48  9295               	bcf	3989,1,c	;volatile
  8295                           
  8296                           ;easat2_util_initialize.c: 25: TRISDbits.TRISD2 = 0;
  8297  005E4A  9495               	bcf	3989,2,c	;volatile
  8298                           
  8299                           ;easat2_util_initialize.c: 26: TRISDbits.TRISD3 = 0;
  8300  005E4C  9695               	bcf	3989,3,c	;volatile
  8301                           
  8302                           ;easat2_util_initialize.c: 27: TRISDbits.TRISD4 = 0;
  8303  005E4E  9895               	bcf	3989,4,c	;volatile
  8304                           
  8305                           ;easat2_util_initialize.c: 28: TRISDbits.TRISD5 = 0;
  8306  005E50  9A95               	bcf	3989,5,c	;volatile
  8307                           
  8308                           ;easat2_util_initialize.c: 29: TRISDbits.TRISD6 = 0;
  8309  005E52  9C95               	bcf	3989,6,c	;volatile
  8310                           
  8311                           ;easat2_util_initialize.c: 30: TRISDbits.TRISD7 = 0;
  8312  005E54  9E95               	bcf	3989,7,c	;volatile
  8313                           
  8314                           ;easat2_util_initialize.c: 34: ANSELDbits.ANSD0 = 0;
  8315  005E56  010F               	movlb	15	; () banked
  8316  005E58  913B               	bcf	59,0,b	;volatile
  8317                           
  8318                           ;easat2_util_initialize.c: 35: ANSELDbits.ANSD1 = 0;
  8319  005E5A  010F               	movlb	15	; () banked
  8320  005E5C  933B               	bcf	59,1,b	;volatile
  8321                           
  8322                           ;easat2_util_initialize.c: 36: ANSELDbits.ANSD2 = 0;
  8323  005E5E  010F               	movlb	15	; () banked
  8324  005E60  953B               	bcf	59,2,b	;volatile
  8325                           
  8326                           ;easat2_util_initialize.c: 37: ANSELDbits.ANSD3 = 0;
  8327  005E62  010F               	movlb	15	; () banked
  8328  005E64  973B               	bcf	59,3,b	;volatile
  8329                           
  8330                           ;easat2_util_initialize.c: 38: ANSELDbits.ANSD4 = 0;
  8331  005E66  010F               	movlb	15	; () banked
  8332  005E68  993B               	bcf	59,4,b	;volatile
  8333                           
  8334                           ;easat2_util_initialize.c: 39: ANSELDbits.ANSD5 = 0;
  8335  005E6A  010F               	movlb	15	; () banked
  8336  005E6C  9B3B               	bcf	59,5,b	;volatile
  8337                           
  8338                           ;easat2_util_initialize.c: 40: ANSELDbits.ANSD6 = 0;
  8339  005E6E  010F               	movlb	15	; () banked
  8340  005E70  9D3B               	bcf	59,6,b	;volatile
  8341                           
  8342                           ;easat2_util_initialize.c: 41: ANSELDbits.ANSD7 = 0;
  8343  005E72  010F               	movlb	15	; () banked
  8344  005E74  9F3B               	bcf	59,7,b	;volatile
  8345                           
  8346                           ;easat2_util_initialize.c: 45: LATDbits.LATD0 = 0;
  8347  005E76  908C               	bcf	3980,0,c	;volatile
  8348                           
  8349                           ;easat2_util_initialize.c: 46: LATDbits.LATD1 = 0;
  8350  005E78  928C               	bcf	3980,1,c	;volatile
  8351                           
  8352                           ;easat2_util_initialize.c: 47: LATDbits.LATD2 = 0;
  8353  005E7A  948C               	bcf	3980,2,c	;volatile
  8354                           
  8355                           ;easat2_util_initialize.c: 48: LATDbits.LATD3 = 0;
  8356  005E7C  968C               	bcf	3980,3,c	;volatile
  8357                           
  8358                           ;easat2_util_initialize.c: 49: LATDbits.LATD4 = 0;
  8359  005E7E  988C               	bcf	3980,4,c	;volatile
  8360                           
  8361                           ;easat2_util_initialize.c: 50: LATDbits.LATD5 = 0;
  8362  005E80  9A8C               	bcf	3980,5,c	;volatile
  8363                           
  8364                           ;easat2_util_initialize.c: 51: LATDbits.LATD6 = 0;
  8365  005E82  9C8C               	bcf	3980,6,c	;volatile
  8366                           
  8367                           ;easat2_util_initialize.c: 52: LATDbits.LATD7 = 0;
  8368  005E84  9E8C               	bcf	3980,7,c	;volatile
  8369                           
  8370                           ; BSR set to: 15
  8371  005E86  0012               	return		;funcret
  8372  005E88                     __end_of_initialize:
  8373                           	opt stack 0
  8374                           tblptru	equ	0xFF8
  8375                           tblptrh	equ	0xFF7
  8376                           tblptrl	equ	0xFF6
  8377                           tablat	equ	0xFF5
  8378                           prodh	equ	0xFF4
  8379                           prodl	equ	0xFF3
  8380                           indf0	equ	0xFEF
  8381                           fsr0h	equ	0xFEA
  8382                           fsr0l	equ	0xFE9
  8383                           wreg	equ	0xFE8
  8384                           indf1	equ	0xFE7
  8385                           fsr1h	equ	0xFE2
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           tblptru	equ	0xFF8
  8394                           tblptrh	equ	0xFF7
  8395                           tblptrl	equ	0xFF6
  8396                           tablat	equ	0xFF5
  8397                           prodh	equ	0xFF4
  8398                           prodl	equ	0xFF3
  8399                           indf0	equ	0xFEF
  8400                           fsr0h	equ	0xFEA
  8401                           fsr0l	equ	0xFE9
  8402                           wreg	equ	0xFE8
  8403                           indf1	equ	0xFE7
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413                           	psect	rparam
  8414  0000                     tblptru	equ	0xFF8
  8415                           tblptrh	equ	0xFF7
  8416                           tblptrl	equ	0xFF6
  8417                           tablat	equ	0xFF5
  8418                           prodh	equ	0xFF4
  8419                           prodl	equ	0xFF3
  8420                           indf0	equ	0xFEF
  8421                           fsr0h	equ	0xFEA
  8422                           fsr0l	equ	0xFE9
  8423                           wreg	equ	0xFE8
  8424                           indf1	equ	0xFE7
  8425                           fsr1h	equ	0xFE2
  8426                           fsr1l	equ	0xFE1
  8427                           indf2	equ	0xFDF
  8428                           postinc2	equ	0xFDE
  8429                           postdec2	equ	0xFDD
  8430                           fsr2h	equ	0xFDA
  8431                           fsr2l	equ	0xFD9
  8432                           status	equ	0xFD8


Data Sizes:
    Strings     147
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      93
    BANK0           160     35      35
    BANK1           256    194     194
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p1	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    util_transmit_morse_sequence@morse_sequence	PTR unsigned char  size(2) Largest target is 7
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__memset	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main_loop->_util_beacon_transmission
    _util_waits_delay_mins->_util_waits_delay_secs
    _util_waits_delay_secs->_util_waits_delay_ms
    _util_beacon_transmission->_sprintf
    _util_transmit_letter->_util_transmit_morse_sequence
    _util_transmit_space_between_words->_util_waits_delay_ms
    _util_transmit_space_between_letters->_util_waits_delay_ms
    _util_transmit_morse_sequence->_util_transmit_dash
    _util_transmit_morse_sequence->_util_transmit_dot
    _util_transmit_space_between_dots_dashes->_util_waits_delay_ms
    _util_transmit_dot->_util_waits_delay_ms
    _util_transmit_dash->_util_waits_delay_ms
    _util_transmit_buzzer_1ms_cycle->_util_waits_delay_hundred_us
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK0

    _main->_main_loop
    _util_beacon_transmission->_sprintf

Critical Paths under _main in BANK1

    _main_loop->_util_beacon_transmission

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   52510
                         _initialize
                          _main_loop
 ---------------------------------------------------------------------------------
 (1) _main_loop                                           10    10      0   52510
                                             25 BANK0     10    10      0
                             ___ftge
                  _getBatteryCurrent
                  _getBatteryVoltage
                    _getSolarCurrent
                     _getTemperature
           _util_beacon_transmission
              _util_waits_delay_mins
 ---------------------------------------------------------------------------------
 (2) _util_waits_delay_mins                                5     3      2     760
                                             12 COMRAM     5     3      2
              _util_waits_delay_secs
 ---------------------------------------------------------------------------------
 (3) _util_waits_delay_secs                                7     5      2     586
                                              5 COMRAM     7     5      2
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (2) _util_beacon_transmission                           204   194     10   50988
                                             83 COMRAM    10     0     10
                                              0 BANK1    194   194      0
                             _memset
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
               _util_transmit_letter
 ---------------------------------------------------------------------------------
 (3) _util_transmit_letter                                 1     1      0    5480
                                             13 COMRAM     1     1      0
       _util_transmit_morse_sequence
_util_transmit_space_between_letters
  _util_transmit_space_between_words
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_words                    0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_letters                  0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_morse_sequence                         6     4      2    4598
                                              7 COMRAM     6     4      2
                             _strlen
                 _util_transmit_dash
                  _util_transmit_dot
_util_transmit_space_between_dots_da
 ---------------------------------------------------------------------------------
 (5) _util_transmit_space_between_dots_dashes              0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dot                                    2     2      0     650
                                              5 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dash                                   2     2      0     650
                                              5 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_waits_delay_ms                                  5     3      2     430
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _util_transmit_buzzer_1ms_cycle                       0     0      0     174
        _util_waits_delay_hundred_us
 ---------------------------------------------------------------------------------
 (7) _util_waits_delay_hundred_us                          5     3      2     174
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     218
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     226
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             51    37     14   43779
                                             63 COMRAM    20     6     14
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10231
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10033
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4251
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2164
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3526
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3229
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     480
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _getTemperature                                       3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _getSolarCurrent                                      2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getBatteryVoltage                                    3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _getBatteryCurrent                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
   _main_loop
     ___ftge
     _getBatteryCurrent
     _getBatteryVoltage
     _getSolarCurrent
     _getTemperature
     _util_beacon_transmission
       _memset
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _strcat
       _strcpy
       _strlen
       _util_transmit_letter
         _util_transmit_morse_sequence
           _strlen
           _util_transmit_dash
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_hundred_us
             _util_waits_delay_ms
           _util_transmit_dot
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_hundred_us
             _util_waits_delay_ms
           _util_transmit_space_between_dots_dashes
             _util_waits_delay_ms
         _util_transmit_space_between_letters
           _util_waits_delay_ms
         _util_transmit_space_between_words
           _util_waits_delay_ms
     _util_waits_delay_mins
       _util_waits_delay_secs
         _util_waits_delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5D      5D       1       97.9%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      23       4       21.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100     C2      C2       6       75.8%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Mon Oct 31 20:59:01 2016

                                              l62 5CFC                                                l56 5D28  
                                    ___awdiv@sign 000C                               ___wmul@multiplicand 0011  
                __end_of_util_beacon_transmission 64B0                                      __CFG_CP0$OFF 000000  
                                    __CFG_CP1$OFF 000000                                      __CFG_CP2$OFF 000000  
                                    __CFG_CP3$OFF 000000                                      ___ftadd@exp1 0039  
                                    ___ftadd@exp2 0038                                  ??_getTemperature 0004  
                                    ___ftadd@sign 0037                                               l193 5DCC  
                                             l186 5E00                                               l607 6A10  
                                             l616 6A2C                                               l296 7A8C  
                                             l537 67AE                                               l641 68E0  
                                             l634 6852                                               l635 687A  
                                             l716 6168                                               l726 6076  
                                             l592 6936                                               l569 63AE  
                                             l666 5C86                                               l596 6960  
                                    __CFG_CPB$OFF 000000                                      __CFG_CPD$OFF 000000  
                                    ___awmod@sign 0006                    ??_util_transmit_morse_sequence 000A  
                                             wreg 000FE8                                      __CFG_FOSC$XT 000000  
                                    __CFG_LVP$OFF 000000        util_transmit_morse_sequence@morse_sequence 0008  
                                            l3001 7ABE                                              l3101 7EB0  
                                            l3005 7B10                                              l2311 6A48  
                                            l2303 69FE                                              l3103 7EB4  
                                            l3023 7C1A                                              l3015 7BF4  
                                            l2207 5F22                                              l2223 5DEE  
                                            l2321 6A78                                              l2305 6A08  
                                            l3041 7C92                                              l3017 7C02  
                                            l3025 7C28                                              l3105 7ECA  
                                            l3113 5E92                                              l2209 5F26  
                                            l2153 5CF0                                              l3201 6F0A  
                                            l2331 65CC                                              l3043 7C98  
                                            l3035 7C6C                                              l3107 7EE6  
                                            l3115 5E96                                              l3203 6F18  
                                            l3131 6D20                                              l3123 6CE8  
                                            l2181 6366                                              l2173 6330  
                                            l2413 61F4                                              l2405 61DC  
                                            l3117 5EA6                                              l3141 6D66  
                                            l3133 6D2E                                              l3125 6CF6  
                                            l2263 6944                                              l2351 6626  
                                            l2511 71F4                                              l3063 7D2E  
                                            l3055 7CDE                                              l3119 5EAE  
                                            l2159 5D1C                                              l2239 5DBA  
                                            l3151 6DAC                                              l3143 6D74  
                                            l3135 6D3C                                              l3127 6D04  
                                            l3207 6F1E                                              l2185 637C  
                                            l2177 633E                                              l2409 61E6  
                                            l2441 60D6                                              l2433 60B6  
                                            l2425 609C                                              l2361 664E  
                                            l2337 65F4                                              l2505 7150  
                                            l3081 7DCC                                              l3161 6DF2  
                                            l3153 6DBA                                              l3145 6D82  
                                            l3137 6D4A                                              l3129 6D12  
                                            l3209 7016                                              l2187 639A  
                                            l2179 6348                                              l2291 69C0  
                                            l2435 60BE                                              l2355 6636  
                                            l2523 7344                                              l2515 7218  
                                            l3091 7E06                                              l3083 7DD6  
                                            l3075 7D8E                                              l3059 7D02  
                                            l3171 6E38                                              l3163 6E00  
                                            l3155 6DC8                                              l3147 6D90  
                                            l3139 6D58                                              l3243 6492  
                                            l3251 5D88                                              l2189 63A4  
                                            l2293 69CA                                              l2285 699E  
                                            l2269 696E                                              l2613 66D4  
                                            l2381 618E                                              l2437 60C2  
                                            l2445 60E0                                              l2429 60A8  
                                            l2365 665E                                              l2541 5C4A  
                                            l3085 7DE2                                              l3077 7D98  
                                            l3069 7D5A                                              l2461 5FDC  
                                            l3181 6E7E                                              l3173 6E46  
                                            l3165 6E0E                                              l3157 6DD6  
                                            l3149 6D9E                                              l3253 628E  
                                            l2295 69D4                                              l2607 66B6  
                                            l2551 67EC                                              l2463 6000  
                                            l2455 5FD0                                              l3191 6EC4  
                                            l3183 6E8C                                              l3175 6E54  
                                            l3167 6E1C                                              l3159 6DE4  
                                            l3239 6476                                              l3247 5D78  
                                            l2297 69DC                                              l2393 61B4  
                                            l2449 60EE                                              l2529 73E8  
                                            l3097 7E2C                                              l2457 5FD6  
                                            l3193 6ED2                                              l3185 6E9A  
                                            l3177 6E62                                              l3169 6E2A  
                                            l2801 5F02                                              l2715 6542  
                                            l2651 6784                                              l2635 6746  
                                            l2627 6716                                              l2395 61BC  
                                            l2387 619E                                              l2491 6CA4  
                                            l2483 6BE4                                              l2467 6008  
                                            l3195 6EE0                                              l3187 6EA8  
                                            l3179 6E70                                              l3259 6312  
                                            l2805 5CC4                                              l2733 6592  
                                            l2725 656A                                              l2557 6818  
                                            l2397 61C0                                              l2901 76F4  
                                            l2813 5D48                                              l3197 6EEE  
                                            l3189 6EB6                                              l2727 6576  
                                            l2719 6552                                              l2743 611A  
                                            l2647 6774                                              l2591 68B6  
                                            l2911 7776                                              l2831 746C  
                                            l2815 5D50                                              l3199 6EFC  
                                            l2809 5CD4                                              l2673 622E  
                                            l2665 5E1C                                              l2729 657C  
                                            l2745 6126                                              l2657 679C  
                                            l2921 77DE                                              l2905 771A  
                                            l2825 743A                                              l2683 628A  
                                            l2755 615A                                              l2747 612A  
                                            l2771 6068                                              l2763 6034  
                                            l2659 67A8                                              l2587 68A6  
                                            l2931 783C                                              l2907 7730  
                                            l2851 7542                                              l2819 741C  
                                            l2677 625E                                              l2765 6040  
                                            l2597 68CE                                              l2917 77B8  
                                            l2909 7760                                              l2861 758A  
                                            l2845 74F2                                              l2767 6044  
                                            l2599 68DA                                              l2935 78A2  
                                            l2855 7552                                              l2839 74CC  
                                            l2697 64DC                                              l2777 5F70  
                                            l2961 795A                                              l2953 7930  
                                            l2937 78A8                                              l2849 752C  
                                            l2793 5EEC                                              l2779 5F7C  
                                            l2971 79A0                                              l2963 7962  
                                            l2867 75A4                                              l2859 7558  
                                            l2787 5ED4                                              l2981 7A42  
                                            l2965 7976                                              l2957 794A  
                                            l2949 78EE                                              l2893 768C  
                                            l2877 75EA                                              l2789 5EDC  
                                            l2799 5EFE                                              l2993 7A90  
                                            l2969 799A                                              l2987 7A5A  
                                            l2979 7A34                                              l2989 7A6E  
                                            STR_1 7F97                                              STR_2 7F6B  
                                            STR_3 7FE7                                              STR_4 7FCF  
                                            STR_5 7FF4                                              STR_6 7FCA  
                                            STR_7 7FC0                                              STR_8 7FC3  
                                            STR_9 7FBE                                              u2001 65B4  
                                            u2021 65DC                                              u2301 67FC  
                                            u2510 64FA                                              u1801 6916  
                                            u2281 67D0                                              u1730 5F46  
                                            u2515 64F2                                              u1760 5E00  
                                            u1737 5F3C                                              u3257 5D1E  
                                            u2491 64C0                                              u3267 5CF2  
                                            u1780 5DCC                                              u1791 6902  
                                            u2780 762A                                              u2785 7620  
                                            u2970 7A84                                      __CFG_WRTC$ON 000000  
                                    __CFG_WRTD$ON 000000                                              _main 5BE2  
                                    ___ftpack@arg 0001                                      ___ftpack@exp 0004  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            indf0 000FEF                                              fsr0l 000FE9  
                                            fsr2h 000FDA                                              indf1 000FE7  
                                            fsr1l 000FE1                                              indf2 000FDF  
                                            fsr2l 000FD9                                     __CFG_BORV$190 000000  
                                            prodh 000FF4                                              prodl 000FF3  
                                            start 0000                                     __CFG_IESO$OFF 000000  
 __end_of_util_transmit_space_between_dots_dashes 5C18  __size_of_util_transmit_space_between_dots_dashes 000E  
       ??_util_transmit_space_between_dots_dashes 0006          ?_util_transmit_space_between_dots_dashes 0001  
         _util_transmit_space_between_dots_dashes 5C0A                                      _sprintf$1128 0060  
                                    ___ftmul@cntr 0022                                      ___param_bank 000010  
                                    ___ftmul@sign 0023                                      ___fttol@exp1 0039  
                                    ___fttol@lval 0035                                _util_transmit_dash 5D9E  
                                           ?_main 0001               __end_of_util_waits_delay_hundred_us 5D12  
                     _util_waits_delay_hundred_us 5CE6                                   __end_of___awdiv 61FE  
                                 __end_of___ftadd 6A9E                                             STR_10 7FD5  
                                           STR_11 7FCB                                             STR_12 7FAB  
                                           STR_20 7FF5                                             STR_13 7FE6  
                                           STR_21 7FD0                                             STR_22 7FA2  
                                           STR_14 7FF9                                             STR_30 7FA4  
                                           STR_15 7FA1                                             STR_23 7FEB  
                                           STR_31 7FAA                                             STR_24 7FB7  
                                           STR_16 7FBF                                             STR_32 7FB0  
                                           STR_40 7F90                                             STR_17 7FA0  
                                           STR_25 7FE1                                             STR_41 7FC2  
                                           STR_33 7FB6                                             STR_18 7FEF  
                                           STR_26 7FEA                                             STR_34 7FDA  
                                           STR_42 7F89                                             STR_19 7FE5  
                                           STR_27 7FE0                                             STR_35 7FD4  
                                           STR_28 7FC9                                             STR_36 7FCE  
                                 __end_of___awmod 60F8                                             STR_37 7FC8  
                                           STR_29 7F9E                                             STR_38 7FBC  
                                           STR_39 7F82                                   __end_of___ftneg 5C94  
                                 __end_of___lldiv 617A                                   __end_of___ftmul 6698  
                                 ___awdiv@divisor 0009                                   __end_of___llmod 6088  
                                 __end_of___ftsub 5E46                                   __end_of___fttol 65A4  
                               ??_getSolarCurrent 0003                                   ___awdiv@counter 000B  
                             ?_util_transmit_dash 0001                                     __CFG_WRT0$OFF 000000  
                                   __CFG_WRT1$OFF 000000                                     __CFG_WRT2$OFF 000000  
                                   __CFG_WRT3$OFF 000000                                      ___lltoft@exp 0011  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                  __CFG_EBTRB$OFF 000000                                   __end_of_dpowers 7F1D  
                                           _scale 701C                                   __end_of_isdigit 5C52  
                              __CFG_MCLRE$EXTMCLR 000000                                     ___ftpack@sign 0005  
                       util_waits_delay_secs@secs 0006                                    __CFG_BOREN$OFF 000000  
                                           tablat 000FF5                                             status 000FD8  
                     __end_of_util_waits_delay_ms 5D3E                                   __end_of_sprintf 7EF4  
                            ??_util_transmit_dash 0006                                   __initialization 5BD8  
                       util_beacon_transmission@i 01C0                                      __end_of_main 5BEE  
                    __end_of_util_transmit_letter 701C                                            ??_main 005E  
                                   ___fttol@sign1 0034                                     __activetblptr 000002  
                            __size_of__tdiv_to_l_ 0132                                  ___llmod@dividend 000E  
                                          ?_scale 0024                                  ___awdiv@dividend 0007  
                                __end_of___ftpack 63CE                                  __end_of___lltoft 5FC6  
                                  __CFG_WDTEN$OFF 000000                 __size_of_util_beacon_transmission 00E2  
                       ?_util_beacon_transmission 0054                                    __CFG_XINST$OFF 000000  
                                __end_of__powers_ 7F6B                                            ___ftge 61FE  
                         ??_util_waits_delay_mins 000F                           ??_util_waits_delay_secs 0008  
                                          ___wmul 5C94                                         ??___awdiv 000B  
                                       ??___ftadd 0034                                    __CFG_STVREN$ON 000000  
                                       ??___awmod 0005                                         ??___ftneg 0004  
                                       ??___lldiv 0009                                         ??___ftmul 001B  
                                       ??___llmod 0016                                         ??___ftsub 0040  
                                       ??___fttol 002F                                            _memset 5CBA  
                                          _fround 6A9E                                  ___awdiv@quotient 000D  
                                 ___awmod@divisor 0003                                   ___awmod@counter 0005  
                                          _strcat 5E88                                            _strcpy 5D3E  
                                          _strlen 5F18                             ___ftmul@f3_as_product 001F  
                                       ??_isdigit 0001                                      __mediumconst 7EF4  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                         ??_sprintf 004E  
                                 __CFG_HFOFST$OFF 000000                                        __accesstop 0060  
                         __end_of__initialization 5BD8                                   __CFG_PBADEN$OFF 000000  
                                      ___ftadd@f1 002E                                        ___ftadd@f2 0031  
                                      ___ftge@ff1 0001                                        ___ftge@ff2 0004  
                                   ___rparam_used 000001                                        ___ftneg@f1 0001  
                                      ___ftmul@f1 0015                                        ___ftmul@f2 0018  
                                      ___ftsub@f1 003A                                        ___ftsub@f2 003D  
                                      ___fttol@f1 002B                                    __pcstackCOMRAM 0001  
                                      ___lltoft@c 0009                          main_loop@battery_current 007E  
                                   __end_of_scale 740C                                        __div_to_l_ 6698  
                        main_loop@battery_voltage 0080                                   __div_to_l_@exp1 000C  
                                 __div_to_l_@cntr 000B                                           ??_scale 0027  
                                 __div_to_l_@quot 0007                                      sprintf@width 0067  
       __end_of_util_transmit_space_between_words 5C34        __size_of_util_transmit_space_between_words 000E  
             ??_util_transmit_space_between_words 0006                ?_util_transmit_space_between_words 0001  
               _util_transmit_space_between_words 5C26                                __size_of_main_loop 0092  
                                 __CFG_PLLCFG$OFF 000000                              _util_transmit_letter 6CE4  
                                   __div_to_l_@f1 0001                                     __div_to_l_@f2 0004  
                              __CFG_CCP2MX$PORTC1 000000                                   _getSolarCurrent 5BCE  
                                         ?___ftge 0001                                           ?___wmul 000F  
                              __CFG_CCP3MX$PORTB5 000000                                           ?_memset 0001  
                                         ?_fround 0024                                         ?___ftpack 0001  
                                       ?___lltoft 0009                                           ?_strcat 0001  
                                         ?_strcpy 0001                                           ?_strlen 0001  
                           ?_util_transmit_letter 0001              __size_of_util_waits_delay_hundred_us 002C  
                            util_waits_delay_ms@i 0004                      util_waits_delay_mins@minutes 000D  
                                 __CFG_PWRTEN$OFF 000000                                 __end_of__npowers_ 7F44  
                                         __Hparam 0000                                        _scale$1127 0027  
            __end_of_util_transmit_morse_sequence 6022             __size_of_util_transmit_morse_sequence 005C  
                    _util_transmit_morse_sequence 5FC6                                           __Lparam 0000  
     __end_of_util_transmit_space_between_letters 5C26      __size_of_util_transmit_space_between_letters 000E  
           ??_util_transmit_space_between_letters 0006              ?_util_transmit_space_between_letters 0001  
             _util_transmit_space_between_letters 5C18                                   __size_of___ftge 0090  
                                         ___awdiv 617A                                           ___ftadd 68F2  
                                         ___awmod 6088                                           ___ftneg 5C70  
                                         ___lldiv 60F8                                   __size_of___wmul 0026  
                                         ___ftmul 65A4                                           ___llmod 6022  
                                         ___ftsub 5E06                                           ___fttol 64B0  
                               __end_of_main_loop 6320                                           __pcinit 5BD8  
                                      ??___ftpack 0006                                   __size_of_memset 002C  
                                 __size_of_fround 0246                                           __ramtop 0600  
                                      _initialize 5E46                                        ??___lltoft 000D  
                                         __ptext0 5BE2                                           __ptext1 628E  
                                         __ptext2 5D6E                                           __ptext3 5ECA  
                                         __ptext4 63CE                                           __ptext5 6CE4  
                                         __ptext6 5C26                                           __ptext7 5C18  
                                         __ptext8 5FC6                                           __ptext9 5C0A  
                                 __size_of_strcat 0042                                   __size_of_strcpy 0030  
                                 __size_of_strlen 0052                                       ?__div_to_l_ 0001  
                                         _dpowers 7EF5                                           _isdigit 5C34  
                                ___awmod@dividend 0001                  ??_util_transmit_buzzer_1ms_cycle 0006  
                 ?_util_transmit_buzzer_1ms_cycle 0001                              main_loop@temperature 0079  
                                         _sprintf 740C                     util_transmit_morse_sequence@i 000C  
                            end_of_initialization 5BD8                           __size_of_getTemperature 000E  
                    util_waits_delay_hundred_us@i 0004                                           memset@c 0003  
                         __end_of_getSolarCurrent 5BD8                                           memset@n 0005  
                                         memset@p 0007                                     __Lmediumconst 7EF4  
                     __size_of_util_transmit_dash 0034                                   ___lldiv@divisor 0005  
                                 ___lldiv@counter 000D                                           postdec2 000FDD  
                    __size_of_util_waits_delay_ms 002C                                           postinc2 000FDE  
           util_beacon_transmission@solar_current 0057                    __size_of_util_waits_delay_mins 0030  
                                  __tdiv_to_l_@f1 0001                                    __tdiv_to_l_@f2 0004  
                  __size_of_util_waits_delay_secs 004E                     __end_of_util_waits_delay_mins 5D9E  
                   __end_of_util_waits_delay_secs 5F18                                           strlen@s 0001  
                                   ??__tdiv_to_l_ 0007                                         _PORTDbits 000F83  
                                       _TRISDbits 000F95                            ??_util_transmit_letter 000E  
           util_beacon_transmission@BEACON_BUFFER 0180                               __size_of__div_to_l_ 0128  
                                     ___ftmul@exp 001E                                 _util_transmit_dot 5DD2  
                                  __end_of___ftge 628E                                    __end_of___wmul 5CBA  
                              ?_util_transmit_dot 0001                                       ?_initialize 0001  
                                  __end_of_memset 5CE6                                    __end_of_fround 6CE4  
                                  __end_of_strcat 5ECA                                    __end_of_strcpy 5D6E  
                                  __end_of_strlen 5F6A                 util_waits_delay_hundred_us@hun_us 0001  
                             start_initialization 5BD8                               ??_util_transmit_dot 0006  
                          util_waits_delay_mins@i 0010                            util_waits_delay_secs@i 0009  
                          util_waits_delay_secs@j 000B                               __end_of__tdiv_to_l_ 68F2  
                        _util_beacon_transmission 63CE               util_beacon_transmission@temperature 005B  
                                ?_getSolarCurrent 0001                                   ___llmod@divisor 0012  
                                 ___llmod@counter 0016                               util_transmit_dash@i 0006  
                       __end_of_util_transmit_dot 5E06                                          ??___ftge 0007  
                                        ??___wmul 0013                                          ??_memset 0007  
                                        ??_fround 0027                                     sprintf@tmpval 0069  
                                        ??_strcat 0005                                          ??_strcpy 0005  
                                        ??_strlen 0003                      ?_util_waits_delay_hundred_us 0001  
                                      fround@prec 002D                                 __size_of___ftpack 00AE  
                               __size_of___lltoft 005C                                     __pcstackBANK0 0060  
                                   __pcstackBANK1 0100                                    _getTemperature 5BFC  
          util_beacon_transmission@BEACON_MESSAGE 0100                                       sprintf@flag 0065  
                                     sprintf@fval 0073                                       sprintf@prec 0076  
                             __size_of_initialize 0042                                     __pmediumconst 7EF4  
                                        ?___awdiv 0007                                          ?___ftadd 002E  
                                        ?___awmod 0001                                          ?___ftneg 0001  
                                        ?___lldiv 0001                                          ?___ftmul 0015  
                                        ?___llmod 000E                                          ?___ftsub 003A  
                                       __npowers_ 7F1D                                          ?___fttol 002B  
                                __CFG_PRICLKEN$ON 000000                                       __tdiv_to_l_ 67C0  
                                    ??__div_to_l_ 0007                                          ?_isdigit 0001  
                                       _main_loop 628E                     ??_util_waits_delay_hundred_us 0003  
                          __end_of_getTemperature 5C0A                               _util_waits_delay_ms 5D12  
                                        ?_sprintf 0040                                    __size_of_scale 03F0  
                                  ___wmul@product 0013                                          _LATDbits 000F8C  
                      __size_of_util_transmit_dot 0034                                __end_of__div_to_l_ 67C0  
          __end_of_util_transmit_buzzer_1ms_cycle 5C70           __size_of_util_transmit_buzzer_1ms_cycle 001E  
                  _util_transmit_buzzer_1ms_cycle 5C52                                 _getBatteryCurrent 5BC4  
                                __CFG_WDTPS$32768 000000                              ?_util_waits_delay_ms 0001  
                              ?_getBatteryCurrent 0001           util_beacon_transmission@battery_current 0059  
                               _getBatteryVoltage 5BEE                                 ___wmul@multiplier 000F  
                              ?_getBatteryVoltage 0001                        util_transmit_letter@letter 000E  
                             ??_getBatteryCurrent 0003                                        ?_main_loop 0001  
         util_beacon_transmission@battery_voltage 0054                                   ?_getTemperature 0001  
                             ??_getBatteryVoltage 0004                             util_waits_delay_ms@ms 0001  
                      __end_of_util_transmit_dash 5DD2                         __end_of_getBatteryCurrent 5BCE  
                                        __Hrparam 0000                                util_transmit_dot@i 0006  
                                        __Lrparam 0000                             ??_util_waits_delay_ms 0003  
                               __CFG_P2BMX$PORTC0 000000                         __end_of_getBatteryVoltage 5BFC  
                                __size_of___awdiv 0084                                  __size_of___ftadd 01AC  
                                __size_of___awmod 0070                                  __size_of___ftneg 0024  
                                __size_of___lldiv 0082                                  __size_of___ftmul 00F4  
                                __size_of___llmod 0066                                  __size_of___ftsub 0040  
                                __size_of___fttol 00F4                                      ??_initialize 0001  
                                        ___ftpack 6320                                       _fround$1125 002A  
                                     _fround$1126 0027                                          ___lltoft 5F6A  
                      ??_util_beacon_transmission 005E                                       _isdigit$787 0002  
                           _util_waits_delay_mins 5D6E                             _util_waits_delay_secs 5ECA  
                                      _ANSELDbits 000F3B                                        sprintf@exp 0071  
                                      sprintf@val 006D                                        strcat@from 0003  
                                __size_of_isdigit 001E                                          __ptext10 5DD2  
                                        __ptext11 5D9E                                          __ptext20 5C34  
                                        __ptext12 5D12                                          __ptext21 6A9E  
                                        __ptext13 5C52                                          __ptext30 60F8  
                                        __ptext22 5C94                                          __ptext14 5CE6  
                                        __ptext31 64B0                                          __ptext23 65A4  
                                        __ptext15 5F18                                          __ptext40 5BEE  
                                        __ptext32 5E06                                          __ptext24 6088  
                                        __ptext16 5D3E                                          __ptext41 5BC4  
                                        __ptext33 68F2                                          __ptext25 617A  
                                        __ptext17 5E88                                          __ptext42 5E46  
                                        __ptext34 6320                                          __ptext26 67C0  
                                        __ptext18 740C                                          __ptext35 5C70  
                                        __ptext27 6698                                          __ptext19 701C  
                                        __ptext36 61FE                                          __ptext28 5F6A  
                                        __ptext37 5CBA                                          __ptext29 6022  
                                        __ptext38 5BFC                                          __ptext39 5BCE  
                                        __powers_ 7F44                                  __size_of_sprintf 0AE8  
                                      strcpy@from 0003                     __size_of_util_transmit_letter 0338  
                                   __size_of_main 000C                                __end_of_initialize 5E88  
                   ?_util_transmit_morse_sequence 0008                                       ??_main_loop 005E  
                                        isdigit@c 0003                                          memset@p1 0001  
                          main_loop@solar_current 007C                                          scale@scl 002A  
                                       sprintf@ap 0063                                  __tdiv_to_l_@exp1 000F  
                                       sprintf@sp 0040                                  __tdiv_to_l_@cntr 000E  
                                __tdiv_to_l_@quot 000A                                  ___lldiv@dividend 0001  
                      __size_of_getBatteryCurrent 000A                          __size_of_getSolarCurrent 000A  
                      __size_of_getBatteryVoltage 000E                            ?_util_waits_delay_mins 000D  
                          ?_util_waits_delay_secs 0006                                      ?__tdiv_to_l_ 0001  
                                        sprintf@c 0078                                          sprintf@f 0042  
                                        strcat@cp 0005                                          strcat@to 0001  
                                ___lldiv@quotient 0009                                          strcpy@cp 0005  
                                        strlen@cp 0005                                          strcpy@to 0001  
                               __CFG_T3CMX$PORTB5 000000  
