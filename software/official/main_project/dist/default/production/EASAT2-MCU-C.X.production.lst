

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Fri Dec 02 20:19:00 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	text42,global,reloc=2,class=CODE,delta=1
    53                           	psect	text43,global,reloc=2,class=CODE,delta=1
    54                           	psect	text44,global,reloc=2,class=CODE,delta=1
    55                           	psect	text45,global,reloc=2,class=CODE,delta=1
    56                           	psect	text46,global,reloc=2,class=CODE,delta=1
    57                           	psect	text47,global,reloc=2,class=CODE,delta=1
    58                           	psect	text48,global,reloc=2,class=CODE,delta=1
    59                           	psect	text49,global,reloc=2,class=CODE,delta=1
    60                           	psect	text50,global,reloc=2,class=CODE,delta=1
    61                           	psect	text51,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    64  0000                     
    65                           	psect	mediumconst
    66  007EF4                     __pmediumconst:
    67                           	opt stack 0
    68  007EF4  00                 	db	0
    69  007EF5                     _dpowers:
    70                           	opt stack 0
    71  007EF5  0001               	dw	1
    72  007EF7  0000               	dw	0
    73  007EF9  000A               	dw	10
    74  007EFB  0000               	dw	0
    75  007EFD  0064               	dw	100
    76  007EFF  0000               	dw	0
    77  007F01  03E8               	dw	1000
    78  007F03  0000               	dw	0
    79  007F05  2710               	dw	10000
    80  007F07  0000               	dw	0
    81  007F09  86A0               	dw	34464
    82  007F0B  0001               	dw	1
    83  007F0D  4240               	dw	16960
    84  007F0F  000F               	dw	15
    85  007F11  9680               	dw	38528
    86  007F13  0098               	dw	152
    87  007F15  E100               	dw	57600
    88  007F17  05F5               	dw	1525
    89  007F19  CA00               	dw	51712
    90  007F1B  3B9A               	dw	15258
    91  007F1D                     __end_of_dpowers:
    92                           	opt stack 0
    93  007F1D                     __npowers_:
    94                           	opt stack 0
    95  007F1D  00                 	db	0
    96  007F1E  80                 	db	128
    97  007F1F  3F                 	db	63
    98  007F20  CD                 	db	205
    99  007F21  CC                 	db	204
   100  007F22  3D                 	db	61
   101  007F23  D7                 	db	215
   102  007F24  23                 	db	35
   103  007F25  3C                 	db	60
   104  007F26  12                 	db	18
   105  007F27  83                 	db	131
   106  007F28  3A                 	db	58
   107  007F29  B7                 	db	183
   108  007F2A  D1                 	db	209
   109  007F2B  38                 	db	56
   110  007F2C  C6                 	db	198
   111  007F2D  27                 	db	39
   112  007F2E  37                 	db	55
   113  007F2F  38                 	db	56
   114  007F30  86                 	db	134
   115  007F31  35                 	db	53
   116  007F32  C0                 	db	192
   117  007F33  D6                 	db	214
   118  007F34  33                 	db	51
   119  007F35  CC                 	db	204
   120  007F36  2B                 	db	43
   121  007F37  32                 	db	50
   122  007F38  70                 	db	112
   123  007F39  89                 	db	137
   124  007F3A  30                 	db	48
   125  007F3B  E7                 	db	231
   126  007F3C  DB                 	db	219
   127  007F3D  2E                 	db	46
   128  007F3E  E5                 	db	229
   129  007F3F  3C                 	db	60
   130  007F40  1E                 	db	30
   131  007F41  42                 	db	66
   132  007F42  A2                 	db	162
   133  007F43  0D                 	db	13
   134  007F44                     __end_of__npowers_:
   135                           	opt stack 0
   136  007F44                     __powers_:
   137                           	opt stack 0
   138  007F44  00                 	db	0
   139  007F45  80                 	db	128
   140  007F46  3F                 	db	63
   141  007F47  00                 	db	0
   142  007F48  20                 	db	32
   143  007F49  41                 	db	65
   144  007F4A  00                 	db	0
   145  007F4B  C8                 	db	200
   146  007F4C  42                 	db	66
   147  007F4D  00                 	db	0
   148  007F4E  7A                 	db	122
   149  007F4F  44                 	db	68
   150  007F50  40                 	db	64
   151  007F51  1C                 	db	28
   152  007F52  46                 	db	70
   153  007F53  50                 	db	80
   154  007F54  C3                 	db	195
   155  007F55  47                 	db	71
   156  007F56  24                 	db	36
   157  007F57  74                 	db	116
   158  007F58  49                 	db	73
   159  007F59  97                 	db	151
   160  007F5A  18                 	db	24
   161  007F5B  4B                 	db	75
   162  007F5C  BC                 	db	188
   163  007F5D  BE                 	db	190
   164  007F5E  4C                 	db	76
   165  007F5F  6B                 	db	107
   166  007F60  6E                 	db	110
   167  007F61  4E                 	db	78
   168  007F62  03                 	db	3
   169  007F63  15                 	db	21
   170  007F64  50                 	db	80
   171  007F65  79                 	db	121
   172  007F66  AD                 	db	173
   173  007F67  60                 	db	96
   174  007F68  F3                 	db	243
   175  007F69  49                 	db	73
   176  007F6A  71                 	db	113
   177  007F6B                     __end_of__powers_:
   178                           	opt stack 0
   179  0000                     _ANSELAbits	set	3896
   180  0000                     _ANSELDbits	set	3899
   181  0000                     _VREFCON0bits	set	3906
   182  0000                     _ADRES	set	4035
   183  0000                     _ADCON0bits	set	4034
   184  0000                     _ADCON1	set	4033
   185  0000                     _ADCON2	set	4032
   186  0000                     _LATAbits	set	3977
   187  0000                     _LATDbits	set	3980
   188  0000                     _PIR1bits	set	3998
   189  0000                     _PORTAbits	set	3968
   190  0000                     _PORTDbits	set	3971
   191  0000                     _TRISAbits	set	3986
   192  0000                     _TRISDbits	set	3989
   193  007F6B                     STR_2:
   194                           
   195                           ; BSR set to: 15
   196  007F6B  20                 	db	32
   197  007F6C  25                 	db	37
   198  007F6D  2E                 	db	46
   199  007F6E  31                 	db	49	;'1'
   200  007F6F  66                 	db	102	;'f'
   201  007F70  20                 	db	32
   202  007F71  25                 	db	37
   203  007F72  2E                 	db	46
   204  007F73  31                 	db	49	;'1'
   205  007F74  66                 	db	102	;'f'
   206  007F75  20                 	db	32
   207  007F76  25                 	db	37
   208  007F77  33                 	db	51	;'3'
   209  007F78  2E                 	db	46
   210  007F79  30                 	db	48	;'0'
   211  007F7A  64                 	db	100	;'d'
   212  007F7B  20                 	db	32
   213  007F7C  25                 	db	37
   214  007F7D  33                 	db	51	;'3'
   215  007F7E  2E                 	db	46
   216  007F7F  30                 	db	48	;'0'
   217  007F80  64                 	db	100	;'d'
   218  007F81  00                 	db	0
   219  007F82                     STR_39:
   220                           
   221                           ; BSR set to: 15
   222  007F82  2D                 	db	45
   223  007F83  2D                 	db	45
   224  007F84  2E                 	db	46
   225  007F85  2E                 	db	46
   226  007F86  2D                 	db	45
   227  007F87  2D                 	db	45
   228  007F88  00                 	db	0
   229  007F89                     STR_42:
   230                           
   231                           ; BSR set to: 15
   232  007F89  2E                 	db	46
   233  007F8A  2D                 	db	45
   234  007F8B  2E                 	db	46
   235  007F8C  2D                 	db	45
   236  007F8D  2E                 	db	46
   237  007F8E  2D                 	db	45
   238  007F8F  00                 	db	0
   239  007F90                     STR_43:
   240                           
   241                           ; BSR set to: 15
   242  007F90  2D                 	db	45
   243  007F91  2E                 	db	46
   244  007F92  2E                 	db	46
   245  007F93  2E                 	db	46
   246  007F94  2E                 	db	46
   247  007F95  2D                 	db	45
   248  007F96  00                 	db	0
   249  007F97                     STR_40:
   250                           
   251                           ; BSR set to: 15
   252  007F97  2E                 	db	46
   253  007F98  2E                 	db	46
   254  007F99  2D                 	db	45
   255  007F9A  2D                 	db	45
   256  007F9B  2E                 	db	46
   257  007F9C  2E                 	db	46
   258  007F9D  00                 	db	0
   259  007F9E                     STR_1:
   260                           
   261                           ; BSR set to: 15
   262  007F9E  45                 	db	69	;'E'
   263  007F9F  41                 	db	65	;'A'
   264  007FA0  53                 	db	83	;'S'
   265  007FA1  41                 	db	65	;'A'
   266  007FA2  54                 	db	84	;'T'
   267  007FA3  32                 	db	50	;'2'
   268  007FA4  00                 	db	0
   269  007FA5                     STR_29:
   270                           
   271                           ; BSR set to: 15
   272  007FA5  2D                 	db	45
   273  007FA6  2D                 	db	45
   274  007FA7  2D                 	db	45
   275  007FA8  2D                 	db	45
   276  007FA9  2D                 	db	45
   277  007FAA  00                 	db	0
   278  007FAB                     STR_30:
   279                           
   280                           ; BSR set to: 15
   281  007FAB  2E                 	db	46
   282  007FAC  2D                 	db	45
   283  007FAD  2D                 	db	45
   284  007FAE  2D                 	db	45
   285  007FAF  2D                 	db	45
   286  007FB0  00                 	db	0
   287  007FB1                     STR_31:
   288                           
   289                           ; BSR set to: 15
   290  007FB1  2E                 	db	46
   291  007FB2  2E                 	db	46
   292  007FB3  2D                 	db	45
   293  007FB4  2D                 	db	45
   294  007FB5  2D                 	db	45
   295  007FB6  00                 	db	0
   296  007FB7                     STR_32:
   297                           
   298                           ; BSR set to: 15
   299  007FB7  2E                 	db	46
   300  007FB8  2E                 	db	46
   301  007FB9  2E                 	db	46
   302  007FBA  2D                 	db	45
   303  007FBB  2D                 	db	45
   304  007FBC  00                 	db	0
   305  007FBD                     STR_38:
   306                           
   307                           ; BSR set to: 15
   308  007FBD  2D                 	db	45
   309  007FBE  2D                 	db	45
   310  007FBF  2D                 	db	45
   311  007FC0  2D                 	db	45
   312  007FC1  2E                 	db	46
   313  007FC2  00                 	db	0
   314  007FC3                     STR_41:
   315                           
   316                           ; BSR set to: 15
   317  007FC3  2D                 	db	45
   318  007FC4  2E                 	db	46
   319  007FC5  2E                 	db	46
   320  007FC6  2D                 	db	45
   321  007FC7  2E                 	db	46
   322  007FC8  00                 	db	0
   323  007FC9                     STR_37:
   324                           
   325                           ; BSR set to: 15
   326  007FC9  2D                 	db	45
   327  007FCA  2D                 	db	45
   328  007FCB  2D                 	db	45
   329  007FCC  2E                 	db	46
   330  007FCD  2E                 	db	46
   331  007FCE  00                 	db	0
   332  007FCF                     STR_36:
   333                           
   334                           ; BSR set to: 15
   335  007FCF  2D                 	db	45
   336  007FD0  2D                 	db	45
   337  007FD1  2E                 	db	46
   338  007FD2  2E                 	db	46
   339  007FD3  2E                 	db	46
   340  007FD4  00                 	db	0
   341  007FD5                     STR_35:
   342                           
   343                           ; BSR set to: 15
   344  007FD5  2D                 	db	45
   345  007FD6  2E                 	db	46
   346  007FD7  2E                 	db	46
   347  007FD8  2E                 	db	46
   348  007FD9  2E                 	db	46
   349  007FDA  00                 	db	0
   350  007FDB                     STR_34:
   351                           
   352                           ; BSR set to: 15
   353  007FDB  2E                 	db	46
   354  007FDC  2E                 	db	46
   355  007FDD  2E                 	db	46
   356  007FDE  2E                 	db	46
   357  007FDF  2E                 	db	46
   358  007FE0  00                 	db	0
   359  007FE1                     STR_27:
   360                           
   361                           ; BSR set to: 15
   362  007FE1  2D                 	db	45
   363  007FE2  2E                 	db	46
   364  007FE3  2D                 	db	45
   365  007FE4  2D                 	db	45
   366  007FE5  00                 	db	0
   367  007FE6                     STR_19:
   368                           
   369                           ; BSR set to: 15
   370  007FE6  2D                 	db	45
   371  007FE7  2D                 	db	45
   372  007FE8  2E                 	db	46
   373  007FE9  2D                 	db	45
   374  007FEA  00                 	db	0
   375  007FEB                     STR_26:
   376                           
   377                           ; BSR set to: 15
   378  007FEB  2D                 	db	45
   379  007FEC  2E                 	db	46
   380  007FED  2E                 	db	46
   381  007FEE  2D                 	db	45
   382  007FEF  00                 	db	0
   383  007FF0                     STR_18:
   384                           
   385                           ; BSR set to: 15
   386  007FF0  2E                 	db	46
   387  007FF1  2D                 	db	45
   388  007FF2  2D                 	db	45
   389  007FF3  2E                 	db	46
   390  007FF4  00                 	db	0
   391  007FF5                     STR_5:
   392                           
   393                           ; BSR set to: 15
   394  007FF5  2D                 	db	45
   395  007FF6  2E                 	db	46
   396  007FF7  2D                 	db	45
   397  007FF8  2E                 	db	46
   398  007FF9  00                 	db	0
   399  007FFA                     STR_14:
   400                           
   401                           ; BSR set to: 15
   402  007FFA  2E                 	db	46
   403  007FFB  2D                 	db	45
   404  007FFC  2E                 	db	46
   405  007FFD  2E                 	db	46
   406  007FFE  00                 	db	0
   407  0000                     
   408                           ; #config settings
   409  007FFF  00                 	db	0	; dummy byte at the end
   410  0000                     
   411                           	psect	cinit
   412  004DB4                     __pcinit:
   413                           	opt stack 0
   414  004DB4                     start_initialization:
   415                           	opt stack 0
   416  004DB4                     __initialization:
   417                           	opt stack 0
   418  004DB4                     end_of_initialization:
   419                           	opt stack 0
   420  004DB4                     __end_of__initialization:
   421                           	opt stack 0
   422  004DB4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   423  004DB6  6EF8               	movwf	tblptru,c
   424  004DB8  0100               	movlb	0
   425  004DBA  EFDF  F026         	goto	_main	;jump to C main() function
   426                           tblptru	equ	0xFF8
   427                           
   428                           	psect	cstackBANK1
   429  000100                     __pcstackBANK1:
   430                           	opt stack 0
   431  000100                     util_beacon_transmission@BEACON_MESSAGE:
   432                           	opt stack 0
   433  000100                     util_getTemperature@bit_mem:
   434                           	opt stack 0
   435                           
   436                           ; 144 bytes @ 0x0
   437  000100                     	ds	128
   438  000180                     util_beacon_transmission@BEACON_BUFFER:
   439                           	opt stack 0
   440                           
   441                           ; 64 bytes @ 0x80
   442  000180                     	ds	16
   443  000190                     util_getTemperature@byte_mem:
   444                           	opt stack 0
   445                           
   446                           ; 18 bytes @ 0x90
   447  000190                     	ds	18
   448  0001A2                     util_getTemperature@num_bit:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0xA2
   452  0001A2                     	ds	2
   453  0001A4                     util_getTemperature@sign:
   454                           	opt stack 0
   455                           
   456                           ; 3 bytes @ 0xA4
   457  0001A4                     	ds	3
   458  0001A7                     _util_getTemperature$1787:
   459                           	opt stack 0
   460                           
   461                           ; 3 bytes @ 0xA7
   462  0001A7                     	ds	3
   463  0001AA                     _util_getTemperature$1788:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0xAA
   467  0001AA                     	ds	3
   468  0001AD                     _util_getTemperature$1789:
   469                           	opt stack 0
   470                           
   471                           ; 3 bytes @ 0xAD
   472  0001AD                     	ds	3
   473  0001B0                     _util_getTemperature$1790:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0xB0
   477  0001B0                     	ds	3
   478  0001B3                     util_getTemperature@shift_reg_bit0:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0xB3
   482  0001B3                     	ds	2
   483  0001B5                     util_getTemperature@shift_reg_bit1:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0xB5
   487  0001B5                     	ds	2
   488  0001B7                     util_getTemperature@shift_reg_bit2:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0xB7
   492  0001B7                     	ds	2
   493  0001B9                     util_getTemperature@shift_reg_bit3:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0xB9
   497  0001B9                     	ds	2
   498  0001BB                     util_getTemperature@shift_reg_bit4:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0xBB
   502  0001BB                     	ds	2
   503  0001BD                     util_getTemperature@shift_reg_bit5:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0xBD
   507  0001BD                     	ds	2
   508  0001BF                     util_getTemperature@shift_reg_bit6:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0xBF
   512  0001BF                     	ds	1
   513  0001C0                     util_beacon_transmission@i:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0xC0
   517  0001C0                     	ds	1
   518  0001C1                     util_getTemperature@shift_reg_bit7:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0xC1
   522  0001C1                     	ds	2
   523  0001C3                     util_getTemperature@shift_reg_bit_temp:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0xC3
   527  0001C3                     	ds	2
   528  0001C5                     util_getTemperature@num_byte:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0xC5
   532  0001C5                     	ds	2
   533  0001C7                     util_getTemperature@bit_in_byte:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0xC7
   537  0001C7                     	ds	2
   538  0001C9                     util_getTemperature@temperature:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0xC9
   542  0001C9                     	ds	3
   543  0001CC                     util_getTemperature@i:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0xCC
   547  0001CC                     	ds	2
   548                           tblptru	equ	0xFF8
   549                           
   550                           	psect	cstackBANK0
   551  000060                     __pcstackBANK0:
   552                           	opt stack 0
   553  000060                     _sprintf$1794:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x0
   557  000060                     	ds	3
   558  000063                     sprintf@ap:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0x3
   562  000063                     	ds	2
   563  000065                     sprintf@flag:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x5
   567  000065                     	ds	2
   568  000067                     sprintf@width:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x7
   572  000067                     	ds	2
   573  000069                     sprintf@tmpval:
   574                           	opt stack 0
   575                           
   576                           ; 4 bytes @ 0x9
   577  000069                     	ds	4
   578  00006D                     sprintf@val:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0xD
   582  00006D                     	ds	4
   583  000071                     sprintf@exp:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x11
   587  000071                     	ds	2
   588  000073                     sprintf@fval:
   589                           	opt stack 0
   590                           
   591                           ; 3 bytes @ 0x13
   592  000073                     	ds	3
   593  000076                     sprintf@prec:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x16
   597  000076                     	ds	2
   598  000078                     sprintf@c:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x18
   602  000078                     	ds	1
   603  000079                     main_loop@temperature:
   604                           	opt stack 0
   605                           
   606                           ; 3 bytes @ 0x19
   607  000079                     	ds	3
   608  00007C                     main_loop@solar_current:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x1C
   612  00007C                     	ds	2
   613  00007E                     main_loop@battery_current:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x1E
   617  00007E                     	ds	2
   618  000080                     main_loop@battery_voltage:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x20
   622  000080                     	ds	3
   623                           tblptru	equ	0xFF8
   624                           
   625                           	psect	cstackCOMRAM
   626  000001                     __pcstackCOMRAM:
   627                           	opt stack 0
   628  000001                     ??_isdigit:
   629  000001                     ?_util_onewire_reset:
   630                           	opt stack 0
   631  000001                     ?_strlen:
   632                           	opt stack 0
   633  000001                     ?_util_onewire_read_bit:
   634                           	opt stack 0
   635  000001                     ?___awmod:
   636                           	opt stack 0
   637  000001                     ?___ftpack:
   638                           	opt stack 0
   639  000001                     ?___ftneg:
   640                           	opt stack 0
   641  000001                     ?__tdiv_to_l_:
   642                           	opt stack 0
   643  000001                     ?__div_to_l_:
   644                           	opt stack 0
   645  000001                     ?___lldiv:
   646                           	opt stack 0
   647  000001                     util_waits_delay_ms@ms:
   648                           	opt stack 0
   649  000001                     util_waits_delay_hundred_us@hun_us:
   650                           	opt stack 0
   651  000001                     util_onewire_write_bit@bit_in:
   652                           	opt stack 0
   653  000001                     ___awmod@dividend:
   654                           	opt stack 0
   655  000001                     memset@p1:
   656                           	opt stack 0
   657  000001                     strcat@to:
   658                           	opt stack 0
   659  000001                     strcpy@to:
   660                           	opt stack 0
   661  000001                     strlen@s:
   662                           	opt stack 0
   663  000001                     __div_to_l_@f1:
   664                           	opt stack 0
   665  000001                     ___ftpack@arg:
   666                           	opt stack 0
   667  000001                     __tdiv_to_l_@f1:
   668                           	opt stack 0
   669  000001                     ___ftge@ff1:
   670                           	opt stack 0
   671  000001                     ___ftneg@f1:
   672                           	opt stack 0
   673  000001                     ___lldiv@dividend:
   674                           	opt stack 0
   675                           
   676                           ; 4 bytes @ 0x0
   677  000001                     	ds	1
   678  000002                     _isdigit$1452:
   679                           	opt stack 0
   680                           
   681                           ; 1 bytes @ 0x1
   682  000002                     	ds	1
   683  000003                     ??_util_waits_delay_ms:
   684  000003                     ??_util_onewire_reset:
   685  000003                     ??_strlen:
   686  000003                     ??_util_onewire_read_bit:
   687  000003                     ??_util_waits_delay_hundred_us:
   688  000003                     isdigit@c:
   689                           	opt stack 0
   690  000003                     util_onewire_write_byte@value:
   691                           	opt stack 0
   692  000003                     ___awmod@divisor:
   693                           	opt stack 0
   694  000003                     memset@c:
   695                           	opt stack 0
   696  000003                     strcat@from:
   697                           	opt stack 0
   698  000003                     strcpy@from:
   699                           	opt stack 0
   700                           
   701                           ; 2 bytes @ 0x2
   702  000003                     	ds	1
   703  000004                     ___ftpack@exp:
   704                           	opt stack 0
   705  000004                     util_waits_delay_ms@i:
   706                           	opt stack 0
   707  000004                     util_waits_delay_hundred_us@i:
   708                           	opt stack 0
   709  000004                     util_onewire_reset@presence:
   710                           	opt stack 0
   711  000004                     util_onewire_read_bit@value:
   712                           	opt stack 0
   713  000004                     __div_to_l_@f2:
   714                           	opt stack 0
   715  000004                     __tdiv_to_l_@f2:
   716                           	opt stack 0
   717  000004                     ___ftge@ff2:
   718                           	opt stack 0
   719                           
   720                           ; 3 bytes @ 0x3
   721  000004                     	ds	1
   722  000005                     ??_util_onewire_write_byte:
   723  000005                     ___awmod@counter:
   724                           	opt stack 0
   725  000005                     ___ftpack@sign:
   726                           	opt stack 0
   727  000005                     memset@n:
   728                           	opt stack 0
   729  000005                     strcat@cp:
   730                           	opt stack 0
   731  000005                     strcpy@cp:
   732                           	opt stack 0
   733  000005                     strlen@cp:
   734                           	opt stack 0
   735  000005                     ___lldiv@divisor:
   736                           	opt stack 0
   737                           
   738                           ; 4 bytes @ 0x4
   739  000005                     	ds	1
   740  000006                     ??___ftpack:
   741  000006                     ?_util_onewire_read_byte:
   742                           	opt stack 0
   743  000006                     ___awmod@sign:
   744                           	opt stack 0
   745  000006                     util_waits_delay_secs@secs:
   746                           	opt stack 0
   747  000006                     util_transmit_dot@i:
   748                           	opt stack 0
   749  000006                     util_transmit_dash@i:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x5
   753  000006                     	ds	1
   754  000007                     ??__tdiv_to_l_:
   755  000007                     ??___ftge:
   756  000007                     ?___awdiv:
   757                           	opt stack 0
   758  000007                     ___awdiv@dividend:
   759                           	opt stack 0
   760  000007                     memset@p:
   761                           	opt stack 0
   762  000007                     __div_to_l_@quot:
   763                           	opt stack 0
   764                           
   765                           ; 4 bytes @ 0x6
   766  000007                     	ds	1
   767  000008                     ??_util_waits_delay_secs:
   768  000008                     ??_util_onewire_read_byte:
   769  000008                     util_transmit_morse_sequence@morse_sequence:
   770                           	opt stack 0
   771  000008                     util_onewire_write_byte@bit0:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x7
   775  000008                     	ds	1
   776  000009                     ?___awtoft:
   777                           	opt stack 0
   778  000009                     ?___lltoft:
   779                           	opt stack 0
   780  000009                     ?___lwtoft:
   781                           	opt stack 0
   782  000009                     util_waits_delay_secs@i:
   783                           	opt stack 0
   784  000009                     ___awdiv@divisor:
   785                           	opt stack 0
   786  000009                     ___awtoft@c:
   787                           	opt stack 0
   788  000009                     ___lwtoft@c:
   789                           	opt stack 0
   790  000009                     ___lldiv@quotient:
   791                           	opt stack 0
   792  000009                     ___lltoft@c:
   793                           	opt stack 0
   794                           
   795                           ; 4 bytes @ 0x8
   796  000009                     	ds	1
   797  00000A                     ??_util_transmit_morse_sequence:
   798  00000A                     util_onewire_write_byte@bit1:
   799                           	opt stack 0
   800  00000A                     __tdiv_to_l_@quot:
   801                           	opt stack 0
   802                           
   803                           ; 4 bytes @ 0x9
   804  00000A                     	ds	1
   805  00000B                     ___awdiv@counter:
   806                           	opt stack 0
   807  00000B                     __div_to_l_@cntr:
   808                           	opt stack 0
   809  00000B                     util_waits_delay_secs@j:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0xA
   813  00000B                     	ds	1
   814  00000C                     ___awdiv@sign:
   815                           	opt stack 0
   816  00000C                     ___awtoft@sign:
   817                           	opt stack 0
   818  00000C                     __div_to_l_@exp1:
   819                           	opt stack 0
   820  00000C                     util_transmit_morse_sequence@i:
   821                           	opt stack 0
   822  00000C                     util_onewire_write_byte@bit2:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0xB
   826  00000C                     	ds	1
   827  00000D                     ??___lltoft:
   828  00000D                     ?___ftdiv:
   829                           	opt stack 0
   830  00000D                     ___lldiv@counter:
   831                           	opt stack 0
   832  00000D                     util_waits_delay_mins@minutes:
   833                           	opt stack 0
   834  00000D                     ___awdiv@quotient:
   835                           	opt stack 0
   836  00000D                     ___ftdiv@f1:
   837                           	opt stack 0
   838                           
   839                           ; 3 bytes @ 0xC
   840  00000D                     	ds	1
   841  00000E                     ?___llmod:
   842                           	opt stack 0
   843  00000E                     util_transmit_letter@letter:
   844                           	opt stack 0
   845  00000E                     __tdiv_to_l_@cntr:
   846                           	opt stack 0
   847  00000E                     util_onewire_write_byte@bit3:
   848                           	opt stack 0
   849  00000E                     ___llmod@dividend:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0xD
   853  00000E                     	ds	1
   854  00000F                     ??_util_waits_delay_mins:
   855  00000F                     ?___wmul:
   856                           	opt stack 0
   857  00000F                     __tdiv_to_l_@exp1:
   858                           	opt stack 0
   859  00000F                     ___wmul@multiplier:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0xE
   863  00000F                     	ds	1
   864  000010                     util_waits_delay_mins@i:
   865                           	opt stack 0
   866  000010                     util_onewire_write_byte@bit4:
   867                           	opt stack 0
   868  000010                     ___ftdiv@f2:
   869                           	opt stack 0
   870                           
   871                           ; 3 bytes @ 0xF
   872  000010                     	ds	1
   873  000011                     ___lltoft@exp:
   874                           	opt stack 0
   875  000011                     ___wmul@multiplicand:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x10
   879  000011                     	ds	1
   880  000012                     util_waits_delay_hours@hours:
   881                           	opt stack 0
   882  000012                     util_onewire_write_byte@bit5:
   883                           	opt stack 0
   884  000012                     ___llmod@divisor:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x11
   888  000012                     	ds	1
   889  000013                     ??___ftdiv:
   890  000013                     ___wmul@product:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x12
   894  000013                     	ds	1
   895  000014                     ??_util_waits_delay_hours:
   896  000014                     util_onewire_write_byte@bit6:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x13
   900  000014                     	ds	1
   901  000015                     ?___ftmul:
   902                           	opt stack 0
   903  000015                     util_waits_delay_hours@i:
   904                           	opt stack 0
   905  000015                     ___ftmul@f1:
   906                           	opt stack 0
   907                           
   908                           ; 3 bytes @ 0x14
   909  000015                     	ds	1
   910  000016                     ___ftdiv@cntr:
   911                           	opt stack 0
   912  000016                     ___llmod@counter:
   913                           	opt stack 0
   914  000016                     util_onewire_write_byte@bit7:
   915                           	opt stack 0
   916  000016                     util_onewire_read_byte@bit0:
   917                           	opt stack 0
   918                           
   919                           ; 2 bytes @ 0x15
   920  000016                     	ds	1
   921  000017                     ___ftdiv@f3:
   922                           	opt stack 0
   923                           
   924                           ; 3 bytes @ 0x16
   925  000017                     	ds	1
   926  000018                     util_onewire_read_byte@bit1:
   927                           	opt stack 0
   928  000018                     ___ftmul@f2:
   929                           	opt stack 0
   930                           
   931                           ; 3 bytes @ 0x17
   932  000018                     	ds	2
   933  00001A                     ___ftdiv@exp:
   934                           	opt stack 0
   935  00001A                     util_onewire_read_byte@bit2:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x19
   939  00001A                     	ds	1
   940  00001B                     ??___ftmul:
   941  00001B                     ___ftdiv@sign:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x1A
   945  00001B                     	ds	1
   946  00001C                     util_onewire_read_byte@bit3:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x1B
   950  00001C                     	ds	2
   951  00001E                     ___ftmul@exp:
   952                           	opt stack 0
   953  00001E                     util_onewire_read_byte@bit4:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x1D
   957  00001E                     	ds	1
   958  00001F                     ___ftmul@f3_as_product:
   959                           	opt stack 0
   960                           
   961                           ; 3 bytes @ 0x1E
   962  00001F                     	ds	1
   963  000020                     util_onewire_read_byte@bit5:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x1F
   967  000020                     	ds	2
   968  000022                     ___ftmul@cntr:
   969                           	opt stack 0
   970  000022                     util_onewire_read_byte@bit6:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x21
   974  000022                     	ds	1
   975  000023                     ___ftmul@sign:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x22
   979  000023                     	ds	1
   980  000024                     ?_util_getBatteryVoltage:
   981                           	opt stack 0
   982  000024                     ?_fround:
   983                           	opt stack 0
   984  000024                     ?_scale:
   985                           	opt stack 0
   986  000024                     util_onewire_read_byte@bit7:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x23
   990  000024                     	ds	2
   991  000026                     util_onewire_read_byte@value:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x25
   995  000026                     	ds	1
   996  000027                     util_getBatteryVoltage@value:
   997                           	opt stack 0
   998  000027                     _fround$1792:
   999                           	opt stack 0
  1000  000027                     _scale$1793:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0x26
  1004  000027                     	ds	3
  1005  00002A                     scale@scl:
  1006                           	opt stack 0
  1007  00002A                     util_getBatteryVoltage@voltage:
  1008                           	opt stack 0
  1009  00002A                     _fround$1791:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x29
  1013  00002A                     	ds	1
  1014  00002B                     ?___fttol:
  1015                           	opt stack 0
  1016  00002B                     ___fttol@f1:
  1017                           	opt stack 0
  1018                           
  1019                           ; 3 bytes @ 0x2A
  1020  00002B                     	ds	2
  1021  00002D                     fround@prec:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x2C
  1025  00002D                     	ds	1
  1026  00002E                     ?___ftadd:
  1027                           	opt stack 0
  1028  00002E                     ___ftadd@f1:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x2D
  1032  00002E                     	ds	1
  1033  00002F                     ??___fttol:
  1034                           
  1035                           ; 1 bytes @ 0x2E
  1036  00002F                     	ds	2
  1037  000031                     ___ftadd@f2:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x30
  1041  000031                     	ds	3
  1042  000034                     ??___ftadd:
  1043  000034                     ___fttol@sign1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x33
  1047  000034                     	ds	1
  1048  000035                     ___fttol@lval:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x34
  1052  000035                     	ds	2
  1053  000037                     ___ftadd@sign:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x36
  1057  000037                     	ds	1
  1058  000038                     ___ftadd@exp2:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0x37
  1062  000038                     	ds	1
  1063  000039                     ___ftadd@exp1:
  1064                           	opt stack 0
  1065  000039                     ___fttol@exp1:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x38
  1069  000039                     	ds	1
  1070  00003A                     ?_util_getSolarCurrent:
  1071                           	opt stack 0
  1072  00003A                     ?_util_getBatteryCurrent:
  1073                           	opt stack 0
  1074  00003A                     ?_util_getTemperature:
  1075                           	opt stack 0
  1076  00003A                     ?___ftsub:
  1077                           	opt stack 0
  1078  00003A                     ___ftsub@f1:
  1079                           	opt stack 0
  1080                           
  1081                           ; 3 bytes @ 0x39
  1082  00003A                     	ds	2
  1083  00003C                     util_getSolarCurrent@value:
  1084                           	opt stack 0
  1085  00003C                     util_getBatteryCurrent@value:
  1086                           	opt stack 0
  1087                           
  1088                           ; 3 bytes @ 0x3B
  1089  00003C                     	ds	1
  1090  00003D                     ??_util_getTemperature:
  1091  00003D                     ___ftsub@f2:
  1092                           	opt stack 0
  1093                           
  1094                           ; 3 bytes @ 0x3C
  1095  00003D                     	ds	2
  1096  00003F                     util_getSolarCurrent@solarCurrent:
  1097                           	opt stack 0
  1098  00003F                     util_getBatteryCurrent@batteryCurrent:
  1099                           	opt stack 0
  1100                           
  1101                           ; 3 bytes @ 0x3E
  1102  00003F                     	ds	1
  1103  000040                     ?_sprintf:
  1104                           	opt stack 0
  1105  000040                     sprintf@sp:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x3F
  1109  000040                     	ds	2
  1110  000042                     sprintf@f:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x41
  1114  000042                     	ds	12
  1115  00004E                     ??_sprintf:
  1116                           
  1117                           ; 1 bytes @ 0x4D
  1118  00004E                     	ds	6
  1119  000054                     util_beacon_transmission@battery_voltage:
  1120                           	opt stack 0
  1121                           
  1122                           ; 3 bytes @ 0x53
  1123  000054                     	ds	3
  1124  000057                     util_beacon_transmission@solar_current:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x56
  1128  000057                     	ds	2
  1129  000059                     util_beacon_transmission@battery_current:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x58
  1133  000059                     	ds	2
  1134  00005B                     util_beacon_transmission@temperature:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x5A
  1138  00005B                     	ds	3
  1139  00005E                     tblptru	equ	0xFF8
  1140                           
  1141                           ; 1 bytes @ 0x5D
  1142 ;;
  1143 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1144 ;;
  1145 ;; *************** function _main *****************
  1146 ;; Defined at:
  1147 ;;		line 19 in file "easat2_main_mcu.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1161 ;;      Params:         0       0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels required when called:    7
  1167 ;; This function calls:
  1168 ;;		_initialize
  1169 ;;		_main_loop
  1170 ;; This function is called by:
  1171 ;;		Startup code after reset
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text0
  1176  004DBE                     __ptext0:
  1177                           	opt stack 0
  1178  004DBE                     _main:
  1179                           	opt stack 24
  1180                           
  1181                           ;easat2_main_mcu.c: 22: initialize();
  1182                           
  1183                           ; BSR set to: 15
  1184                           ;incstack = 0
  1185  004DBE  EC56  F02A         	call	_initialize	;wreg free
  1186                           
  1187                           ;easat2_main_mcu.c: 25: main_loop();
  1188  004DC2  EC99  F02A         	call	_main_loop	;wreg free
  1189  004DC6  EF00  F000         	goto	start
  1190  004DCA                     __end_of_main:
  1191                           	opt stack 0
  1192                           tblptru	equ	0xFF8
  1193                           
  1194 ;; *************** function _main_loop *****************
  1195 ;; Defined at:
  1196 ;;		line 31 in file "easat2_main_mcu.c"
  1197 ;; Parameters:    Size  Location     Type
  1198 ;;		None
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  battery_volt    3   32[BANK0 ] float 
  1201 ;;  temperature     3   25[BANK0 ] float 
  1202 ;;  battery_curr    2   30[BANK0 ] int 
  1203 ;;  solar_curren    2   28[BANK0 ] int 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1213 ;;      Params:         0       0       0       0       0       0       0
  1214 ;;      Locals:         0      10       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0
  1216 ;;      Totals:         0      10       0       0       0       0       0
  1217 ;;Total ram usage:       10 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    6
  1220 ;; This function calls:
  1221 ;;		_util_beacon_transmission
  1222 ;;		_util_getBatteryCurrent
  1223 ;;		_util_getBatteryVoltage
  1224 ;;		_util_getSolarCurrent
  1225 ;;		_util_getTemperature
  1226 ;;		_util_waits_delay_hours
  1227 ;;		_util_waits_delay_mins
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text1
  1234  005532                     __ptext1:
  1235                           	opt stack 0
  1236  005532                     _main_loop:
  1237                           	opt stack 24
  1238  005532                     
  1239                           ;easat2_main_mcu.c: 43: battery_voltage = util_getBatteryVoltage();
  1240  005532  EC24  F02B         	call	_util_getBatteryVoltage	;wreg free
  1241  005536  C024  F080         	movff	?_util_getBatteryVoltage,main_loop@battery_voltage
  1242  00553A  C025  F081         	movff	?_util_getBatteryVoltage+1,main_loop@battery_voltage+1
  1243  00553E  C026  F082         	movff	?_util_getBatteryVoltage+2,main_loop@battery_voltage+2
  1244                           
  1245                           ;easat2_main_mcu.c: 46: solar_current = util_getSolarCurrent();
  1246  005542  EC27  F02C         	call	_util_getSolarCurrent	;wreg free
  1247  005546  C03A  F07C         	movff	?_util_getSolarCurrent,main_loop@solar_current
  1248  00554A  C03B  F07D         	movff	?_util_getSolarCurrent+1,main_loop@solar_current+1
  1249                           
  1250                           ;easat2_main_mcu.c: 49: battery_current = util_getBatteryCurrent();
  1251  00554E  ECCE  F02B         	call	_util_getBatteryCurrent	;wreg free
  1252  005552  C03A  F07E         	movff	?_util_getBatteryCurrent,main_loop@battery_current
  1253  005556  C03B  F07F         	movff	?_util_getBatteryCurrent+1,main_loop@battery_current+1
  1254                           
  1255                           ;easat2_main_mcu.c: 52: temperature = util_getTemperature();
  1256  00555A  EC6E  F036         	call	_util_getTemperature	;wreg free
  1257  00555E  C03A  F079         	movff	?_util_getTemperature,main_loop@temperature
  1258  005562  C03B  F07A         	movff	?_util_getTemperature+1,main_loop@temperature+1
  1259  005566  C03C  F07B         	movff	?_util_getTemperature+2,main_loop@temperature+2
  1260                           
  1261                           ;easat2_main_mcu.c: 56: if (battery_voltage >= 0) {
  1262  00556A  0100               	movlb	0	; () banked
  1263  00556C  BF82               	btfsc	(main_loop@battery_voltage+2)& (0+255),7,b
  1264  00556E  D017               	goto	l4160
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;easat2_main_mcu.c: 57: util_beacon_transmission(battery_voltage, solar_current, battery
      +                          _current, temperature);
  1268  005570  C080  F054         	movff	main_loop@battery_voltage,util_beacon_transmission@battery_voltage
  1269  005574  C081  F055         	movff	main_loop@battery_voltage+1,util_beacon_transmission@battery_voltage+1
  1270  005578  C082  F056         	movff	main_loop@battery_voltage+2,util_beacon_transmission@battery_voltage+2
  1271  00557C  C07C  F057         	movff	main_loop@solar_current,util_beacon_transmission@solar_current
  1272  005580  C07D  F058         	movff	main_loop@solar_current+1,util_beacon_transmission@solar_current+1
  1273  005584  C07E  F059         	movff	main_loop@battery_current,util_beacon_transmission@battery_current
  1274  005588  C07F  F05A         	movff	main_loop@battery_current+1,util_beacon_transmission@battery_current+1
  1275  00558C  C079  F05B         	movff	main_loop@temperature,util_beacon_transmission@temperature
  1276  005590  C07A  F05C         	movff	main_loop@temperature+1,util_beacon_transmission@temperature+1
  1277  005594  C07B  F05D         	movff	main_loop@temperature+2,util_beacon_transmission@temperature+2
  1278  005598  EC80  F02C         	call	_util_beacon_transmission	;wreg free
  1279                           
  1280                           ;easat2_main_mcu.c: 58: } else {
  1281  00559C  D006               	goto	l26
  1282  00559E                     l4160:
  1283                           
  1284                           ;easat2_main_mcu.c: 60: util_waits_delay_hours(2);
  1285  00559E  0E00               	movlw	0
  1286  0055A0  6E13               	movwf	util_waits_delay_hours@hours+1,c
  1287  0055A2  0E02               	movlw	2
  1288  0055A4  6E12               	movwf	util_waits_delay_hours@hours,c
  1289  0055A6  ECD9  F027         	call	_util_waits_delay_hours	;wreg free
  1290  0055AA                     l26:
  1291                           
  1292                           ;easat2_main_mcu.c: 61: }
  1293                           ;easat2_main_mcu.c: 64: util_waits_delay_mins(3);
  1294  0055AA  0E00               	movlw	0
  1295  0055AC  6E0E               	movwf	util_waits_delay_mins@minutes+1,c
  1296  0055AE  0E03               	movlw	3
  1297  0055B0  6E0D               	movwf	util_waits_delay_mins@minutes,c
  1298  0055B2  ECC1  F027         	call	_util_waits_delay_mins	;wreg free
  1299                           
  1300                           ;easat2_main_mcu.c: 67: } while (1);
  1301  0055B6  D7BD               	goto	l4152
  1302  0055B8                     __end_of_main_loop:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           
  1306 ;; *************** function _util_waits_delay_hours *****************
  1307 ;; Defined at:
  1308 ;;		line 17 in file "easat2_util_waits.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;  hours           2   17[COMRAM] int 
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;  i               2   20[COMRAM] int 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1322 ;;      Params:         2       0       0       0       0       0       0
  1323 ;;      Locals:         2       0       0       0       0       0       0
  1324 ;;      Temps:          1       0       0       0       0       0       0
  1325 ;;      Totals:         5       0       0       0       0       0       0
  1326 ;;Total ram usage:        5 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    3
  1329 ;; This function calls:
  1330 ;;		_util_waits_delay_mins
  1331 ;; This function is called by:
  1332 ;;		_main_loop
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337  004FB2                     __ptext2:
  1338                           	opt stack 0
  1339  004FB2                     _util_waits_delay_hours:
  1340                           	opt stack 26
  1341                           
  1342                           ;easat2_util_waits.c: 18: for (int i = 0; i < hours; i++)
  1343                           
  1344                           ;incstack = 0
  1345  004FB2  0E00               	movlw	0
  1346  004FB4  6E16               	movwf	util_waits_delay_hours@i+1,c
  1347  004FB6  0E00               	movlw	0
  1348  004FB8  6E15               	movwf	util_waits_delay_hours@i,c
  1349  004FBA  D008               	goto	l4150
  1350  004FBC                     l4146:
  1351                           
  1352                           ;easat2_util_waits.c: 19: util_waits_delay_mins(60);
  1353  004FBC  0E00               	movlw	0
  1354  004FBE  6E0E               	movwf	util_waits_delay_mins@minutes+1,c
  1355  004FC0  0E3C               	movlw	60
  1356  004FC2  6E0D               	movwf	util_waits_delay_mins@minutes,c
  1357  004FC4  ECC1  F027         	call	_util_waits_delay_mins	;wreg free
  1358  004FC8  4A15               	infsnz	util_waits_delay_hours@i,f,c
  1359  004FCA  2A16               	incf	util_waits_delay_hours@i+1,f,c
  1360  004FCC                     l4150:
  1361  004FCC  5012               	movf	util_waits_delay_hours@hours,w,c
  1362  004FCE  5C15               	subwf	util_waits_delay_hours@i,w,c
  1363  004FD0  5016               	movf	util_waits_delay_hours@i+1,w,c
  1364  004FD2  0A80               	xorlw	128
  1365  004FD4  6E14               	movwf	??_util_waits_delay_hours& (0+255),c
  1366  004FD6  5013               	movf	util_waits_delay_hours@hours+1,w,c
  1367  004FD8  0A80               	xorlw	128
  1368  004FDA  5814               	subwfb	??_util_waits_delay_hours& (0+255),w,c
  1369  004FDC  B0D8               	btfsc	status,0,c
  1370  004FDE  0012               	return	
  1371  004FE0  D7ED               	goto	l4146
  1372  004FE2                     __end_of_util_waits_delay_hours:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _util_waits_delay_mins *****************
  1378 ;; Defined at:
  1379 ;;		line 24 in file "easat2_util_waits.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  minutes         2   12[COMRAM] int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  i               2   15[COMRAM] int 
  1384 ;; Return value:  Size  Location     Type
  1385 ;;                  1    wreg      void 
  1386 ;; Registers used:
  1387 ;;		wreg, status,2, status,0, cstack
  1388 ;; Tracked objects:
  1389 ;;		On entry : 0/0
  1390 ;;		On exit  : 0/0
  1391 ;;		Unchanged: 0/0
  1392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1393 ;;      Params:         2       0       0       0       0       0       0
  1394 ;;      Locals:         2       0       0       0       0       0       0
  1395 ;;      Temps:          1       0       0       0       0       0       0
  1396 ;;      Totals:         5       0       0       0       0       0       0
  1397 ;;Total ram usage:        5 bytes
  1398 ;; Hardware stack levels used:    1
  1399 ;; Hardware stack levels required when called:    2
  1400 ;; This function calls:
  1401 ;;		_util_waits_delay_secs
  1402 ;; This function is called by:
  1403 ;;		_main_loop
  1404 ;;		_util_waits_delay_hours
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text3
  1409  004F82                     __ptext3:
  1410                           	opt stack 0
  1411  004F82                     _util_waits_delay_mins:
  1412                           	opt stack 27
  1413                           
  1414                           ;easat2_util_waits.c: 25: for (int i = 0; i < minutes; i++)
  1415                           
  1416                           ;incstack = 0
  1417  004F82  0E00               	movlw	0
  1418  004F84  6E11               	movwf	util_waits_delay_mins@i+1,c
  1419  004F86  0E00               	movlw	0
  1420  004F88  6E10               	movwf	util_waits_delay_mins@i,c
  1421  004F8A  D008               	goto	l3376
  1422  004F8C                     l3372:
  1423                           
  1424                           ;easat2_util_waits.c: 26: util_waits_delay_secs(60);
  1425  004F8C  0E00               	movlw	0
  1426  004F8E  6E07               	movwf	util_waits_delay_secs@secs+1,c
  1427  004F90  0E3C               	movlw	60
  1428  004F92  6E06               	movwf	util_waits_delay_secs@secs,c
  1429  004F94  ECBC  F028         	call	_util_waits_delay_secs	;wreg free
  1430  004F98  4A10               	infsnz	util_waits_delay_mins@i,f,c
  1431  004F9A  2A11               	incf	util_waits_delay_mins@i+1,f,c
  1432  004F9C                     l3376:
  1433  004F9C  500D               	movf	util_waits_delay_mins@minutes,w,c
  1434  004F9E  5C10               	subwf	util_waits_delay_mins@i,w,c
  1435  004FA0  5011               	movf	util_waits_delay_mins@i+1,w,c
  1436  004FA2  0A80               	xorlw	128
  1437  004FA4  6E0F               	movwf	??_util_waits_delay_mins& (0+255),c
  1438  004FA6  500E               	movf	util_waits_delay_mins@minutes+1,w,c
  1439  004FA8  0A80               	xorlw	128
  1440  004FAA  580F               	subwfb	??_util_waits_delay_mins& (0+255),w,c
  1441  004FAC  B0D8               	btfsc	status,0,c
  1442  004FAE  0012               	return	
  1443  004FB0  D7ED               	goto	l3372
  1444  004FB2                     __end_of_util_waits_delay_mins:
  1445                           	opt stack 0
  1446                           tblptru	equ	0xFF8
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function _util_getTemperature *****************
  1450 ;; Defined at:
  1451 ;;		line 118 in file "easat2_util_inputs.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;		None
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  bit_mem       144    0[BANK1 ] int [72]
  1456 ;;  byte_mem       18  144[BANK1 ] int [9]
  1457 ;;  temperature     3  201[BANK1 ] float 
  1458 ;;  sign            3  164[BANK1 ] float 
  1459 ;;  i               2  204[BANK1 ] int 
  1460 ;;  bit_in_byte     2  199[BANK1 ] int 
  1461 ;;  num_byte        2  197[BANK1 ] int 
  1462 ;;  shift_reg_bi    2  195[BANK1 ] int 
  1463 ;;  shift_reg_bi    2  193[BANK1 ] int 
  1464 ;;  shift_reg_bi    2  191[BANK1 ] int 
  1465 ;;  shift_reg_bi    2  189[BANK1 ] int 
  1466 ;;  shift_reg_bi    2  187[BANK1 ] int 
  1467 ;;  shift_reg_bi    2  185[BANK1 ] int 
  1468 ;;  shift_reg_bi    2  183[BANK1 ] int 
  1469 ;;  shift_reg_bi    2  181[BANK1 ] int 
  1470 ;;  shift_reg_bi    2  179[BANK1 ] int 
  1471 ;;  num_bit         2  162[BANK1 ] int 
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  3   57[COMRAM] float 
  1474 ;; Registers used:
  1475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1481 ;;      Params:         3       0       0       0       0       0       0
  1482 ;;      Locals:         0       0     206       0       0       0       0
  1483 ;;      Temps:          3       0       0       0       0       0       0
  1484 ;;      Totals:         6       0     206       0       0       0       0
  1485 ;;Total ram usage:      212 bytes
  1486 ;; Hardware stack levels used:    1
  1487 ;; Hardware stack levels required when called:    2
  1488 ;; This function calls:
  1489 ;;		___awtoft
  1490 ;;		___ftadd
  1491 ;;		___ftdiv
  1492 ;;		___ftmul
  1493 ;;		_util_onewire_read_byte
  1494 ;;		_util_onewire_reset
  1495 ;;		_util_onewire_write_byte
  1496 ;;		_util_waits_delay_secs
  1497 ;; This function is called by:
  1498 ;;		_main_loop
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text4
  1503  006CDC                     __ptext4:
  1504                           	opt stack 0
  1505  006CDC                     _util_getTemperature:
  1506                           	opt stack 27
  1507                           
  1508                           ;easat2_util_inputs.c: 120: int byte_mem[9];
  1509                           ;easat2_util_inputs.c: 121: int bit_mem[(9*8)];
  1510                           ;easat2_util_inputs.c: 123: int shift_reg_bit0 = 0;
  1511                           
  1512                           ;incstack = 0
  1513  006CDC  0E00               	movlw	0
  1514  006CDE  0101               	movlb	1	; () banked
  1515  006CE0  6FB4               	movwf	(util_getTemperature@shift_reg_bit0+1)& (0+255),b
  1516  006CE2  0E00               	movlw	0
  1517  006CE4  6FB3               	movwf	util_getTemperature@shift_reg_bit0& (0+255),b
  1518                           
  1519                           ;easat2_util_inputs.c: 124: int shift_reg_bit1 = 0;
  1520  006CE6  0E00               	movlw	0
  1521  006CE8  0101               	movlb	1	; () banked
  1522  006CEA  6FB6               	movwf	(util_getTemperature@shift_reg_bit1+1)& (0+255),b
  1523  006CEC  0E00               	movlw	0
  1524  006CEE  6FB5               	movwf	util_getTemperature@shift_reg_bit1& (0+255),b
  1525                           
  1526                           ;easat2_util_inputs.c: 125: int shift_reg_bit2 = 0;
  1527  006CF0  0E00               	movlw	0
  1528  006CF2  0101               	movlb	1	; () banked
  1529  006CF4  6FB8               	movwf	(util_getTemperature@shift_reg_bit2+1)& (0+255),b
  1530  006CF6  0E00               	movlw	0
  1531  006CF8  6FB7               	movwf	util_getTemperature@shift_reg_bit2& (0+255),b
  1532                           
  1533                           ;easat2_util_inputs.c: 126: int shift_reg_bit3 = 0;
  1534  006CFA  0E00               	movlw	0
  1535  006CFC  0101               	movlb	1	; () banked
  1536  006CFE  6FBA               	movwf	(util_getTemperature@shift_reg_bit3+1)& (0+255),b
  1537  006D00  0E00               	movlw	0
  1538  006D02  6FB9               	movwf	util_getTemperature@shift_reg_bit3& (0+255),b
  1539                           
  1540                           ;easat2_util_inputs.c: 127: int shift_reg_bit4 = 0;
  1541  006D04  0E00               	movlw	0
  1542  006D06  0101               	movlb	1	; () banked
  1543  006D08  6FBC               	movwf	(util_getTemperature@shift_reg_bit4+1)& (0+255),b
  1544  006D0A  0E00               	movlw	0
  1545  006D0C  6FBB               	movwf	util_getTemperature@shift_reg_bit4& (0+255),b
  1546                           
  1547                           ;easat2_util_inputs.c: 128: int shift_reg_bit5 = 0;
  1548  006D0E  0E00               	movlw	0
  1549  006D10  0101               	movlb	1	; () banked
  1550  006D12  6FBE               	movwf	(util_getTemperature@shift_reg_bit5+1)& (0+255),b
  1551  006D14  0E00               	movlw	0
  1552  006D16  6FBD               	movwf	util_getTemperature@shift_reg_bit5& (0+255),b
  1553                           
  1554                           ;easat2_util_inputs.c: 129: int shift_reg_bit6 = 0;
  1555  006D18  0E00               	movlw	0
  1556  006D1A  0101               	movlb	1	; () banked
  1557  006D1C  6FC0               	movwf	(util_getTemperature@shift_reg_bit6+1)& (0+255),b
  1558  006D1E  0E00               	movlw	0
  1559  006D20  6FBF               	movwf	util_getTemperature@shift_reg_bit6& (0+255),b
  1560                           
  1561                           ;easat2_util_inputs.c: 130: int shift_reg_bit7 = 0;
  1562  006D22  0E00               	movlw	0
  1563  006D24  0101               	movlb	1	; () banked
  1564  006D26  6FC2               	movwf	(util_getTemperature@shift_reg_bit7+1)& (0+255),b
  1565  006D28  0E00               	movlw	0
  1566  006D2A  6FC1               	movwf	util_getTemperature@shift_reg_bit7& (0+255),b
  1567                           
  1568                           ;easat2_util_inputs.c: 131: int shift_reg_bit_temp = 0;
  1569  006D2C  0E00               	movlw	0
  1570  006D2E  0101               	movlb	1	; () banked
  1571  006D30  6FC4               	movwf	(util_getTemperature@shift_reg_bit_temp+1)& (0+255),b
  1572  006D32  0E00               	movlw	0
  1573  006D34  6FC3               	movwf	util_getTemperature@shift_reg_bit_temp& (0+255),b
  1574                           
  1575                           ;easat2_util_inputs.c: 133: int num_bit = 0, num_byte = 0, bit_in_byte = 0;
  1576  006D36  0E00               	movlw	0
  1577  006D38  0101               	movlb	1	; () banked
  1578  006D3A  6FA3               	movwf	(util_getTemperature@num_bit+1)& (0+255),b
  1579  006D3C  0E00               	movlw	0
  1580  006D3E  6FA2               	movwf	util_getTemperature@num_bit& (0+255),b
  1581  006D40  0E00               	movlw	0
  1582  006D42  0101               	movlb	1	; () banked
  1583  006D44  6FC6               	movwf	(util_getTemperature@num_byte+1)& (0+255),b
  1584  006D46  0E00               	movlw	0
  1585  006D48  6FC5               	movwf	util_getTemperature@num_byte& (0+255),b
  1586  006D4A  0E00               	movlw	0
  1587  006D4C  0101               	movlb	1	; () banked
  1588  006D4E  6FC8               	movwf	(util_getTemperature@bit_in_byte+1)& (0+255),b
  1589  006D50  0E00               	movlw	0
  1590  006D52  6FC7               	movwf	util_getTemperature@bit_in_byte& (0+255),b
  1591                           
  1592                           ;easat2_util_inputs.c: 135: float temperature = 0.0;
  1593  006D54  0E00               	movlw	0
  1594  006D56  0101               	movlb	1	; () banked
  1595  006D58  6FC9               	movwf	util_getTemperature@temperature& (0+255),b
  1596  006D5A  0E00               	movlw	0
  1597  006D5C  0101               	movlb	1	; () banked
  1598  006D5E  6FCA               	movwf	(util_getTemperature@temperature+1)& (0+255),b
  1599  006D60  0E00               	movlw	0
  1600  006D62  0101               	movlb	1	; () banked
  1601  006D64  6FCB               	movwf	(util_getTemperature@temperature+2)& (0+255),b
  1602                           
  1603                           ;easat2_util_inputs.c: 136: float sign = 1.0;
  1604  006D66  0E00               	movlw	0
  1605  006D68  0101               	movlb	1	; () banked
  1606  006D6A  6FA4               	movwf	util_getTemperature@sign& (0+255),b
  1607  006D6C  0E80               	movlw	128
  1608  006D6E  0101               	movlb	1	; () banked
  1609  006D70  6FA5               	movwf	(util_getTemperature@sign+1)& (0+255),b
  1610  006D72  0E3F               	movlw	63
  1611  006D74  0101               	movlb	1	; () banked
  1612  006D76  6FA6               	movwf	(util_getTemperature@sign+2)& (0+255),b
  1613                           
  1614                           ;easat2_util_inputs.c: 137: int i = 0;
  1615  006D78  0E00               	movlw	0
  1616  006D7A  0101               	movlb	1	; () banked
  1617  006D7C  6FCD               	movwf	(util_getTemperature@i+1)& (0+255),b
  1618  006D7E  0E00               	movlw	0
  1619  006D80  6FCC               	movwf	util_getTemperature@i& (0+255),b
  1620                           
  1621                           ; BSR set to: 1
  1622                           ;easat2_util_inputs.c: 143: if (util_onewire_reset()) return -99.1;
  1623  006D82  EC9B  F028         	call	_util_onewire_reset	;wreg free
  1624  006D86  5001               	movf	?_util_onewire_reset,w,c
  1625  006D88  1002               	iorwf	?_util_onewire_reset+1,w,c
  1626  006D8A  B4D8               	btfsc	status,2,c
  1627  006D8C  D007               	goto	l3994
  1628  006D8E  0E33               	movlw	51
  1629  006D90  6E3A               	movwf	?_util_getTemperature,c
  1630  006D92  0EC6               	movlw	198
  1631  006D94  6E3B               	movwf	?_util_getTemperature+1,c
  1632  006D96  0EC2               	movlw	194
  1633  006D98  6E3C               	movwf	?_util_getTemperature+2,c
  1634  006D9A  0012               	return	
  1635  006D9C                     l3994:
  1636                           
  1637                           ;easat2_util_inputs.c: 146: util_onewire_write_byte(0xCC);
  1638  006D9C  0E00               	movlw	0
  1639  006D9E  6E04               	movwf	util_onewire_write_byte@value+1,c
  1640  006DA0  0ECC               	movlw	204
  1641  006DA2  6E03               	movwf	util_onewire_write_byte@value,c
  1642  006DA4  EC26  F030         	call	_util_onewire_write_byte	;wreg free
  1643                           
  1644                           ;easat2_util_inputs.c: 149: util_onewire_write_byte(0x44);
  1645  006DA8  0E00               	movlw	0
  1646  006DAA  6E04               	movwf	util_onewire_write_byte@value+1,c
  1647  006DAC  0E44               	movlw	68
  1648  006DAE  6E03               	movwf	util_onewire_write_byte@value,c
  1649  006DB0  EC26  F030         	call	_util_onewire_write_byte	;wreg free
  1650                           
  1651                           ;easat2_util_inputs.c: 154: TRISAbits.TRISA3 = 1;
  1652  006DB4  8692               	bsf	3986,3,c	;volatile
  1653                           
  1654                           ;easat2_util_inputs.c: 158: for (i = 0; i < 5 && PORTAbits.RA3 == 0; i++)
  1655  006DB6  0E00               	movlw	0
  1656  006DB8  0101               	movlb	1	; () banked
  1657  006DBA  6FCD               	movwf	(util_getTemperature@i+1)& (0+255),b
  1658  006DBC  0E00               	movlw	0
  1659  006DBE  6FCC               	movwf	util_getTemperature@i& (0+255),b
  1660  006DC0  D009               	goto	l4004
  1661  006DC2                     l4000:
  1662                           
  1663                           ; BSR set to: 1
  1664                           ;easat2_util_inputs.c: 159: util_waits_delay_secs(1);
  1665  006DC2  0E00               	movlw	0
  1666  006DC4  6E07               	movwf	util_waits_delay_secs@secs+1,c
  1667  006DC6  0E01               	movlw	1
  1668  006DC8  6E06               	movwf	util_waits_delay_secs@secs,c
  1669  006DCA  ECBC  F028         	call	_util_waits_delay_secs	;wreg free
  1670  006DCE  0101               	movlb	1	; () banked
  1671  006DD0  4BCC               	infsnz	util_getTemperature@i& (0+255),f,b
  1672  006DD2  2BCD               	incf	(util_getTemperature@i+1)& (0+255),f,b
  1673  006DD4                     l4004:
  1674                           
  1675                           ; BSR set to: 1
  1676  006DD4  0101               	movlb	1	; () banked
  1677  006DD6  BFCD               	btfsc	(util_getTemperature@i+1)& (0+255),7,b
  1678  006DD8  D008               	goto	l4006
  1679  006DDA  0101               	movlb	1	; () banked
  1680  006DDC  51CD               	movf	(util_getTemperature@i+1)& (0+255),w,b
  1681  006DDE  E107               	bnz	l4008
  1682  006DE0  0E05               	movlw	5
  1683  006DE2  0101               	movlb	1	; () banked
  1684  006DE4  5DCC               	subwf	util_getTemperature@i& (0+255),w,b
  1685  006DE6  B0D8               	btfsc	status,0,c
  1686  006DE8  D002               	goto	l4008
  1687  006DEA                     l4006:
  1688                           
  1689                           ; BSR set to: 1
  1690  006DEA  A680               	btfss	3968,3,c	;volatile
  1691  006DEC  D7EA               	goto	l4000
  1692  006DEE                     l4008:
  1693                           
  1694                           ; BSR set to: 1
  1695                           ;easat2_util_inputs.c: 161: if (i == 5) return -99.2;
  1696  006DEE  0E05               	movlw	5
  1697  006DF0  0101               	movlb	1	; () banked
  1698  006DF2  19CC               	xorwf	util_getTemperature@i& (0+255),w,b
  1699  006DF4  0101               	movlb	1	; () banked
  1700  006DF6  11CD               	iorwf	(util_getTemperature@i+1)& (0+255),w,b
  1701  006DF8  A4D8               	btfss	status,2,c
  1702  006DFA  D007               	goto	l4014
  1703                           
  1704                           ; BSR set to: 1
  1705  006DFC  0E66               	movlw	102
  1706  006DFE  6E3A               	movwf	?_util_getTemperature,c
  1707  006E00  0EC6               	movlw	198
  1708  006E02  6E3B               	movwf	?_util_getTemperature+1,c
  1709  006E04  0EC2               	movlw	194
  1710  006E06  6E3C               	movwf	?_util_getTemperature+2,c
  1711                           
  1712                           ; BSR set to: 1
  1713  006E08  0012               	return	
  1714  006E0A                     l4014:
  1715                           
  1716                           ; BSR set to: 1
  1717                           ;easat2_util_inputs.c: 165: if (util_onewire_reset()) return -99.3;
  1718  006E0A  EC9B  F028         	call	_util_onewire_reset	;wreg free
  1719  006E0E  5001               	movf	?_util_onewire_reset,w,c
  1720  006E10  1002               	iorwf	?_util_onewire_reset+1,w,c
  1721  006E12  B4D8               	btfsc	status,2,c
  1722  006E14  D007               	goto	l4020
  1723  006E16  0E9A               	movlw	154
  1724  006E18  6E3A               	movwf	?_util_getTemperature,c
  1725  006E1A  0EC6               	movlw	198
  1726  006E1C  6E3B               	movwf	?_util_getTemperature+1,c
  1727  006E1E  0EC2               	movlw	194
  1728  006E20  6E3C               	movwf	?_util_getTemperature+2,c
  1729  006E22  0012               	return	
  1730  006E24                     l4020:
  1731                           
  1732                           ;easat2_util_inputs.c: 168: util_onewire_write_byte(0xCC);
  1733  006E24  0E00               	movlw	0
  1734  006E26  6E04               	movwf	util_onewire_write_byte@value+1,c
  1735  006E28  0ECC               	movlw	204
  1736  006E2A  6E03               	movwf	util_onewire_write_byte@value,c
  1737  006E2C  EC26  F030         	call	_util_onewire_write_byte	;wreg free
  1738                           
  1739                           ;easat2_util_inputs.c: 171: util_onewire_write_byte(0xBE);
  1740  006E30  0E00               	movlw	0
  1741  006E32  6E04               	movwf	util_onewire_write_byte@value+1,c
  1742  006E34  0EBE               	movlw	190
  1743  006E36  6E03               	movwf	util_onewire_write_byte@value,c
  1744  006E38  EC26  F030         	call	_util_onewire_write_byte	;wreg free
  1745                           
  1746                           ;easat2_util_inputs.c: 182: byte_mem[0] = util_onewire_read_byte();
  1747  006E3C  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1748  006E40  C006  F190         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem
  1749  006E44  C007  F191         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+1
  1750                           
  1751                           ;easat2_util_inputs.c: 184: byte_mem[1] = util_onewire_read_byte();
  1752  006E48  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1753  006E4C  C006  F192         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+2
  1754  006E50  C007  F193         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+3
  1755                           
  1756                           ;easat2_util_inputs.c: 186: byte_mem[2] = util_onewire_read_byte();
  1757  006E54  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1758  006E58  C006  F194         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+4
  1759  006E5C  C007  F195         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+5
  1760                           
  1761                           ;easat2_util_inputs.c: 188: byte_mem[3] = util_onewire_read_byte();
  1762  006E60  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1763  006E64  C006  F196         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+6
  1764  006E68  C007  F197         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+7
  1765                           
  1766                           ;easat2_util_inputs.c: 190: byte_mem[4] = util_onewire_read_byte();
  1767  006E6C  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1768  006E70  C006  F198         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+8
  1769  006E74  C007  F199         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+9
  1770                           
  1771                           ;easat2_util_inputs.c: 192: byte_mem[5] = util_onewire_read_byte();
  1772  006E78  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1773  006E7C  C006  F19A         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+10
  1774  006E80  C007  F19B         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+11
  1775                           
  1776                           ;easat2_util_inputs.c: 194: byte_mem[6] = util_onewire_read_byte();
  1777  006E84  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1778  006E88  C006  F19C         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+12
  1779  006E8C  C007  F19D         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+13
  1780                           
  1781                           ;easat2_util_inputs.c: 196: byte_mem[7] = util_onewire_read_byte();
  1782  006E90  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1783  006E94  C006  F19E         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+14
  1784  006E98  C007  F19F         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+15
  1785                           
  1786                           ;easat2_util_inputs.c: 198: byte_mem[8] = util_onewire_read_byte();
  1787  006E9C  EC85  F02F         	call	_util_onewire_read_byte	;wreg free
  1788  006EA0  C006  F1A0         	movff	?_util_onewire_read_byte,util_getTemperature@byte_mem+16
  1789  006EA4  C007  F1A1         	movff	?_util_onewire_read_byte+1,util_getTemperature@byte_mem+17
  1790                           
  1791                           ;easat2_util_inputs.c: 202: for (num_byte = 0; num_byte < 9; num_byte++) {
  1792  006EA8  0E00               	movlw	0
  1793  006EAA  0101               	movlb	1	; () banked
  1794  006EAC  6FC6               	movwf	(util_getTemperature@num_byte+1)& (0+255),b
  1795  006EAE  0E00               	movlw	0
  1796  006EB0  6FC5               	movwf	util_getTemperature@num_byte& (0+255),b
  1797  006EB2                     l4024:
  1798                           
  1799                           ; BSR set to: 1
  1800  006EB2  0101               	movlb	1	; () banked
  1801  006EB4  BFC6               	btfsc	(util_getTemperature@num_byte+1)& (0+255),7,b
  1802  006EB6  D008               	goto	l4028
  1803  006EB8  0101               	movlb	1	; () banked
  1804  006EBA  51C6               	movf	(util_getTemperature@num_byte+1)& (0+255),w,b
  1805  006EBC  E14B               	bnz	l4046
  1806  006EBE  0E09               	movlw	9
  1807  006EC0  0101               	movlb	1	; () banked
  1808  006EC2  5DC5               	subwf	util_getTemperature@num_byte& (0+255),w,b
  1809  006EC4  B0D8               	btfsc	status,0,c
  1810  006EC6  D046               	goto	l4046
  1811  006EC8                     l4028:
  1812                           
  1813                           ; BSR set to: 1
  1814                           ;easat2_util_inputs.c: 203: for (bit_in_byte = 0; bit_in_byte < 8; bit_in_byte++)
  1815  006EC8  0E00               	movlw	0
  1816  006ECA  0101               	movlb	1	; () banked
  1817  006ECC  6FC8               	movwf	(util_getTemperature@bit_in_byte+1)& (0+255),b
  1818  006ECE  0E00               	movlw	0
  1819  006ED0  6FC7               	movwf	util_getTemperature@bit_in_byte& (0+255),b
  1820  006ED2                     l4030:
  1821                           
  1822                           ; BSR set to: 1
  1823  006ED2  0101               	movlb	1	; () banked
  1824  006ED4  BFC8               	btfsc	(util_getTemperature@bit_in_byte+1)& (0+255),7,b
  1825  006ED6  D008               	goto	l4034
  1826  006ED8  0101               	movlb	1	; () banked
  1827  006EDA  51C8               	movf	(util_getTemperature@bit_in_byte+1)& (0+255),w,b
  1828  006EDC  E137               	bnz	l4042
  1829  006EDE  0E08               	movlw	8
  1830  006EE0  0101               	movlb	1	; () banked
  1831  006EE2  5DC7               	subwf	util_getTemperature@bit_in_byte& (0+255),w,b
  1832  006EE4  B0D8               	btfsc	status,0,c
  1833  006EE6  D032               	goto	l4042
  1834  006EE8                     l4034:
  1835                           
  1836                           ; BSR set to: 1
  1837                           ;easat2_util_inputs.c: 204: bit_mem[num_bit++] = (byte_mem[num_byte] >> bit_in_byte) & 0
      +                          x01;
  1838  006EE8  C1C7  F03D         	movff	util_getTemperature@bit_in_byte,??_util_getTemperature
  1839  006EEC  90D8               	bcf	status,0,c
  1840  006EEE  0101               	movlb	1	; () banked
  1841  006EF0  35C5               	rlcf	util_getTemperature@num_byte& (0+255),w,b
  1842  006EF2  6ED9               	movwf	fsr2l,c
  1843  006EF4  0101               	movlb	1	; () banked
  1844  006EF6  35C6               	rlcf	(util_getTemperature@num_byte+1)& (0+255),w,b
  1845  006EF8  6EDA               	movwf	fsr2h,c
  1846  006EFA  0E90               	movlw	low util_getTemperature@byte_mem
  1847  006EFC  26D9               	addwf	fsr2l,f,c
  1848  006EFE  0E01               	movlw	high util_getTemperature@byte_mem
  1849  006F00  22DA               	addwfc	fsr2h,f,c
  1850  006F02  CFDE F03E          	movff	postinc2,??_util_getTemperature+1
  1851  006F06  CFDD F03F          	movff	postdec2,??_util_getTemperature+2
  1852  006F0A  2A3D               	incf	??_util_getTemperature,f,c
  1853  006F0C  D003               	goto	u3884
  1854  006F0E                     u3885:
  1855  006F0E  343F               	rlcf	??_util_getTemperature+2,w,c
  1856  006F10  323F               	rrcf	??_util_getTemperature+2,f,c
  1857  006F12  323E               	rrcf	??_util_getTemperature+1,f,c
  1858  006F14                     u3884:
  1859  006F14  2E3D               	decfsz	??_util_getTemperature,f,c
  1860  006F16  D7FB               	goto	u3885
  1861  006F18  0E01               	movlw	1
  1862  006F1A  163E               	andwf	??_util_getTemperature+1,f,c
  1863  006F1C  0E00               	movlw	0
  1864  006F1E  163F               	andwf	??_util_getTemperature+2,f,c
  1865  006F20  90D8               	bcf	status,0,c
  1866  006F22  0101               	movlb	1	; () banked
  1867  006F24  35A2               	rlcf	util_getTemperature@num_bit& (0+255),w,b
  1868  006F26  6ED9               	movwf	fsr2l,c
  1869  006F28  0101               	movlb	1	; () banked
  1870  006F2A  35A3               	rlcf	(util_getTemperature@num_bit+1)& (0+255),w,b
  1871  006F2C  6EDA               	movwf	fsr2h,c
  1872  006F2E  0E00               	movlw	low util_getTemperature@bit_mem
  1873  006F30  26D9               	addwf	fsr2l,f,c
  1874  006F32  0E01               	movlw	high util_getTemperature@bit_mem
  1875  006F34  22DA               	addwfc	fsr2h,f,c
  1876  006F36  C03E  FFDE         	movff	??_util_getTemperature+1,postinc2
  1877  006F3A  C03F  FFDD         	movff	??_util_getTemperature+2,postdec2
  1878                           
  1879                           ; BSR set to: 1
  1880  006F3E  0101               	movlb	1	; () banked
  1881  006F40  4BA2               	infsnz	util_getTemperature@num_bit& (0+255),f,b
  1882  006F42  2BA3               	incf	(util_getTemperature@num_bit+1)& (0+255),f,b
  1883                           
  1884                           ; BSR set to: 1
  1885  006F44  0101               	movlb	1	; () banked
  1886  006F46  4BC7               	infsnz	util_getTemperature@bit_in_byte& (0+255),f,b
  1887  006F48  2BC8               	incf	(util_getTemperature@bit_in_byte+1)& (0+255),f,b
  1888  006F4A  D7C3               	goto	l4030
  1889  006F4C                     l4042:
  1890                           
  1891                           ; BSR set to: 1
  1892  006F4C  0101               	movlb	1	; () banked
  1893  006F4E  4BC5               	infsnz	util_getTemperature@num_byte& (0+255),f,b
  1894  006F50  2BC6               	incf	(util_getTemperature@num_byte+1)& (0+255),f,b
  1895  006F52  D7AF               	goto	l4024
  1896  006F54                     l4046:
  1897                           
  1898                           ; BSR set to: 1
  1899                           ;easat2_util_inputs.c: 205: }
  1900                           ;easat2_util_inputs.c: 209: for (i = 0; i < (9*8); i++) {
  1901  006F54  0E00               	movlw	0
  1902  006F56  0101               	movlb	1	; () banked
  1903  006F58  6FCD               	movwf	(util_getTemperature@i+1)& (0+255),b
  1904  006F5A  0E00               	movlw	0
  1905  006F5C  6FCC               	movwf	util_getTemperature@i& (0+255),b
  1906  006F5E                     l4048:
  1907                           
  1908                           ; BSR set to: 1
  1909  006F5E  0101               	movlb	1	; () banked
  1910  006F60  BFCD               	btfsc	(util_getTemperature@i+1)& (0+255),7,b
  1911  006F62  D008               	goto	l4052
  1912  006F64  0101               	movlb	1	; () banked
  1913  006F66  51CD               	movf	(util_getTemperature@i+1)& (0+255),w,b
  1914  006F68  E152               	bnz	l4074
  1915  006F6A  0E48               	movlw	72
  1916  006F6C  0101               	movlb	1	; () banked
  1917  006F6E  5DCC               	subwf	util_getTemperature@i& (0+255),w,b
  1918  006F70  B0D8               	btfsc	status,0,c
  1919  006F72  D04D               	goto	l4074
  1920  006F74                     l4052:
  1921                           
  1922                           ; BSR set to: 1
  1923                           ;easat2_util_inputs.c: 214: shift_reg_bit_temp = shift_reg_bit0^bit_mem[i];
  1924  006F74  90D8               	bcf	status,0,c
  1925  006F76  0101               	movlb	1	; () banked
  1926  006F78  35CC               	rlcf	util_getTemperature@i& (0+255),w,b
  1927  006F7A  6ED9               	movwf	fsr2l,c
  1928  006F7C  0101               	movlb	1	; () banked
  1929  006F7E  35CD               	rlcf	(util_getTemperature@i+1)& (0+255),w,b
  1930  006F80  6EDA               	movwf	fsr2h,c
  1931  006F82  0E00               	movlw	low util_getTemperature@bit_mem
  1932  006F84  26D9               	addwf	fsr2l,f,c
  1933  006F86  0E01               	movlw	high util_getTemperature@bit_mem
  1934  006F88  22DA               	addwfc	fsr2h,f,c
  1935  006F8A  CFDE F03D          	movff	postinc2,??_util_getTemperature
  1936  006F8E  CFDD F03E          	movff	postdec2,??_util_getTemperature+1
  1937  006F92  0101               	movlb	1	; () banked
  1938  006F94  51B3               	movf	util_getTemperature@shift_reg_bit0& (0+255),w,b
  1939  006F96  183D               	xorwf	??_util_getTemperature,w,c
  1940  006F98  0101               	movlb	1	; () banked
  1941  006F9A  6FC3               	movwf	util_getTemperature@shift_reg_bit_temp& (0+255),b
  1942  006F9C  0101               	movlb	1	; () banked
  1943  006F9E  51B4               	movf	(util_getTemperature@shift_reg_bit0+1)& (0+255),w,b
  1944  006FA0  183E               	xorwf	??_util_getTemperature+1,w,c
  1945  006FA2  0101               	movlb	1	; () banked
  1946  006FA4  6FC4               	movwf	(util_getTemperature@shift_reg_bit_temp+1)& (0+255),b
  1947                           
  1948                           ; BSR set to: 1
  1949                           ;easat2_util_inputs.c: 216: shift_reg_bit0 = shift_reg_bit1;
  1950  006FA6  C1B5  F1B3         	movff	util_getTemperature@shift_reg_bit1,util_getTemperature@shift_reg_bit0
  1951  006FAA  C1B6  F1B4         	movff	util_getTemperature@shift_reg_bit1+1,util_getTemperature@shift_reg_bit0+1
  1952                           
  1953                           ; BSR set to: 1
  1954                           ;easat2_util_inputs.c: 217: shift_reg_bit1 = shift_reg_bit2;
  1955  006FAE  C1B7  F1B5         	movff	util_getTemperature@shift_reg_bit2,util_getTemperature@shift_reg_bit1
  1956  006FB2  C1B8  F1B6         	movff	util_getTemperature@shift_reg_bit2+1,util_getTemperature@shift_reg_bit1+1
  1957                           
  1958                           ; BSR set to: 1
  1959                           ;easat2_util_inputs.c: 218: shift_reg_bit2 = shift_reg_bit3 ^ shift_reg_bit_temp;
  1960  006FB6  0101               	movlb	1	; () banked
  1961  006FB8  51C3               	movf	util_getTemperature@shift_reg_bit_temp& (0+255),w,b
  1962  006FBA  0101               	movlb	1	; () banked
  1963  006FBC  19B9               	xorwf	util_getTemperature@shift_reg_bit3& (0+255),w,b
  1964  006FBE  0101               	movlb	1	; () banked
  1965  006FC0  6FB7               	movwf	util_getTemperature@shift_reg_bit2& (0+255),b
  1966  006FC2  0101               	movlb	1	; () banked
  1967  006FC4  51C4               	movf	(util_getTemperature@shift_reg_bit_temp+1)& (0+255),w,b
  1968  006FC6  0101               	movlb	1	; () banked
  1969  006FC8  19BA               	xorwf	(util_getTemperature@shift_reg_bit3+1)& (0+255),w,b
  1970  006FCA  0101               	movlb	1	; () banked
  1971  006FCC  6FB8               	movwf	(util_getTemperature@shift_reg_bit2+1)& (0+255),b
  1972                           
  1973                           ; BSR set to: 1
  1974                           ;easat2_util_inputs.c: 219: shift_reg_bit3 = shift_reg_bit4 ^ shift_reg_bit_temp;
  1975  006FCE  0101               	movlb	1	; () banked
  1976  006FD0  51C3               	movf	util_getTemperature@shift_reg_bit_temp& (0+255),w,b
  1977  006FD2  0101               	movlb	1	; () banked
  1978  006FD4  19BB               	xorwf	util_getTemperature@shift_reg_bit4& (0+255),w,b
  1979  006FD6  0101               	movlb	1	; () banked
  1980  006FD8  6FB9               	movwf	util_getTemperature@shift_reg_bit3& (0+255),b
  1981  006FDA  0101               	movlb	1	; () banked
  1982  006FDC  51C4               	movf	(util_getTemperature@shift_reg_bit_temp+1)& (0+255),w,b
  1983  006FDE  0101               	movlb	1	; () banked
  1984  006FE0  19BC               	xorwf	(util_getTemperature@shift_reg_bit4+1)& (0+255),w,b
  1985  006FE2  0101               	movlb	1	; () banked
  1986  006FE4  6FBA               	movwf	(util_getTemperature@shift_reg_bit3+1)& (0+255),b
  1987                           
  1988                           ; BSR set to: 1
  1989                           ;easat2_util_inputs.c: 220: shift_reg_bit4 = shift_reg_bit5;
  1990  006FE6  C1BD  F1BB         	movff	util_getTemperature@shift_reg_bit5,util_getTemperature@shift_reg_bit4
  1991  006FEA  C1BE  F1BC         	movff	util_getTemperature@shift_reg_bit5+1,util_getTemperature@shift_reg_bit4+1
  1992                           
  1993                           ; BSR set to: 1
  1994                           ;easat2_util_inputs.c: 221: shift_reg_bit5 = shift_reg_bit6;
  1995  006FEE  C1BF  F1BD         	movff	util_getTemperature@shift_reg_bit6,util_getTemperature@shift_reg_bit5
  1996  006FF2  C1C0  F1BE         	movff	util_getTemperature@shift_reg_bit6+1,util_getTemperature@shift_reg_bit5+1
  1997                           
  1998                           ; BSR set to: 1
  1999                           ;easat2_util_inputs.c: 222: shift_reg_bit6 = shift_reg_bit7;
  2000  006FF6  C1C1  F1BF         	movff	util_getTemperature@shift_reg_bit7,util_getTemperature@shift_reg_bit6
  2001  006FFA  C1C2  F1C0         	movff	util_getTemperature@shift_reg_bit7+1,util_getTemperature@shift_reg_bit6+1
  2002                           
  2003                           ; BSR set to: 1
  2004                           ;easat2_util_inputs.c: 223: shift_reg_bit7 = shift_reg_bit_temp;
  2005  006FFE  C1C3  F1C1         	movff	util_getTemperature@shift_reg_bit_temp,util_getTemperature@shift_reg_bit7
  2006  007002  C1C4  F1C2         	movff	util_getTemperature@shift_reg_bit_temp+1,util_getTemperature@shift_reg_bit7+1
  2007                           
  2008                           ; BSR set to: 1
  2009  007006  0101               	movlb	1	; () banked
  2010  007008  4BCC               	infsnz	util_getTemperature@i& (0+255),f,b
  2011  00700A  2BCD               	incf	(util_getTemperature@i+1)& (0+255),f,b
  2012  00700C  D7A8               	goto	l4048
  2013  00700E                     l4074:
  2014                           
  2015                           ; BSR set to: 1
  2016                           ;easat2_util_inputs.c: 225: }
  2017                           ;easat2_util_inputs.c: 229: if (shift_reg_bit0 != 0 || shift_reg_bit1 != 0 || shift_reg_
      +                          bit2 != 0 &&
  2018                           ;easat2_util_inputs.c: 230: shift_reg_bit3 != 0 || shift_reg_bit4 != 0 || shift_reg_bit5
      +                           != 0 &&
  2019                           ;easat2_util_inputs.c: 231: shift_reg_bit6 != 0 || shift_reg_bit7 != 0)
  2020  00700E  0101               	movlb	1	; () banked
  2021  007010  51B3               	movf	util_getTemperature@shift_reg_bit0& (0+255),w,b
  2022  007012  0101               	movlb	1	; () banked
  2023  007014  11B4               	iorwf	(util_getTemperature@shift_reg_bit0+1)& (0+255),w,b
  2024  007016  A4D8               	btfss	status,2,c
  2025  007018  D02A               	goto	l4090
  2026                           
  2027                           ; BSR set to: 1
  2028  00701A  0101               	movlb	1	; () banked
  2029  00701C  51B5               	movf	util_getTemperature@shift_reg_bit1& (0+255),w,b
  2030  00701E  0101               	movlb	1	; () banked
  2031  007020  11B6               	iorwf	(util_getTemperature@shift_reg_bit1+1)& (0+255),w,b
  2032  007022  A4D8               	btfss	status,2,c
  2033  007024  D024               	goto	l4090
  2034                           
  2035                           ; BSR set to: 1
  2036  007026  0101               	movlb	1	; () banked
  2037  007028  51B7               	movf	util_getTemperature@shift_reg_bit2& (0+255),w,b
  2038  00702A  0101               	movlb	1	; () banked
  2039  00702C  11B8               	iorwf	(util_getTemperature@shift_reg_bit2+1)& (0+255),w,b
  2040  00702E  B4D8               	btfsc	status,2,c
  2041  007030  D006               	goto	l4082
  2042                           
  2043                           ; BSR set to: 1
  2044  007032  0101               	movlb	1	; () banked
  2045  007034  51B9               	movf	util_getTemperature@shift_reg_bit3& (0+255),w,b
  2046  007036  0101               	movlb	1	; () banked
  2047  007038  11BA               	iorwf	(util_getTemperature@shift_reg_bit3+1)& (0+255),w,b
  2048  00703A  A4D8               	btfss	status,2,c
  2049  00703C  D018               	goto	l4090
  2050  00703E                     l4082:
  2051                           
  2052                           ; BSR set to: 1
  2053  00703E  0101               	movlb	1	; () banked
  2054  007040  51BB               	movf	util_getTemperature@shift_reg_bit4& (0+255),w,b
  2055  007042  0101               	movlb	1	; () banked
  2056  007044  11BC               	iorwf	(util_getTemperature@shift_reg_bit4+1)& (0+255),w,b
  2057  007046  A4D8               	btfss	status,2,c
  2058  007048  D012               	goto	l4090
  2059                           
  2060                           ; BSR set to: 1
  2061  00704A  0101               	movlb	1	; () banked
  2062  00704C  51BD               	movf	util_getTemperature@shift_reg_bit5& (0+255),w,b
  2063  00704E  0101               	movlb	1	; () banked
  2064  007050  11BE               	iorwf	(util_getTemperature@shift_reg_bit5+1)& (0+255),w,b
  2065  007052  B4D8               	btfsc	status,2,c
  2066  007054  D006               	goto	l4088
  2067                           
  2068                           ; BSR set to: 1
  2069  007056  0101               	movlb	1	; () banked
  2070  007058  51BF               	movf	util_getTemperature@shift_reg_bit6& (0+255),w,b
  2071  00705A  0101               	movlb	1	; () banked
  2072  00705C  11C0               	iorwf	(util_getTemperature@shift_reg_bit6+1)& (0+255),w,b
  2073  00705E  A4D8               	btfss	status,2,c
  2074  007060  D006               	goto	l4090
  2075  007062                     l4088:
  2076                           
  2077                           ; BSR set to: 1
  2078  007062  0101               	movlb	1	; () banked
  2079  007064  51C1               	movf	util_getTemperature@shift_reg_bit7& (0+255),w,b
  2080  007066  0101               	movlb	1	; () banked
  2081  007068  11C2               	iorwf	(util_getTemperature@shift_reg_bit7+1)& (0+255),w,b
  2082  00706A  B4D8               	btfsc	status,2,c
  2083  00706C  D007               	goto	l4094
  2084  00706E                     l4090:
  2085                           
  2086                           ; BSR set to: 1
  2087                           ;easat2_util_inputs.c: 232: return -99.7;
  2088  00706E  0E66               	movlw	102
  2089  007070  6E3A               	movwf	?_util_getTemperature,c
  2090  007072  0EC7               	movlw	199
  2091  007074  6E3B               	movwf	?_util_getTemperature+1,c
  2092  007076  0EC2               	movlw	194
  2093  007078  6E3C               	movwf	?_util_getTemperature+2,c
  2094                           
  2095                           ; BSR set to: 1
  2096  00707A  0012               	return	
  2097  00707C                     l4094:
  2098                           
  2099                           ; BSR set to: 1
  2100                           ;easat2_util_inputs.c: 236: if (bit_mem[11] == 0) sign = 1.0; else sign = -1.0;
  2101  00707C  0101               	movlb	1	; () banked
  2102  00707E  5116               	movf	(util_getTemperature@bit_mem+22)& (0+255),w,b
  2103  007080  0101               	movlb	1	; () banked
  2104  007082  1117               	iorwf	(util_getTemperature@bit_mem+23)& (0+255),w,b
  2105  007084  A4D8               	btfss	status,2,c
  2106  007086  D008               	goto	l4098
  2107                           
  2108                           ; BSR set to: 1
  2109  007088  0E00               	movlw	0
  2110  00708A  0101               	movlb	1	; () banked
  2111  00708C  6FA4               	movwf	util_getTemperature@sign& (0+255),b
  2112  00708E  0E80               	movlw	128
  2113  007090  0101               	movlb	1	; () banked
  2114  007092  6FA5               	movwf	(util_getTemperature@sign+1)& (0+255),b
  2115  007094  0E3F               	movlw	63
  2116  007096  D007               	goto	L1
  2117  007098                     l4098:
  2118                           
  2119                           ; BSR set to: 1
  2120  007098  0E00               	movlw	0
  2121  00709A  0101               	movlb	1	; () banked
  2122  00709C  6FA4               	movwf	util_getTemperature@sign& (0+255),b
  2123  00709E  0E80               	movlw	128
  2124  0070A0  0101               	movlb	1	; () banked
  2125  0070A2  6FA5               	movwf	(util_getTemperature@sign+1)& (0+255),b
  2126  0070A4  0EBF               	movlw	191
  2127  0070A6                     L1:
  2128  0070A6  0101               	movlb	1	; () banked
  2129  0070A8  6FA6               	movwf	(util_getTemperature@sign+2)& (0+255),b
  2130                           
  2131                           ; BSR set to: 1
  2132                           ;easat2_util_inputs.c: 238: temperature = (float)bit_mem[0]/16.0 + (float)bit_mem[1]/8.0
      +                           +
  2133                           ;easat2_util_inputs.c: 239: (float)bit_mem[2]/4.0 + (float)bit_mem[3]/2.0 +
  2134                           ;easat2_util_inputs.c: 240: (float)bit_mem[4] + (float)bit_mem[5]*2.0 ;
  2135                           
  2136                           ; BSR set to: 1
  2137  0070AA  0E00               	movlw	0
  2138  0070AC  6E10               	movwf	___ftdiv@f2,c
  2139  0070AE  0E00               	movlw	0
  2140  0070B0  6E11               	movwf	___ftdiv@f2+1,c
  2141  0070B2  0E41               	movlw	65
  2142  0070B4  6E12               	movwf	___ftdiv@f2+2,c
  2143  0070B6  C102  F009         	movff	util_getTemperature@bit_mem+2,___awtoft@c
  2144  0070BA  C103  F00A         	movff	util_getTemperature@bit_mem+3,___awtoft@c+1
  2145  0070BE  EC3E  F028         	call	___awtoft	;wreg free
  2146  0070C2  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  2147  0070C6  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  2148  0070CA  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  2149  0070CE  ECF1  F02C         	call	___ftdiv	;wreg free
  2150  0070D2  C00D  F031         	movff	?___ftdiv,___ftadd@f2
  2151  0070D6  C00E  F032         	movff	?___ftdiv+1,___ftadd@f2+1
  2152  0070DA  C00F  F033         	movff	?___ftdiv+2,___ftadd@f2+2
  2153  0070DE  0E00               	movlw	0
  2154  0070E0  6E10               	movwf	___ftdiv@f2,c
  2155  0070E2  0E80               	movlw	128
  2156  0070E4  6E11               	movwf	___ftdiv@f2+1,c
  2157  0070E6  0E41               	movlw	65
  2158  0070E8  6E12               	movwf	___ftdiv@f2+2,c
  2159  0070EA  C100  F009         	movff	util_getTemperature@bit_mem,___awtoft@c
  2160  0070EE  C101  F00A         	movff	util_getTemperature@bit_mem+1,___awtoft@c+1
  2161  0070F2  EC3E  F028         	call	___awtoft	;wreg free
  2162  0070F6  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  2163  0070FA  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  2164  0070FE  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  2165  007102  ECF1  F02C         	call	___ftdiv	;wreg free
  2166  007106  C00D  F02E         	movff	?___ftdiv,___ftadd@f1
  2167  00710A  C00E  F02F         	movff	?___ftdiv+1,___ftadd@f1+1
  2168  00710E  C00F  F030         	movff	?___ftdiv+2,___ftadd@f1+2
  2169  007112  ECD7  F030         	call	___ftadd	;wreg free
  2170  007116  C02E  F1A7         	movff	?___ftadd,_util_getTemperature$1787
  2171  00711A  C02F  F1A8         	movff	?___ftadd+1,_util_getTemperature$1787+1
  2172  00711E  C030  F1A9         	movff	?___ftadd+2,_util_getTemperature$1787+2
  2173                           
  2174                           ;easat2_util_inputs.c: 238: temperature = (float)bit_mem[0]/16.0 + (float)bit_mem[1]/8.0
      +                           +
  2175                           ;easat2_util_inputs.c: 239: (float)bit_mem[2]/4.0 + (float)bit_mem[3]/2.0 +
  2176                           ;easat2_util_inputs.c: 240: (float)bit_mem[4] + (float)bit_mem[5]*2.0 ;
  2177  007122  0E00               	movlw	0
  2178  007124  6E10               	movwf	___ftdiv@f2,c
  2179  007126  0E80               	movlw	128
  2180  007128  6E11               	movwf	___ftdiv@f2+1,c
  2181  00712A  0E40               	movlw	64
  2182  00712C  6E12               	movwf	___ftdiv@f2+2,c
  2183  00712E  C104  F009         	movff	util_getTemperature@bit_mem+4,___awtoft@c
  2184  007132  C105  F00A         	movff	util_getTemperature@bit_mem+5,___awtoft@c+1
  2185  007136  EC3E  F028         	call	___awtoft	;wreg free
  2186  00713A  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  2187  00713E  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  2188  007142  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  2189  007146  ECF1  F02C         	call	___ftdiv	;wreg free
  2190  00714A  C00D  F031         	movff	?___ftdiv,___ftadd@f2
  2191  00714E  C00E  F032         	movff	?___ftdiv+1,___ftadd@f2+1
  2192  007152  C00F  F033         	movff	?___ftdiv+2,___ftadd@f2+2
  2193  007156  C1A7  F02E         	movff	_util_getTemperature$1787,___ftadd@f1
  2194  00715A  C1A8  F02F         	movff	_util_getTemperature$1787+1,___ftadd@f1+1
  2195  00715E  C1A9  F030         	movff	_util_getTemperature$1787+2,___ftadd@f1+2
  2196  007162  ECD7  F030         	call	___ftadd	;wreg free
  2197  007166  C02E  F1AA         	movff	?___ftadd,_util_getTemperature$1788
  2198  00716A  C02F  F1AB         	movff	?___ftadd+1,_util_getTemperature$1788+1
  2199  00716E  C030  F1AC         	movff	?___ftadd+2,_util_getTemperature$1788+2
  2200                           
  2201                           ;easat2_util_inputs.c: 238: temperature = (float)bit_mem[0]/16.0 + (float)bit_mem[1]/8.0
      +                           +
  2202                           ;easat2_util_inputs.c: 239: (float)bit_mem[2]/4.0 + (float)bit_mem[3]/2.0 +
  2203                           ;easat2_util_inputs.c: 240: (float)bit_mem[4] + (float)bit_mem[5]*2.0 ;
  2204  007172  0E00               	movlw	0
  2205  007174  6E10               	movwf	___ftdiv@f2,c
  2206  007176  0E00               	movlw	0
  2207  007178  6E11               	movwf	___ftdiv@f2+1,c
  2208  00717A  0E40               	movlw	64
  2209  00717C  6E12               	movwf	___ftdiv@f2+2,c
  2210  00717E  C106  F009         	movff	util_getTemperature@bit_mem+6,___awtoft@c
  2211  007182  C107  F00A         	movff	util_getTemperature@bit_mem+7,___awtoft@c+1
  2212  007186  EC3E  F028         	call	___awtoft	;wreg free
  2213  00718A  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  2214  00718E  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  2215  007192  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  2216  007196  ECF1  F02C         	call	___ftdiv	;wreg free
  2217  00719A  C00D  F031         	movff	?___ftdiv,___ftadd@f2
  2218  00719E  C00E  F032         	movff	?___ftdiv+1,___ftadd@f2+1
  2219  0071A2  C00F  F033         	movff	?___ftdiv+2,___ftadd@f2+2
  2220  0071A6  C1AA  F02E         	movff	_util_getTemperature$1788,___ftadd@f1
  2221  0071AA  C1AB  F02F         	movff	_util_getTemperature$1788+1,___ftadd@f1+1
  2222  0071AE  C1AC  F030         	movff	_util_getTemperature$1788+2,___ftadd@f1+2
  2223  0071B2  ECD7  F030         	call	___ftadd	;wreg free
  2224  0071B6  C02E  F1AD         	movff	?___ftadd,_util_getTemperature$1789
  2225  0071BA  C02F  F1AE         	movff	?___ftadd+1,_util_getTemperature$1789+1
  2226  0071BE  C030  F1AF         	movff	?___ftadd+2,_util_getTemperature$1789+2
  2227                           
  2228                           ;easat2_util_inputs.c: 238: temperature = (float)bit_mem[0]/16.0 + (float)bit_mem[1]/8.0
      +                           +
  2229                           ;easat2_util_inputs.c: 239: (float)bit_mem[2]/4.0 + (float)bit_mem[3]/2.0 +
  2230                           ;easat2_util_inputs.c: 240: (float)bit_mem[4] + (float)bit_mem[5]*2.0 ;
  2231  0071C2  C108  F009         	movff	util_getTemperature@bit_mem+8,___awtoft@c
  2232  0071C6  C109  F00A         	movff	util_getTemperature@bit_mem+9,___awtoft@c+1
  2233  0071CA  EC3E  F028         	call	___awtoft	;wreg free
  2234  0071CE  C009  F031         	movff	?___awtoft,___ftadd@f2
  2235  0071D2  C00A  F032         	movff	?___awtoft+1,___ftadd@f2+1
  2236  0071D6  C00B  F033         	movff	?___awtoft+2,___ftadd@f2+2
  2237  0071DA  C1AD  F02E         	movff	_util_getTemperature$1789,___ftadd@f1
  2238  0071DE  C1AE  F02F         	movff	_util_getTemperature$1789+1,___ftadd@f1+1
  2239  0071E2  C1AF  F030         	movff	_util_getTemperature$1789+2,___ftadd@f1+2
  2240  0071E6  ECD7  F030         	call	___ftadd	;wreg free
  2241  0071EA  C02E  F1B0         	movff	?___ftadd,_util_getTemperature$1790
  2242  0071EE  C02F  F1B1         	movff	?___ftadd+1,_util_getTemperature$1790+1
  2243  0071F2  C030  F1B2         	movff	?___ftadd+2,_util_getTemperature$1790+2
  2244                           
  2245                           ;easat2_util_inputs.c: 238: temperature = (float)bit_mem[0]/16.0 + (float)bit_mem[1]/8.0
      +                           +
  2246                           ;easat2_util_inputs.c: 239: (float)bit_mem[2]/4.0 + (float)bit_mem[3]/2.0 +
  2247                           ;easat2_util_inputs.c: 240: (float)bit_mem[4] + (float)bit_mem[5]*2.0 ;
  2248  0071F6  C1B0  F02E         	movff	_util_getTemperature$1790,___ftadd@f1
  2249  0071FA  C1B1  F02F         	movff	_util_getTemperature$1790+1,___ftadd@f1+1
  2250  0071FE  C1B2  F030         	movff	_util_getTemperature$1790+2,___ftadd@f1+2
  2251  007202  0E00               	movlw	0
  2252  007204  6E18               	movwf	___ftmul@f2,c
  2253  007206  0E00               	movlw	0
  2254  007208  6E19               	movwf	___ftmul@f2+1,c
  2255  00720A  0E40               	movlw	64
  2256  00720C  6E1A               	movwf	___ftmul@f2+2,c
  2257  00720E  C10A  F009         	movff	util_getTemperature@bit_mem+10,___awtoft@c
  2258  007212  C10B  F00A         	movff	util_getTemperature@bit_mem+11,___awtoft@c+1
  2259  007216  EC3E  F028         	call	___awtoft	;wreg free
  2260  00721A  C009  F015         	movff	?___awtoft,___ftmul@f1
  2261  00721E  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2262  007222  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2263  007226  ECDE  F02D         	call	___ftmul	;wreg free
  2264  00722A  C015  F031         	movff	?___ftmul,___ftadd@f2
  2265  00722E  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  2266  007232  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  2267  007236  ECD7  F030         	call	___ftadd	;wreg free
  2268  00723A  C02E  F1C9         	movff	?___ftadd,util_getTemperature@temperature
  2269  00723E  C02F  F1CA         	movff	?___ftadd+1,util_getTemperature@temperature+1
  2270  007242  C030  F1CB         	movff	?___ftadd+2,util_getTemperature@temperature+2
  2271                           
  2272                           ;easat2_util_inputs.c: 241: temperature = temperature +
  2273                           ;easat2_util_inputs.c: 242: (float)bit_mem[6]*4.0 + (float)bit_mem[7]*8.0 +
  2274                           ;easat2_util_inputs.c: 243: (float)bit_mem[8]*16.0 + (float)bit_mem[9]*32.0 +
  2275                           ;easat2_util_inputs.c: 244: (float)bit_mem[10]*64.0;
  2276  007246  0E00               	movlw	0
  2277  007248  6E18               	movwf	___ftmul@f2,c
  2278  00724A  0E00               	movlw	0
  2279  00724C  6E19               	movwf	___ftmul@f2+1,c
  2280  00724E  0E41               	movlw	65
  2281  007250  6E1A               	movwf	___ftmul@f2+2,c
  2282  007252  C10E  F009         	movff	util_getTemperature@bit_mem+14,___awtoft@c
  2283  007256  C10F  F00A         	movff	util_getTemperature@bit_mem+15,___awtoft@c+1
  2284  00725A  EC3E  F028         	call	___awtoft	;wreg free
  2285  00725E  C009  F015         	movff	?___awtoft,___ftmul@f1
  2286  007262  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2287  007266  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2288  00726A  ECDE  F02D         	call	___ftmul	;wreg free
  2289  00726E  C015  F031         	movff	?___ftmul,___ftadd@f2
  2290  007272  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  2291  007276  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  2292  00727A  0E00               	movlw	0
  2293  00727C  6E18               	movwf	___ftmul@f2,c
  2294  00727E  0E80               	movlw	128
  2295  007280  6E19               	movwf	___ftmul@f2+1,c
  2296  007282  0E40               	movlw	64
  2297  007284  6E1A               	movwf	___ftmul@f2+2,c
  2298  007286  C10C  F009         	movff	util_getTemperature@bit_mem+12,___awtoft@c
  2299  00728A  C10D  F00A         	movff	util_getTemperature@bit_mem+13,___awtoft@c+1
  2300  00728E  EC3E  F028         	call	___awtoft	;wreg free
  2301  007292  C009  F015         	movff	?___awtoft,___ftmul@f1
  2302  007296  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2303  00729A  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2304  00729E  ECDE  F02D         	call	___ftmul	;wreg free
  2305  0072A2  C015  F02E         	movff	?___ftmul,___ftadd@f1
  2306  0072A6  C016  F02F         	movff	?___ftmul+1,___ftadd@f1+1
  2307  0072AA  C017  F030         	movff	?___ftmul+2,___ftadd@f1+2
  2308  0072AE  ECD7  F030         	call	___ftadd	;wreg free
  2309  0072B2  C02E  F1A7         	movff	?___ftadd,_util_getTemperature$1787
  2310  0072B6  C02F  F1A8         	movff	?___ftadd+1,_util_getTemperature$1787+1
  2311  0072BA  C030  F1A9         	movff	?___ftadd+2,_util_getTemperature$1787+2
  2312                           
  2313                           ;easat2_util_inputs.c: 241: temperature = temperature +
  2314                           ;easat2_util_inputs.c: 242: (float)bit_mem[6]*4.0 + (float)bit_mem[7]*8.0 +
  2315                           ;easat2_util_inputs.c: 243: (float)bit_mem[8]*16.0 + (float)bit_mem[9]*32.0 +
  2316                           ;easat2_util_inputs.c: 244: (float)bit_mem[10]*64.0;
  2317  0072BE  0E00               	movlw	0
  2318  0072C0  6E18               	movwf	___ftmul@f2,c
  2319  0072C2  0E80               	movlw	128
  2320  0072C4  6E19               	movwf	___ftmul@f2+1,c
  2321  0072C6  0E41               	movlw	65
  2322  0072C8  6E1A               	movwf	___ftmul@f2+2,c
  2323  0072CA  C110  F009         	movff	util_getTemperature@bit_mem+16,___awtoft@c
  2324  0072CE  C111  F00A         	movff	util_getTemperature@bit_mem+17,___awtoft@c+1
  2325  0072D2  EC3E  F028         	call	___awtoft	;wreg free
  2326  0072D6  C009  F015         	movff	?___awtoft,___ftmul@f1
  2327  0072DA  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2328  0072DE  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2329  0072E2  ECDE  F02D         	call	___ftmul	;wreg free
  2330  0072E6  C015  F031         	movff	?___ftmul,___ftadd@f2
  2331  0072EA  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  2332  0072EE  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  2333  0072F2  C1A7  F02E         	movff	_util_getTemperature$1787,___ftadd@f1
  2334  0072F6  C1A8  F02F         	movff	_util_getTemperature$1787+1,___ftadd@f1+1
  2335  0072FA  C1A9  F030         	movff	_util_getTemperature$1787+2,___ftadd@f1+2
  2336  0072FE  ECD7  F030         	call	___ftadd	;wreg free
  2337  007302  C02E  F1AA         	movff	?___ftadd,_util_getTemperature$1788
  2338  007306  C02F  F1AB         	movff	?___ftadd+1,_util_getTemperature$1788+1
  2339  00730A  C030  F1AC         	movff	?___ftadd+2,_util_getTemperature$1788+2
  2340                           
  2341                           ;easat2_util_inputs.c: 241: temperature = temperature +
  2342                           ;easat2_util_inputs.c: 242: (float)bit_mem[6]*4.0 + (float)bit_mem[7]*8.0 +
  2343                           ;easat2_util_inputs.c: 243: (float)bit_mem[8]*16.0 + (float)bit_mem[9]*32.0 +
  2344                           ;easat2_util_inputs.c: 244: (float)bit_mem[10]*64.0;
  2345  00730E  0E00               	movlw	0
  2346  007310  6E18               	movwf	___ftmul@f2,c
  2347  007312  0E00               	movlw	0
  2348  007314  6E19               	movwf	___ftmul@f2+1,c
  2349  007316  0E42               	movlw	66
  2350  007318  6E1A               	movwf	___ftmul@f2+2,c
  2351  00731A  C112  F009         	movff	util_getTemperature@bit_mem+18,___awtoft@c
  2352  00731E  C113  F00A         	movff	util_getTemperature@bit_mem+19,___awtoft@c+1
  2353  007322  EC3E  F028         	call	___awtoft	;wreg free
  2354  007326  C009  F015         	movff	?___awtoft,___ftmul@f1
  2355  00732A  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2356  00732E  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2357  007332  ECDE  F02D         	call	___ftmul	;wreg free
  2358  007336  C015  F031         	movff	?___ftmul,___ftadd@f2
  2359  00733A  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  2360  00733E  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  2361  007342  C1AA  F02E         	movff	_util_getTemperature$1788,___ftadd@f1
  2362  007346  C1AB  F02F         	movff	_util_getTemperature$1788+1,___ftadd@f1+1
  2363  00734A  C1AC  F030         	movff	_util_getTemperature$1788+2,___ftadd@f1+2
  2364  00734E  ECD7  F030         	call	___ftadd	;wreg free
  2365  007352  C02E  F1AD         	movff	?___ftadd,_util_getTemperature$1789
  2366  007356  C02F  F1AE         	movff	?___ftadd+1,_util_getTemperature$1789+1
  2367  00735A  C030  F1AF         	movff	?___ftadd+2,_util_getTemperature$1789+2
  2368                           
  2369                           ;easat2_util_inputs.c: 241: temperature = temperature +
  2370                           ;easat2_util_inputs.c: 242: (float)bit_mem[6]*4.0 + (float)bit_mem[7]*8.0 +
  2371                           ;easat2_util_inputs.c: 243: (float)bit_mem[8]*16.0 + (float)bit_mem[9]*32.0 +
  2372                           ;easat2_util_inputs.c: 244: (float)bit_mem[10]*64.0;
  2373  00735E  0E00               	movlw	0
  2374  007360  6E18               	movwf	___ftmul@f2,c
  2375  007362  0E80               	movlw	128
  2376  007364  6E19               	movwf	___ftmul@f2+1,c
  2377  007366  0E42               	movlw	66
  2378  007368  6E1A               	movwf	___ftmul@f2+2,c
  2379  00736A  C114  F009         	movff	util_getTemperature@bit_mem+20,___awtoft@c
  2380  00736E  C115  F00A         	movff	util_getTemperature@bit_mem+21,___awtoft@c+1
  2381  007372  EC3E  F028         	call	___awtoft	;wreg free
  2382  007376  C009  F015         	movff	?___awtoft,___ftmul@f1
  2383  00737A  C00A  F016         	movff	?___awtoft+1,___ftmul@f1+1
  2384  00737E  C00B  F017         	movff	?___awtoft+2,___ftmul@f1+2
  2385  007382  ECDE  F02D         	call	___ftmul	;wreg free
  2386  007386  C015  F031         	movff	?___ftmul,___ftadd@f2
  2387  00738A  C016  F032         	movff	?___ftmul+1,___ftadd@f2+1
  2388  00738E  C017  F033         	movff	?___ftmul+2,___ftadd@f2+2
  2389  007392  C1AD  F02E         	movff	_util_getTemperature$1789,___ftadd@f1
  2390  007396  C1AE  F02F         	movff	_util_getTemperature$1789+1,___ftadd@f1+1
  2391  00739A  C1AF  F030         	movff	_util_getTemperature$1789+2,___ftadd@f1+2
  2392  00739E  ECD7  F030         	call	___ftadd	;wreg free
  2393  0073A2  C02E  F1B0         	movff	?___ftadd,_util_getTemperature$1790
  2394  0073A6  C02F  F1B1         	movff	?___ftadd+1,_util_getTemperature$1790+1
  2395  0073AA  C030  F1B2         	movff	?___ftadd+2,_util_getTemperature$1790+2
  2396                           
  2397                           ;easat2_util_inputs.c: 241: temperature = temperature +
  2398                           ;easat2_util_inputs.c: 242: (float)bit_mem[6]*4.0 + (float)bit_mem[7]*8.0 +
  2399                           ;easat2_util_inputs.c: 243: (float)bit_mem[8]*16.0 + (float)bit_mem[9]*32.0 +
  2400                           ;easat2_util_inputs.c: 244: (float)bit_mem[10]*64.0;
  2401  0073AE  C1B0  F02E         	movff	_util_getTemperature$1790,___ftadd@f1
  2402  0073B2  C1B1  F02F         	movff	_util_getTemperature$1790+1,___ftadd@f1+1
  2403  0073B6  C1B2  F030         	movff	_util_getTemperature$1790+2,___ftadd@f1+2
  2404  0073BA  C1C9  F031         	movff	util_getTemperature@temperature,___ftadd@f2
  2405  0073BE  C1CA  F032         	movff	util_getTemperature@temperature+1,___ftadd@f2+1
  2406  0073C2  C1CB  F033         	movff	util_getTemperature@temperature+2,___ftadd@f2+2
  2407  0073C6  ECD7  F030         	call	___ftadd	;wreg free
  2408  0073CA  C02E  F1C9         	movff	?___ftadd,util_getTemperature@temperature
  2409  0073CE  C02F  F1CA         	movff	?___ftadd+1,util_getTemperature@temperature+1
  2410  0073D2  C030  F1CB         	movff	?___ftadd+2,util_getTemperature@temperature+2
  2411                           
  2412                           ;easat2_util_inputs.c: 246: temperature = temperature * sign;
  2413  0073D6  C1C9  F015         	movff	util_getTemperature@temperature,___ftmul@f1
  2414  0073DA  C1CA  F016         	movff	util_getTemperature@temperature+1,___ftmul@f1+1
  2415  0073DE  C1CB  F017         	movff	util_getTemperature@temperature+2,___ftmul@f1+2
  2416  0073E2  C1A4  F018         	movff	util_getTemperature@sign,___ftmul@f2
  2417  0073E6  C1A5  F019         	movff	util_getTemperature@sign+1,___ftmul@f2+1
  2418  0073EA  C1A6  F01A         	movff	util_getTemperature@sign+2,___ftmul@f2+2
  2419  0073EE  ECDE  F02D         	call	___ftmul	;wreg free
  2420  0073F2  C015  F1C9         	movff	?___ftmul,util_getTemperature@temperature
  2421  0073F6  C016  F1CA         	movff	?___ftmul+1,util_getTemperature@temperature+1
  2422  0073FA  C017  F1CB         	movff	?___ftmul+2,util_getTemperature@temperature+2
  2423                           
  2424                           ;easat2_util_inputs.c: 248: return temperature;
  2425  0073FE  C1C9  F03A         	movff	util_getTemperature@temperature,?_util_getTemperature
  2426  007402  C1CA  F03B         	movff	util_getTemperature@temperature+1,?_util_getTemperature+1
  2427  007406  C1CB  F03C         	movff	util_getTemperature@temperature+2,?_util_getTemperature+2
  2428  00740A  0012               	return	
  2429  00740C                     __end_of_util_getTemperature:
  2430                           	opt stack 0
  2431                           tblptru	equ	0xFF8
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _util_waits_delay_secs *****************
  2439 ;; Defined at:
  2440 ;;		line 31 in file "easat2_util_waits.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  secs            2    5[COMRAM] int 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;  j               2   10[COMRAM] int 
  2445 ;;  i               2    8[COMRAM] int 
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, status,0, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2455 ;;      Params:         2       0       0       0       0       0       0
  2456 ;;      Locals:         4       0       0       0       0       0       0
  2457 ;;      Temps:          1       0       0       0       0       0       0
  2458 ;;      Totals:         7       0       0       0       0       0       0
  2459 ;;Total ram usage:        7 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    1
  2462 ;; This function calls:
  2463 ;;		_util_waits_delay_ms
  2464 ;; This function is called by:
  2465 ;;		_util_waits_delay_mins
  2466 ;;		_util_getTemperature
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text5
  2471  005178                     __ptext5:
  2472                           	opt stack 0
  2473  005178                     _util_waits_delay_secs:
  2474                           	opt stack 27
  2475                           
  2476                           ;easat2_util_waits.c: 32: for (int i = 0; i < secs; i++) {
  2477                           
  2478                           ;incstack = 0
  2479  005178  0E00               	movlw	0
  2480  00517A  6E0A               	movwf	util_waits_delay_secs@i+1,c
  2481  00517C  0E00               	movlw	0
  2482  00517E  6E09               	movwf	util_waits_delay_secs@i,c
  2483  005180  D017               	goto	l3004
  2484  005182                     l2990:
  2485                           
  2486                           ;easat2_util_waits.c: 33: for (int j = 0; j < 10; j++ )
  2487  005182  0E00               	movlw	0
  2488  005184  6E0C               	movwf	util_waits_delay_secs@j+1,c
  2489  005186  0E00               	movlw	0
  2490  005188  6E0B               	movwf	util_waits_delay_secs@j,c
  2491  00518A                     l2992:
  2492  00518A  BE0C               	btfsc	util_waits_delay_secs@j+1,7,c
  2493  00518C  D006               	goto	l2996
  2494  00518E  500C               	movf	util_waits_delay_secs@j+1,w,c
  2495  005190  E10D               	bnz	l3002
  2496  005192  0E0A               	movlw	10
  2497  005194  5C0B               	subwf	util_waits_delay_secs@j,w,c
  2498  005196  B0D8               	btfsc	status,0,c
  2499  005198  D009               	goto	l3002
  2500  00519A                     l2996:
  2501                           
  2502                           ;easat2_util_waits.c: 34: util_waits_delay_ms(100);
  2503  00519A  0E00               	movlw	0
  2504  00519C  6E02               	movwf	util_waits_delay_ms@ms+1,c
  2505  00519E  0E64               	movlw	100
  2506  0051A0  6E01               	movwf	util_waits_delay_ms@ms,c
  2507  0051A2  EC7B  F027         	call	_util_waits_delay_ms	;wreg free
  2508  0051A6  4A0B               	infsnz	util_waits_delay_secs@j,f,c
  2509  0051A8  2A0C               	incf	util_waits_delay_secs@j+1,f,c
  2510  0051AA  D7EF               	goto	l2992
  2511  0051AC                     l3002:
  2512  0051AC  4A09               	infsnz	util_waits_delay_secs@i,f,c
  2513  0051AE  2A0A               	incf	util_waits_delay_secs@i+1,f,c
  2514  0051B0                     l3004:
  2515  0051B0  5006               	movf	util_waits_delay_secs@secs,w,c
  2516  0051B2  5C09               	subwf	util_waits_delay_secs@i,w,c
  2517  0051B4  500A               	movf	util_waits_delay_secs@i+1,w,c
  2518  0051B6  0A80               	xorlw	128
  2519  0051B8  6E08               	movwf	??_util_waits_delay_secs& (0+255),c
  2520  0051BA  5007               	movf	util_waits_delay_secs@secs+1,w,c
  2521  0051BC  0A80               	xorlw	128
  2522  0051BE  5808               	subwfb	??_util_waits_delay_secs& (0+255),w,c
  2523  0051C0  B0D8               	btfsc	status,0,c
  2524  0051C2  0012               	return	
  2525  0051C4  D7DE               	goto	l2990
  2526  0051C6                     __end_of_util_waits_delay_secs:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           postinc2	equ	0xFDE
  2530                           postdec2	equ	0xFDD
  2531                           fsr2h	equ	0xFDA
  2532                           fsr2l	equ	0xFD9
  2533                           status	equ	0xFD8
  2534                           
  2535 ;; *************** function _util_onewire_write_byte *****************
  2536 ;; Defined at:
  2537 ;;		line 62 in file "easat2_util_onewire.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  value           2    2[COMRAM] int 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  bit7            2   21[COMRAM] int 
  2542 ;;  bit6            2   19[COMRAM] int 
  2543 ;;  bit5            2   17[COMRAM] int 
  2544 ;;  bit4            2   15[COMRAM] int 
  2545 ;;  bit3            2   13[COMRAM] int 
  2546 ;;  bit2            2   11[COMRAM] int 
  2547 ;;  bit1            2    9[COMRAM] int 
  2548 ;;  bit0            2    7[COMRAM] int 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2558 ;;      Params:         2       0       0       0       0       0       0
  2559 ;;      Locals:        16       0       0       0       0       0       0
  2560 ;;      Temps:          3       0       0       0       0       0       0
  2561 ;;      Totals:        21       0       0       0       0       0       0
  2562 ;;Total ram usage:       21 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		_util_onewire_write_bit
  2567 ;; This function is called by:
  2568 ;;		_util_getTemperature
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text6
  2573  00604C                     __ptext6:
  2574                           	opt stack 0
  2575  00604C                     _util_onewire_write_byte:
  2576                           	opt stack 27
  2577                           
  2578                           ;easat2_util_onewire.c: 64: int bit0, bit1, bit2, bit3, bit4, bit5, bit6, bit7;
  2579                           ;easat2_util_onewire.c: 66: bit0 = (value >> 0) & 0x01;
  2580                           
  2581                           ;incstack = 0
  2582  00604C  0E01               	movlw	1
  2583  00604E  1403               	andwf	util_onewire_write_byte@value,w,c
  2584  006050  6E08               	movwf	util_onewire_write_byte@bit0,c
  2585  006052  6A09               	clrf	util_onewire_write_byte@bit0+1,c
  2586                           
  2587                           ;easat2_util_onewire.c: 67: bit1 = (value >> 1) & 0x01;
  2588  006054  3404               	rlcf	util_onewire_write_byte@value+1,w,c
  2589  006056  3004               	rrcf	util_onewire_write_byte@value+1,w,c
  2590  006058  6E06               	movwf	(??_util_onewire_write_byte+1)& (0+255),c
  2591  00605A  3003               	rrcf	util_onewire_write_byte@value,w,c
  2592  00605C  6E05               	movwf	??_util_onewire_write_byte& (0+255),c
  2593  00605E  0E01               	movlw	1
  2594  006060  1405               	andwf	??_util_onewire_write_byte,w,c
  2595  006062  6E0A               	movwf	util_onewire_write_byte@bit1,c
  2596  006064  6A0B               	clrf	util_onewire_write_byte@bit1+1,c
  2597                           
  2598                           ;easat2_util_onewire.c: 68: bit2 = (value >> 2) & 0x01;
  2599  006066  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2600  00606A  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2601  00606E  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2602  006070  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2603  006072  3205               	rrcf	??_util_onewire_write_byte,f,c
  2604  006074  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2605  006076  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2606  006078  3205               	rrcf	??_util_onewire_write_byte,f,c
  2607  00607A  0E01               	movlw	1
  2608  00607C  1405               	andwf	??_util_onewire_write_byte,w,c
  2609  00607E  6E0C               	movwf	util_onewire_write_byte@bit2,c
  2610  006080  6A0D               	clrf	util_onewire_write_byte@bit2+1,c
  2611                           
  2612                           ;easat2_util_onewire.c: 69: bit3 = (value >> 3) & 0x01;
  2613  006082  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2614  006086  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2615  00608A  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2616  00608C  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2617  00608E  3205               	rrcf	??_util_onewire_write_byte,f,c
  2618  006090  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2619  006092  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2620  006094  3205               	rrcf	??_util_onewire_write_byte,f,c
  2621  006096  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2622  006098  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2623  00609A  3205               	rrcf	??_util_onewire_write_byte,f,c
  2624  00609C  0E01               	movlw	1
  2625  00609E  1405               	andwf	??_util_onewire_write_byte,w,c
  2626  0060A0  6E0E               	movwf	util_onewire_write_byte@bit3,c
  2627  0060A2  6A0F               	clrf	util_onewire_write_byte@bit3+1,c
  2628                           
  2629                           ;easat2_util_onewire.c: 70: bit4 = (value >> 4) & 0x01;
  2630  0060A4  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2631  0060A8  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2632  0060AC  0E04               	movlw	4
  2633  0060AE  6E07               	movwf	(??_util_onewire_write_byte+2)& (0+255),c
  2634  0060B0                     u3115:
  2635  0060B0  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2636  0060B2  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2637  0060B4  3205               	rrcf	??_util_onewire_write_byte,f,c
  2638  0060B6  2E07               	decfsz	(??_util_onewire_write_byte+2)& (0+255),f,c
  2639  0060B8  D7FB               	goto	u3115
  2640  0060BA  0E01               	movlw	1
  2641  0060BC  1405               	andwf	??_util_onewire_write_byte,w,c
  2642  0060BE  6E10               	movwf	util_onewire_write_byte@bit4,c
  2643  0060C0  6A11               	clrf	util_onewire_write_byte@bit4+1,c
  2644                           
  2645                           ;easat2_util_onewire.c: 71: bit5 = (value >> 5) & 0x01;
  2646  0060C2  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2647  0060C6  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2648  0060CA  0E05               	movlw	5
  2649  0060CC  6E07               	movwf	(??_util_onewire_write_byte+2)& (0+255),c
  2650  0060CE                     u3125:
  2651  0060CE  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2652  0060D0  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2653  0060D2  3205               	rrcf	??_util_onewire_write_byte,f,c
  2654  0060D4  2E07               	decfsz	(??_util_onewire_write_byte+2)& (0+255),f,c
  2655  0060D6  D7FB               	goto	u3125
  2656  0060D8  0E01               	movlw	1
  2657  0060DA  1405               	andwf	??_util_onewire_write_byte,w,c
  2658  0060DC  6E12               	movwf	util_onewire_write_byte@bit5,c
  2659  0060DE  6A13               	clrf	util_onewire_write_byte@bit5+1,c
  2660                           
  2661                           ;easat2_util_onewire.c: 72: bit6 = (value >> 6) & 0x01;
  2662  0060E0  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2663  0060E4  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2664  0060E8  0E06               	movlw	6
  2665  0060EA  6E07               	movwf	(??_util_onewire_write_byte+2)& (0+255),c
  2666  0060EC                     u3135:
  2667  0060EC  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2668  0060EE  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2669  0060F0  3205               	rrcf	??_util_onewire_write_byte,f,c
  2670  0060F2  2E07               	decfsz	(??_util_onewire_write_byte+2)& (0+255),f,c
  2671  0060F4  D7FB               	goto	u3135
  2672  0060F6  0E01               	movlw	1
  2673  0060F8  1405               	andwf	??_util_onewire_write_byte,w,c
  2674  0060FA  6E14               	movwf	util_onewire_write_byte@bit6,c
  2675  0060FC  6A15               	clrf	util_onewire_write_byte@bit6+1,c
  2676                           
  2677                           ;easat2_util_onewire.c: 73: bit7 = (value >> 7) & 0x01;
  2678  0060FE  C003  F005         	movff	util_onewire_write_byte@value,??_util_onewire_write_byte
  2679  006102  C004  F006         	movff	util_onewire_write_byte@value+1,??_util_onewire_write_byte+1
  2680  006106  0E07               	movlw	7
  2681  006108  6E07               	movwf	(??_util_onewire_write_byte+2)& (0+255),c
  2682  00610A                     u3145:
  2683  00610A  3406               	rlcf	??_util_onewire_write_byte+1,w,c
  2684  00610C  3206               	rrcf	??_util_onewire_write_byte+1,f,c
  2685  00610E  3205               	rrcf	??_util_onewire_write_byte,f,c
  2686  006110  2E07               	decfsz	(??_util_onewire_write_byte+2)& (0+255),f,c
  2687  006112  D7FB               	goto	u3145
  2688  006114  0E01               	movlw	1
  2689  006116  1405               	andwf	??_util_onewire_write_byte,w,c
  2690  006118  6E16               	movwf	util_onewire_write_byte@bit7,c
  2691  00611A  6A17               	clrf	util_onewire_write_byte@bit7+1,c
  2692                           
  2693                           ;easat2_util_onewire.c: 75: util_onewire_write_bit(bit0);
  2694  00611C  C008  F001         	movff	util_onewire_write_byte@bit0,util_onewire_write_bit@bit_in
  2695  006120  C009  F002         	movff	util_onewire_write_byte@bit0+1,util_onewire_write_bit@bit_in+1
  2696  006124  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2697                           
  2698                           ;easat2_util_onewire.c: 76: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2699  006128  F000               	nop	
  2700  00612A  D000               	nop2		;2 cycle nop
  2701  00612C  D000               	nop2		;2 cycle nop
  2702                           
  2703                           ;easat2_util_onewire.c: 77: util_onewire_write_bit(bit1);
  2704  00612E  C00A  F001         	movff	util_onewire_write_byte@bit1,util_onewire_write_bit@bit_in
  2705  006132  C00B  F002         	movff	util_onewire_write_byte@bit1+1,util_onewire_write_bit@bit_in+1
  2706  006136  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2707                           
  2708                           ;easat2_util_onewire.c: 78: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2709  00613A  F000               	nop	
  2710  00613C  D000               	nop2		;2 cycle nop
  2711  00613E  D000               	nop2		;2 cycle nop
  2712                           
  2713                           ;easat2_util_onewire.c: 79: util_onewire_write_bit(bit2);
  2714  006140  C00C  F001         	movff	util_onewire_write_byte@bit2,util_onewire_write_bit@bit_in
  2715  006144  C00D  F002         	movff	util_onewire_write_byte@bit2+1,util_onewire_write_bit@bit_in+1
  2716  006148  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2717                           
  2718                           ;easat2_util_onewire.c: 80: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2719  00614C  F000               	nop	
  2720  00614E  D000               	nop2		;2 cycle nop
  2721  006150  D000               	nop2		;2 cycle nop
  2722                           
  2723                           ;easat2_util_onewire.c: 81: util_onewire_write_bit(bit3);
  2724  006152  C00E  F001         	movff	util_onewire_write_byte@bit3,util_onewire_write_bit@bit_in
  2725  006156  C00F  F002         	movff	util_onewire_write_byte@bit3+1,util_onewire_write_bit@bit_in+1
  2726  00615A  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2727                           
  2728                           ;easat2_util_onewire.c: 82: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2729  00615E  F000               	nop	
  2730  006160  D000               	nop2		;2 cycle nop
  2731  006162  D000               	nop2		;2 cycle nop
  2732                           
  2733                           ;easat2_util_onewire.c: 83: util_onewire_write_bit(bit4);
  2734  006164  C010  F001         	movff	util_onewire_write_byte@bit4,util_onewire_write_bit@bit_in
  2735  006168  C011  F002         	movff	util_onewire_write_byte@bit4+1,util_onewire_write_bit@bit_in+1
  2736  00616C  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2737                           
  2738                           ;easat2_util_onewire.c: 84: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2739  006170  F000               	nop	
  2740  006172  D000               	nop2		;2 cycle nop
  2741  006174  D000               	nop2		;2 cycle nop
  2742                           
  2743                           ;easat2_util_onewire.c: 85: util_onewire_write_bit(bit5);
  2744  006176  C012  F001         	movff	util_onewire_write_byte@bit5,util_onewire_write_bit@bit_in
  2745  00617A  C013  F002         	movff	util_onewire_write_byte@bit5+1,util_onewire_write_bit@bit_in+1
  2746  00617E  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2747                           
  2748                           ;easat2_util_onewire.c: 86: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2749  006182  F000               	nop	
  2750  006184  D000               	nop2		;2 cycle nop
  2751  006186  D000               	nop2		;2 cycle nop
  2752                           
  2753                           ;easat2_util_onewire.c: 87: util_onewire_write_bit(bit6);
  2754  006188  C014  F001         	movff	util_onewire_write_byte@bit6,util_onewire_write_bit@bit_in
  2755  00618C  C015  F002         	movff	util_onewire_write_byte@bit6+1,util_onewire_write_bit@bit_in+1
  2756  006190  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2757                           
  2758                           ;easat2_util_onewire.c: 88: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2759  006194  F000               	nop	
  2760  006196  D000               	nop2		;2 cycle nop
  2761  006198  D000               	nop2		;2 cycle nop
  2762                           
  2763                           ;easat2_util_onewire.c: 89: util_onewire_write_bit(bit7);
  2764  00619A  C016  F001         	movff	util_onewire_write_byte@bit7,util_onewire_write_bit@bit_in
  2765  00619E  C017  F002         	movff	util_onewire_write_byte@bit7+1,util_onewire_write_bit@bit_in+1
  2766  0061A2  ECA9  F027         	call	_util_onewire_write_bit	;wreg free
  2767                           
  2768                           ;easat2_util_onewire.c: 90: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2769  0061A6  F000               	nop	
  2770  0061A8  D000               	nop2		;2 cycle nop
  2771  0061AA  D000               	nop2		;2 cycle nop
  2772  0061AC  0012               	return		;funcret
  2773  0061AE                     __end_of_util_onewire_write_byte:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           postinc2	equ	0xFDE
  2777                           postdec2	equ	0xFDD
  2778                           fsr2h	equ	0xFDA
  2779                           fsr2l	equ	0xFD9
  2780                           status	equ	0xFD8
  2781                           
  2782 ;; *************** function _util_onewire_write_bit *****************
  2783 ;; Defined at:
  2784 ;;		line 121 in file "easat2_util_onewire.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;  bit_in          2    0[COMRAM] int 
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;		None
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0
  2793 ;; Tracked objects:
  2794 ;;		On entry : 0/0
  2795 ;;		On exit  : 0/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2798 ;;      Params:         2       0       0       0       0       0       0
  2799 ;;      Locals:         0       0       0       0       0       0       0
  2800 ;;      Temps:          0       0       0       0       0       0       0
  2801 ;;      Totals:         2       0       0       0       0       0       0
  2802 ;;Total ram usage:        2 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; This function calls:
  2805 ;;		Nothing
  2806 ;; This function is called by:
  2807 ;;		_util_onewire_write_byte
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	text7
  2812  004F52                     __ptext7:
  2813                           	opt stack 0
  2814  004F52                     _util_onewire_write_bit:
  2815                           	opt stack 27
  2816                           
  2817                           ;easat2_util_onewire.c: 124: TRISAbits.TRISA3 = 0;
  2818                           
  2819                           ;incstack = 0
  2820  004F52  9692               	bcf	3986,3,c	;volatile
  2821                           
  2822                           ;easat2_util_onewire.c: 126: if (bit_in) {
  2823  004F54  5001               	movf	util_onewire_write_bit@bit_in,w,c
  2824  004F56  1002               	iorwf	util_onewire_write_bit@bit_in+1,w,c
  2825  004F58  B4D8               	btfsc	status,2,c
  2826  004F5A  D009               	goto	l296
  2827                           
  2828                           ;easat2_util_onewire.c: 129: PORTAbits.RA3 = 0;
  2829  004F5C  9680               	bcf	3968,3,c	;volatile
  2830                           
  2831                           ;easat2_util_onewire.c: 133: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2832  004F5E  F000               	nop	
  2833  004F60  D000               	nop2		;2 cycle nop
  2834  004F62  D000               	nop2		;2 cycle nop
  2835                           
  2836                           ;easat2_util_onewire.c: 136: PORTAbits.RA3 = 1;
  2837  004F64  8680               	bsf	3968,3,c	;volatile
  2838                           
  2839                           ;easat2_util_onewire.c: 139: _delay((unsigned long)((55)*(2000000/4000000.0)));
  2840  004F66  0E09               	movlw	9
  2841  004F68                     u4057:
  2842  004F68  2EE8               	decfsz	wreg,f,c
  2843  004F6A  D7FE               	goto	u4057
  2844                           
  2845                           ;easat2_util_onewire.c: 141: } else {
  2846  004F6C  0012               	return	
  2847  004F6E                     l296:
  2848                           
  2849                           ;easat2_util_onewire.c: 144: PORTAbits.RA3 = 0;
  2850  004F6E  9680               	bcf	3968,3,c	;volatile
  2851                           
  2852                           ;easat2_util_onewire.c: 148: _delay((unsigned long)((70)*(2000000/4000000.0)));
  2853  004F70  0E0B               	movlw	11
  2854  004F72                     u4067:
  2855  004F72  2EE8               	decfsz	wreg,f,c
  2856  004F74  D7FE               	goto	u4067
  2857  004F76  D000               	nop2		;nop
  2858                           
  2859                           ;easat2_util_onewire.c: 151: PORTAbits.RA3 = 1;
  2860  004F78  8680               	bsf	3968,3,c	;volatile
  2861                           
  2862                           ;easat2_util_onewire.c: 154: _delay((unsigned long)((10)*(2000000/4000000.0)));
  2863  004F7A  F000               	nop	
  2864  004F7C  D000               	nop2		;2 cycle nop
  2865  004F7E  D000               	nop2		;2 cycle nop
  2866  004F80  0012               	return	
  2867  004F82                     __end_of_util_onewire_write_bit:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           wreg	equ	0xFE8
  2871                           postinc2	equ	0xFDE
  2872                           postdec2	equ	0xFDD
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _util_onewire_reset *****************
  2878 ;; Defined at:
  2879 ;;		line 18 in file "easat2_util_onewire.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;		None
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  presence        2    3[COMRAM] int 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  2    0[COMRAM] int 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         2       0       0       0       0       0       0
  2894 ;;      Locals:         2       0       0       0       0       0       0
  2895 ;;      Temps:          1       0       0       0       0       0       0
  2896 ;;      Totals:         5       0       0       0       0       0       0
  2897 ;;Total ram usage:        5 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_util_getTemperature
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text8
  2907  005136                     __ptext8:
  2908                           	opt stack 0
  2909  005136                     _util_onewire_reset:
  2910                           	opt stack 28
  2911                           
  2912                           ;easat2_util_onewire.c: 20: int presence = 1;
  2913                           
  2914                           ;incstack = 0
  2915  005136  0E00               	movlw	0
  2916  005138  6E05               	movwf	util_onewire_reset@presence+1,c
  2917  00513A  0E01               	movlw	1
  2918  00513C  6E04               	movwf	util_onewire_reset@presence,c
  2919                           
  2920                           ;easat2_util_onewire.c: 23: TRISAbits.TRISA3 = 0;
  2921  00513E  9692               	bcf	3986,3,c	;volatile
  2922                           
  2923                           ;easat2_util_onewire.c: 25: PORTAbits.RA3 = 0;
  2924  005140  9680               	bcf	3968,3,c	;volatile
  2925                           
  2926                           ;easat2_util_onewire.c: 29: _delay((unsigned long)((560)*(2000000/4000000.0)));
  2927  005142  0E5D               	movlw	93
  2928  005144                     u4077:
  2929  005144  2EE8               	decfsz	wreg,f,c
  2930  005146  D7FE               	goto	u4077
  2931  005148  F000               	nop	
  2932                           
  2933                           ;easat2_util_onewire.c: 32: PORTAbits.RA3 = 1;
  2934  00514A  8680               	bsf	3968,3,c	;volatile
  2935                           
  2936                           ;easat2_util_onewire.c: 39: _delay((unsigned long)((70)*(2000000/4000000.0)));
  2937  00514C  0E0B               	movlw	11
  2938  00514E                     u4087:
  2939  00514E  2EE8               	decfsz	wreg,f,c
  2940  005150  D7FE               	goto	u4087
  2941  005152  D000               	nop2		;nop
  2942                           
  2943                           ;easat2_util_onewire.c: 42: TRISAbits.TRISA3 = 1;
  2944  005154  8692               	bsf	3986,3,c	;volatile
  2945                           
  2946                           ;easat2_util_onewire.c: 47: presence = PORTAbits.RA3;
  2947  005156  A680               	btfss	3968,3,c	;volatile
  2948  005158  D003               	goto	u3100
  2949  00515A  6A03               	clrf	??_util_onewire_reset& (0+255),c
  2950  00515C  2A03               	incf	??_util_onewire_reset& (0+255),f,c
  2951  00515E  D001               	goto	u3108
  2952  005160                     u3100:
  2953  005160  6A03               	clrf	??_util_onewire_reset& (0+255),c
  2954  005162                     u3108:
  2955  005162  5003               	movf	??_util_onewire_reset,w,c
  2956  005164  6E04               	movwf	util_onewire_reset@presence,c
  2957  005166  6A05               	clrf	util_onewire_reset@presence+1,c
  2958                           
  2959                           ;easat2_util_onewire.c: 52: _delay((unsigned long)((420)*(2000000/4000000.0)));
  2960  005168  0E46               	movlw	70
  2961  00516A                     u4097:
  2962  00516A  2EE8               	decfsz	wreg,f,c
  2963  00516C  D7FE               	goto	u4097
  2964                           
  2965                           ;easat2_util_onewire.c: 56: return presence;
  2966  00516E  C004  F001         	movff	util_onewire_reset@presence,?_util_onewire_reset
  2967  005172  C005  F002         	movff	util_onewire_reset@presence+1,?_util_onewire_reset+1
  2968  005176  0012               	return	
  2969  005178                     __end_of_util_onewire_reset:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           wreg	equ	0xFE8
  2973                           postinc2	equ	0xFDE
  2974                           postdec2	equ	0xFDD
  2975                           fsr2h	equ	0xFDA
  2976                           fsr2l	equ	0xFD9
  2977                           status	equ	0xFD8
  2978                           
  2979 ;; *************** function _util_onewire_read_byte *****************
  2980 ;; Defined at:
  2981 ;;		line 96 in file "easat2_util_onewire.c"
  2982 ;; Parameters:    Size  Location     Type
  2983 ;;		None
  2984 ;; Auto vars:     Size  Location     Type
  2985 ;;  value           2   37[COMRAM] int 
  2986 ;;  bit7            2   35[COMRAM] int 
  2987 ;;  bit6            2   33[COMRAM] int 
  2988 ;;  bit5            2   31[COMRAM] int 
  2989 ;;  bit4            2   29[COMRAM] int 
  2990 ;;  bit3            2   27[COMRAM] int 
  2991 ;;  bit2            2   25[COMRAM] int 
  2992 ;;  bit1            2   23[COMRAM] int 
  2993 ;;  bit0            2   21[COMRAM] int 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  2    5[COMRAM] int 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         2       0       0       0       0       0       0
  3004 ;;      Locals:        18       0       0       0       0       0       0
  3005 ;;      Temps:         14       0       0       0       0       0       0
  3006 ;;      Totals:        34       0       0       0       0       0       0
  3007 ;;Total ram usage:       34 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    1
  3010 ;; This function calls:
  3011 ;;		_util_onewire_read_bit
  3012 ;; This function is called by:
  3013 ;;		_util_getTemperature
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text9
  3018  005F0A                     __ptext9:
  3019                           	opt stack 0
  3020  005F0A                     _util_onewire_read_byte:
  3021                           	opt stack 27
  3022                           
  3023                           ;easat2_util_onewire.c: 98: int bit0, bit1, bit2, bit3, bit4, bit5, bit6, bit7;
  3024                           ;easat2_util_onewire.c: 99: int value = 0;
  3025                           
  3026                           ;incstack = 0
  3027  005F0A  0E00               	movlw	0
  3028  005F0C  6E27               	movwf	util_onewire_read_byte@value+1,c
  3029  005F0E  0E00               	movlw	0
  3030  005F10  6E26               	movwf	util_onewire_read_byte@value,c
  3031                           
  3032                           ;easat2_util_onewire.c: 102: TRISAbits.TRISA3 = 1;
  3033  005F12  8692               	bsf	3986,3,c	;volatile
  3034                           
  3035                           ;easat2_util_onewire.c: 104: bit0 = util_onewire_read_bit();
  3036  005F14  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3037  005F18  C001  F016         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit0
  3038  005F1C  C002  F017         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit0+1
  3039                           
  3040                           ;easat2_util_onewire.c: 105: bit1 = util_onewire_read_bit();
  3041  005F20  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3042  005F24  C001  F018         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit1
  3043  005F28  C002  F019         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit1+1
  3044                           
  3045                           ;easat2_util_onewire.c: 106: bit2 = util_onewire_read_bit();
  3046  005F2C  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3047  005F30  C001  F01A         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit2
  3048  005F34  C002  F01B         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit2+1
  3049                           
  3050                           ;easat2_util_onewire.c: 107: bit3 = util_onewire_read_bit();
  3051  005F38  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3052  005F3C  C001  F01C         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit3
  3053  005F40  C002  F01D         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit3+1
  3054                           
  3055                           ;easat2_util_onewire.c: 108: bit4 = util_onewire_read_bit();
  3056  005F44  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3057  005F48  C001  F01E         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit4
  3058  005F4C  C002  F01F         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit4+1
  3059                           
  3060                           ;easat2_util_onewire.c: 109: bit5 = util_onewire_read_bit();
  3061  005F50  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3062  005F54  C001  F020         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit5
  3063  005F58  C002  F021         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit5+1
  3064                           
  3065                           ;easat2_util_onewire.c: 110: bit6 = util_onewire_read_bit();
  3066  005F5C  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3067  005F60  C001  F022         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit6
  3068  005F64  C002  F023         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit6+1
  3069                           
  3070                           ;easat2_util_onewire.c: 111: bit7 = util_onewire_read_bit();
  3071  005F68  ECF1  F027         	call	_util_onewire_read_bit	;wreg free
  3072  005F6C  C001  F024         	movff	?_util_onewire_read_bit,util_onewire_read_byte@bit7
  3073  005F70  C002  F025         	movff	?_util_onewire_read_bit+1,util_onewire_read_byte@bit7+1
  3074                           
  3075                           ;easat2_util_onewire.c: 113: value = bit0 + (bit1 << 1) + (bit2 << 2) + (bit3 << 3) + (b
      +                          it4 << 4)
  3076                           ;easat2_util_onewire.c: 114: + (bit5 << 5) + (bit6 << 6) + (bit7 << 7);
  3077  005F74  C024  F008         	movff	util_onewire_read_byte@bit7,??_util_onewire_read_byte
  3078  005F78  C025  F009         	movff	util_onewire_read_byte@bit7+1,??_util_onewire_read_byte+1
  3079  005F7C  0E07               	movlw	7
  3080  005F7E                     u3155:
  3081  005F7E  90D8               	bcf	status,0,c
  3082  005F80  3608               	rlcf	??_util_onewire_read_byte,f,c
  3083  005F82  3609               	rlcf	??_util_onewire_read_byte+1,f,c
  3084  005F84  2EE8               	decfsz	wreg,f,c
  3085  005F86  D7FB               	goto	u3155
  3086  005F88  C022  F00A         	movff	util_onewire_read_byte@bit6,??_util_onewire_read_byte+2
  3087  005F8C  C023  F00B         	movff	util_onewire_read_byte@bit6+1,??_util_onewire_read_byte+3
  3088  005F90  0E06               	movlw	6
  3089  005F92                     u3165:
  3090  005F92  90D8               	bcf	status,0,c
  3091  005F94  360A               	rlcf	??_util_onewire_read_byte+2,f,c
  3092  005F96  360B               	rlcf	??_util_onewire_read_byte+3,f,c
  3093  005F98  2EE8               	decfsz	wreg,f,c
  3094  005F9A  D7FB               	goto	u3165
  3095  005F9C  C020  F00C         	movff	util_onewire_read_byte@bit5,??_util_onewire_read_byte+4
  3096  005FA0  C021  F00D         	movff	util_onewire_read_byte@bit5+1,??_util_onewire_read_byte+5
  3097  005FA4  0E05               	movlw	5
  3098  005FA6                     u3175:
  3099  005FA6  90D8               	bcf	status,0,c
  3100  005FA8  360C               	rlcf	??_util_onewire_read_byte+4,f,c
  3101  005FAA  360D               	rlcf	??_util_onewire_read_byte+5,f,c
  3102  005FAC  2EE8               	decfsz	wreg,f,c
  3103  005FAE  D7FB               	goto	u3175
  3104  005FB0  C01E  F00E         	movff	util_onewire_read_byte@bit4,??_util_onewire_read_byte+6
  3105  005FB4  C01F  F00F         	movff	util_onewire_read_byte@bit4+1,??_util_onewire_read_byte+7
  3106  005FB8  3A0E               	swapf	??_util_onewire_read_byte+6,f,c
  3107  005FBA  3A0F               	swapf	??_util_onewire_read_byte+7,f,c
  3108  005FBC  0EF0               	movlw	240
  3109  005FBE  160F               	andwf	??_util_onewire_read_byte+7,f,c
  3110  005FC0  500E               	movf	??_util_onewire_read_byte+6,w,c
  3111  005FC2  0B0F               	andlw	15
  3112  005FC4  120F               	iorwf	??_util_onewire_read_byte+7,f,c
  3113  005FC6  0EF0               	movlw	240
  3114  005FC8  160E               	andwf	??_util_onewire_read_byte+6,f,c
  3115  005FCA  C01C  F010         	movff	util_onewire_read_byte@bit3,??_util_onewire_read_byte+8
  3116  005FCE  C01D  F011         	movff	util_onewire_read_byte@bit3+1,??_util_onewire_read_byte+9
  3117  005FD2  90D8               	bcf	status,0,c
  3118  005FD4  3610               	rlcf	??_util_onewire_read_byte+8,f,c
  3119  005FD6  3611               	rlcf	??_util_onewire_read_byte+9,f,c
  3120  005FD8  90D8               	bcf	status,0,c
  3121  005FDA  3610               	rlcf	??_util_onewire_read_byte+8,f,c
  3122  005FDC  3611               	rlcf	??_util_onewire_read_byte+9,f,c
  3123  005FDE  90D8               	bcf	status,0,c
  3124  005FE0  3610               	rlcf	??_util_onewire_read_byte+8,f,c
  3125  005FE2  3611               	rlcf	??_util_onewire_read_byte+9,f,c
  3126  005FE4  C01A  F012         	movff	util_onewire_read_byte@bit2,??_util_onewire_read_byte+10
  3127  005FE8  C01B  F013         	movff	util_onewire_read_byte@bit2+1,??_util_onewire_read_byte+11
  3128  005FEC  90D8               	bcf	status,0,c
  3129  005FEE  3612               	rlcf	??_util_onewire_read_byte+10,f,c
  3130  005FF0  3613               	rlcf	??_util_onewire_read_byte+11,f,c
  3131  005FF2  90D8               	bcf	status,0,c
  3132  005FF4  3612               	rlcf	??_util_onewire_read_byte+10,f,c
  3133  005FF6  3613               	rlcf	??_util_onewire_read_byte+11,f,c
  3134  005FF8  C018  F014         	movff	util_onewire_read_byte@bit1,??_util_onewire_read_byte+12
  3135  005FFC  C019  F015         	movff	util_onewire_read_byte@bit1+1,??_util_onewire_read_byte+13
  3136  006000  90D8               	bcf	status,0,c
  3137  006002  3614               	rlcf	??_util_onewire_read_byte+12,f,c
  3138  006004  3615               	rlcf	??_util_onewire_read_byte+13,f,c
  3139  006006  5012               	movf	??_util_onewire_read_byte+10,w,c
  3140  006008  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3141  00600A  5013               	movf	??_util_onewire_read_byte+11,w,c
  3142  00600C  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3143  00600E  5010               	movf	??_util_onewire_read_byte+8,w,c
  3144  006010  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3145  006012  5011               	movf	??_util_onewire_read_byte+9,w,c
  3146  006014  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3147  006016  500E               	movf	??_util_onewire_read_byte+6,w,c
  3148  006018  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3149  00601A  500F               	movf	??_util_onewire_read_byte+7,w,c
  3150  00601C  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3151  00601E  500C               	movf	??_util_onewire_read_byte+4,w,c
  3152  006020  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3153  006022  500D               	movf	??_util_onewire_read_byte+5,w,c
  3154  006024  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3155  006026  500A               	movf	??_util_onewire_read_byte+2,w,c
  3156  006028  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3157  00602A  500B               	movf	??_util_onewire_read_byte+3,w,c
  3158  00602C  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3159  00602E  5008               	movf	??_util_onewire_read_byte,w,c
  3160  006030  2614               	addwf	??_util_onewire_read_byte+12,f,c
  3161  006032  5009               	movf	??_util_onewire_read_byte+1,w,c
  3162  006034  2215               	addwfc	??_util_onewire_read_byte+13,f,c
  3163  006036  5016               	movf	util_onewire_read_byte@bit0,w,c
  3164  006038  2414               	addwf	??_util_onewire_read_byte+12,w,c
  3165  00603A  6E26               	movwf	util_onewire_read_byte@value,c
  3166  00603C  5017               	movf	util_onewire_read_byte@bit0+1,w,c
  3167  00603E  2015               	addwfc	??_util_onewire_read_byte+13,w,c
  3168  006040  6E27               	movwf	util_onewire_read_byte@value+1,c
  3169                           
  3170                           ;easat2_util_onewire.c: 116: return value;
  3171  006042  C026  F006         	movff	util_onewire_read_byte@value,?_util_onewire_read_byte
  3172  006046  C027  F007         	movff	util_onewire_read_byte@value+1,?_util_onewire_read_byte+1
  3173  00604A  0012               	return	
  3174  00604C                     __end_of_util_onewire_read_byte:
  3175                           	opt stack 0
  3176                           tblptru	equ	0xFF8
  3177                           wreg	equ	0xFE8
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _util_onewire_read_bit *****************
  3185 ;; Defined at:
  3186 ;;		line 162 in file "easat2_util_onewire.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  value           2    3[COMRAM] int 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  2    0[COMRAM] int 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : 0/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         2       0       0       0       0       0       0
  3201 ;;      Locals:         2       0       0       0       0       0       0
  3202 ;;      Temps:          1       0       0       0       0       0       0
  3203 ;;      Totals:         5       0       0       0       0       0       0
  3204 ;;Total ram usage:        5 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_util_onewire_read_byte
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text10
  3214  004FE2                     __ptext10:
  3215                           	opt stack 0
  3216  004FE2                     _util_onewire_read_bit:
  3217                           	opt stack 27
  3218                           
  3219                           ;easat2_util_onewire.c: 164: int value = 0;
  3220                           
  3221                           ;incstack = 0
  3222  004FE2  0E00               	movlw	0
  3223  004FE4  6E05               	movwf	util_onewire_read_bit@value+1,c
  3224  004FE6  0E00               	movlw	0
  3225  004FE8  6E04               	movwf	util_onewire_read_bit@value,c
  3226                           
  3227                           ;easat2_util_onewire.c: 167: TRISAbits.TRISA3 = 0;
  3228  004FEA  9692               	bcf	3986,3,c	;volatile
  3229                           
  3230                           ;easat2_util_onewire.c: 170: PORTAbits.RA3 = 0;
  3231  004FEC  9680               	bcf	3968,3,c	;volatile
  3232                           
  3233                           ;easat2_util_onewire.c: 176: PORTAbits.RA3 = 1;
  3234                           
  3235                           ;easat2_util_onewire.c: 173: _delay((unsigned long)((1)*(2000000/4000000.0)));
  3236  004FEE  8680               	bsf	3968,3,c	;volatile
  3237                           
  3238                           ;easat2_util_onewire.c: 179: _delay((unsigned long)((5)*(2000000/4000000.0)));
  3239  004FF0  D000               	nop2		;2 cycle nop
  3240                           
  3241                           ;easat2_util_onewire.c: 182: value = PORTAbits.RA3;
  3242  004FF2  A680               	btfss	3968,3,c	;volatile
  3243  004FF4  D003               	goto	u2630
  3244  004FF6  6A03               	clrf	??_util_onewire_read_bit& (0+255),c
  3245  004FF8  2A03               	incf	??_util_onewire_read_bit& (0+255),f,c
  3246  004FFA  D001               	goto	u2638
  3247  004FFC                     u2630:
  3248  004FFC  6A03               	clrf	??_util_onewire_read_bit& (0+255),c
  3249  004FFE                     u2638:
  3250  004FFE  5003               	movf	??_util_onewire_read_bit,w,c
  3251  005000  6E04               	movwf	util_onewire_read_bit@value,c
  3252  005002  6A05               	clrf	util_onewire_read_bit@value+1,c
  3253                           
  3254                           ;easat2_util_onewire.c: 185: _delay((unsigned long)((60)*(2000000/4000000.0)));
  3255  005004  0E0A               	movlw	10
  3256  005006                     u4107:
  3257  005006  2EE8               	decfsz	wreg,f,c
  3258  005008  D7FE               	goto	u4107
  3259                           
  3260                           ;easat2_util_onewire.c: 187: return value;
  3261  00500A  C004  F001         	movff	util_onewire_read_bit@value,?_util_onewire_read_bit
  3262  00500E  C005  F002         	movff	util_onewire_read_bit@value+1,?_util_onewire_read_bit+1
  3263  005012  0012               	return	
  3264  005014                     __end_of_util_onewire_read_bit:
  3265                           	opt stack 0
  3266                           tblptru	equ	0xFF8
  3267                           wreg	equ	0xFE8
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function ___ftdiv *****************
  3275 ;; Defined at:
  3276 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  f1              3   12[COMRAM] float 
  3279 ;;  f2              3   15[COMRAM] float 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  f3              3   22[COMRAM] float 
  3282 ;;  sign            1   26[COMRAM] unsigned char 
  3283 ;;  exp             1   25[COMRAM] unsigned char 
  3284 ;;  cntr            1   21[COMRAM] unsigned char 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  3   12[COMRAM] float 
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3294 ;;      Params:         6       0       0       0       0       0       0
  3295 ;;      Locals:         6       0       0       0       0       0       0
  3296 ;;      Temps:          3       0       0       0       0       0       0
  3297 ;;      Totals:        15       0       0       0       0       0       0
  3298 ;;Total ram usage:       15 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    1
  3301 ;; This function calls:
  3302 ;;		___ftpack
  3303 ;; This function is called by:
  3304 ;;		_util_getTemperature
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text11
  3309  0059E2                     __ptext11:
  3310                           	opt stack 0
  3311  0059E2                     ___ftdiv:
  3312                           	opt stack 27
  3313                           
  3314                           ;incstack = 0
  3315  0059E2  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  3316  0059E6  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  3317  0059E8  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  3318  0059EA  340E               	rlcf	___ftdiv@f1+1,w,c
  3319  0059EC  3613               	rlcf	??___ftdiv& (0+255),f,c
  3320  0059EE  E301               	bnc	u3721
  3321  0059F0  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  3322  0059F2                     u3721:
  3323  0059F2  5013               	movf	??___ftdiv,w,c
  3324  0059F4  6E1A               	movwf	___ftdiv@exp,c
  3325  0059F6  501A               	movf	___ftdiv@exp,w,c
  3326  0059F8  A4D8               	btfss	status,2,c
  3327  0059FA  D007               	goto	l3874
  3328  0059FC  0E00               	movlw	0
  3329  0059FE  6E0D               	movwf	?___ftdiv,c
  3330  005A00  0E00               	movlw	0
  3331  005A02  6E0E               	movwf	?___ftdiv+1,c
  3332  005A04  0E00               	movlw	0
  3333  005A06  6E0F               	movwf	?___ftdiv+2,c
  3334  005A08  0012               	return	
  3335  005A0A                     l3874:
  3336  005A0A  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  3337  005A0E  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  3338  005A10  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  3339  005A12  3411               	rlcf	___ftdiv@f2+1,w,c
  3340  005A14  3613               	rlcf	??___ftdiv& (0+255),f,c
  3341  005A16  E301               	bnc	u3741
  3342  005A18  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  3343  005A1A                     u3741:
  3344  005A1A  5013               	movf	??___ftdiv,w,c
  3345  005A1C  6E1B               	movwf	___ftdiv@sign,c
  3346  005A1E  501B               	movf	___ftdiv@sign,w,c
  3347  005A20  A4D8               	btfss	status,2,c
  3348  005A22  D007               	goto	l3880
  3349  005A24  0E00               	movlw	0
  3350  005A26  6E0D               	movwf	?___ftdiv,c
  3351  005A28  0E00               	movlw	0
  3352  005A2A  6E0E               	movwf	?___ftdiv+1,c
  3353  005A2C  0E00               	movlw	0
  3354  005A2E  6E0F               	movwf	?___ftdiv+2,c
  3355  005A30  0012               	return	
  3356  005A32                     l3880:
  3357  005A32  0E00               	movlw	0
  3358  005A34  6E17               	movwf	___ftdiv@f3,c
  3359  005A36  0E00               	movlw	0
  3360  005A38  6E18               	movwf	___ftdiv@f3+1,c
  3361  005A3A  0E00               	movlw	0
  3362  005A3C  6E19               	movwf	___ftdiv@f3+2,c
  3363  005A3E  501B               	movf	___ftdiv@sign,w,c
  3364  005A40  0F89               	addlw	137
  3365  005A42  5E1A               	subwf	___ftdiv@exp,f,c
  3366  005A44  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  3367  005A48  5012               	movf	___ftdiv@f2+2,w,c
  3368  005A4A  1A1B               	xorwf	___ftdiv@sign,f,c
  3369  005A4C  0E80               	movlw	128
  3370  005A4E  161B               	andwf	___ftdiv@sign,f,c
  3371  005A50  8E0E               	bsf	___ftdiv@f1+1,7,c
  3372  005A52  0EFF               	movlw	255
  3373  005A54  160D               	andwf	___ftdiv@f1,f,c
  3374  005A56  0EFF               	movlw	255
  3375  005A58  160E               	andwf	___ftdiv@f1+1,f,c
  3376  005A5A  0E00               	movlw	0
  3377  005A5C  160F               	andwf	___ftdiv@f1+2,f,c
  3378  005A5E  8E11               	bsf	___ftdiv@f2+1,7,c
  3379  005A60  0EFF               	movlw	255
  3380  005A62  1610               	andwf	___ftdiv@f2,f,c
  3381  005A64  0EFF               	movlw	255
  3382  005A66  1611               	andwf	___ftdiv@f2+1,f,c
  3383  005A68  0E00               	movlw	0
  3384  005A6A  1612               	andwf	___ftdiv@f2+2,f,c
  3385  005A6C  0E18               	movlw	24
  3386  005A6E  6E16               	movwf	___ftdiv@cntr,c
  3387  005A70                     l3900:
  3388  005A70  90D8               	bcf	status,0,c
  3389  005A72  3617               	rlcf	___ftdiv@f3,f,c
  3390  005A74  3618               	rlcf	___ftdiv@f3+1,f,c
  3391  005A76  3619               	rlcf	___ftdiv@f3+2,f,c
  3392  005A78  5010               	movf	___ftdiv@f2,w,c
  3393  005A7A  5C0D               	subwf	___ftdiv@f1,w,c
  3394  005A7C  5011               	movf	___ftdiv@f2+1,w,c
  3395  005A7E  580E               	subwfb	___ftdiv@f1+1,w,c
  3396  005A80  5012               	movf	___ftdiv@f2+2,w,c
  3397  005A82  580F               	subwfb	___ftdiv@f1+2,w,c
  3398  005A84  A0D8               	btfss	status,0,c
  3399  005A86  D007               	goto	l720
  3400  005A88  5010               	movf	___ftdiv@f2,w,c
  3401  005A8A  5E0D               	subwf	___ftdiv@f1,f,c
  3402  005A8C  5011               	movf	___ftdiv@f2+1,w,c
  3403  005A8E  5A0E               	subwfb	___ftdiv@f1+1,f,c
  3404  005A90  5012               	movf	___ftdiv@f2+2,w,c
  3405  005A92  5A0F               	subwfb	___ftdiv@f1+2,f,c
  3406  005A94  8017               	bsf	___ftdiv@f3,0,c
  3407  005A96                     l720:
  3408  005A96  90D8               	bcf	status,0,c
  3409  005A98  360D               	rlcf	___ftdiv@f1,f,c
  3410  005A9A  360E               	rlcf	___ftdiv@f1+1,f,c
  3411  005A9C  360F               	rlcf	___ftdiv@f1+2,f,c
  3412  005A9E  2E16               	decfsz	___ftdiv@cntr,f,c
  3413  005AA0  D7E7               	goto	l3900
  3414  005AA2  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  3415  005AA6  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3416  005AAA  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3417  005AAE  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  3418  005AB2  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  3419  005AB6  EC77  F02B         	call	___ftpack	;wreg free
  3420  005ABA  C001  F00D         	movff	?___ftpack,?___ftdiv
  3421  005ABE  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  3422  005AC2  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  3423  005AC6  0012               	return	
  3424  005AC8                     __end_of___ftdiv:
  3425                           	opt stack 0
  3426                           tblptru	equ	0xFF8
  3427                           wreg	equ	0xFE8
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           fsr2h	equ	0xFDA
  3431                           fsr2l	equ	0xFD9
  3432                           status	equ	0xFD8
  3433                           
  3434 ;; *************** function ___awtoft *****************
  3435 ;; Defined at:
  3436 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  c               2    8[COMRAM] int 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  sign            1   11[COMRAM] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  3    8[COMRAM] float 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         3       0       0       0       0       0       0
  3451 ;;      Locals:         1       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:         4       0       0       0       0       0       0
  3454 ;;Total ram usage:        4 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    1
  3457 ;; This function calls:
  3458 ;;		___ftpack
  3459 ;; This function is called by:
  3460 ;;		_util_getTemperature
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text12
  3465  00507C                     __ptext12:
  3466                           	opt stack 0
  3467  00507C                     ___awtoft:
  3468                           	opt stack 27
  3469                           
  3470                           ;incstack = 0
  3471  00507C  0E00               	movlw	0
  3472  00507E  6E0C               	movwf	___awtoft@sign,c
  3473  005080  AE0A               	btfss	___awtoft@c+1,7,c
  3474  005082  D006               	goto	l3922
  3475  005084  6C09               	negf	___awtoft@c,c
  3476  005086  1E0A               	comf	___awtoft@c+1,f,c
  3477  005088  B0D8               	btfsc	status,0,c
  3478  00508A  2A0A               	incf	___awtoft@c+1,f,c
  3479  00508C  0E01               	movlw	1
  3480  00508E  6E0C               	movwf	___awtoft@sign,c
  3481  005090                     l3922:
  3482  005090  C009  F001         	movff	___awtoft@c,___ftpack@arg
  3483  005094  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  3484  005098  6A03               	clrf	___ftpack@arg+2,c
  3485  00509A  0E8E               	movlw	142
  3486  00509C  6E04               	movwf	___ftpack@exp,c
  3487  00509E  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  3488  0050A2  EC77  F02B         	call	___ftpack	;wreg free
  3489  0050A6  C001  F009         	movff	?___ftpack,?___awtoft
  3490  0050AA  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  3491  0050AE  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  3492  0050B2  0012               	return	
  3493  0050B4                     __end_of___awtoft:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           wreg	equ	0xFE8
  3497                           postinc2	equ	0xFDE
  3498                           postdec2	equ	0xFDD
  3499                           fsr2h	equ	0xFDA
  3500                           fsr2l	equ	0xFD9
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function _util_getSolarCurrent *****************
  3504 ;; Defined at:
  3505 ;;		line 52 in file "easat2_util_inputs.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;		None
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  solarCurrent    3   62[COMRAM] float 
  3510 ;;  value           3   59[COMRAM] float 
  3511 ;; Return value:  Size  Location     Type
  3512 ;;                  2   57[COMRAM] int 
  3513 ;; Registers used:
  3514 ;;		wreg, status,2, status,0, cstack
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3520 ;;      Params:         2       0       0       0       0       0       0
  3521 ;;      Locals:         6       0       0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0       0       0
  3523 ;;      Totals:         8       0       0       0       0       0       0
  3524 ;;Total ram usage:        8 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; Hardware stack levels required when called:    2
  3527 ;; This function calls:
  3528 ;;		___ftmul
  3529 ;;		___fttol
  3530 ;;		___lwtoft
  3531 ;; This function is called by:
  3532 ;;		_main_loop
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text13
  3537  00584E                     __ptext13:
  3538                           	opt stack 0
  3539  00584E                     _util_getSolarCurrent:
  3540                           	opt stack 27
  3541                           
  3542                           ;easat2_util_inputs.c: 54: float value = 0.0, solarCurrent = 0.0;
  3543                           
  3544                           ;incstack = 0
  3545  00584E  0E00               	movlw	0
  3546  005850  6E3C               	movwf	util_getSolarCurrent@value,c
  3547  005852  0E00               	movlw	0
  3548  005854  6E3D               	movwf	util_getSolarCurrent@value+1,c
  3549  005856  0E00               	movlw	0
  3550  005858  6E3E               	movwf	util_getSolarCurrent@value+2,c
  3551  00585A  0E00               	movlw	0
  3552  00585C  6E3F               	movwf	util_getSolarCurrent@solarCurrent,c
  3553  00585E  0E00               	movlw	0
  3554  005860  6E40               	movwf	util_getSolarCurrent@solarCurrent+1,c
  3555  005862  0E00               	movlw	0
  3556  005864  6E41               	movwf	util_getSolarCurrent@solarCurrent+2,c
  3557                           
  3558                           ;easat2_util_inputs.c: 56: ADCON0bits.CHS = 1;
  3559  005866  84C2               	bsf	4034,2,c	;volatile
  3560  005868  96C2               	bcf	4034,3,c	;volatile
  3561  00586A  98C2               	bcf	4034,4,c	;volatile
  3562  00586C  9AC2               	bcf	4034,5,c	;volatile
  3563  00586E  9CC2               	bcf	4034,6,c	;volatile
  3564                           
  3565                           ;easat2_util_inputs.c: 57: ADCON0bits.ADON = 1;
  3566  005870  80C2               	bsf	4034,0,c	;volatile
  3567                           
  3568                           ;easat2_util_inputs.c: 58: PIR1bits.ADIF = 0;
  3569  005872  9C9E               	bcf	3998,6,c	;volatile
  3570                           
  3571                           ;easat2_util_inputs.c: 60: ADCON0bits.GO = 1;
  3572  005874  82C2               	bsf	4034,1,c	;volatile
  3573  005876                     l116:
  3574  005876  AC9E               	btfss	3998,6,c	;volatile
  3575  005878  D7FE               	goto	l116
  3576                           
  3577                           ;easat2_util_inputs.c: 63: value = ADRES;
  3578  00587A  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
  3579  00587E  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
  3580  005882  EC2A  F027         	call	___lwtoft	;wreg free
  3581  005886  C009  F03C         	movff	?___lwtoft,util_getSolarCurrent@value
  3582  00588A  C00A  F03D         	movff	?___lwtoft+1,util_getSolarCurrent@value+1
  3583  00588E  C00B  F03E         	movff	?___lwtoft+2,util_getSolarCurrent@value+2
  3584                           
  3585                           ;easat2_util_inputs.c: 64: PIR1bits.ADIF = 0;
  3586  005892  9C9E               	bcf	3998,6,c	;volatile
  3587                           
  3588                           ;easat2_util_inputs.c: 66: ADCON0bits.ADON = 0;
  3589  005894  90C2               	bcf	4034,0,c	;volatile
  3590                           
  3591                           ;easat2_util_inputs.c: 73: solarCurrent = (1.024 / 1023.0) * value;
  3592  005896  C03C  F015         	movff	util_getSolarCurrent@value,___ftmul@f1
  3593  00589A  C03D  F016         	movff	util_getSolarCurrent@value+1,___ftmul@f1+1
  3594  00589E  C03E  F017         	movff	util_getSolarCurrent@value+2,___ftmul@f1+2
  3595  0058A2  0E33               	movlw	51
  3596  0058A4  6E18               	movwf	___ftmul@f2,c
  3597  0058A6  0E83               	movlw	131
  3598  0058A8  6E19               	movwf	___ftmul@f2+1,c
  3599  0058AA  0E3A               	movlw	58
  3600  0058AC  6E1A               	movwf	___ftmul@f2+2,c
  3601  0058AE  ECDE  F02D         	call	___ftmul	;wreg free
  3602  0058B2  C015  F03F         	movff	?___ftmul,util_getSolarCurrent@solarCurrent
  3603  0058B6  C016  F040         	movff	?___ftmul+1,util_getSolarCurrent@solarCurrent+1
  3604  0058BA  C017  F041         	movff	?___ftmul+2,util_getSolarCurrent@solarCurrent+2
  3605                           
  3606                           ;easat2_util_inputs.c: 77: solarCurrent = solarCurrent * 1.0;
  3607  0058BE  C03F  F015         	movff	util_getSolarCurrent@solarCurrent,___ftmul@f1
  3608  0058C2  C040  F016         	movff	util_getSolarCurrent@solarCurrent+1,___ftmul@f1+1
  3609  0058C6  C041  F017         	movff	util_getSolarCurrent@solarCurrent+2,___ftmul@f1+2
  3610  0058CA  0E00               	movlw	0
  3611  0058CC  6E18               	movwf	___ftmul@f2,c
  3612  0058CE  0E80               	movlw	128
  3613  0058D0  6E19               	movwf	___ftmul@f2+1,c
  3614  0058D2  0E3F               	movlw	63
  3615  0058D4  6E1A               	movwf	___ftmul@f2+2,c
  3616  0058D6  ECDE  F02D         	call	___ftmul	;wreg free
  3617  0058DA  C015  F03F         	movff	?___ftmul,util_getSolarCurrent@solarCurrent
  3618  0058DE  C016  F040         	movff	?___ftmul+1,util_getSolarCurrent@solarCurrent+1
  3619  0058E2  C017  F041         	movff	?___ftmul+2,util_getSolarCurrent@solarCurrent+2
  3620                           
  3621                           ;easat2_util_inputs.c: 79: return (int)solarCurrent;
  3622  0058E6  C03F  F02B         	movff	util_getSolarCurrent@solarCurrent,___fttol@f1
  3623  0058EA  C040  F02C         	movff	util_getSolarCurrent@solarCurrent+1,___fttol@f1+1
  3624  0058EE  C041  F02D         	movff	util_getSolarCurrent@solarCurrent+2,___fttol@f1+2
  3625  0058F2  EC64  F02D         	call	___fttol	;wreg free
  3626  0058F6  C02B  F03A         	movff	?___fttol,?_util_getSolarCurrent
  3627  0058FA  C02C  F03B         	movff	?___fttol+1,?_util_getSolarCurrent+1
  3628  0058FE  0012               	return	
  3629  005900                     __end_of_util_getSolarCurrent:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           wreg	equ	0xFE8
  3633                           postinc2	equ	0xFDE
  3634                           postdec2	equ	0xFDD
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _util_getBatteryVoltage *****************
  3640 ;; Defined at:
  3641 ;;		line 19 in file "easat2_util_inputs.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  voltage         3   41[COMRAM] float 
  3646 ;;  value           3   38[COMRAM] float 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  3   35[COMRAM] float 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3656 ;;      Params:         3       0       0       0       0       0       0
  3657 ;;      Locals:         6       0       0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0
  3659 ;;      Totals:         9       0       0       0       0       0       0
  3660 ;;Total ram usage:        9 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    2
  3663 ;; This function calls:
  3664 ;;		___ftmul
  3665 ;;		___lwtoft
  3666 ;; This function is called by:
  3667 ;;		_main_loop
  3668 ;; This function uses a non-reentrant model
  3669 ;;
  3670                           
  3671                           	psect	text14
  3672  005648                     __ptext14:
  3673                           	opt stack 0
  3674  005648                     _util_getBatteryVoltage:
  3675                           	opt stack 27
  3676                           
  3677                           ;easat2_util_inputs.c: 21: float value = 0.0, voltage = 0.0;
  3678                           
  3679                           ;incstack = 0
  3680  005648  0E00               	movlw	0
  3681  00564A  6E27               	movwf	util_getBatteryVoltage@value,c
  3682  00564C  0E00               	movlw	0
  3683  00564E  6E28               	movwf	util_getBatteryVoltage@value+1,c
  3684  005650  0E00               	movlw	0
  3685  005652  6E29               	movwf	util_getBatteryVoltage@value+2,c
  3686  005654  0E00               	movlw	0
  3687  005656  6E2A               	movwf	util_getBatteryVoltage@voltage,c
  3688  005658  0E00               	movlw	0
  3689  00565A  6E2B               	movwf	util_getBatteryVoltage@voltage+1,c
  3690  00565C  0E00               	movlw	0
  3691  00565E  6E2C               	movwf	util_getBatteryVoltage@voltage+2,c
  3692                           
  3693                           ;easat2_util_inputs.c: 23: ADCON0bits.CHS = 0;
  3694  005660  94C2               	bcf	4034,2,c	;volatile
  3695  005662  96C2               	bcf	4034,3,c	;volatile
  3696  005664  98C2               	bcf	4034,4,c	;volatile
  3697  005666  9AC2               	bcf	4034,5,c	;volatile
  3698  005668  9CC2               	bcf	4034,6,c	;volatile
  3699                           
  3700                           ;easat2_util_inputs.c: 24: ADCON0bits.ADON = 1;
  3701  00566A  80C2               	bsf	4034,0,c	;volatile
  3702                           
  3703                           ;easat2_util_inputs.c: 25: PIR1bits.ADIF = 0;
  3704  00566C  9C9E               	bcf	3998,6,c	;volatile
  3705                           
  3706                           ;easat2_util_inputs.c: 27: ADCON0bits.GO = 1;
  3707  00566E  82C2               	bsf	4034,1,c	;volatile
  3708  005670                     l110:
  3709  005670  AC9E               	btfss	3998,6,c	;volatile
  3710  005672  D7FE               	goto	l110
  3711                           
  3712                           ;easat2_util_inputs.c: 30: value = ADRES;
  3713  005674  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
  3714  005678  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
  3715  00567C  EC2A  F027         	call	___lwtoft	;wreg free
  3716  005680  C009  F027         	movff	?___lwtoft,util_getBatteryVoltage@value
  3717  005684  C00A  F028         	movff	?___lwtoft+1,util_getBatteryVoltage@value+1
  3718  005688  C00B  F029         	movff	?___lwtoft+2,util_getBatteryVoltage@value+2
  3719                           
  3720                           ;easat2_util_inputs.c: 31: PIR1bits.ADIF = 0;
  3721  00568C  9C9E               	bcf	3998,6,c	;volatile
  3722                           
  3723                           ;easat2_util_inputs.c: 33: ADCON0bits.ADON = 0;
  3724  00568E  90C2               	bcf	4034,0,c	;volatile
  3725                           
  3726                           ;easat2_util_inputs.c: 40: voltage = (1.024 / 1023.0) * value;
  3727  005690  C027  F015         	movff	util_getBatteryVoltage@value,___ftmul@f1
  3728  005694  C028  F016         	movff	util_getBatteryVoltage@value+1,___ftmul@f1+1
  3729  005698  C029  F017         	movff	util_getBatteryVoltage@value+2,___ftmul@f1+2
  3730  00569C  0E33               	movlw	51
  3731  00569E  6E18               	movwf	___ftmul@f2,c
  3732  0056A0  0E83               	movlw	131
  3733  0056A2  6E19               	movwf	___ftmul@f2+1,c
  3734  0056A4  0E3A               	movlw	58
  3735  0056A6  6E1A               	movwf	___ftmul@f2+2,c
  3736  0056A8  ECDE  F02D         	call	___ftmul	;wreg free
  3737  0056AC  C015  F02A         	movff	?___ftmul,util_getBatteryVoltage@voltage
  3738  0056B0  C016  F02B         	movff	?___ftmul+1,util_getBatteryVoltage@voltage+1
  3739  0056B4  C017  F02C         	movff	?___ftmul+2,util_getBatteryVoltage@voltage+2
  3740                           
  3741                           ;easat2_util_inputs.c: 44: voltage = voltage * 5.7;
  3742  0056B8  C02A  F015         	movff	util_getBatteryVoltage@voltage,___ftmul@f1
  3743  0056BC  C02B  F016         	movff	util_getBatteryVoltage@voltage+1,___ftmul@f1+1
  3744  0056C0  C02C  F017         	movff	util_getBatteryVoltage@voltage+2,___ftmul@f1+2
  3745  0056C4  0E66               	movlw	102
  3746  0056C6  6E18               	movwf	___ftmul@f2,c
  3747  0056C8  0EB6               	movlw	182
  3748  0056CA  6E19               	movwf	___ftmul@f2+1,c
  3749  0056CC  0E40               	movlw	64
  3750  0056CE  6E1A               	movwf	___ftmul@f2+2,c
  3751  0056D0  ECDE  F02D         	call	___ftmul	;wreg free
  3752  0056D4  C015  F02A         	movff	?___ftmul,util_getBatteryVoltage@voltage
  3753  0056D8  C016  F02B         	movff	?___ftmul+1,util_getBatteryVoltage@voltage+1
  3754  0056DC  C017  F02C         	movff	?___ftmul+2,util_getBatteryVoltage@voltage+2
  3755                           
  3756                           ;easat2_util_inputs.c: 46: return voltage;
  3757  0056E0  C02A  F024         	movff	util_getBatteryVoltage@voltage,?_util_getBatteryVoltage
  3758  0056E4  C02B  F025         	movff	util_getBatteryVoltage@voltage+1,?_util_getBatteryVoltage+1
  3759  0056E8  C02C  F026         	movff	util_getBatteryVoltage@voltage+2,?_util_getBatteryVoltage+2
  3760  0056EC  0012               	return	
  3761  0056EE                     __end_of_util_getBatteryVoltage:
  3762                           	opt stack 0
  3763                           tblptru	equ	0xFF8
  3764                           wreg	equ	0xFE8
  3765                           postinc2	equ	0xFDE
  3766                           postdec2	equ	0xFDD
  3767                           fsr2h	equ	0xFDA
  3768                           fsr2l	equ	0xFD9
  3769                           status	equ	0xFD8
  3770                           
  3771 ;; *************** function _util_getBatteryCurrent *****************
  3772 ;; Defined at:
  3773 ;;		line 85 in file "easat2_util_inputs.c"
  3774 ;; Parameters:    Size  Location     Type
  3775 ;;		None
  3776 ;; Auto vars:     Size  Location     Type
  3777 ;;  batteryCurre    3   62[COMRAM] float 
  3778 ;;  value           3   59[COMRAM] float 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  2   57[COMRAM] int 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3788 ;;      Params:         2       0       0       0       0       0       0
  3789 ;;      Locals:         6       0       0       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0
  3791 ;;      Totals:         8       0       0       0       0       0       0
  3792 ;;Total ram usage:        8 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:    2
  3795 ;; This function calls:
  3796 ;;		___ftmul
  3797 ;;		___fttol
  3798 ;;		___lwtoft
  3799 ;; This function is called by:
  3800 ;;		_main_loop
  3801 ;; This function uses a non-reentrant model
  3802 ;;
  3803                           
  3804                           	psect	text15
  3805  00579C                     __ptext15:
  3806                           	opt stack 0
  3807  00579C                     _util_getBatteryCurrent:
  3808                           	opt stack 27
  3809                           
  3810                           ;easat2_util_inputs.c: 87: float value = 0.0, batteryCurrent = 0.0;
  3811                           
  3812                           ;incstack = 0
  3813  00579C  0E00               	movlw	0
  3814  00579E  6E3C               	movwf	util_getBatteryCurrent@value,c
  3815  0057A0  0E00               	movlw	0
  3816  0057A2  6E3D               	movwf	util_getBatteryCurrent@value+1,c
  3817  0057A4  0E00               	movlw	0
  3818  0057A6  6E3E               	movwf	util_getBatteryCurrent@value+2,c
  3819  0057A8  0E00               	movlw	0
  3820  0057AA  6E3F               	movwf	util_getBatteryCurrent@batteryCurrent,c
  3821  0057AC  0E00               	movlw	0
  3822  0057AE  6E40               	movwf	util_getBatteryCurrent@batteryCurrent+1,c
  3823  0057B0  0E00               	movlw	0
  3824  0057B2  6E41               	movwf	util_getBatteryCurrent@batteryCurrent+2,c
  3825                           
  3826                           ;easat2_util_inputs.c: 89: ADCON0bits.CHS = 2;
  3827  0057B4  94C2               	bcf	4034,2,c	;volatile
  3828  0057B6  86C2               	bsf	4034,3,c	;volatile
  3829  0057B8  98C2               	bcf	4034,4,c	;volatile
  3830  0057BA  9AC2               	bcf	4034,5,c	;volatile
  3831  0057BC  9CC2               	bcf	4034,6,c	;volatile
  3832                           
  3833                           ;easat2_util_inputs.c: 90: ADCON0bits.ADON = 1;
  3834  0057BE  80C2               	bsf	4034,0,c	;volatile
  3835                           
  3836                           ;easat2_util_inputs.c: 91: PIR1bits.ADIF = 0;
  3837  0057C0  9C9E               	bcf	3998,6,c	;volatile
  3838                           
  3839                           ;easat2_util_inputs.c: 93: ADCON0bits.GO = 1;
  3840  0057C2  82C2               	bsf	4034,1,c	;volatile
  3841  0057C4                     l122:
  3842  0057C4  AC9E               	btfss	3998,6,c	;volatile
  3843  0057C6  D7FE               	goto	l122
  3844                           
  3845                           ;easat2_util_inputs.c: 96: value = ADRES;
  3846  0057C8  CFC3 F009          	movff	4035,___lwtoft@c	;volatile
  3847  0057CC  CFC4 F00A          	movff	4036,___lwtoft@c+1	;volatile
  3848  0057D0  EC2A  F027         	call	___lwtoft	;wreg free
  3849  0057D4  C009  F03C         	movff	?___lwtoft,util_getBatteryCurrent@value
  3850  0057D8  C00A  F03D         	movff	?___lwtoft+1,util_getBatteryCurrent@value+1
  3851  0057DC  C00B  F03E         	movff	?___lwtoft+2,util_getBatteryCurrent@value+2
  3852                           
  3853                           ;easat2_util_inputs.c: 97: PIR1bits.ADIF = 0;
  3854  0057E0  9C9E               	bcf	3998,6,c	;volatile
  3855                           
  3856                           ;easat2_util_inputs.c: 99: ADCON0bits.ADON = 0;
  3857  0057E2  90C2               	bcf	4034,0,c	;volatile
  3858                           
  3859                           ;easat2_util_inputs.c: 106: batteryCurrent = (1.024 / 1023.0) * value;
  3860  0057E4  C03C  F015         	movff	util_getBatteryCurrent@value,___ftmul@f1
  3861  0057E8  C03D  F016         	movff	util_getBatteryCurrent@value+1,___ftmul@f1+1
  3862  0057EC  C03E  F017         	movff	util_getBatteryCurrent@value+2,___ftmul@f1+2
  3863  0057F0  0E33               	movlw	51
  3864  0057F2  6E18               	movwf	___ftmul@f2,c
  3865  0057F4  0E83               	movlw	131
  3866  0057F6  6E19               	movwf	___ftmul@f2+1,c
  3867  0057F8  0E3A               	movlw	58
  3868  0057FA  6E1A               	movwf	___ftmul@f2+2,c
  3869  0057FC  ECDE  F02D         	call	___ftmul	;wreg free
  3870  005800  C015  F03F         	movff	?___ftmul,util_getBatteryCurrent@batteryCurrent
  3871  005804  C016  F040         	movff	?___ftmul+1,util_getBatteryCurrent@batteryCurrent+1
  3872  005808  C017  F041         	movff	?___ftmul+2,util_getBatteryCurrent@batteryCurrent+2
  3873                           
  3874                           ;easat2_util_inputs.c: 110: batteryCurrent = batteryCurrent * 1.0;
  3875  00580C  C03F  F015         	movff	util_getBatteryCurrent@batteryCurrent,___ftmul@f1
  3876  005810  C040  F016         	movff	util_getBatteryCurrent@batteryCurrent+1,___ftmul@f1+1
  3877  005814  C041  F017         	movff	util_getBatteryCurrent@batteryCurrent+2,___ftmul@f1+2
  3878  005818  0E00               	movlw	0
  3879  00581A  6E18               	movwf	___ftmul@f2,c
  3880  00581C  0E80               	movlw	128
  3881  00581E  6E19               	movwf	___ftmul@f2+1,c
  3882  005820  0E3F               	movlw	63
  3883  005822  6E1A               	movwf	___ftmul@f2+2,c
  3884  005824  ECDE  F02D         	call	___ftmul	;wreg free
  3885  005828  C015  F03F         	movff	?___ftmul,util_getBatteryCurrent@batteryCurrent
  3886  00582C  C016  F040         	movff	?___ftmul+1,util_getBatteryCurrent@batteryCurrent+1
  3887  005830  C017  F041         	movff	?___ftmul+2,util_getBatteryCurrent@batteryCurrent+2
  3888                           
  3889                           ;easat2_util_inputs.c: 112: return (int)batteryCurrent;
  3890  005834  C03F  F02B         	movff	util_getBatteryCurrent@batteryCurrent,___fttol@f1
  3891  005838  C040  F02C         	movff	util_getBatteryCurrent@batteryCurrent+1,___fttol@f1+1
  3892  00583C  C041  F02D         	movff	util_getBatteryCurrent@batteryCurrent+2,___fttol@f1+2
  3893  005840  EC64  F02D         	call	___fttol	;wreg free
  3894  005844  C02B  F03A         	movff	?___fttol,?_util_getBatteryCurrent
  3895  005848  C02C  F03B         	movff	?___fttol+1,?_util_getBatteryCurrent+1
  3896  00584C  0012               	return	
  3897  00584E                     __end_of_util_getBatteryCurrent:
  3898                           	opt stack 0
  3899                           tblptru	equ	0xFF8
  3900                           wreg	equ	0xFE8
  3901                           postinc2	equ	0xFDE
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           status	equ	0xFD8
  3906                           
  3907 ;; *************** function ___lwtoft *****************
  3908 ;; Defined at:
  3909 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  c               2    8[COMRAM] unsigned int 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  3    8[COMRAM] float 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3923 ;;      Params:         3       0       0       0       0       0       0
  3924 ;;      Locals:         0       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0
  3926 ;;      Totals:         3       0       0       0       0       0       0
  3927 ;;Total ram usage:        3 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    1
  3930 ;; This function calls:
  3931 ;;		___ftpack
  3932 ;; This function is called by:
  3933 ;;		_util_getBatteryVoltage
  3934 ;;		_util_getSolarCurrent
  3935 ;;		_util_getBatteryCurrent
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text16
  3940  004E54                     __ptext16:
  3941                           	opt stack 0
  3942  004E54                     ___lwtoft:
  3943                           	opt stack 27
  3944                           
  3945                           ;incstack = 0
  3946  004E54  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  3947  004E58  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  3948  004E5C  6A03               	clrf	___ftpack@arg+2,c
  3949  004E5E  0E8E               	movlw	142
  3950  004E60  6E04               	movwf	___ftpack@exp,c
  3951  004E62  0E00               	movlw	0
  3952  004E64  6E05               	movwf	___ftpack@sign,c
  3953  004E66  EC77  F02B         	call	___ftpack	;wreg free
  3954  004E6A  C001  F009         	movff	?___ftpack,?___lwtoft
  3955  004E6E  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  3956  004E72  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  3957  004E76  0012               	return	
  3958  004E78                     __end_of___lwtoft:
  3959                           	opt stack 0
  3960                           tblptru	equ	0xFF8
  3961                           wreg	equ	0xFE8
  3962                           postinc2	equ	0xFDE
  3963                           postdec2	equ	0xFDD
  3964                           fsr2h	equ	0xFDA
  3965                           fsr2l	equ	0xFD9
  3966                           status	equ	0xFD8
  3967                           
  3968 ;; *************** function _util_beacon_transmission *****************
  3969 ;; Defined at:
  3970 ;;		line 21 in file "easat2_util_transmission.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;  battery_volt    3   83[COMRAM] float 
  3973 ;;  solar_curren    2   86[COMRAM] int 
  3974 ;;  battery_curr    2   88[COMRAM] int 
  3975 ;;  temperature     3   90[COMRAM] float 
  3976 ;; Auto vars:     Size  Location     Type
  3977 ;;  i               2  192[BANK1 ] int 
  3978 ;;  BEACON_MESSA  128    0[BANK1 ] unsigned char [128]
  3979 ;;  BEACON_BUFFE   64  128[BANK1 ] unsigned char [64]
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:        10       0       0       0       0       0       0
  3990 ;;      Locals:         0       0     194       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0
  3992 ;;      Totals:        10       0     194       0       0       0       0
  3993 ;;Total ram usage:      204 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    5
  3996 ;; This function calls:
  3997 ;;		_memset
  3998 ;;		_sprintf
  3999 ;;		_strcat
  4000 ;;		_strcpy
  4001 ;;		_strlen
  4002 ;;		_util_transmit_letter
  4003 ;; This function is called by:
  4004 ;;		_main_loop
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text17
  4009  005900                     __ptext17:
  4010                           	opt stack 0
  4011  005900                     _util_beacon_transmission:
  4012                           	opt stack 24
  4013                           
  4014                           ;easat2_util_transmission.c: 24: char BEACON_MESSAGE[128];
  4015                           ;easat2_util_transmission.c: 25: char BEACON_BUFFER[64];
  4016                           ;easat2_util_transmission.c: 29: memset(BEACON_MESSAGE, 0, sizeof(BEACON_MESSAGE));
  4017                           
  4018                           ;incstack = 0
  4019  005900  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  4020  005902  6E01               	movwf	memset@p1,c
  4021  005904  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  4022  005906  6E02               	movwf	memset@p1+1,c
  4023  005908  0E00               	movlw	0
  4024  00590A  6E04               	movwf	memset@c+1,c
  4025  00590C  0E00               	movlw	0
  4026  00590E  6E03               	movwf	memset@c,c
  4027  005910  0E00               	movlw	0
  4028  005912  6E06               	movwf	memset@n+1,c
  4029  005914  0E80               	movlw	128
  4030  005916  6E05               	movwf	memset@n,c
  4031  005918  EC4F  F027         	call	_memset	;wreg free
  4032                           
  4033                           ;easat2_util_transmission.c: 30: strcpy(BEACON_MESSAGE, "EASAT2");
  4034  00591C  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  4035  00591E  6E01               	movwf	strcpy@to,c
  4036  005920  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  4037  005922  6E02               	movwf	strcpy@to+1,c
  4038  005924  0E9E               	movlw	low STR_1
  4039  005926  6E03               	movwf	strcpy@from,c
  4040  005928  0E7F               	movlw	high STR_1
  4041  00592A  6E04               	movwf	strcpy@from+1,c
  4042  00592C  EC91  F027         	call	_strcpy	;wreg free
  4043                           
  4044                           ;easat2_util_transmission.c: 32: memset(BEACON_BUFFER, 0, sizeof(BEACON_BUFFER));
  4045  005930  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  4046  005932  6E01               	movwf	memset@p1,c
  4047  005934  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  4048  005936  6E02               	movwf	memset@p1+1,c
  4049  005938  0E00               	movlw	0
  4050  00593A  6E04               	movwf	memset@c+1,c
  4051  00593C  0E00               	movlw	0
  4052  00593E  6E03               	movwf	memset@c,c
  4053  005940  0E00               	movlw	0
  4054  005942  6E06               	movwf	memset@n+1,c
  4055  005944  0E40               	movlw	64
  4056  005946  6E05               	movwf	memset@n,c
  4057  005948  EC4F  F027         	call	_memset	;wreg free
  4058                           
  4059                           ;easat2_util_transmission.c: 33: sprintf(BEACON_BUFFER, " %.1f %.1f %3.0d %3.0d", temper
      +                          ature, battery_voltage,
  4060                           ;easat2_util_transmission.c: 34: solar_current, battery_current);
  4061  00594C  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  4062  00594E  6E40               	movwf	sprintf@sp,c
  4063  005950  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  4064  005952  6E41               	movwf	sprintf@sp+1,c
  4065  005954  0E6B               	movlw	low STR_2
  4066  005956  6E42               	movwf	sprintf@f,c
  4067  005958  0E7F               	movlw	high STR_2
  4068  00595A  6E43               	movwf	sprintf@f+1,c
  4069  00595C  C05B  F044         	movff	util_beacon_transmission@temperature,?_sprintf+4
  4070  005960  C05C  F045         	movff	util_beacon_transmission@temperature+1,?_sprintf+5
  4071  005964  C05D  F046         	movff	util_beacon_transmission@temperature+2,?_sprintf+6
  4072  005968  C054  F047         	movff	util_beacon_transmission@battery_voltage,?_sprintf+7
  4073  00596C  C055  F048         	movff	util_beacon_transmission@battery_voltage+1,?_sprintf+8
  4074  005970  C056  F049         	movff	util_beacon_transmission@battery_voltage+2,?_sprintf+9
  4075  005974  C057  F04A         	movff	util_beacon_transmission@solar_current,?_sprintf+10
  4076  005978  C058  F04B         	movff	util_beacon_transmission@solar_current+1,?_sprintf+11
  4077  00597C  C059  F04C         	movff	util_beacon_transmission@battery_current,?_sprintf+12
  4078  005980  C05A  F04D         	movff	util_beacon_transmission@battery_current+1,?_sprintf+13
  4079  005984  EC06  F03A         	call	_sprintf	;wreg free
  4080                           
  4081                           ;easat2_util_transmission.c: 36: strcat(BEACON_MESSAGE, BEACON_BUFFER);
  4082  005988  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  4083  00598A  6E01               	movwf	strcat@to,c
  4084  00598C  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  4085  00598E  6E02               	movwf	strcat@to+1,c
  4086  005990  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  4087  005992  6E03               	movwf	strcat@from,c
  4088  005994  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  4089  005996  6E04               	movwf	strcat@from+1,c
  4090  005998  EC7A  F028         	call	_strcat	;wreg free
  4091                           
  4092                           ;easat2_util_transmission.c: 41: for (int i = 0; i < strlen(BEACON_MESSAGE); i++) {
  4093  00599C  0E00               	movlw	0
  4094  00599E  0101               	movlb	1	; () banked
  4095  0059A0  6FC1               	movwf	(util_beacon_transmission@i+1)& (0+255),b
  4096  0059A2  0E00               	movlw	0
  4097  0059A4  6FC0               	movwf	util_beacon_transmission@i& (0+255),b
  4098  0059A6  D00E               	goto	l4142
  4099  0059A8                     l4138:
  4100                           
  4101                           ; BSR set to: 1
  4102                           ;easat2_util_transmission.c: 42: util_transmit_letter(BEACON_MESSAGE[i]);
  4103  0059A8  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  4104  0059AA  0101               	movlb	1	; () banked
  4105  0059AC  25C0               	addwf	util_beacon_transmission@i& (0+255),w,b
  4106  0059AE  6ED9               	movwf	fsr2l,c
  4107  0059B0  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  4108  0059B2  0101               	movlb	1	; () banked
  4109  0059B4  21C1               	addwfc	(util_beacon_transmission@i+1)& (0+255),w,b
  4110  0059B6  6EDA               	movwf	fsr2h,c
  4111  0059B8  50DF               	movf	indf2,w,c
  4112  0059BA  ECD0  F032         	call	_util_transmit_letter
  4113  0059BE  0101               	movlb	1	; () banked
  4114  0059C0  4BC0               	infsnz	util_beacon_transmission@i& (0+255),f,b
  4115  0059C2  2BC1               	incf	(util_beacon_transmission@i+1)& (0+255),f,b
  4116  0059C4                     l4142:
  4117                           
  4118                           ; BSR set to: 1
  4119  0059C4  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  4120  0059C6  6E01               	movwf	strlen@s,c
  4121  0059C8  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  4122  0059CA  6E02               	movwf	strlen@s+1,c
  4123  0059CC  ECE3  F028         	call	_strlen	;wreg free
  4124  0059D0  5001               	movf	?_strlen,w,c
  4125  0059D2  0101               	movlb	1	; () banked
  4126  0059D4  5DC0               	subwf	util_beacon_transmission@i& (0+255),w,b
  4127  0059D6  5002               	movf	?_strlen+1,w,c
  4128  0059D8  0101               	movlb	1	; () banked
  4129  0059DA  59C1               	subwfb	(util_beacon_transmission@i+1)& (0+255),w,b
  4130  0059DC  B0D8               	btfsc	status,0,c
  4131  0059DE  0012               	return	
  4132  0059E0  D7E3               	goto	l4138
  4133  0059E2                     __end_of_util_beacon_transmission:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           wreg	equ	0xFE8
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _util_transmit_letter *****************
  4145 ;; Defined at:
  4146 ;;		line 52 in file "easat2_util_transmission.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  letter          1    wreg     unsigned char 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  letter          1   13[COMRAM] unsigned char 
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4160 ;;      Params:         0       0       0       0       0       0       0
  4161 ;;      Locals:         1       0       0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0       0       0
  4163 ;;      Totals:         1       0       0       0       0       0       0
  4164 ;;Total ram usage:        1 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    4
  4167 ;; This function calls:
  4168 ;;		_util_transmit_morse_sequence
  4169 ;;		_util_transmit_space_between_letters
  4170 ;;		_util_transmit_space_between_words
  4171 ;; This function is called by:
  4172 ;;		_util_beacon_transmission
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text18
  4177  0065A0                     __ptext18:
  4178                           	opt stack 0
  4179  0065A0                     _util_transmit_letter:
  4180                           	opt stack 24
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;incstack = 0
  4184                           ;util_transmit_letter@letter stored from wreg
  4185  0065A0  6E0E               	movwf	util_transmit_letter@letter,c
  4186                           
  4187                           ;easat2_util_transmission.c: 54: switch (letter) {
  4188  0065A2  D122               	goto	l3864
  4189  0065A4                     l3778:
  4190                           
  4191                           ;easat2_util_transmission.c: 60: util_transmit_morse_sequence((char*)".-");
  4192  0065A4  0EE8               	movlw	low (STR_19+2)
  4193  0065A6  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4194  0065A8  0E7F               	movlw	high (STR_19+2)
  4195  0065AA  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4196  0065AC  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4197                           
  4198                           ;easat2_util_transmission.c: 61: break;
  4199  0065B0  D19A               	goto	l3866
  4200  0065B2                     l3780:
  4201                           
  4202                           ;easat2_util_transmission.c: 63: util_transmit_morse_sequence((char*)"-...");
  4203  0065B2  0ED0               	movlw	low (STR_36+1)
  4204  0065B4  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4205  0065B6  0E7F               	movlw	high (STR_36+1)
  4206  0065B8  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4207  0065BA  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4208                           
  4209                           ;easat2_util_transmission.c: 64: break;
  4210  0065BE  D193               	goto	l3866
  4211  0065C0                     l3782:
  4212                           
  4213                           ;easat2_util_transmission.c: 66: util_transmit_morse_sequence((char*)"-.-.");
  4214  0065C0  0EF5               	movlw	low STR_5
  4215  0065C2  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4216  0065C4  0E7F               	movlw	high STR_5
  4217  0065C6  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4218  0065C8  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4219                           
  4220                           ;easat2_util_transmission.c: 67: break;
  4221  0065CC  D18C               	goto	l3866
  4222  0065CE                     l3784:
  4223                           
  4224                           ;easat2_util_transmission.c: 69: util_transmit_morse_sequence((char*)"-..");
  4225  0065CE  0ECB               	movlw	low (STR_37+2)
  4226  0065D0  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4227  0065D2  0E7F               	movlw	high (STR_37+2)
  4228  0065D4  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4229  0065D6  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4230                           
  4231                           ;easat2_util_transmission.c: 70: break;
  4232  0065DA  D185               	goto	l3866
  4233  0065DC                     l3786:
  4234                           
  4235                           ;easat2_util_transmission.c: 72: util_transmit_morse_sequence((char*)".");
  4236  0065DC  0EC1               	movlw	low (STR_38+4)
  4237  0065DE  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4238  0065E0  0E7F               	movlw	high (STR_38+4)
  4239  0065E2  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4240  0065E4  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4241                           
  4242                           ;easat2_util_transmission.c: 73: break;
  4243  0065E8  D17E               	goto	l3866
  4244  0065EA                     l3788:
  4245                           
  4246                           ;easat2_util_transmission.c: 75: util_transmit_morse_sequence((char*)"..-.");
  4247  0065EA  0EC4               	movlw	low (STR_41+1)
  4248  0065EC  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4249  0065EE  0E7F               	movlw	high (STR_41+1)
  4250  0065F0  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4251  0065F2  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4252                           
  4253                           ;easat2_util_transmission.c: 76: break;
  4254  0065F6  D177               	goto	l3866
  4255  0065F8                     l3790:
  4256                           
  4257                           ;easat2_util_transmission.c: 78: util_transmit_morse_sequence((char*)"--.");
  4258  0065F8  0EBF               	movlw	low (STR_38+2)
  4259  0065FA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4260  0065FC  0E7F               	movlw	high (STR_38+2)
  4261  0065FE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4262  006600  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4263                           
  4264                           ;easat2_util_transmission.c: 79: break;
  4265  006604  D170               	goto	l3866
  4266  006606                     l3792:
  4267                           
  4268                           ;easat2_util_transmission.c: 81: util_transmit_morse_sequence((char*)"....");
  4269  006606  0ED6               	movlw	low (STR_35+1)
  4270  006608  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4271  00660A  0E7F               	movlw	high (STR_35+1)
  4272  00660C  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4273  00660E  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4274                           
  4275                           ;easat2_util_transmission.c: 82: break;
  4276  006612  D169               	goto	l3866
  4277  006614                     l3794:
  4278                           
  4279                           ;easat2_util_transmission.c: 84: util_transmit_morse_sequence((char*)"..");
  4280  006614  0ECC               	movlw	low (STR_37+3)
  4281  006616  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4282  006618  0E7F               	movlw	high (STR_37+3)
  4283  00661A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4284  00661C  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4285                           
  4286                           ;easat2_util_transmission.c: 85: break;
  4287  006620  D162               	goto	l3866
  4288  006622                     l3796:
  4289                           
  4290                           ;easat2_util_transmission.c: 87: util_transmit_morse_sequence((char*)".---");
  4291  006622  0EB2               	movlw	low (STR_31+1)
  4292  006624  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4293  006626  0E7F               	movlw	high (STR_31+1)
  4294  006628  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4295  00662A  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4296                           
  4297                           ;easat2_util_transmission.c: 88: break;
  4298  00662E  D15B               	goto	l3866
  4299  006630                     l3798:
  4300                           
  4301                           ;easat2_util_transmission.c: 90: util_transmit_morse_sequence((char*)"-.-");
  4302  006630  0EE7               	movlw	low (STR_19+1)
  4303  006632  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4304  006634  0E7F               	movlw	high (STR_19+1)
  4305  006636  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4306  006638  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4307                           
  4308                           ;easat2_util_transmission.c: 91: break;
  4309  00663C  D154               	goto	l3866
  4310  00663E                     l3800:
  4311                           
  4312                           ;easat2_util_transmission.c: 93: util_transmit_morse_sequence((char*)".-..");
  4313  00663E  0EFA               	movlw	low STR_14
  4314  006640  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4315  006642  0E7F               	movlw	high STR_14
  4316  006644  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4317  006646  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4318                           
  4319                           ;easat2_util_transmission.c: 94: break;
  4320  00664A  D14D               	goto	l3866
  4321  00664C                     l3802:
  4322                           
  4323                           ;easat2_util_transmission.c: 96: util_transmit_morse_sequence((char*)"--");
  4324  00664C  0EA8               	movlw	low (STR_29+3)
  4325  00664E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4326  006650  0E7F               	movlw	high (STR_29+3)
  4327  006652  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4328  006654  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4329                           
  4330                           ;easat2_util_transmission.c: 97: break;
  4331  006658  D146               	goto	l3866
  4332  00665A                     l3804:
  4333                           
  4334                           ;easat2_util_transmission.c: 99: util_transmit_morse_sequence((char*)"-.");
  4335  00665A  0EC0               	movlw	low (STR_38+3)
  4336  00665C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4337  00665E  0E7F               	movlw	high (STR_38+3)
  4338  006660  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4339  006662  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4340                           
  4341                           ;easat2_util_transmission.c: 100: break;
  4342  006666  D13F               	goto	l3866
  4343  006668                     l3806:
  4344                           
  4345                           ;easat2_util_transmission.c: 102: util_transmit_morse_sequence((char*)"---");
  4346  006668  0EA7               	movlw	low (STR_29+2)
  4347  00666A  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4348  00666C  0E7F               	movlw	high (STR_29+2)
  4349  00666E  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4350  006670  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4351                           
  4352                           ;easat2_util_transmission.c: 103: break;
  4353  006674  D138               	goto	l3866
  4354  006676                     l3808:
  4355                           
  4356                           ;easat2_util_transmission.c: 105: util_transmit_morse_sequence((char*)".--.");
  4357  006676  0EF0               	movlw	low STR_18
  4358  006678  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4359  00667A  0E7F               	movlw	high STR_18
  4360  00667C  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4361  00667E  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4362                           
  4363                           ;easat2_util_transmission.c: 106: break;
  4364  006682  D131               	goto	l3866
  4365  006684                     l3810:
  4366                           
  4367                           ;easat2_util_transmission.c: 108: util_transmit_morse_sequence((char*)"--.-");
  4368  006684  0EE6               	movlw	low STR_19
  4369  006686  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4370  006688  0E7F               	movlw	high STR_19
  4371  00668A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4372  00668C  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4373                           
  4374                           ;easat2_util_transmission.c: 109: break;
  4375  006690  D12A               	goto	l3866
  4376  006692                     l3812:
  4377                           
  4378                           ;easat2_util_transmission.c: 111: util_transmit_morse_sequence((char*)".-.");
  4379  006692  0EF6               	movlw	low (STR_5+1)
  4380  006694  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4381  006696  0E7F               	movlw	high (STR_5+1)
  4382  006698  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4383  00669A  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4384                           
  4385                           ;easat2_util_transmission.c: 112: break;
  4386  00669E  D123               	goto	l3866
  4387  0066A0                     l3814:
  4388                           
  4389                           ;easat2_util_transmission.c: 114: util_transmit_morse_sequence((char*)"...");
  4390  0066A0  0ED1               	movlw	low (STR_36+2)
  4391  0066A2  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4392  0066A4  0E7F               	movlw	high (STR_36+2)
  4393  0066A6  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4394  0066A8  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4395                           
  4396                           ;easat2_util_transmission.c: 115: break;
  4397  0066AC  D11C               	goto	l3866
  4398  0066AE                     l3816:
  4399                           
  4400                           ;easat2_util_transmission.c: 117: util_transmit_morse_sequence((char*)"-");
  4401  0066AE  0EA9               	movlw	low (STR_29+4)
  4402  0066B0  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4403  0066B2  0E7F               	movlw	high (STR_29+4)
  4404  0066B4  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4405  0066B6  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4406                           
  4407                           ;easat2_util_transmission.c: 118: break;
  4408  0066BA  D115               	goto	l3866
  4409  0066BC                     l3818:
  4410                           
  4411                           ;easat2_util_transmission.c: 120: util_transmit_morse_sequence((char*)"..-");
  4412  0066BC  0EEC               	movlw	low (STR_26+1)
  4413  0066BE  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4414  0066C0  0E7F               	movlw	high (STR_26+1)
  4415  0066C2  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4416  0066C4  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4417                           
  4418                           ;easat2_util_transmission.c: 121: break;
  4419  0066C8  D10E               	goto	l3866
  4420  0066CA                     l3820:
  4421                           
  4422                           ;easat2_util_transmission.c: 123: util_transmit_morse_sequence((char*)"...-");
  4423  0066CA  0E92               	movlw	low (STR_43+2)
  4424  0066CC  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4425  0066CE  0E7F               	movlw	high (STR_43+2)
  4426  0066D0  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4427  0066D2  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4428                           
  4429                           ;easat2_util_transmission.c: 124: break;
  4430  0066D6  D107               	goto	l3866
  4431  0066D8                     l3822:
  4432                           
  4433                           ;easat2_util_transmission.c: 126: util_transmit_morse_sequence((char*)".--");
  4434  0066D8  0EE2               	movlw	low (STR_27+1)
  4435  0066DA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4436  0066DC  0E7F               	movlw	high (STR_27+1)
  4437  0066DE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4438  0066E0  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4439                           
  4440                           ;easat2_util_transmission.c: 127: break;
  4441  0066E4  D100               	goto	l3866
  4442  0066E6                     l3824:
  4443                           
  4444                           ;easat2_util_transmission.c: 129: util_transmit_morse_sequence((char*)"-..-");
  4445  0066E6  0EEB               	movlw	low STR_26
  4446  0066E8  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4447  0066EA  0E7F               	movlw	high STR_26
  4448  0066EC  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4449  0066EE  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4450                           
  4451                           ;easat2_util_transmission.c: 130: break;
  4452  0066F2  D0F9               	goto	l3866
  4453  0066F4                     l3826:
  4454                           
  4455                           ;easat2_util_transmission.c: 132: util_transmit_morse_sequence((char*)"-.--");
  4456  0066F4  0EE1               	movlw	low STR_27
  4457  0066F6  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4458  0066F8  0E7F               	movlw	high STR_27
  4459  0066FA  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4460  0066FC  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4461                           
  4462                           ;easat2_util_transmission.c: 133: break;
  4463  006700  D0F2               	goto	l3866
  4464  006702                     l3828:
  4465                           
  4466                           ;easat2_util_transmission.c: 135: util_transmit_morse_sequence((char*)"--..");
  4467  006702  0ECA               	movlw	low (STR_37+1)
  4468  006704  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4469  006706  0E7F               	movlw	high (STR_37+1)
  4470  006708  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4471  00670A  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4472                           
  4473                           ;easat2_util_transmission.c: 136: break;
  4474  00670E  D0EB               	goto	l3866
  4475  006710                     l3830:
  4476                           
  4477                           ;easat2_util_transmission.c: 138: util_transmit_morse_sequence((char*)"-----");
  4478  006710  0EA5               	movlw	low STR_29
  4479  006712  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4480  006714  0E7F               	movlw	high STR_29
  4481  006716  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4482  006718  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4483                           
  4484                           ;easat2_util_transmission.c: 139: break;
  4485  00671C  D0E4               	goto	l3866
  4486  00671E                     l3832:
  4487                           
  4488                           ;easat2_util_transmission.c: 141: util_transmit_morse_sequence((char*)".----");
  4489  00671E  0EAB               	movlw	low STR_30
  4490  006720  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4491  006722  0E7F               	movlw	high STR_30
  4492  006724  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4493  006726  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4494                           
  4495                           ;easat2_util_transmission.c: 142: break;
  4496  00672A  D0DD               	goto	l3866
  4497  00672C                     l3834:
  4498                           
  4499                           ;easat2_util_transmission.c: 144: util_transmit_morse_sequence((char*)"..---");
  4500  00672C  0EB1               	movlw	low STR_31
  4501  00672E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4502  006730  0E7F               	movlw	high STR_31
  4503  006732  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4504  006734  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4505                           
  4506                           ;easat2_util_transmission.c: 145: break;
  4507  006738  D0D6               	goto	l3866
  4508  00673A                     l3836:
  4509                           
  4510                           ;easat2_util_transmission.c: 147: util_transmit_morse_sequence((char*)"...--");
  4511  00673A  0EB7               	movlw	low STR_32
  4512  00673C  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4513  00673E  0E7F               	movlw	high STR_32
  4514  006740  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4515  006742  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4516                           
  4517                           ;easat2_util_transmission.c: 148: break;
  4518  006746  D0CF               	goto	l3866
  4519  006748                     l3838:
  4520                           
  4521                           ;easat2_util_transmission.c: 150: util_transmit_morse_sequence((char*)"....-");
  4522  006748  0E91               	movlw	low (STR_43+1)
  4523  00674A  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4524  00674C  0E7F               	movlw	high (STR_43+1)
  4525  00674E  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4526  006750  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4527                           
  4528                           ;easat2_util_transmission.c: 151: break;
  4529  006754  D0C8               	goto	l3866
  4530  006756                     l3840:
  4531                           
  4532                           ;easat2_util_transmission.c: 153: util_transmit_morse_sequence((char*)".....");
  4533  006756  0EDB               	movlw	low STR_34
  4534  006758  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4535  00675A  0E7F               	movlw	high STR_34
  4536  00675C  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4537  00675E  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4538                           
  4539                           ;easat2_util_transmission.c: 154: break;
  4540  006762  D0C1               	goto	l3866
  4541  006764                     l3842:
  4542                           
  4543                           ;easat2_util_transmission.c: 156: util_transmit_morse_sequence((char*)"-....");
  4544  006764  0ED5               	movlw	low STR_35
  4545  006766  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4546  006768  0E7F               	movlw	high STR_35
  4547  00676A  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4548  00676C  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4549                           
  4550                           ;easat2_util_transmission.c: 157: break;
  4551  006770  D0BA               	goto	l3866
  4552  006772                     l3844:
  4553                           
  4554                           ;easat2_util_transmission.c: 159: util_transmit_morse_sequence((char*)"--...");
  4555  006772  0ECF               	movlw	low STR_36
  4556  006774  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4557  006776  0E7F               	movlw	high STR_36
  4558  006778  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4559  00677A  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4560                           
  4561                           ;easat2_util_transmission.c: 160: break;
  4562  00677E  D0B3               	goto	l3866
  4563  006780                     l3846:
  4564                           
  4565                           ;easat2_util_transmission.c: 162: util_transmit_morse_sequence((char*)"---..");
  4566  006780  0EC9               	movlw	low STR_37
  4567  006782  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4568  006784  0E7F               	movlw	high STR_37
  4569  006786  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4570  006788  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4571                           
  4572                           ;easat2_util_transmission.c: 163: break;
  4573  00678C  D0AC               	goto	l3866
  4574  00678E                     l3848:
  4575                           
  4576                           ;easat2_util_transmission.c: 165: util_transmit_morse_sequence((char*)"----.");
  4577  00678E  0EBD               	movlw	low STR_38
  4578  006790  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4579  006792  0E7F               	movlw	high STR_38
  4580  006794  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4581  006796  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4582                           
  4583                           ;easat2_util_transmission.c: 166: break;
  4584  00679A  D0A5               	goto	l3866
  4585  00679C                     l3850:
  4586                           
  4587                           ;easat2_util_transmission.c: 168: util_transmit_morse_sequence((char*)"--..--");
  4588  00679C  0E82               	movlw	low STR_39
  4589  00679E  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4590  0067A0  0E7F               	movlw	high STR_39
  4591  0067A2  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4592  0067A4  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4593                           
  4594                           ;easat2_util_transmission.c: 169: break;
  4595  0067A8  D09E               	goto	l3866
  4596  0067AA                     l3852:
  4597                           
  4598                           ;easat2_util_transmission.c: 171: util_transmit_morse_sequence((char*)"..--..");
  4599  0067AA  0E97               	movlw	low STR_40
  4600  0067AC  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4601  0067AE  0E7F               	movlw	high STR_40
  4602  0067B0  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4603  0067B2  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4604                           
  4605                           ;easat2_util_transmission.c: 172: break;
  4606  0067B6  D097               	goto	l3866
  4607  0067B8                     l3854:
  4608                           
  4609                           ;easat2_util_transmission.c: 174: util_transmit_morse_sequence((char*)"-..-.");
  4610  0067B8  0EC3               	movlw	low STR_41
  4611  0067BA  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4612  0067BC  0E7F               	movlw	high STR_41
  4613  0067BE  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4614  0067C0  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4615                           
  4616                           ;easat2_util_transmission.c: 175: break;
  4617  0067C4  D090               	goto	l3866
  4618  0067C6                     l3856:
  4619                           
  4620                           ;easat2_util_transmission.c: 177: util_transmit_morse_sequence((char*)".-.-.-");
  4621  0067C6  0E89               	movlw	low STR_42
  4622  0067C8  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4623  0067CA  0E7F               	movlw	high STR_42
  4624  0067CC  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4625  0067CE  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4626                           
  4627                           ;easat2_util_transmission.c: 178: break;
  4628  0067D2  D089               	goto	l3866
  4629  0067D4                     l3858:
  4630                           
  4631                           ;easat2_util_transmission.c: 180: util_transmit_morse_sequence((char*)"-....-");
  4632  0067D4  0E90               	movlw	low STR_43
  4633  0067D6  6E08               	movwf	util_transmit_morse_sequence@morse_sequence,c
  4634  0067D8  0E7F               	movlw	high STR_43
  4635  0067DA  6E09               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  4636  0067DC  EC3A  F029         	call	_util_transmit_morse_sequence	;wreg free
  4637                           
  4638                           ;easat2_util_transmission.c: 181: break;
  4639  0067E0  D082               	goto	l3866
  4640  0067E2                     l3860:
  4641                           
  4642                           ;easat2_util_transmission.c: 183: util_transmit_space_between_words();
  4643  0067E2  ECF3  F026         	call	_util_transmit_space_between_words	;wreg free
  4644                           
  4645                           ;easat2_util_transmission.c: 188: }
  4646                           
  4647                           ;easat2_util_transmission.c: 186: break;
  4648                           
  4649                           ;easat2_util_transmission.c: 185: default:
  4650                           
  4651                           ;easat2_util_transmission.c: 184: break;
  4652  0067E6  D07F               	goto	l3866
  4653  0067E8                     l3864:
  4654  0067E8  500E               	movf	util_transmit_letter@letter,w,c
  4655                           
  4656                           ; Switch size 1, requested type "space"
  4657                           ; Number of cases is 42, Range of values is 32 to 90
  4658                           ; switch strategies available:
  4659                           ; Name         Instructions Cycles
  4660                           ; simple_byte          127    64 (average)
  4661                           ;	Chosen strategy is simple_byte
  4662  0067EA  0A20               	xorlw	32	; case 32
  4663  0067EC  B4D8               	btfsc	status,2,c
  4664  0067EE  D7F9               	goto	l3860
  4665  0067F0  0A0C               	xorlw	12	; case 44
  4666  0067F2  B4D8               	btfsc	status,2,c
  4667  0067F4  D7D3               	goto	l3850
  4668  0067F6  0A01               	xorlw	1	; case 45
  4669  0067F8  B4D8               	btfsc	status,2,c
  4670  0067FA  D7EC               	goto	l3858
  4671  0067FC  0A03               	xorlw	3	; case 46
  4672  0067FE  B4D8               	btfsc	status,2,c
  4673  006800  D7E2               	goto	l3856
  4674  006802  0A01               	xorlw	1	; case 47
  4675  006804  B4D8               	btfsc	status,2,c
  4676  006806  D7D8               	goto	l3854
  4677  006808  0A1F               	xorlw	31	; case 48
  4678  00680A  B4D8               	btfsc	status,2,c
  4679  00680C  D781               	goto	l3830
  4680  00680E  0A01               	xorlw	1	; case 49
  4681  006810  B4D8               	btfsc	status,2,c
  4682  006812  D785               	goto	l3832
  4683  006814  0A03               	xorlw	3	; case 50
  4684  006816  B4D8               	btfsc	status,2,c
  4685  006818  D789               	goto	l3834
  4686  00681A  0A01               	xorlw	1	; case 51
  4687  00681C  B4D8               	btfsc	status,2,c
  4688  00681E  D78D               	goto	l3836
  4689  006820  0A07               	xorlw	7	; case 52
  4690  006822  B4D8               	btfsc	status,2,c
  4691  006824  D791               	goto	l3838
  4692  006826  0A01               	xorlw	1	; case 53
  4693  006828  B4D8               	btfsc	status,2,c
  4694  00682A  D795               	goto	l3840
  4695  00682C  0A03               	xorlw	3	; case 54
  4696  00682E  B4D8               	btfsc	status,2,c
  4697  006830  D799               	goto	l3842
  4698  006832  0A01               	xorlw	1	; case 55
  4699  006834  B4D8               	btfsc	status,2,c
  4700  006836  D79D               	goto	l3844
  4701  006838  0A0F               	xorlw	15	; case 56
  4702  00683A  B4D8               	btfsc	status,2,c
  4703  00683C  D7A1               	goto	l3846
  4704  00683E  0A01               	xorlw	1	; case 57
  4705  006840  B4D8               	btfsc	status,2,c
  4706  006842  D7A5               	goto	l3848
  4707  006844  0A06               	xorlw	6	; case 63
  4708  006846  B4D8               	btfsc	status,2,c
  4709  006848  D7B0               	goto	l3852
  4710  00684A  0A7E               	xorlw	126	; case 65
  4711  00684C  B4D8               	btfsc	status,2,c
  4712  00684E  D6AA               	goto	l3778
  4713  006850  0A03               	xorlw	3	; case 66
  4714  006852  B4D8               	btfsc	status,2,c
  4715  006854  D6AE               	goto	l3780
  4716  006856  0A01               	xorlw	1	; case 67
  4717  006858  B4D8               	btfsc	status,2,c
  4718  00685A  D6B2               	goto	l3782
  4719  00685C  0A07               	xorlw	7	; case 68
  4720  00685E  B4D8               	btfsc	status,2,c
  4721  006860  D6B6               	goto	l3784
  4722  006862  0A01               	xorlw	1	; case 69
  4723  006864  B4D8               	btfsc	status,2,c
  4724  006866  D6BA               	goto	l3786
  4725  006868  0A03               	xorlw	3	; case 70
  4726  00686A  B4D8               	btfsc	status,2,c
  4727  00686C  D6BE               	goto	l3788
  4728  00686E  0A01               	xorlw	1	; case 71
  4729  006870  B4D8               	btfsc	status,2,c
  4730  006872  D6C2               	goto	l3790
  4731  006874  0A0F               	xorlw	15	; case 72
  4732  006876  B4D8               	btfsc	status,2,c
  4733  006878  D6C6               	goto	l3792
  4734  00687A  0A01               	xorlw	1	; case 73
  4735  00687C  B4D8               	btfsc	status,2,c
  4736  00687E  D6CA               	goto	l3794
  4737  006880  0A03               	xorlw	3	; case 74
  4738  006882  B4D8               	btfsc	status,2,c
  4739  006884  D6CE               	goto	l3796
  4740  006886  0A01               	xorlw	1	; case 75
  4741  006888  B4D8               	btfsc	status,2,c
  4742  00688A  D6D2               	goto	l3798
  4743  00688C  0A07               	xorlw	7	; case 76
  4744  00688E  B4D8               	btfsc	status,2,c
  4745  006890  D6D6               	goto	l3800
  4746  006892  0A01               	xorlw	1	; case 77
  4747  006894  B4D8               	btfsc	status,2,c
  4748  006896  D6DA               	goto	l3802
  4749  006898  0A03               	xorlw	3	; case 78
  4750  00689A  B4D8               	btfsc	status,2,c
  4751  00689C  D6DE               	goto	l3804
  4752  00689E  0A01               	xorlw	1	; case 79
  4753  0068A0  B4D8               	btfsc	status,2,c
  4754  0068A2  D6E2               	goto	l3806
  4755  0068A4  0A1F               	xorlw	31	; case 80
  4756  0068A6  B4D8               	btfsc	status,2,c
  4757  0068A8  D6E6               	goto	l3808
  4758  0068AA  0A01               	xorlw	1	; case 81
  4759  0068AC  B4D8               	btfsc	status,2,c
  4760  0068AE  D6EA               	goto	l3810
  4761  0068B0  0A03               	xorlw	3	; case 82
  4762  0068B2  B4D8               	btfsc	status,2,c
  4763  0068B4  D6EE               	goto	l3812
  4764  0068B6  0A01               	xorlw	1	; case 83
  4765  0068B8  B4D8               	btfsc	status,2,c
  4766  0068BA  D6F2               	goto	l3814
  4767  0068BC  0A07               	xorlw	7	; case 84
  4768  0068BE  B4D8               	btfsc	status,2,c
  4769  0068C0  D6F6               	goto	l3816
  4770  0068C2  0A01               	xorlw	1	; case 85
  4771  0068C4  B4D8               	btfsc	status,2,c
  4772  0068C6  D6FA               	goto	l3818
  4773  0068C8  0A03               	xorlw	3	; case 86
  4774  0068CA  B4D8               	btfsc	status,2,c
  4775  0068CC  D6FE               	goto	l3820
  4776  0068CE  0A01               	xorlw	1	; case 87
  4777  0068D0  B4D8               	btfsc	status,2,c
  4778  0068D2  D702               	goto	l3822
  4779  0068D4  0A0F               	xorlw	15	; case 88
  4780  0068D6  B4D8               	btfsc	status,2,c
  4781  0068D8  D706               	goto	l3824
  4782  0068DA  0A01               	xorlw	1	; case 89
  4783  0068DC  B4D8               	btfsc	status,2,c
  4784  0068DE  D70A               	goto	l3826
  4785  0068E0  0A03               	xorlw	3	; case 90
  4786  0068E2  B4D8               	btfsc	status,2,c
  4787  0068E4  D70E               	goto	l3828
  4788  0068E6                     l3866:
  4789                           
  4790                           ;easat2_util_transmission.c: 191: util_transmit_space_between_letters();
  4791  0068E6  ECEC  F026         	call	_util_transmit_space_between_letters	;wreg free
  4792  0068EA  0012               	return		;funcret
  4793  0068EC                     __end_of_util_transmit_letter:
  4794                           	opt stack 0
  4795                           tblptru	equ	0xFF8
  4796                           wreg	equ	0xFE8
  4797                           indf2	equ	0xFDF
  4798                           postinc2	equ	0xFDE
  4799                           postdec2	equ	0xFDD
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _util_transmit_space_between_words *****************
  4805 ;; Defined at:
  4806 ;;		line 304 in file "easat2_util_transmission.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;		None
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;		None
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  1    wreg      void 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0, cstack
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4820 ;;      Params:         0       0       0       0       0       0       0
  4821 ;;      Locals:         0       0       0       0       0       0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0
  4823 ;;      Totals:         0       0       0       0       0       0       0
  4824 ;;Total ram usage:        0 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    1
  4827 ;; This function calls:
  4828 ;;		_util_waits_delay_ms
  4829 ;; This function is called by:
  4830 ;;		_util_transmit_letter
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text19
  4835  004DE6                     __ptext19:
  4836                           	opt stack 0
  4837  004DE6                     _util_transmit_space_between_words:
  4838                           	opt stack 26
  4839                           
  4840                           ;easat2_util_transmission.c: 305: util_waits_delay_ms(7*(int)(2400/32));
  4841                           
  4842                           ;incstack = 0
  4843  004DE6  0E02               	movlw	2
  4844  004DE8  6E02               	movwf	util_waits_delay_ms@ms+1,c
  4845  004DEA  0E0D               	movlw	13
  4846  004DEC  6E01               	movwf	util_waits_delay_ms@ms,c
  4847  004DEE  EC7B  F027         	call	_util_waits_delay_ms	;wreg free
  4848  004DF2  0012               	return		;funcret
  4849  004DF4                     __end_of_util_transmit_space_between_words:
  4850                           	opt stack 0
  4851                           tblptru	equ	0xFF8
  4852                           wreg	equ	0xFE8
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _util_transmit_space_between_letters *****************
  4861 ;; Defined at:
  4862 ;;		line 297 in file "easat2_util_transmission.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;		None
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4876 ;;      Params:         0       0       0       0       0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0
  4879 ;;      Totals:         0       0       0       0       0       0       0
  4880 ;;Total ram usage:        0 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    1
  4883 ;; This function calls:
  4884 ;;		_util_waits_delay_ms
  4885 ;; This function is called by:
  4886 ;;		_util_transmit_letter
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text20
  4891  004DD8                     __ptext20:
  4892                           	opt stack 0
  4893  004DD8                     _util_transmit_space_between_letters:
  4894                           	opt stack 26
  4895                           
  4896                           ;easat2_util_transmission.c: 298: util_waits_delay_ms(3*(int)(2400/32));
  4897                           
  4898                           ;incstack = 0
  4899  004DD8  0E00               	movlw	0
  4900  004DDA  6E02               	movwf	util_waits_delay_ms@ms+1,c
  4901  004DDC  0EE1               	movlw	225
  4902  004DDE  6E01               	movwf	util_waits_delay_ms@ms,c
  4903  004DE0  EC7B  F027         	call	_util_waits_delay_ms	;wreg free
  4904  004DE4  0012               	return		;funcret
  4905  004DE6                     __end_of_util_transmit_space_between_letters:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           wreg	equ	0xFE8
  4909                           indf2	equ	0xFDF
  4910                           postinc2	equ	0xFDE
  4911                           postdec2	equ	0xFDD
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _util_transmit_morse_sequence *****************
  4917 ;; Defined at:
  4918 ;;		line 201 in file "easat2_util_transmission.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  morse_sequen    2    7[COMRAM] PTR unsigned char 
  4921 ;;		 -> STR_43(7), STR_42(7), STR_41(6), STR_40(7), 
  4922 ;;		 -> STR_39(7), STR_38(6), STR_37(6), STR_36(6), 
  4923 ;;		 -> STR_35(6), STR_34(6), STR_33(6), STR_32(6), 
  4924 ;;		 -> STR_31(6), STR_30(6), STR_29(6), STR_28(5), 
  4925 ;;		 -> STR_27(5), STR_26(5), STR_25(4), STR_24(5), 
  4926 ;;		 -> STR_23(4), STR_22(2), STR_21(4), STR_20(4), 
  4927 ;;		 -> STR_19(5), STR_18(5), STR_17(4), STR_16(3), 
  4928 ;;		 -> STR_15(3), STR_14(5), STR_13(4), STR_12(5), 
  4929 ;;		 -> STR_11(3), STR_10(5), STR_9(4), STR_8(5), 
  4930 ;;		 -> STR_7(2), STR_6(4), STR_5(5), STR_4(5), 
  4931 ;;		 -> STR_3(3), 
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;  i               2   11[COMRAM] int 
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4943 ;;      Params:         2       0       0       0       0       0       0
  4944 ;;      Locals:         2       0       0       0       0       0       0
  4945 ;;      Temps:          2       0       0       0       0       0       0
  4946 ;;      Totals:         6       0       0       0       0       0       0
  4947 ;;Total ram usage:        6 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    3
  4950 ;; This function calls:
  4951 ;;		_strlen
  4952 ;;		_util_transmit_dash
  4953 ;;		_util_transmit_dot
  4954 ;;		_util_transmit_space_between_dots_dashes
  4955 ;; This function is called by:
  4956 ;;		_util_transmit_letter
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959                           
  4960                           	psect	text21
  4961  005274                     __ptext21:
  4962                           	opt stack 0
  4963  005274                     _util_transmit_morse_sequence:
  4964                           	opt stack 24
  4965                           
  4966                           ;easat2_util_transmission.c: 205: for (int i = 0; i < strlen(morse_sequence); i++) {
  4967                           
  4968                           ;incstack = 0
  4969  005274  0E00               	movlw	0
  4970  005276  6E0D               	movwf	util_transmit_morse_sequence@i+1,c
  4971  005278  0E00               	movlw	0
  4972  00527A  6E0C               	movwf	util_transmit_morse_sequence@i,c
  4973  00527C  D01C               	goto	l3020
  4974  00527E                     l3008:
  4975                           
  4976                           ;easat2_util_transmission.c: 210: util_transmit_dot();
  4977  00527E  EC24  F028         	call	_util_transmit_dot	;wreg free
  4978                           
  4979                           ;easat2_util_transmission.c: 211: break;
  4980  005282  D015               	goto	l3016
  4981  005284                     l3010:
  4982                           
  4983                           ;easat2_util_transmission.c: 213: util_transmit_dash();
  4984  005284  EC0A  F028         	call	_util_transmit_dash	;wreg free
  4985                           
  4986                           ;easat2_util_transmission.c: 217: }
  4987                           
  4988                           ;easat2_util_transmission.c: 216: break;
  4989                           
  4990                           ;easat2_util_transmission.c: 215: default:
  4991                           
  4992                           ;easat2_util_transmission.c: 214: break;
  4993  005288  D012               	goto	l3016
  4994  00528A                     l3014:
  4995  00528A  500C               	movf	util_transmit_morse_sequence@i,w,c
  4996  00528C  2408               	addwf	util_transmit_morse_sequence@morse_sequence,w,c
  4997  00528E  6E0A               	movwf	??_util_transmit_morse_sequence& (0+255),c
  4998  005290  500D               	movf	util_transmit_morse_sequence@i+1,w,c
  4999  005292  2009               	addwfc	util_transmit_morse_sequence@morse_sequence+1,w,c
  5000  005294  6E0B               	movwf	(??_util_transmit_morse_sequence+1)& (0+255),c
  5001  005296  C00A  FFF6         	movff	??_util_transmit_morse_sequence,tblptrl
  5002  00529A  C00B  FFF7         	movff	??_util_transmit_morse_sequence+1,tblptrh
  5003  00529E                     	if	0	;tblptru may be non-zero
  5004  00529E                     	endif
  5005  00529E                     	if	0	;tblptru may be non-zero
  5006  00529E                     	endif
  5007  00529E  0008               	tblrd		*
  5008  0052A0  50F5               	movf	tablat,w,c
  5009                           
  5010                           ; Switch size 1, requested type "space"
  5011                           ; Number of cases is 2, Range of values is 45 to 46
  5012                           ; switch strategies available:
  5013                           ; Name         Instructions Cycles
  5014                           ; simple_byte            7     4 (average)
  5015                           ;	Chosen strategy is simple_byte
  5016  0052A2  0A2D               	xorlw	45	; case 45
  5017  0052A4  B4D8               	btfsc	status,2,c
  5018  0052A6  D7EE               	goto	l3010
  5019  0052A8  0A03               	xorlw	3	; case 46
  5020  0052AA  B4D8               	btfsc	status,2,c
  5021  0052AC  D7E8               	goto	l3008
  5022  0052AE                     l3016:
  5023                           
  5024                           ;easat2_util_transmission.c: 220: util_transmit_space_between_dots_dashes();
  5025  0052AE  ECE5  F026         	call	_util_transmit_space_between_dots_dashes	;wreg free
  5026  0052B2  4A0C               	infsnz	util_transmit_morse_sequence@i,f,c
  5027  0052B4  2A0D               	incf	util_transmit_morse_sequence@i+1,f,c
  5028  0052B6                     l3020:
  5029  0052B6  C008  F001         	movff	util_transmit_morse_sequence@morse_sequence,strlen@s
  5030  0052BA  C009  F002         	movff	util_transmit_morse_sequence@morse_sequence+1,strlen@s+1
  5031  0052BE  ECE3  F028         	call	_strlen	;wreg free
  5032  0052C2  5001               	movf	?_strlen,w,c
  5033  0052C4  5C0C               	subwf	util_transmit_morse_sequence@i,w,c
  5034  0052C6  5002               	movf	?_strlen+1,w,c
  5035  0052C8  580D               	subwfb	util_transmit_morse_sequence@i+1,w,c
  5036  0052CA  B0D8               	btfsc	status,0,c
  5037  0052CC  0012               	return	
  5038  0052CE  D7DD               	goto	l3014
  5039  0052D0                     __end_of_util_transmit_morse_sequence:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           wreg	equ	0xFE8
  5046                           indf2	equ	0xFDF
  5047                           postinc2	equ	0xFDE
  5048                           postdec2	equ	0xFDD
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _util_transmit_space_between_dots_dashes *****************
  5054 ;; Defined at:
  5055 ;;		line 289 in file "easat2_util_transmission.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;		None
  5058 ;; Auto vars:     Size  Location     Type
  5059 ;;		None
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      void 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5069 ;;      Params:         0       0       0       0       0       0       0
  5070 ;;      Locals:         0       0       0       0       0       0       0
  5071 ;;      Temps:          0       0       0       0       0       0       0
  5072 ;;      Totals:         0       0       0       0       0       0       0
  5073 ;;Total ram usage:        0 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    1
  5076 ;; This function calls:
  5077 ;;		_util_waits_delay_ms
  5078 ;; This function is called by:
  5079 ;;		_util_transmit_morse_sequence
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text22
  5084  004DCA                     __ptext22:
  5085                           	opt stack 0
  5086  004DCA                     _util_transmit_space_between_dots_dashes:
  5087                           	opt stack 25
  5088                           
  5089                           ;easat2_util_transmission.c: 290: util_waits_delay_ms((int)(2400/32));
  5090                           
  5091                           ;incstack = 0
  5092  004DCA  0E00               	movlw	0
  5093  004DCC  6E02               	movwf	util_waits_delay_ms@ms+1,c
  5094  004DCE  0E4B               	movlw	75
  5095  004DD0  6E01               	movwf	util_waits_delay_ms@ms,c
  5096  004DD2  EC7B  F027         	call	_util_waits_delay_ms	;wreg free
  5097  004DD6  0012               	return		;funcret
  5098  004DD8                     __end_of_util_transmit_space_between_dots_dashes:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           wreg	equ	0xFE8
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _util_transmit_dot *****************
  5113 ;; Defined at:
  5114 ;;		line 231 in file "easat2_util_transmission.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  i               2    5[COMRAM] int 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5128 ;;      Params:         0       0       0       0       0       0       0
  5129 ;;      Locals:         2       0       0       0       0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0
  5131 ;;      Totals:         2       0       0       0       0       0       0
  5132 ;;Total ram usage:        2 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    2
  5135 ;; This function calls:
  5136 ;;		_util_transmit_buzzer_1ms_cycle
  5137 ;;		_util_waits_delay_ms
  5138 ;; This function is called by:
  5139 ;;		_util_transmit_morse_sequence
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text23
  5144  005048                     __ptext23:
  5145                           	opt stack 0
  5146  005048                     _util_transmit_dot:
  5147                           	opt stack 24
  5148                           
  5149                           ;easat2_util_transmission.c: 235: PORTDbits.RD1 = 1;
  5150                           
  5151                           ;incstack = 0
  5152  005048  8283               	bsf	3971,1,c	;volatile
  5153                           
  5154                           ;easat2_util_transmission.c: 236: PORTDbits.RD3 = 1;
  5155  00504A  8683               	bsf	3971,3,c	;volatile
  5156                           
  5157                           ;easat2_util_transmission.c: 238: for (int i = 0; i < (int)(2400/32); i++) {
  5158  00504C  0E00               	movlw	0
  5159  00504E  6E07               	movwf	util_transmit_dot@i+1,c
  5160  005050  0E00               	movlw	0
  5161  005052  6E06               	movwf	util_transmit_dot@i,c
  5162  005054  BE07               	btfsc	util_transmit_dot@i+1,7,c
  5163  005056  D006               	goto	l2758
  5164  005058  5007               	movf	util_transmit_dot@i+1,w,c
  5165  00505A  E10D               	bnz	l252
  5166  00505C  0E4B               	movlw	75
  5167  00505E  5C06               	subwf	util_transmit_dot@i,w,c
  5168  005060  B0D8               	btfsc	status,0,c
  5169  005062  D009               	goto	l252
  5170  005064                     l2758:
  5171                           
  5172                           ;easat2_util_transmission.c: 245: util_transmit_buzzer_1ms_cycle();
  5173  005064  EC09  F027         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  5174                           
  5175                           ;easat2_util_transmission.c: 246: else
  5176                           ;easat2_util_transmission.c: 247: util_waits_delay_ms(1);
  5177  005068  4A06               	infsnz	util_transmit_dot@i,f,c
  5178  00506A  2A07               	incf	util_transmit_dot@i+1,f,c
  5179  00506C  BE07               	btfsc	util_transmit_dot@i+1,7,c
  5180  00506E  D7FA               	goto	l2758
  5181  005070  5007               	movf	util_transmit_dot@i+1,w,c
  5182  005072  E101               	bnz	u2160
  5183  005074  D7F3               	goto	L2
  5184  005076                     u2160:
  5185  005076                     l252:
  5186                           
  5187                           ;easat2_util_transmission.c: 249: }
  5188                           ;easat2_util_transmission.c: 251: PORTDbits.RD1 = 0;
  5189  005076  9283               	bcf	3971,1,c	;volatile
  5190                           
  5191                           ;easat2_util_transmission.c: 252: PORTDbits.RD3 = 0;
  5192  005078  9683               	bcf	3971,3,c	;volatile
  5193  00507A  0012               	return		;funcret
  5194  00507C                     __end_of_util_transmit_dot:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           wreg	equ	0xFE8
  5201                           indf2	equ	0xFDF
  5202                           postinc2	equ	0xFDE
  5203                           postdec2	equ	0xFDD
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _util_transmit_dash *****************
  5209 ;; Defined at:
  5210 ;;		line 262 in file "easat2_util_transmission.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  i               2    5[COMRAM] int 
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		wreg, status,2, status,0, cstack
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5224 ;;      Params:         0       0       0       0       0       0       0
  5225 ;;      Locals:         2       0       0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0
  5227 ;;      Totals:         2       0       0       0       0       0       0
  5228 ;;Total ram usage:        2 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    2
  5231 ;; This function calls:
  5232 ;;		_util_transmit_buzzer_1ms_cycle
  5233 ;;		_util_waits_delay_ms
  5234 ;; This function is called by:
  5235 ;;		_util_transmit_morse_sequence
  5236 ;; This function uses a non-reentrant model
  5237 ;;
  5238                           
  5239                           	psect	text24
  5240  005014                     __ptext24:
  5241                           	opt stack 0
  5242  005014                     _util_transmit_dash:
  5243                           	opt stack 24
  5244                           
  5245                           ;easat2_util_transmission.c: 266: PORTDbits.RD1 = 1;
  5246                           
  5247                           ;incstack = 0
  5248  005014  8283               	bsf	3971,1,c	;volatile
  5249                           
  5250                           ;easat2_util_transmission.c: 267: PORTDbits.RD3 = 1;
  5251  005016  8683               	bsf	3971,3,c	;volatile
  5252                           
  5253                           ;easat2_util_transmission.c: 269: for (int i = 0; i < ((int)(2400/32)*3); i++) {
  5254  005018  0E00               	movlw	0
  5255  00501A  6E07               	movwf	util_transmit_dash@i+1,c
  5256  00501C  0E00               	movlw	0
  5257  00501E  6E06               	movwf	util_transmit_dash@i,c
  5258  005020  BE07               	btfsc	util_transmit_dash@i+1,7,c
  5259  005022  D006               	goto	l2774
  5260  005024  5007               	movf	util_transmit_dash@i+1,w,c
  5261  005026  E10D               	bnz	l259
  5262  005028  0EE1               	movlw	225
  5263  00502A  5C06               	subwf	util_transmit_dash@i,w,c
  5264  00502C  B0D8               	btfsc	status,0,c
  5265  00502E  D009               	goto	l259
  5266  005030                     l2774:
  5267                           
  5268                           ;easat2_util_transmission.c: 276: util_transmit_buzzer_1ms_cycle();
  5269  005030  EC09  F027         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  5270                           
  5271                           ;easat2_util_transmission.c: 277: else
  5272                           ;easat2_util_transmission.c: 278: util_waits_delay_ms(1);
  5273  005034  4A06               	infsnz	util_transmit_dash@i,f,c
  5274  005036  2A07               	incf	util_transmit_dash@i+1,f,c
  5275  005038  BE07               	btfsc	util_transmit_dash@i+1,7,c
  5276  00503A  D7FA               	goto	l2774
  5277  00503C  5007               	movf	util_transmit_dash@i+1,w,c
  5278  00503E  E101               	bnz	u2180
  5279  005040  D7F3               	goto	L3
  5280  005042                     u2180:
  5281  005042                     l259:
  5282                           
  5283                           ;easat2_util_transmission.c: 280: }
  5284                           ;easat2_util_transmission.c: 282: PORTDbits.RD1 = 0;
  5285  005042  9283               	bcf	3971,1,c	;volatile
  5286                           
  5287                           ;easat2_util_transmission.c: 283: PORTDbits.RD3 = 0;
  5288  005044  9683               	bcf	3971,3,c	;volatile
  5289  005046  0012               	return		;funcret
  5290  005048                     __end_of_util_transmit_dash:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           wreg	equ	0xFE8
  5297                           indf2	equ	0xFDF
  5298                           postinc2	equ	0xFDE
  5299                           postdec2	equ	0xFDD
  5300                           fsr2h	equ	0xFDA
  5301                           fsr2l	equ	0xFD9
  5302                           status	equ	0xFD8
  5303                           
  5304 ;; *************** function _util_waits_delay_ms *****************
  5305 ;; Defined at:
  5306 ;;		line 40 in file "easat2_util_waits.c"
  5307 ;; Parameters:    Size  Location     Type
  5308 ;;  ms              2    0[COMRAM] int 
  5309 ;; Auto vars:     Size  Location     Type
  5310 ;;  i               2    3[COMRAM] int 
  5311 ;; Return value:  Size  Location     Type
  5312 ;;                  1    wreg      void 
  5313 ;; Registers used:
  5314 ;;		wreg, status,2, status,0
  5315 ;; Tracked objects:
  5316 ;;		On entry : 0/0
  5317 ;;		On exit  : 0/0
  5318 ;;		Unchanged: 0/0
  5319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5320 ;;      Params:         2       0       0       0       0       0       0
  5321 ;;      Locals:         2       0       0       0       0       0       0
  5322 ;;      Temps:          1       0       0       0       0       0       0
  5323 ;;      Totals:         5       0       0       0       0       0       0
  5324 ;;Total ram usage:        5 bytes
  5325 ;; Hardware stack levels used:    1
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_util_waits_delay_secs
  5330 ;;		_util_transmit_dot
  5331 ;;		_util_transmit_dash
  5332 ;;		_util_transmit_space_between_dots_dashes
  5333 ;;		_util_transmit_space_between_letters
  5334 ;;		_util_transmit_space_between_words
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text25
  5339  004EF6                     __ptext25:
  5340                           	opt stack 0
  5341  004EF6                     _util_waits_delay_ms:
  5342                           	opt stack 27
  5343                           
  5344                           ;easat2_util_waits.c: 41: for (int i = 0; i < ms; i++)
  5345                           
  5346                           ;incstack = 0
  5347  004EF6  0E00               	movlw	0
  5348  004EF8  6E05               	movwf	util_waits_delay_ms@i+1,c
  5349  004EFA  0E00               	movlw	0
  5350  004EFC  6E04               	movwf	util_waits_delay_ms@i,c
  5351  004EFE  D006               	goto	l59
  5352  004F00                     l2694:
  5353                           
  5354                           ;easat2_util_waits.c: 42: _delay((unsigned long)((1)*(2000000/4000.0)));
  5355  004F00  0EA6               	movlw	166
  5356  004F02                     u4117:
  5357  004F02  2EE8               	decfsz	wreg,f,c
  5358  004F04  D7FE               	goto	u4117
  5359  004F06  D000               	nop2		;nop
  5360  004F08  4A04               	infsnz	util_waits_delay_ms@i,f,c
  5361  004F0A  2A05               	incf	util_waits_delay_ms@i+1,f,c
  5362  004F0C                     l59:
  5363  004F0C  5001               	movf	util_waits_delay_ms@ms,w,c
  5364  004F0E  5C04               	subwf	util_waits_delay_ms@i,w,c
  5365  004F10  5005               	movf	util_waits_delay_ms@i+1,w,c
  5366  004F12  0A80               	xorlw	128
  5367  004F14  6E03               	movwf	??_util_waits_delay_ms& (0+255),c
  5368  004F16  5002               	movf	util_waits_delay_ms@ms+1,w,c
  5369  004F18  0A80               	xorlw	128
  5370  004F1A  5803               	subwfb	??_util_waits_delay_ms& (0+255),w,c
  5371  004F1C  B0D8               	btfsc	status,0,c
  5372  004F1E  0012               	return	
  5373  004F20  D7EF               	goto	l2694
  5374  004F22                     __end_of_util_waits_delay_ms:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           wreg	equ	0xFE8
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _util_transmit_buzzer_1ms_cycle *****************
  5389 ;; Defined at:
  5390 ;;		line 310 in file "easat2_util_transmission.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;		None
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, status,2, status,0, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5404 ;;      Params:         0       0       0       0       0       0       0
  5405 ;;      Locals:         0       0       0       0       0       0       0
  5406 ;;      Temps:          0       0       0       0       0       0       0
  5407 ;;      Totals:         0       0       0       0       0       0       0
  5408 ;;Total ram usage:        0 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		_util_waits_delay_hundred_us
  5413 ;; This function is called by:
  5414 ;;		_util_transmit_dot
  5415 ;;		_util_transmit_dash
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text26
  5420  004E12                     __ptext26:
  5421                           	opt stack 0
  5422  004E12                     _util_transmit_buzzer_1ms_cycle:
  5423                           	opt stack 24
  5424                           
  5425                           ;easat2_util_transmission.c: 312: PORTDbits.RD2 = 1;
  5426                           
  5427                           ;incstack = 0
  5428  004E12  8483               	bsf	3971,2,c	;volatile
  5429                           
  5430                           ;easat2_util_transmission.c: 313: util_waits_delay_hundred_us((int)(10/2));
  5431  004E14  0E00               	movlw	0
  5432  004E16  6E02               	movwf	util_waits_delay_hundred_us@hun_us+1,c
  5433  004E18  0E05               	movlw	5
  5434  004E1A  6E01               	movwf	util_waits_delay_hundred_us@hun_us,c
  5435  004E1C  EC65  F027         	call	_util_waits_delay_hundred_us	;wreg free
  5436                           
  5437                           ;easat2_util_transmission.c: 314: PORTDbits.RD2 = 0;
  5438  004E20  9483               	bcf	3971,2,c	;volatile
  5439                           
  5440                           ;easat2_util_transmission.c: 315: util_waits_delay_hundred_us((int)(10/2));
  5441  004E22  0E00               	movlw	0
  5442  004E24  6E02               	movwf	util_waits_delay_hundred_us@hun_us+1,c
  5443  004E26  0E05               	movlw	5
  5444  004E28  6E01               	movwf	util_waits_delay_hundred_us@hun_us,c
  5445  004E2A  EC65  F027         	call	_util_waits_delay_hundred_us	;wreg free
  5446  004E2E  0012               	return		;funcret
  5447  004E30                     __end_of_util_transmit_buzzer_1ms_cycle:
  5448                           	opt stack 0
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           wreg	equ	0xFE8
  5454                           indf2	equ	0xFDF
  5455                           postinc2	equ	0xFDE
  5456                           postdec2	equ	0xFDD
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function _util_waits_delay_hundred_us *****************
  5462 ;; Defined at:
  5463 ;;		line 47 in file "easat2_util_waits.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  hun_us          2    0[COMRAM] int 
  5466 ;; Auto vars:     Size  Location     Type
  5467 ;;  i               2    3[COMRAM] int 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  1    wreg      void 
  5470 ;; Registers used:
  5471 ;;		wreg, status,2, status,0
  5472 ;; Tracked objects:
  5473 ;;		On entry : 0/0
  5474 ;;		On exit  : 0/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5477 ;;      Params:         2       0       0       0       0       0       0
  5478 ;;      Locals:         2       0       0       0       0       0       0
  5479 ;;      Temps:          1       0       0       0       0       0       0
  5480 ;;      Totals:         5       0       0       0       0       0       0
  5481 ;;Total ram usage:        5 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_util_transmit_buzzer_1ms_cycle
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           	psect	text27
  5491  004ECA                     __ptext27:
  5492                           	opt stack 0
  5493  004ECA                     _util_waits_delay_hundred_us:
  5494                           	opt stack 24
  5495                           
  5496                           ;easat2_util_waits.c: 48: for (int i = 0; i < hun_us; i++)
  5497                           
  5498                           ;incstack = 0
  5499  004ECA  0E00               	movlw	0
  5500  004ECC  6E05               	movwf	util_waits_delay_hundred_us@i+1,c
  5501  004ECE  0E00               	movlw	0
  5502  004ED0  6E04               	movwf	util_waits_delay_hundred_us@i,c
  5503  004ED2  D006               	goto	l65
  5504  004ED4                     l2688:
  5505                           
  5506                           ;easat2_util_waits.c: 49: _delay((unsigned long)((100)*(2000000/4000000.0)));
  5507  004ED4  0E10               	movlw	16
  5508  004ED6                     u4127:
  5509  004ED6  2EE8               	decfsz	wreg,f,c
  5510  004ED8  D7FE               	goto	u4127
  5511  004EDA  D000               	nop2		;nop
  5512  004EDC  4A04               	infsnz	util_waits_delay_hundred_us@i,f,c
  5513  004EDE  2A05               	incf	util_waits_delay_hundred_us@i+1,f,c
  5514  004EE0                     l65:
  5515  004EE0  5001               	movf	util_waits_delay_hundred_us@hun_us,w,c
  5516  004EE2  5C04               	subwf	util_waits_delay_hundred_us@i,w,c
  5517  004EE4  5005               	movf	util_waits_delay_hundred_us@i+1,w,c
  5518  004EE6  0A80               	xorlw	128
  5519  004EE8  6E03               	movwf	??_util_waits_delay_hundred_us& (0+255),c
  5520  004EEA  5002               	movf	util_waits_delay_hundred_us@hun_us+1,w,c
  5521  004EEC  0A80               	xorlw	128
  5522  004EEE  5803               	subwfb	??_util_waits_delay_hundred_us& (0+255),w,c
  5523  004EF0  B0D8               	btfsc	status,0,c
  5524  004EF2  0012               	return	
  5525  004EF4  D7EF               	goto	l2688
  5526  004EF6                     __end_of_util_waits_delay_hundred_us:
  5527                           	opt stack 0
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           wreg	equ	0xFE8
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function _strlen *****************
  5541 ;; Defined at:
  5542 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  s               2    0[COMRAM] PTR const unsigned char 
  5545 ;;		 -> STR_43(7), STR_42(7), STR_41(6), STR_40(7), 
  5546 ;;		 -> STR_39(7), STR_38(6), STR_37(6), STR_36(6), 
  5547 ;;		 -> STR_35(6), STR_34(6), STR_33(6), STR_32(6), 
  5548 ;;		 -> STR_31(6), STR_30(6), STR_29(6), STR_28(5), 
  5549 ;;		 -> STR_27(5), STR_26(5), STR_25(4), STR_24(5), 
  5550 ;;		 -> STR_23(4), STR_22(2), STR_21(4), STR_20(4), 
  5551 ;;		 -> STR_19(5), STR_18(5), STR_17(4), STR_16(3), 
  5552 ;;		 -> STR_15(3), STR_14(5), STR_13(4), STR_12(5), 
  5553 ;;		 -> STR_11(3), STR_10(5), STR_9(4), STR_8(5), 
  5554 ;;		 -> STR_7(2), STR_6(4), STR_5(5), STR_4(5), 
  5555 ;;		 -> STR_3(3), util_beacon_transmission@BEACON_MESSAGE(128), 
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  5558 ;;		 -> STR_43(7), STR_42(7), STR_41(6), STR_40(7), 
  5559 ;;		 -> STR_39(7), STR_38(6), STR_37(6), STR_36(6), 
  5560 ;;		 -> STR_35(6), STR_34(6), STR_33(6), STR_32(6), 
  5561 ;;		 -> STR_31(6), STR_30(6), STR_29(6), STR_28(5), 
  5562 ;;		 -> STR_27(5), STR_26(5), STR_25(4), STR_24(5), 
  5563 ;;		 -> STR_23(4), STR_22(2), STR_21(4), STR_20(4), 
  5564 ;;		 -> STR_19(5), STR_18(5), STR_17(4), STR_16(3), 
  5565 ;;		 -> STR_15(3), STR_14(5), STR_13(4), STR_12(5), 
  5566 ;;		 -> STR_11(3), STR_10(5), STR_9(4), STR_8(5), 
  5567 ;;		 -> STR_7(2), STR_6(4), STR_5(5), STR_4(5), 
  5568 ;;		 -> STR_3(3), util_beacon_transmission@BEACON_MESSAGE(128), 
  5569 ;; Return value:  Size  Location     Type
  5570 ;;                  2    0[COMRAM] unsigned int 
  5571 ;; Registers used:
  5572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  5573 ;; Tracked objects:
  5574 ;;		On entry : 0/0
  5575 ;;		On exit  : 0/0
  5576 ;;		Unchanged: 0/0
  5577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5578 ;;      Params:         2       0       0       0       0       0       0
  5579 ;;      Locals:         2       0       0       0       0       0       0
  5580 ;;      Temps:          2       0       0       0       0       0       0
  5581 ;;      Totals:         6       0       0       0       0       0       0
  5582 ;;Total ram usage:        6 bytes
  5583 ;; Hardware stack levels used:    1
  5584 ;; This function calls:
  5585 ;;		Nothing
  5586 ;; This function is called by:
  5587 ;;		_util_beacon_transmission
  5588 ;;		_util_transmit_morse_sequence
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text28
  5593  0051C6                     __ptext28:
  5594                           	opt stack 0
  5595  0051C6                     _strlen:
  5596                           	opt stack 26
  5597                           
  5598                           ;incstack = 0
  5599  0051C6  C001  F005         	movff	strlen@s,strlen@cp
  5600  0051CA  C002  F006         	movff	strlen@s+1,strlen@cp+1
  5601  0051CE  D002               	goto	l2744
  5602  0051D0                     l2742:
  5603  0051D0  4A05               	infsnz	strlen@cp,f,c
  5604  0051D2  2A06               	incf	strlen@cp+1,f,c
  5605  0051D4                     l2744:
  5606  0051D4  C005  FFF6         	movff	strlen@cp,tblptrl
  5607  0051D8  C006  FFF7         	movff	strlen@cp+1,tblptrh
  5608  0051DC  6AF8               	clrf	tblptru,c
  5609  0051DE  0E05               	movlw	(high __ramtop+-1)
  5610  0051E0  64F7               	cpfsgt	tblptrh,c
  5611  0051E2  D003               	bra	u2137
  5612  0051E4  0008               	tblrd		*
  5613  0051E6  50F5               	movf	tablat,w,c
  5614  0051E8  D005               	bra	u2130
  5615  0051EA                     u2137:
  5616  0051EA  CFF6 FFE9          	movff	tblptrl,fsr0l
  5617  0051EE  CFF7 FFEA          	movff	tblptrh,fsr0h
  5618  0051F2  50EF               	movf	indf0,w,c
  5619  0051F4                     u2130:
  5620  0051F4  0900               	iorlw	0
  5621  0051F6  A4D8               	btfss	status,2,c
  5622  0051F8  D7EB               	goto	l2742
  5623  0051FA  C001  F003         	movff	strlen@s,??_strlen
  5624  0051FE  C002  F004         	movff	strlen@s+1,??_strlen+1
  5625  005202  1E03               	comf	??_strlen,f,c
  5626  005204  1E04               	comf	??_strlen+1,f,c
  5627  005206  4A03               	infsnz	??_strlen,f,c
  5628  005208  2A04               	incf	??_strlen+1,f,c
  5629  00520A  5005               	movf	strlen@cp,w,c
  5630  00520C  2403               	addwf	??_strlen,w,c
  5631  00520E  6E01               	movwf	?_strlen,c
  5632  005210  5006               	movf	strlen@cp+1,w,c
  5633  005212  2004               	addwfc	??_strlen+1,w,c
  5634  005214  6E02               	movwf	?_strlen+1,c
  5635  005216  0012               	return	
  5636  005218                     __end_of_strlen:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           indf0	equ	0xFEF
  5643                           fsr0h	equ	0xFEA
  5644                           fsr0l	equ	0xFE9
  5645                           wreg	equ	0xFE8
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           fsr2h	equ	0xFDA
  5650                           fsr2l	equ	0xFD9
  5651                           status	equ	0xFD8
  5652                           
  5653 ;; *************** function _strcpy *****************
  5654 ;; Defined at:
  5655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcpy.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  to              2    0[COMRAM] PTR unsigned char 
  5658 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  5659 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5660 ;;		 -> STR_1(7), 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5663 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  5664 ;; Return value:  Size  Location     Type
  5665 ;;                  2    0[COMRAM] PTR unsigned char 
  5666 ;; Registers used:
  5667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5668 ;; Tracked objects:
  5669 ;;		On entry : 0/0
  5670 ;;		On exit  : 0/0
  5671 ;;		Unchanged: 0/0
  5672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5673 ;;      Params:         4       0       0       0       0       0       0
  5674 ;;      Locals:         2       0       0       0       0       0       0
  5675 ;;      Temps:          0       0       0       0       0       0       0
  5676 ;;      Totals:         6       0       0       0       0       0       0
  5677 ;;Total ram usage:        6 bytes
  5678 ;; Hardware stack levels used:    1
  5679 ;; This function calls:
  5680 ;;		Nothing
  5681 ;; This function is called by:
  5682 ;;		_util_beacon_transmission
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text29
  5687  004F22                     __ptext29:
  5688                           	opt stack 0
  5689  004F22                     _strcpy:
  5690                           	opt stack 28
  5691                           
  5692                           ;incstack = 0
  5693  004F22  C001  F005         	movff	strcpy@to,strcpy@cp
  5694  004F26  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  5695  004F2A  D004               	goto	l3470
  5696  004F2C                     l3468:
  5697  004F2C  4A05               	infsnz	strcpy@cp,f,c
  5698  004F2E  2A06               	incf	strcpy@cp+1,f,c
  5699  004F30  4A03               	infsnz	strcpy@from,f,c
  5700  004F32  2A04               	incf	strcpy@from+1,f,c
  5701  004F34                     l3470:
  5702  004F34  C003  FFF6         	movff	strcpy@from,tblptrl
  5703  004F38  C004  FFF7         	movff	strcpy@from+1,tblptrh
  5704  004F3C                     	if	0	;tblptru may be non-zero
  5705  004F3C                     	endif
  5706  004F3C                     	if	0	;tblptru may be non-zero
  5707  004F3C                     	endif
  5708  004F3C  C005  FFD9         	movff	strcpy@cp,fsr2l
  5709  004F40  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  5710  004F44  0008               	tblrd		*
  5711  004F46  CFF5 FFDF          	movff	tablat,indf2
  5712  004F4A  50DF               	movf	indf2,w,c
  5713  004F4C  B4D8               	btfsc	status,2,c
  5714  004F4E  0012               	return	
  5715  004F50  D7ED               	goto	l3468
  5716  004F52                     __end_of_strcpy:
  5717                           	opt stack 0
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           indf0	equ	0xFEF
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function _strcat *****************
  5734 ;; Defined at:
  5735 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcat.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  to              2    0[COMRAM] PTR unsigned char 
  5738 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  5739 ;;  from            2    2[COMRAM] PTR const unsigned char 
  5740 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  cp              2    4[COMRAM] PTR unsigned char 
  5743 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  2    0[COMRAM] PTR unsigned char 
  5746 ;; Registers used:
  5747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5753 ;;      Params:         4       0       0       0       0       0       0
  5754 ;;      Locals:         2       0       0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0
  5756 ;;      Totals:         6       0       0       0       0       0       0
  5757 ;;Total ram usage:        6 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; This function calls:
  5760 ;;		Nothing
  5761 ;; This function is called by:
  5762 ;;		_util_beacon_transmission
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	text30
  5767  0050F4                     __ptext30:
  5768                           	opt stack 0
  5769  0050F4                     _strcat:
  5770                           	opt stack 28
  5771                           
  5772                           ;incstack = 0
  5773  0050F4  C001  F005         	movff	strcat@to,strcat@cp
  5774  0050F8  C002  F006         	movff	strcat@to+1,strcat@cp+1
  5775  0050FC  D002               	goto	l3770
  5776  0050FE                     l3768:
  5777  0050FE  4A05               	infsnz	strcat@cp,f,c
  5778  005100  2A06               	incf	strcat@cp+1,f,c
  5779  005102                     l3770:
  5780  005102  C005  FFD9         	movff	strcat@cp,fsr2l
  5781  005106  C006  FFDA         	movff	strcat@cp+1,fsr2h
  5782  00510A  50DF               	movf	indf2,w,c
  5783  00510C  B4D8               	btfsc	status,2,c
  5784  00510E  D005               	goto	l3774
  5785  005110  D7F6               	goto	l3768
  5786  005112                     l3772:
  5787  005112  4A05               	infsnz	strcat@cp,f,c
  5788  005114  2A06               	incf	strcat@cp+1,f,c
  5789  005116  4A03               	infsnz	strcat@from,f,c
  5790  005118  2A04               	incf	strcat@from+1,f,c
  5791  00511A                     l3774:
  5792  00511A  C003  FFD9         	movff	strcat@from,fsr2l
  5793  00511E  C004  FFDA         	movff	strcat@from+1,fsr2h
  5794  005122  C005  FFE1         	movff	strcat@cp,fsr1l
  5795  005126  C006  FFE2         	movff	strcat@cp+1,fsr1h
  5796  00512A  CFDF FFE7          	movff	indf2,indf1
  5797  00512E  50E7               	movf	indf1,w,c
  5798  005130  B4D8               	btfsc	status,2,c
  5799  005132  0012               	return	
  5800  005134  D7EE               	goto	l3772
  5801  005136                     __end_of_strcat:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           indf0	equ	0xFEF
  5808                           fsr0h	equ	0xFEA
  5809                           fsr0l	equ	0xFE9
  5810                           wreg	equ	0xFE8
  5811                           indf1	equ	0xFE7
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _sprintf *****************
  5822 ;; Defined at:
  5823 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;  sp              2   63[COMRAM] PTR unsigned char 
  5826 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  5827 ;;  f               2   65[COMRAM] PTR const unsigned char 
  5828 ;;		 -> STR_2(23), 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  val             4   13[BANK0 ] unsigned long 
  5831 ;;  tmpval          4    9[BANK0 ] struct .
  5832 ;;  fval            3   19[BANK0 ] struct .
  5833 ;;  cp              3    0        PTR const unsigned char 
  5834 ;;  prec            2   22[BANK0 ] int 
  5835 ;;  exp             2   17[BANK0 ] int 
  5836 ;;  width           2    7[BANK0 ] int 
  5837 ;;  flag            2    5[BANK0 ] unsigned short 
  5838 ;;  ap              2    3[BANK0 ] PTR void [1]
  5839 ;;		 -> ?_sprintf(2), 
  5840 ;;  len             2    0        unsigned int 
  5841 ;;  c               1   24[BANK0 ] char 
  5842 ;;  d               1    0        unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  2   63[COMRAM] int 
  5845 ;; Registers used:
  5846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5852 ;;      Params:        14       0       0       0       0       0       0
  5853 ;;      Locals:         0      25       0       0       0       0       0
  5854 ;;      Temps:          6       0       0       0       0       0       0
  5855 ;;      Totals:        20      25       0       0       0       0       0
  5856 ;;Total ram usage:       45 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    3
  5859 ;; This function calls:
  5860 ;;		___awdiv
  5861 ;;		___ftadd
  5862 ;;		___ftge
  5863 ;;		___ftmul
  5864 ;;		___ftneg
  5865 ;;		___ftsub
  5866 ;;		___fttol
  5867 ;;		___lldiv
  5868 ;;		___llmod
  5869 ;;		___lltoft
  5870 ;;		___wmul
  5871 ;;		__div_to_l_
  5872 ;;		__tdiv_to_l_
  5873 ;;		_fround
  5874 ;;		_isdigit
  5875 ;;		_scale
  5876 ;; This function is called by:
  5877 ;;		_util_beacon_transmission
  5878 ;; This function uses a non-reentrant model
  5879 ;;
  5880                           
  5881                           	psect	text31
  5882  00740C                     __ptext31:
  5883                           	opt stack 0
  5884  00740C                     _sprintf:
  5885                           	opt stack 25
  5886                           
  5887                           ;doprnt.c: 494: va_list ap;
  5888                           ;doprnt.c: 499: signed char c;
  5889                           ;doprnt.c: 501: int width;
  5890                           ;doprnt.c: 504: int prec;
  5891                           ;doprnt.c: 508: unsigned short flag;
  5892                           ;doprnt.c: 515: char d;
  5893                           ;doprnt.c: 516: double fval;
  5894                           ;doprnt.c: 517: int exp;
  5895                           ;doprnt.c: 523: union {
  5896                           ;doprnt.c: 524: unsigned long vd;
  5897                           ;doprnt.c: 525: double integ;
  5898                           ;doprnt.c: 526: } tmpval;
  5899                           ;doprnt.c: 528: unsigned long val;
  5900                           ;doprnt.c: 529: unsigned len;
  5901                           ;doprnt.c: 530: const char * cp;
  5902                           ;doprnt.c: 533: *ap = __va_start();
  5903                           
  5904                           ;incstack = 0
  5905  00740C  0E44               	movlw	low (?_sprintf+4)
  5906  00740E  0100               	movlb	0	; () banked
  5907  007410  6F63               	movwf	sprintf@ap& (0+255),b
  5908  007412  0E00               	movlw	high (?_sprintf+4)
  5909  007414  0100               	movlb	0	; () banked
  5910  007416  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  5911                           
  5912                           ;doprnt.c: 536: while(c = *f++) {
  5913  007418  EF65  F03F         	goto	l3760
  5914  00741C                     l3474:
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;doprnt.c: 538: if(c != '%')
  5918  00741C  0E25               	movlw	37
  5919  00741E  0100               	movlb	0	; () banked
  5920  007420  1978               	xorwf	sprintf@c& (0+255),w,b
  5921  007422  B4D8               	btfsc	status,2,c
  5922  007424  D00A               	goto	l3480
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;doprnt.c: 540: {
  5926                           ;doprnt.c: 541: ((*sp++ = (c)));
  5927  007426  C040  FFD9         	movff	sprintf@sp,fsr2l
  5928  00742A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  5929  00742E  C078  FFDF         	movff	sprintf@c,indf2
  5930                           
  5931                           ; BSR set to: 0
  5932  007432  4A40               	infsnz	sprintf@sp,f,c
  5933  007434  2A41               	incf	sprintf@sp+1,f,c
  5934                           
  5935                           ;doprnt.c: 542: continue;
  5936  007436  EF65  F03F         	goto	l3760
  5937  00743A                     l3480:
  5938                           
  5939                           ; BSR set to: 0
  5940                           ;doprnt.c: 543: }
  5941                           ;doprnt.c: 546: width = 0;
  5942  00743A  0E00               	movlw	0
  5943  00743C  0100               	movlb	0	; () banked
  5944  00743E  6F68               	movwf	(sprintf@width+1)& (0+255),b
  5945  007440  0E00               	movlw	0
  5946  007442  6F67               	movwf	sprintf@width& (0+255),b
  5947                           
  5948                           ;doprnt.c: 548: flag = 0;
  5949  007444  0E00               	movlw	0
  5950  007446  0100               	movlb	0	; () banked
  5951  007448  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  5952  00744A  0E00               	movlw	0
  5953  00744C  6F65               	movwf	sprintf@flag& (0+255),b
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5957  00744E  C042  FFF6         	movff	sprintf@f,tblptrl
  5958  007452  C043  FFF7         	movff	sprintf@f+1,tblptrh
  5959  007456                     	if	0	;tblptru may be non-zero
  5960  007456                     	endif
  5961  007456                     	if	0	;tblptru may be non-zero
  5962  007456                     	endif
  5963  007456  0008               	tblrd		*
  5964  007458  50F5               	movf	tablat,w,c
  5965  00745A  ECFA  F026         	call	_isdigit
  5966  00745E  A0D8               	btfss	status,0,c
  5967  007460  D035               	goto	l3494
  5968                           
  5969                           ;doprnt.c: 598: width = 0;
  5970  007462  0E00               	movlw	0
  5971  007464  0100               	movlb	0	; () banked
  5972  007466  6F68               	movwf	(sprintf@width+1)& (0+255),b
  5973  007468  0E00               	movlw	0
  5974  00746A  6F67               	movwf	sprintf@width& (0+255),b
  5975  00746C                     l3486:
  5976                           
  5977                           ;doprnt.c: 600: width *= 10;
  5978  00746C  C067  F00F         	movff	sprintf@width,___wmul@multiplier
  5979  007470  C068  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  5980  007474  0E00               	movlw	0
  5981  007476  6E12               	movwf	___wmul@multiplicand+1,c
  5982  007478  0E0A               	movlw	10
  5983  00747A  6E11               	movwf	___wmul@multiplicand,c
  5984  00747C  EC3C  F027         	call	___wmul	;wreg free
  5985  007480  C00F  F067         	movff	?___wmul,sprintf@width
  5986  007484  C010  F068         	movff	?___wmul+1,sprintf@width+1
  5987                           
  5988                           ;doprnt.c: 601: width += *f++ - '0';
  5989  007488  0ED0               	movlw	208
  5990  00748A  6E4E               	movwf	??_sprintf& (0+255),c
  5991  00748C  0EFF               	movlw	255
  5992  00748E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  5993  007490  C042  FFF6         	movff	sprintf@f,tblptrl
  5994  007494  C043  FFF7         	movff	sprintf@f+1,tblptrh
  5995  007498                     	if	0	;tblptru may be non-zero
  5996  007498                     	endif
  5997  007498                     	if	0	;tblptru may be non-zero
  5998  007498                     	endif
  5999  007498  0008               	tblrd		*
  6000  00749A  50F5               	movf	tablat,w,c
  6001  00749C  6E50               	movwf	(??_sprintf+2)& (0+255),c
  6002  00749E  6A51               	clrf	(??_sprintf+3)& (0+255),c
  6003  0074A0  504E               	movf	??_sprintf,w,c
  6004  0074A2  2650               	addwf	??_sprintf+2,f,c
  6005  0074A4  504F               	movf	??_sprintf+1,w,c
  6006  0074A6  2251               	addwfc	??_sprintf+3,f,c
  6007  0074A8  5050               	movf	??_sprintf+2,w,c
  6008  0074AA  0100               	movlb	0	; () banked
  6009  0074AC  2767               	addwf	sprintf@width& (0+255),f,b
  6010  0074AE  5051               	movf	??_sprintf+3,w,c
  6011  0074B0  0100               	movlb	0	; () banked
  6012  0074B2  2368               	addwfc	(sprintf@width+1)& (0+255),f,b
  6013                           
  6014                           ; BSR set to: 0
  6015  0074B4  4A42               	infsnz	sprintf@f,f,c
  6016  0074B6  2A43               	incf	sprintf@f+1,f,c
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6020  0074B8  C042  FFF6         	movff	sprintf@f,tblptrl
  6021  0074BC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  6022  0074C0                     	if	0	;tblptru may be non-zero
  6023  0074C0                     	endif
  6024  0074C0                     	if	0	;tblptru may be non-zero
  6025  0074C0                     	endif
  6026  0074C0  0008               	tblrd		*
  6027  0074C2  50F5               	movf	tablat,w,c
  6028  0074C4  ECFA  F026         	call	_isdigit
  6029  0074C8  B0D8               	btfsc	status,0,c
  6030  0074CA  D7D0               	goto	l3486
  6031  0074CC                     l3494:
  6032                           
  6033                           ;doprnt.c: 608: }
  6034                           ;doprnt.c: 611: if(*f == '.') {
  6035  0074CC  C042  FFF6         	movff	sprintf@f,tblptrl
  6036  0074D0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  6037  0074D4                     	if	0	;tblptru may be non-zero
  6038  0074D4                     	endif
  6039  0074D4                     	if	0	;tblptru may be non-zero
  6040  0074D4                     	endif
  6041  0074D4  0008               	tblrd		*
  6042  0074D6  50F5               	movf	tablat,w,c
  6043  0074D8  0A2E               	xorlw	46
  6044  0074DA  A4D8               	btfss	status,2,c
  6045  0074DC  D032               	goto	l3506
  6046                           
  6047                           ;doprnt.c: 612: flag |= 0x4000;
  6048  0074DE  0100               	movlb	0	; () banked
  6049  0074E0  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  6050                           
  6051                           ;doprnt.c: 613: f++;
  6052  0074E2  4A42               	infsnz	sprintf@f,f,c
  6053  0074E4  2A43               	incf	sprintf@f+1,f,c
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;doprnt.c: 620: {
  6057                           ;doprnt.c: 621: prec = 0;
  6058  0074E6  0E00               	movlw	0
  6059  0074E8  0100               	movlb	0	; () banked
  6060  0074EA  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  6061  0074EC  0E00               	movlw	0
  6062  0074EE  6F76               	movwf	sprintf@prec& (0+255),b
  6063                           
  6064                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6065  0074F0  D01D               	goto	l3504
  6066  0074F2                     l3500:
  6067                           
  6068                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6069  0074F2  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  6070  0074F6  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  6071  0074FA  0E00               	movlw	0
  6072  0074FC  6E12               	movwf	___wmul@multiplicand+1,c
  6073  0074FE  0E0A               	movlw	10
  6074  007500  6E11               	movwf	___wmul@multiplicand,c
  6075  007502  EC3C  F027         	call	___wmul	;wreg free
  6076  007506  C042  FFF6         	movff	sprintf@f,tblptrl
  6077  00750A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  6078  00750E                     	if	0	;tblptru may be non-zero
  6079  00750E                     	endif
  6080  00750E                     	if	0	;tblptru may be non-zero
  6081  00750E                     	endif
  6082  00750E  0008               	tblrd		*
  6083  007510  50F5               	movf	tablat,w,c
  6084  007512  260F               	addwf	?___wmul,f,c
  6085  007514  0E00               	movlw	0
  6086  007516  2210               	addwfc	?___wmul+1,f,c
  6087  007518  0ED0               	movlw	208
  6088  00751A  240F               	addwf	?___wmul,w,c
  6089  00751C  0100               	movlb	0	; () banked
  6090  00751E  6F76               	movwf	sprintf@prec& (0+255),b
  6091  007520  0EFF               	movlw	255
  6092  007522  2010               	addwfc	?___wmul+1,w,c
  6093  007524  0100               	movlb	0	; () banked
  6094  007526  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  6095                           
  6096                           ; BSR set to: 0
  6097  007528  4A42               	infsnz	sprintf@f,f,c
  6098  00752A  2A43               	incf	sprintf@f+1,f,c
  6099  00752C                     l3504:
  6100                           
  6101                           ; BSR set to: 0
  6102  00752C  C042  FFF6         	movff	sprintf@f,tblptrl
  6103  007530  C043  FFF7         	movff	sprintf@f+1,tblptrh
  6104  007534                     	if	0	;tblptru may be non-zero
  6105  007534                     	endif
  6106  007534                     	if	0	;tblptru may be non-zero
  6107  007534                     	endif
  6108  007534  0008               	tblrd		*
  6109  007536  50F5               	movf	tablat,w,c
  6110  007538  ECFA  F026         	call	_isdigit
  6111  00753C  A0D8               	btfss	status,0,c
  6112  00753E  D00C               	goto	l3514
  6113  007540  D7D8               	goto	l3500
  6114  007542                     l3506:
  6115                           
  6116                           ;doprnt.c: 626: prec = 0;
  6117  007542  0E00               	movlw	0
  6118  007544  0100               	movlb	0	; () banked
  6119  007546  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  6120  007548  0E00               	movlw	0
  6121  00754A  6F76               	movwf	sprintf@prec& (0+255),b
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;doprnt.c: 628: flag |= 0x1000;
  6125  00754C  0100               	movlb	0	; () banked
  6126  00754E  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  6127                           
  6128                           ; BSR set to: 0
  6129                           ;doprnt.c: 630: }
  6130                           ;doprnt.c: 635: switch(c = *f++) {
  6131  007550  D003               	goto	l3514
  6132  007552                     l3510:
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;doprnt.c: 663: flag |= 0x400;
  6136  007552  0100               	movlb	0	; () banked
  6137  007554  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  6138                           
  6139                           ; BSR set to: 0
  6140                           ;doprnt.c: 698: case 'i':
  6141                           ;doprnt.c: 699: break;
  6142                           
  6143                           ; BSR set to: 0
  6144                           
  6145                           ;doprnt.c: 697: case 'd':
  6146                           
  6147                           ;doprnt.c: 664: break;
  6148  007556  D019               	goto	l3516
  6149  007558                     l3514:
  6150  007558  C042  FFF6         	movff	sprintf@f,tblptrl
  6151  00755C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  6152  007560  4A42               	infsnz	sprintf@f,f,c
  6153  007562  2A43               	incf	sprintf@f+1,f,c
  6154  007564                     	if	0	;tblptru may be non-zero
  6155  007564                     	endif
  6156  007564                     	if	0	;tblptru may be non-zero
  6157  007564                     	endif
  6158  007564  0008               	tblrd		*
  6159  007566  CFF5 F078          	movff	tablat,sprintf@c
  6160  00756A  0100               	movlb	0	; () banked
  6161  00756C  5178               	movf	sprintf@c& (0+255),w,b
  6162                           
  6163                           ; Switch size 1, requested type "space"
  6164                           ; Number of cases is 4, Range of values is 0 to 105
  6165                           ; switch strategies available:
  6166                           ; Name         Instructions Cycles
  6167                           ; simple_byte           13     7 (average)
  6168                           ;	Chosen strategy is simple_byte
  6169  00756E  0A00               	xorlw	0	; case 0
  6170  007570  B4D8               	btfsc	status,2,c
  6171  007572  EF73  F03F         	goto	l3762
  6172  007576  0A64               	xorlw	100	; case 100
  6173  007578  B4D8               	btfsc	status,2,c
  6174  00757A  D007               	goto	l3516
  6175  00757C  0A02               	xorlw	2	; case 102
  6176  00757E  B4D8               	btfsc	status,2,c
  6177  007580  D7E8               	goto	l3510
  6178  007582  0A0F               	xorlw	15	; case 105
  6179  007584  A4D8               	btfss	status,2,c
  6180  007586  EF65  F03F         	goto	l3760
  6181  00758A                     l3516:
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;doprnt.c: 825: if(flag & (0x700)) {
  6185  00758A  0E07               	movlw	7
  6186  00758C  0100               	movlb	0	; () banked
  6187  00758E  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  6188  007590  B4D8               	btfsc	status,2,c
  6189  007592  D34A               	goto	l3680
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;doprnt.c: 827: if(flag & 0x1000)
  6193  007594  0100               	movlb	0	; () banked
  6194  007596  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  6195  007598  D005               	goto	l3522
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;doprnt.c: 829: prec = 6;
  6199  00759A  0E00               	movlw	0
  6200  00759C  0100               	movlb	0	; () banked
  6201  00759E  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  6202  0075A0  0E06               	movlw	6
  6203  0075A2  6F76               	movwf	sprintf@prec& (0+255),b
  6204  0075A4                     l3522:
  6205                           
  6206                           ; BSR set to: 0
  6207                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6208  0075A4  C063  FFD9         	movff	sprintf@ap,fsr2l
  6209  0075A8  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  6210  0075AC  CFDE F073          	movff	postinc2,sprintf@fval
  6211  0075B0  CFDE F074          	movff	postinc2,sprintf@fval+1
  6212  0075B4  CFDD F075          	movff	postdec2,sprintf@fval+2
  6213                           
  6214                           ; BSR set to: 0
  6215  0075B8  0E03               	movlw	3
  6216  0075BA  0100               	movlb	0	; () banked
  6217  0075BC  2763               	addwf	sprintf@ap& (0+255),f,b
  6218  0075BE  0E00               	movlw	0
  6219  0075C0  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  6220                           
  6221                           ; BSR set to: 0
  6222                           ;doprnt.c: 831: if(fval < 0.0) {
  6223  0075C2  0100               	movlb	0	; () banked
  6224  0075C4  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  6225  0075C6  D011               	goto	l3532
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;doprnt.c: 832: fval = -fval;
  6229  0075C8  C073  F001         	movff	sprintf@fval,___ftneg@f1
  6230  0075CC  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  6231  0075D0  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  6232  0075D4  EC18  F027         	call	___ftneg	;wreg free
  6233  0075D8  C001  F073         	movff	?___ftneg,sprintf@fval
  6234  0075DC  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  6235  0075E0  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  6236                           
  6237                           ;doprnt.c: 833: flag |= 0x03;
  6238  0075E4  0E03               	movlw	3
  6239  0075E6  0100               	movlb	0	; () banked
  6240  0075E8  1365               	iorwf	sprintf@flag& (0+255),f,b
  6241  0075EA                     l3532:
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;doprnt.c: 834: }
  6245                           ;doprnt.c: 835: exp = 0;
  6246  0075EA  0E00               	movlw	0
  6247  0075EC  0100               	movlb	0	; () banked
  6248  0075EE  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  6249  0075F0  0E00               	movlw	0
  6250  0075F2  6F71               	movwf	sprintf@exp& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;doprnt.c: 836: if( fval!=0) {
  6254  0075F4  0100               	movlb	0	; () banked
  6255  0075F6  5173               	movf	sprintf@fval& (0+255),w,b
  6256  0075F8  0100               	movlb	0	; () banked
  6257  0075FA  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6258  0075FC  0100               	movlb	0	; () banked
  6259  0075FE  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  6260  007600  B4D8               	btfsc	status,2,c
  6261  007602  D08B               	goto	l3560
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6265  007604  0E82               	movlw	130
  6266  007606  6E4E               	movwf	??_sprintf& (0+255),c
  6267  007608  0EFF               	movlw	255
  6268  00760A  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  6269  00760C  C073  F050         	movff	sprintf@fval,??_sprintf+2
  6270  007610  C074  F051         	movff	sprintf@fval+1,??_sprintf+3
  6271  007614  C075  F052         	movff	sprintf@fval+2,??_sprintf+4
  6272  007618  C076  F053         	movff	sprintf@fval+3,??_sprintf+5
  6273  00761C  0E10               	movlw	16
  6274  00761E  D005               	goto	u3290
  6275  007620                     u3295:
  6276  007620  90D8               	bcf	status,0,c
  6277  007622  3253               	rrcf	??_sprintf+5,f,c
  6278  007624  3252               	rrcf	??_sprintf+4,f,c
  6279  007626  3251               	rrcf	??_sprintf+3,f,c
  6280  007628  3250               	rrcf	??_sprintf+2,f,c
  6281  00762A                     u3290:
  6282  00762A  2EE8               	decfsz	wreg,f,c
  6283  00762C  D7F9               	goto	u3295
  6284  00762E  5050               	movf	??_sprintf+2,w,c
  6285  007630  244E               	addwf	??_sprintf,w,c
  6286  007632  0100               	movlb	0	; () banked
  6287  007634  6F71               	movwf	sprintf@exp& (0+255),b
  6288  007636  0E00               	movlw	0
  6289  007638  204F               	addwfc	??_sprintf+1,w,c
  6290  00763A  0100               	movlb	0	; () banked
  6291  00763C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;doprnt.c: 838: exp--;
  6295  00763E  0100               	movlb	0	; () banked
  6296  007640  0771               	decf	sprintf@exp& (0+255),f,b
  6297  007642  A0D8               	btfss	status,0,c
  6298  007644  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;doprnt.c: 839: exp *= 3;
  6302  007646  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  6303  00764A  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  6304  00764E  0E00               	movlw	0
  6305  007650  6E12               	movwf	___wmul@multiplicand+1,c
  6306  007652  0E03               	movlw	3
  6307  007654  6E11               	movwf	___wmul@multiplicand,c
  6308  007656  EC3C  F027         	call	___wmul	;wreg free
  6309  00765A  C00F  F071         	movff	?___wmul,sprintf@exp
  6310  00765E  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  6311                           
  6312                           ;doprnt.c: 840: exp /= 10;
  6313  007662  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  6314  007666  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  6315  00766A  0E00               	movlw	0
  6316  00766C  6E0A               	movwf	___awdiv@divisor+1,c
  6317  00766E  0E0A               	movlw	10
  6318  007670  6E09               	movwf	___awdiv@divisor,c
  6319  007672  EC14  F02A         	call	___awdiv	;wreg free
  6320  007676  C007  F071         	movff	?___awdiv,sprintf@exp
  6321  00767A  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  6322                           
  6323                           ;doprnt.c: 841: if(exp < 0)
  6324  00767E  0100               	movlb	0	; () banked
  6325  007680  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  6326  007682  D004               	goto	l3548
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;doprnt.c: 842: exp--;
  6330  007684  0100               	movlb	0	; () banked
  6331  007686  0771               	decf	sprintf@exp& (0+255),f,b
  6332  007688  A0D8               	btfss	status,0,c
  6333  00768A  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  6334  00768C                     l3548:
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6338  00768C  0100               	movlb	0	; () banked
  6339  00768E  5171               	movf	sprintf@exp& (0+255),w,b
  6340  007690  0800               	sublw	0
  6341  007692  EC76  F034         	call	_scale
  6342  007696  C024  F069         	movff	?_scale,sprintf@tmpval
  6343  00769A  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  6344  00769E  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  6345                           
  6346                           ;doprnt.c: 847: tmpval.integ *= fval;
  6347  0076A2  C069  F015         	movff	sprintf@tmpval,___ftmul@f1
  6348  0076A6  C06A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  6349  0076AA  C06B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  6350  0076AE  C073  F018         	movff	sprintf@fval,___ftmul@f2
  6351  0076B2  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  6352  0076B6  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  6353  0076BA  ECDE  F02D         	call	___ftmul	;wreg free
  6354  0076BE  C015  F069         	movff	?___ftmul,sprintf@tmpval
  6355  0076C2  C016  F06A         	movff	?___ftmul+1,sprintf@tmpval+1
  6356  0076C6  C017  F06B         	movff	?___ftmul+2,sprintf@tmpval+2
  6357                           
  6358                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6359  0076CA  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  6360  0076CE  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  6361  0076D2  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  6362  0076D6  0E00               	movlw	0
  6363  0076D8  6E04               	movwf	___ftge@ff2,c
  6364  0076DA  0E80               	movlw	128
  6365  0076DC  6E05               	movwf	___ftge@ff2+1,c
  6366  0076DE  0E3F               	movlw	63
  6367  0076E0  6E06               	movwf	___ftge@ff2+2,c
  6368  0076E2  ECDC  F02A         	call	___ftge	;wreg free
  6369  0076E6  B0D8               	btfsc	status,0,c
  6370  0076E8  D005               	goto	l3556
  6371                           
  6372                           ;doprnt.c: 849: exp--;
  6373  0076EA  0100               	movlb	0	; () banked
  6374  0076EC  0771               	decf	sprintf@exp& (0+255),f,b
  6375  0076EE  A0D8               	btfss	status,0,c
  6376  0076F0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  6377  0076F2  D013               	goto	l3560
  6378  0076F4                     l3556:
  6379                           
  6380                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6381  0076F4  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  6382  0076F8  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  6383  0076FC  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  6384  007700  0E00               	movlw	0
  6385  007702  6E04               	movwf	___ftge@ff2,c
  6386  007704  0E20               	movlw	32
  6387  007706  6E05               	movwf	___ftge@ff2+1,c
  6388  007708  0E41               	movlw	65
  6389  00770A  6E06               	movwf	___ftge@ff2+2,c
  6390  00770C  ECDC  F02A         	call	___ftge	;wreg free
  6391  007710  A0D8               	btfss	status,0,c
  6392  007712  D003               	goto	l3560
  6393                           
  6394                           ;doprnt.c: 851: exp++;
  6395  007714  0100               	movlb	0	; () banked
  6396  007716  4B71               	infsnz	sprintf@exp& (0+255),f,b
  6397  007718  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  6398  00771A                     l3560:
  6399                           
  6400                           ;doprnt.c: 852: }
  6401                           ;doprnt.c: 1112: if(prec <= 12)
  6402  00771A  0100               	movlb	0	; () banked
  6403  00771C  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  6404  00771E  D008               	goto	l3562
  6405  007720  0100               	movlb	0	; () banked
  6406  007722  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  6407  007724  E11D               	bnz	l3564
  6408  007726  0E0D               	movlw	13
  6409  007728  0100               	movlb	0	; () banked
  6410  00772A  5D76               	subwf	sprintf@prec& (0+255),w,b
  6411  00772C  B0D8               	btfsc	status,0,c
  6412  00772E  D018               	goto	l3564
  6413  007730                     l3562:
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;doprnt.c: 1113: fval += fround(prec);
  6417  007730  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  6418  007734  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  6419  007738  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  6420  00773C  0100               	movlb	0	; () banked
  6421  00773E  5176               	movf	sprintf@prec& (0+255),w,b
  6422  007740  ECAD  F031         	call	_fround
  6423  007744  C024  F031         	movff	?_fround,___ftadd@f2
  6424  007748  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  6425  00774C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  6426  007750  ECD7  F030         	call	___ftadd	;wreg free
  6427  007754  C02E  F073         	movff	?___ftadd,sprintf@fval
  6428  007758  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  6429  00775C  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  6430  007760                     l3564:
  6431                           
  6432                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6433  007760  0100               	movlb	0	; () banked
  6434  007762  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  6435  007764  D008               	goto	l3566
  6436  007766  0100               	movlb	0	; () banked
  6437  007768  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  6438  00776A  E126               	bnz	l3572
  6439  00776C  0E0A               	movlw	10
  6440  00776E  0100               	movlb	0	; () banked
  6441  007770  5D71               	subwf	sprintf@exp& (0+255),w,b
  6442  007772  B0D8               	btfsc	status,0,c
  6443  007774  D021               	goto	l3572
  6444  007776                     l3566:
  6445                           
  6446                           ; BSR set to: 0
  6447  007776  0100               	movlb	0	; () banked
  6448  007778  5173               	movf	sprintf@fval& (0+255),w,b
  6449  00777A  0100               	movlb	0	; () banked
  6450  00777C  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  6451  00777E  0100               	movlb	0	; () banked
  6452  007780  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  6453  007782  B4D8               	btfsc	status,2,c
  6454  007784  D05B               	goto	l3586
  6455                           
  6456                           ; BSR set to: 0
  6457  007786  C073  F02B         	movff	sprintf@fval,___fttol@f1
  6458  00778A  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  6459  00778E  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  6460  007792  EC64  F02D         	call	___fttol	;wreg free
  6461  007796  502B               	movf	?___fttol,w,c
  6462  007798  102C               	iorwf	?___fttol+1,w,c
  6463  00779A  102D               	iorwf	?___fttol+2,w,c
  6464  00779C  102E               	iorwf	?___fttol+3,w,c
  6465  00779E  A4D8               	btfss	status,2,c
  6466  0077A0  D04D               	goto	l3586
  6467  0077A2  0100               	movlb	0	; () banked
  6468  0077A4  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  6469  0077A6  D04A               	goto	l3586
  6470  0077A8  0100               	movlb	0	; () banked
  6471  0077AA  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  6472  0077AC  E105               	bnz	l3572
  6473  0077AE  0E02               	movlw	2
  6474  0077B0  0100               	movlb	0	; () banked
  6475  0077B2  5D71               	subwf	sprintf@exp& (0+255),w,b
  6476  0077B4  A0D8               	btfss	status,0,c
  6477  0077B6  D042               	goto	l3586
  6478  0077B8                     l3572:
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6482  0077B8  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  6483  0077BC  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  6484  0077C0  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  6485  0077C4  0E70               	movlw	112
  6486  0077C6  6E04               	movwf	___ftge@ff2,c
  6487  0077C8  0E89               	movlw	137
  6488  0077CA  6E05               	movwf	___ftge@ff2+1,c
  6489  0077CC  0E40               	movlw	64
  6490  0077CE  6E06               	movwf	___ftge@ff2+2,c
  6491  0077D0  ECDC  F02A         	call	___ftge	;wreg free
  6492  0077D4  B0D8               	btfsc	status,0,c
  6493  0077D6  D003               	goto	l3576
  6494                           
  6495                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6496  0077D8  0100               	movlb	0	; () banked
  6497  0077DA  0EF7               	movlw	247
  6498  0077DC  D002               	goto	L4
  6499  0077DE                     l3576:
  6500                           
  6501                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6502  0077DE  0100               	movlb	0	; () banked
  6503  0077E0  0EF8               	movlw	248
  6504  0077E2                     L4:
  6505  0077E2  2771               	addwf	sprintf@exp& (0+255),f,b
  6506  0077E4  0EFF               	movlw	255
  6507  0077E6  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;doprnt.c: 1124: }
  6511                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6512                           
  6513                           ; BSR set to: 0
  6514  0077E8  0100               	movlb	0	; () banked
  6515  0077EA  5171               	movf	sprintf@exp& (0+255),w,b
  6516  0077EC  EC76  F034         	call	_scale
  6517  0077F0  C024  F069         	movff	?_scale,sprintf@tmpval
  6518  0077F4  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  6519  0077F8  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  6520                           
  6521                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6522  0077FC  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  6523  007800  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  6524  007804  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  6525  007808  C069  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  6526  00780C  C06A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  6527  007810  C06B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  6528  007814  ECEC  F02E         	call	__tdiv_to_l_	;wreg free
  6529  007818  C001  F06D         	movff	?__tdiv_to_l_,sprintf@val
  6530  00781C  C002  F06E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  6531  007820  C003  F06F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  6532  007824  C004  F070         	movff	?__tdiv_to_l_+3,sprintf@val+3
  6533                           
  6534                           ;doprnt.c: 1129: fval = 0.0;
  6535  007828  0E00               	movlw	0
  6536  00782A  0100               	movlb	0	; () banked
  6537  00782C  6F73               	movwf	sprintf@fval& (0+255),b
  6538  00782E  0E00               	movlw	0
  6539  007830  0100               	movlb	0	; () banked
  6540  007832  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  6541  007834  0E00               	movlw	0
  6542  007836  0100               	movlb	0	; () banked
  6543  007838  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  6544                           
  6545                           ;doprnt.c: 1130: } else {
  6546  00783A  D033               	goto	l3590
  6547  00783C                     l3586:
  6548                           
  6549                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6550  00783C  C073  F02B         	movff	sprintf@fval,___fttol@f1
  6551  007840  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  6552  007844  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  6553  007848  EC64  F02D         	call	___fttol	;wreg free
  6554  00784C  C02B  F06D         	movff	?___fttol,sprintf@val
  6555  007850  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  6556  007854  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  6557  007858  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  6558                           
  6559                           ;doprnt.c: 1132: fval -= (double)val;
  6560  00785C  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  6561  007860  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  6562  007864  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  6563  007868  C06D  F009         	movff	sprintf@val,___lltoft@c
  6564  00786C  C06E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  6565  007870  C06F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  6566  007874  C070  F00C         	movff	sprintf@val+3,___lltoft@c+3
  6567  007878  EC0C  F029         	call	___lltoft	;wreg free
  6568  00787C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  6569  007880  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  6570  007884  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  6571  007888  EC5A  F028         	call	___ftsub	;wreg free
  6572  00788C  C03A  F073         	movff	?___ftsub,sprintf@fval
  6573  007890  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  6574  007894  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  6575                           
  6576                           ;doprnt.c: 1133: exp = 0;
  6577  007898  0E00               	movlw	0
  6578  00789A  0100               	movlb	0	; () banked
  6579  00789C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  6580  00789E  0E00               	movlw	0
  6581  0078A0  6F71               	movwf	sprintf@exp& (0+255),b
  6582  0078A2                     l3590:
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;doprnt.c: 1134: }
  6586                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6587  0078A2  0E01               	movlw	1
  6588  0078A4  0100               	movlb	0	; () banked
  6589  0078A6  6F78               	movwf	sprintf@c& (0+255),b
  6590  0078A8                     l3592:
  6591                           
  6592                           ; BSR set to: 0
  6593  0078A8  0E0A               	movlw	10
  6594  0078AA  0100               	movlb	0	; () banked
  6595  0078AC  1978               	xorwf	sprintf@c& (0+255),w,b
  6596  0078AE  B4D8               	btfsc	status,2,c
  6597  0078B0  D01E               	goto	l3604
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;doprnt.c: 1137: if(val < dpowers[c])
  6601                           
  6602                           ; BSR set to: 0
  6603                           
  6604                           ; BSR set to: 0
  6605  0078B2  0100               	movlb	0	; () banked
  6606  0078B4  5178               	movf	sprintf@c& (0+255),w,b
  6607  0078B6  0D04               	mullw	4
  6608  0078B8  0EF5               	movlw	low _dpowers
  6609  0078BA  24F3               	addwf	prodl,w,c
  6610  0078BC  6EF6               	movwf	tblptrl,c
  6611  0078BE  0E7E               	movlw	high _dpowers
  6612  0078C0  20F4               	addwfc	prodh,w,c
  6613  0078C2  6EF7               	movwf	tblptrh,c
  6614  0078C4                     	if	0	;There are less than 3 active tblptr bytes
  6615  0078C4                     	endif
  6616  0078C4  0009               	tblrd		*+
  6617  0078C6  50F5               	movf	tablat,w,c
  6618  0078C8  0100               	movlb	0	; () banked
  6619  0078CA  5D6D               	subwf	sprintf@val& (0+255),w,b
  6620  0078CC  0009               	tblrd		*+
  6621  0078CE  50F5               	movf	tablat,w,c
  6622  0078D0  0100               	movlb	0	; () banked
  6623  0078D2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  6624  0078D4  0009               	tblrd		*+
  6625  0078D6  50F5               	movf	tablat,w,c
  6626  0078D8  0100               	movlb	0	; () banked
  6627  0078DA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  6628  0078DC  0009               	tblrd		*+
  6629  0078DE  50F5               	movf	tablat,w,c
  6630  0078E0  0100               	movlb	0	; () banked
  6631  0078E2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  6632  0078E4  A0D8               	btfss	status,0,c
  6633  0078E6  D003               	goto	l3604
  6634                           
  6635                           ; BSR set to: 0
  6636                           
  6637                           ; BSR set to: 0
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;doprnt.c: 1138: break;
  6641  0078E8  0100               	movlb	0	; () banked
  6642  0078EA  2B78               	incf	sprintf@c& (0+255),f,b
  6643  0078EC  D7DD               	goto	l3592
  6644  0078EE                     l3604:
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;doprnt.c: 1142: width -= prec + c + exp;
  6648  0078EE  C078  F04E         	movff	sprintf@c,??_sprintf
  6649  0078F2  6A4F               	clrf	(??_sprintf+1)& (0+255),c
  6650  0078F4  BE4E               	btfsc	??_sprintf& (0+255),7,c
  6651  0078F6  064F               	decf	(??_sprintf+1)& (0+255),f,c
  6652  0078F8  0100               	movlb	0	; () banked
  6653  0078FA  5176               	movf	sprintf@prec& (0+255),w,b
  6654  0078FC  264E               	addwf	??_sprintf,f,c
  6655  0078FE  0100               	movlb	0	; () banked
  6656  007900  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  6657  007902  224F               	addwfc	??_sprintf+1,f,c
  6658  007904  0100               	movlb	0	; () banked
  6659  007906  5171               	movf	sprintf@exp& (0+255),w,b
  6660  007908  264E               	addwf	??_sprintf,f,c
  6661  00790A  0100               	movlb	0	; () banked
  6662  00790C  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  6663  00790E  224F               	addwfc	??_sprintf+1,f,c
  6664  007910  504E               	movf	??_sprintf,w,c
  6665  007912  0100               	movlb	0	; () banked
  6666  007914  5F67               	subwf	sprintf@width& (0+255),f,b
  6667  007916  504F               	movf	??_sprintf+1,w,c
  6668  007918  0100               	movlb	0	; () banked
  6669  00791A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  6670                           
  6671                           ;doprnt.c: 1143: if(
  6672                           ;doprnt.c: 1147: prec)
  6673  00791C  0100               	movlb	0	; () banked
  6674  00791E  5176               	movf	sprintf@prec& (0+255),w,b
  6675  007920  0100               	movlb	0	; () banked
  6676  007922  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  6677  007924  B4D8               	btfsc	status,2,c
  6678  007926  D004               	goto	l3608
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;doprnt.c: 1148: width--;
  6682  007928  0100               	movlb	0	; () banked
  6683  00792A  0767               	decf	sprintf@width& (0+255),f,b
  6684  00792C  A0D8               	btfss	status,0,c
  6685  00792E  0768               	decf	(sprintf@width+1)& (0+255),f,b
  6686  007930                     l3608:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;doprnt.c: 1149: if(flag & 0x03)
  6690  007930  0E03               	movlw	3
  6691  007932  0100               	movlb	0	; () banked
  6692  007934  1565               	andwf	sprintf@flag& (0+255),w,b
  6693  007936  6E4E               	movwf	??_sprintf& (0+255),c
  6694  007938  0E00               	movlw	0
  6695  00793A  0100               	movlb	0	; () banked
  6696  00793C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  6697  00793E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  6698  007940  504E               	movf	??_sprintf,w,c
  6699  007942  104F               	iorwf	??_sprintf+1,w,c
  6700  007944  B4D8               	btfsc	status,2,c
  6701  007946  D00D               	goto	l3618
  6702  007948  D008               	goto	l3616
  6703  00794A                     l3612:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  6707  00794A  C040  FFD9         	movff	sprintf@sp,fsr2l
  6708  00794E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  6709  007952  0E20               	movlw	32
  6710  007954  6EDF               	movwf	indf2,c
  6711                           
  6712                           ; BSR set to: 0
  6713  007956  4A40               	infsnz	sprintf@sp,f,c
  6714  007958  2A41               	incf	sprintf@sp+1,f,c
  6715  00795A                     l3616:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;doprnt.c: 1182: width--;
  6719  00795A  0100               	movlb	0	; () banked
  6720  00795C  0767               	decf	sprintf@width& (0+255),f,b
  6721  00795E  A0D8               	btfss	status,0,c
  6722  007960  0768               	decf	(sprintf@width+1)& (0+255),f,b
  6723  007962                     l3618:
  6724                           
  6725                           ; BSR set to: 0
  6726  007962  0100               	movlb	0	; () banked
  6727  007964  BF68               	btfsc	(sprintf@width+1)& (0+255),7,b
  6728  007966  D007               	goto	l3620
  6729  007968  0100               	movlb	0	; () banked
  6730  00796A  5168               	movf	(sprintf@width+1)& (0+255),w,b
  6731  00796C  E1EE               	bnz	l3612
  6732  00796E  0100               	movlb	0	; () banked
  6733  007970  0567               	decf	sprintf@width& (0+255),w,b
  6734  007972  B0D8               	btfsc	status,0,c
  6735  007974  D7EA               	goto	l3612
  6736  007976                     l3620:
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;doprnt.c: 1183: }
  6740                           ;doprnt.c: 1188: if(flag & 0x03)
  6741  007976  0E03               	movlw	3
  6742  007978  0100               	movlb	0	; () banked
  6743  00797A  1565               	andwf	sprintf@flag& (0+255),w,b
  6744  00797C  6E4E               	movwf	??_sprintf& (0+255),c
  6745  00797E  0E00               	movlw	0
  6746  007980  0100               	movlb	0	; () banked
  6747  007982  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  6748  007984  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  6749  007986  504E               	movf	??_sprintf,w,c
  6750  007988  104F               	iorwf	??_sprintf+1,w,c
  6751  00798A  B4D8               	btfsc	status,2,c
  6752  00798C  D053               	goto	l3634
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  6756  00798E  C040  FFD9         	movff	sprintf@sp,fsr2l
  6757  007992  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  6758  007996  0E2D               	movlw	45
  6759  007998  D04B               	goto	L5
  6760  00799A                     l3624:
  6761                           
  6762                           ; BSR set to: 0
  6763  00799A  4A40               	infsnz	sprintf@sp,f,c
  6764  00799C  2A41               	incf	sprintf@sp+1,f,c
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;doprnt.c: 1195: }
  6768                           ;doprnt.c: 1196: while(c--) {
  6769  00799E  D04A               	goto	l3634
  6770  0079A0                     l3626:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;doprnt.c: 1200: {
  6774                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6775  0079A0  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  6776  0079A4  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  6777  0079A8  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  6778  0079AC  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  6779  0079B0  0100               	movlb	0	; () banked
  6780  0079B2  5178               	movf	sprintf@c& (0+255),w,b
  6781  0079B4  0D04               	mullw	4
  6782  0079B6  0EF5               	movlw	low _dpowers
  6783  0079B8  24F3               	addwf	prodl,w,c
  6784  0079BA  6EF6               	movwf	tblptrl,c
  6785  0079BC  0E7E               	movlw	high _dpowers
  6786  0079BE  20F4               	addwfc	prodh,w,c
  6787  0079C0  6EF7               	movwf	tblptrh,c
  6788  0079C2                     	if	0	;There are less than 3 active tblptr bytes
  6789  0079C2                     	endif
  6790  0079C2  0009               	tblrd		*+
  6791  0079C4  CFF5 F005          	movff	tablat,___lldiv@divisor
  6792  0079C8  0009               	tblrd		*+
  6793  0079CA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6794  0079CE  0009               	tblrd		*+
  6795  0079D0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6796  0079D4  000A               	tblrd		*-
  6797  0079D6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6798  0079DA  ECD3  F029         	call	___lldiv	;wreg free
  6799  0079DE  C001  F069         	movff	?___lldiv,sprintf@tmpval
  6800  0079E2  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  6801  0079E6  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  6802  0079EA  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  6803                           
  6804                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6805  0079EE  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  6806  0079F2  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  6807  0079F6  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  6808  0079FA  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  6809  0079FE  0E0A               	movlw	10
  6810  007A00  6E12               	movwf	___llmod@divisor,c
  6811  007A02  0E00               	movlw	0
  6812  007A04  6E13               	movwf	___llmod@divisor+1,c
  6813  007A06  0E00               	movlw	0
  6814  007A08  6E14               	movwf	___llmod@divisor+2,c
  6815  007A0A  0E00               	movlw	0
  6816  007A0C  6E15               	movwf	___llmod@divisor+3,c
  6817  007A0E  EC68  F029         	call	___llmod	;wreg free
  6818  007A12  C00E  F069         	movff	?___llmod,sprintf@tmpval
  6819  007A16  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  6820  007A1A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  6821  007A1E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  6822                           
  6823                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  6824  007A22  0100               	movlb	0	; () banked
  6825  007A24  5169               	movf	sprintf@tmpval& (0+255),w,b
  6826  007A26  0F30               	addlw	48
  6827  007A28  C040  FFD9         	movff	sprintf@sp,fsr2l
  6828  007A2C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  6829  007A30                     L5:
  6830  007A30  6EDF               	movwf	indf2,c
  6831  007A32  D7B3               	goto	l3624
  6832  007A34                     l3634:
  6833                           
  6834                           ; BSR set to: 0
  6835  007A34  0100               	movlb	0	; () banked
  6836  007A36  0778               	decf	sprintf@c& (0+255),f,b
  6837  007A38  0100               	movlb	0	; () banked
  6838  007A3A  2978               	incf	sprintf@c& (0+255),w,b
  6839  007A3C  B4D8               	btfsc	status,2,c
  6840  007A3E  D00D               	goto	l3642
  6841  007A40  D7AF               	goto	l3626
  6842  007A42                     l3636:
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  6846  007A42  C040  FFD9         	movff	sprintf@sp,fsr2l
  6847  007A46  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  6848  007A4A  0E30               	movlw	48
  6849  007A4C  6EDF               	movwf	indf2,c
  6850                           
  6851                           ; BSR set to: 0
  6852  007A4E  4A40               	infsnz	sprintf@sp,f,c
  6853  007A50  2A41               	incf	sprintf@sp+1,f,c
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;doprnt.c: 1209: exp--;
  6857  007A52  0100               	movlb	0	; () banked
  6858  007A54  0771               	decf	sprintf@exp& (0+255),f,b
  6859  007A56  A0D8               	btfss	status,0,c
  6860  007A58  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  6861  007A5A                     l3642:
  6862                           
  6863                           ; BSR set to: 0
  6864  007A5A  0100               	movlb	0	; () banked
  6865  007A5C  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  6866  007A5E  D007               	goto	l3644
  6867  007A60  0100               	movlb	0	; () banked
  6868  007A62  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  6869  007A64  E1EE               	bnz	l3636
  6870  007A66  0100               	movlb	0	; () banked
  6871  007A68  0571               	decf	sprintf@exp& (0+255),w,b
  6872  007A6A  B0D8               	btfsc	status,0,c
  6873  007A6C  D7EA               	goto	l3636
  6874  007A6E                     l3644:
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;doprnt.c: 1210: }
  6878                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6879  007A6E  0100               	movlb	0	; () banked
  6880  007A70  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  6881  007A72  D00C               	goto	l389
  6882  007A74  0100               	movlb	0	; () banked
  6883  007A76  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  6884  007A78  E105               	bnz	u3480
  6885  007A7A  0E09               	movlw	9
  6886  007A7C  0100               	movlb	0	; () banked
  6887  007A7E  5D76               	subwf	sprintf@prec& (0+255),w,b
  6888  007A80  A0D8               	btfss	status,0,c
  6889  007A82  D004               	goto	l389
  6890  007A84                     u3480:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6894  007A84  0E08               	movlw	8
  6895  007A86  0100               	movlb	0	; () banked
  6896  007A88  6F78               	movwf	sprintf@c& (0+255),b
  6897  007A8A  D002               	goto	l3648
  6898  007A8C                     l389:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;doprnt.c: 1213: else
  6902                           ;doprnt.c: 1214: c = prec;
  6903  007A8C  C076  F078         	movff	sprintf@prec,sprintf@c
  6904  007A90                     l3648:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;doprnt.c: 1215: prec -= c;
  6908  007A90  0100               	movlb	0	; () banked
  6909  007A92  5178               	movf	sprintf@c& (0+255),w,b
  6910  007A94  0100               	movlb	0	; () banked
  6911  007A96  5F76               	subwf	sprintf@prec& (0+255),f,b
  6912  007A98  0E00               	movlw	0
  6913  007A9A  0100               	movlb	0	; () banked
  6914  007A9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  6915  007A9E  0EFF               	movlw	255
  6916  007AA0  0100               	movlb	0	; () banked
  6917  007AA2  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;doprnt.c: 1219: if(c)
  6921  007AA4  0100               	movlb	0	; () banked
  6922  007AA6  5178               	movf	sprintf@c& (0+255),w,b
  6923  007AA8  0100               	movlb	0	; () banked
  6924  007AAA  B4D8               	btfsc	status,2,c
  6925  007AAC  D008               	goto	l3656
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  6929  007AAE  C040  FFD9         	movff	sprintf@sp,fsr2l
  6930  007AB2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  6931  007AB6  0E2E               	movlw	46
  6932  007AB8  6EDF               	movwf	indf2,c
  6933                           
  6934                           ; BSR set to: 0
  6935  007ABA  4A40               	infsnz	sprintf@sp,f,c
  6936  007ABC  2A41               	incf	sprintf@sp+1,f,c
  6937  007ABE                     l3656:
  6938                           
  6939                           ; BSR set to: 0
  6940                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6941  007ABE  0100               	movlb	0	; () banked
  6942  007AC0  5178               	movf	sprintf@c& (0+255),w,b
  6943  007AC2  EC76  F034         	call	_scale
  6944  007AC6  C024  F060         	movff	?_scale,_sprintf$1794
  6945  007ACA  C025  F061         	movff	?_scale+1,_sprintf$1794+1
  6946  007ACE  C026  F062         	movff	?_scale+2,_sprintf$1794+2
  6947                           
  6948                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6949  007AD2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  6950  007AD6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  6951  007ADA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  6952  007ADE  C060  F015         	movff	_sprintf$1794,___ftmul@f1
  6953  007AE2  C061  F016         	movff	_sprintf$1794+1,___ftmul@f1+1
  6954  007AE6  C062  F017         	movff	_sprintf$1794+2,___ftmul@f1+2
  6955  007AEA  ECDE  F02D         	call	___ftmul	;wreg free
  6956  007AEE  C015  F02B         	movff	?___ftmul,___fttol@f1
  6957  007AF2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6958  007AF6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6959  007AFA  EC64  F02D         	call	___fttol	;wreg free
  6960  007AFE  C02B  F06D         	movff	?___fttol,sprintf@val
  6961  007B02  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  6962  007B06  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  6963  007B0A  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  6964                           
  6965                           ;doprnt.c: 1228: while(c--) {
  6966  007B0E  D072               	goto	l3670
  6967  007B10                     l3660:
  6968                           
  6969                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6970  007B10  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  6971  007B14  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  6972  007B18  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  6973  007B1C  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  6974  007B20  0100               	movlb	0	; () banked
  6975  007B22  5178               	movf	sprintf@c& (0+255),w,b
  6976  007B24  0D04               	mullw	4
  6977  007B26  0EF5               	movlw	low _dpowers
  6978  007B28  24F3               	addwf	prodl,w,c
  6979  007B2A  6EF6               	movwf	tblptrl,c
  6980  007B2C  0E7E               	movlw	high _dpowers
  6981  007B2E  20F4               	addwfc	prodh,w,c
  6982  007B30  6EF7               	movwf	tblptrh,c
  6983  007B32                     	if	0	;There are less than 3 active tblptr bytes
  6984  007B32                     	endif
  6985  007B32  0009               	tblrd		*+
  6986  007B34  CFF5 F005          	movff	tablat,___lldiv@divisor
  6987  007B38  0009               	tblrd		*+
  6988  007B3A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  6989  007B3E  0009               	tblrd		*+
  6990  007B40  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  6991  007B44  000A               	tblrd		*-
  6992  007B46  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  6993  007B4A  ECD3  F029         	call	___lldiv	;wreg free
  6994  007B4E  C001  F069         	movff	?___lldiv,sprintf@tmpval
  6995  007B52  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  6996  007B56  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  6997  007B5A  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  6998                           
  6999                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7000  007B5E  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  7001  007B62  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  7002  007B66  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  7003  007B6A  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  7004  007B6E  0E0A               	movlw	10
  7005  007B70  6E12               	movwf	___llmod@divisor,c
  7006  007B72  0E00               	movlw	0
  7007  007B74  6E13               	movwf	___llmod@divisor+1,c
  7008  007B76  0E00               	movlw	0
  7009  007B78  6E14               	movwf	___llmod@divisor+2,c
  7010  007B7A  0E00               	movlw	0
  7011  007B7C  6E15               	movwf	___llmod@divisor+3,c
  7012  007B7E  EC68  F029         	call	___llmod	;wreg free
  7013  007B82  C00E  F069         	movff	?___llmod,sprintf@tmpval
  7014  007B86  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  7015  007B8A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  7016  007B8E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  7017                           
  7018                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  7019  007B92  0100               	movlb	0	; () banked
  7020  007B94  5169               	movf	sprintf@tmpval& (0+255),w,b
  7021  007B96  0F30               	addlw	48
  7022  007B98  C040  FFD9         	movff	sprintf@sp,fsr2l
  7023  007B9C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7024  007BA0  6EDF               	movwf	indf2,c
  7025                           
  7026                           ; BSR set to: 0
  7027  007BA2  4A40               	infsnz	sprintf@sp,f,c
  7028  007BA4  2A41               	incf	sprintf@sp+1,f,c
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;doprnt.c: 1232: val %= dpowers[c];
  7032  007BA6  C06D  F00E         	movff	sprintf@val,___llmod@dividend
  7033  007BAA  C06E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  7034  007BAE  C06F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  7035  007BB2  C070  F011         	movff	sprintf@val+3,___llmod@dividend+3
  7036  007BB6  0100               	movlb	0	; () banked
  7037  007BB8  5178               	movf	sprintf@c& (0+255),w,b
  7038  007BBA  0D04               	mullw	4
  7039  007BBC  0EF5               	movlw	low _dpowers
  7040  007BBE  24F3               	addwf	prodl,w,c
  7041  007BC0  6EF6               	movwf	tblptrl,c
  7042  007BC2  0E7E               	movlw	high _dpowers
  7043  007BC4  20F4               	addwfc	prodh,w,c
  7044  007BC6  6EF7               	movwf	tblptrh,c
  7045  007BC8                     	if	0	;There are less than 3 active tblptr bytes
  7046  007BC8                     	endif
  7047  007BC8  0009               	tblrd		*+
  7048  007BCA  CFF5 F012          	movff	tablat,___llmod@divisor
  7049  007BCE  0009               	tblrd		*+
  7050  007BD0  CFF5 F013          	movff	tablat,___llmod@divisor+1
  7051  007BD4  0009               	tblrd		*+
  7052  007BD6  CFF5 F014          	movff	tablat,___llmod@divisor+2
  7053  007BDA  000A               	tblrd		*-
  7054  007BDC  CFF5 F015          	movff	tablat,___llmod@divisor+3
  7055  007BE0  EC68  F029         	call	___llmod	;wreg free
  7056  007BE4  C00E  F06D         	movff	?___llmod,sprintf@val
  7057  007BE8  C00F  F06E         	movff	?___llmod+1,sprintf@val+1
  7058  007BEC  C010  F06F         	movff	?___llmod+2,sprintf@val+2
  7059  007BF0  C011  F070         	movff	?___llmod+3,sprintf@val+3
  7060  007BF4                     l3670:
  7061  007BF4  0100               	movlb	0	; () banked
  7062  007BF6  0778               	decf	sprintf@c& (0+255),f,b
  7063  007BF8  0100               	movlb	0	; () banked
  7064  007BFA  2978               	incf	sprintf@c& (0+255),w,b
  7065  007BFC  B4D8               	btfsc	status,2,c
  7066  007BFE  D00D               	goto	l3678
  7067  007C00  D787               	goto	l3660
  7068  007C02                     l3672:
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  7072  007C02  C040  FFD9         	movff	sprintf@sp,fsr2l
  7073  007C06  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7074  007C0A  0E30               	movlw	48
  7075  007C0C  6EDF               	movwf	indf2,c
  7076                           
  7077                           ; BSR set to: 0
  7078  007C0E  4A40               	infsnz	sprintf@sp,f,c
  7079  007C10  2A41               	incf	sprintf@sp+1,f,c
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;doprnt.c: 1237: prec--;
  7083  007C12  0100               	movlb	0	; () banked
  7084  007C14  0776               	decf	sprintf@prec& (0+255),f,b
  7085  007C16  A0D8               	btfss	status,0,c
  7086  007C18  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  7087  007C1A                     l3678:
  7088                           
  7089                           ; BSR set to: 0
  7090  007C1A  0100               	movlb	0	; () banked
  7091  007C1C  5176               	movf	sprintf@prec& (0+255),w,b
  7092  007C1E  0100               	movlb	0	; () banked
  7093  007C20  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  7094  007C22  B4D8               	btfsc	status,2,c
  7095  007C24  D152               	goto	l3760
  7096  007C26  D7ED               	goto	l3672
  7097  007C28                     l3680:
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;doprnt.c: 1246: }
  7101                           ;doprnt.c: 1253: {
  7102                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7103  007C28  C063  FFD9         	movff	sprintf@ap,fsr2l
  7104  007C2C  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  7105  007C30  CFDE F06D          	movff	postinc2,sprintf@val
  7106  007C34  CFDD F06E          	movff	postdec2,sprintf@val+1
  7107  007C38  0100               	movlb	0	; () banked
  7108  007C3A  0E00               	movlw	0
  7109  007C3C  BF6E               	btfsc	(sprintf@val+1)& (0+255),7,b
  7110  007C3E  0EFF               	movlw	-1
  7111  007C40  6F6F               	movwf	(sprintf@val+2)& (0+255),b
  7112  007C42  6F70               	movwf	(sprintf@val+3)& (0+255),b
  7113                           
  7114                           ; BSR set to: 0
  7115  007C44  0E02               	movlw	2
  7116  007C46  0100               	movlb	0	; () banked
  7117  007C48  2763               	addwf	sprintf@ap& (0+255),f,b
  7118  007C4A  0E00               	movlw	0
  7119  007C4C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;doprnt.c: 1261: if((long)val < 0) {
  7123  007C4E  0100               	movlb	0	; () banked
  7124  007C50  AF70               	btfss	(sprintf@val+3)& (0+255),7,b
  7125  007C52  D00C               	goto	l3690
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;doprnt.c: 1262: flag |= 0x03;
  7129  007C54  0E03               	movlw	3
  7130  007C56  0100               	movlb	0	; () banked
  7131  007C58  1365               	iorwf	sprintf@flag& (0+255),f,b
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;doprnt.c: 1263: val = -val;
  7135  007C5A  0100               	movlb	0	; () banked
  7136  007C5C  1F70               	comf	(sprintf@val+3)& (0+255),f,b
  7137  007C5E  1F6F               	comf	(sprintf@val+2)& (0+255),f,b
  7138  007C60  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  7139  007C62  6D6D               	negf	sprintf@val& (0+255),b
  7140  007C64  0E00               	movlw	0
  7141  007C66  236E               	addwfc	(sprintf@val+1)& (0+255),f,b
  7142  007C68  236F               	addwfc	(sprintf@val+2)& (0+255),f,b
  7143  007C6A  2370               	addwfc	(sprintf@val+3)& (0+255),f,b
  7144  007C6C                     l3690:
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;doprnt.c: 1264: }
  7148                           ;doprnt.c: 1266: }
  7149                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7150  007C6C  0100               	movlb	0	; () banked
  7151  007C6E  5176               	movf	sprintf@prec& (0+255),w,b
  7152  007C70  0100               	movlb	0	; () banked
  7153  007C72  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  7154  007C74  A4D8               	btfss	status,2,c
  7155  007C76  D00D               	goto	l3696
  7156                           
  7157                           ; BSR set to: 0
  7158  007C78  0100               	movlb	0	; () banked
  7159  007C7A  516D               	movf	sprintf@val& (0+255),w,b
  7160  007C7C  0100               	movlb	0	; () banked
  7161  007C7E  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  7162  007C80  0100               	movlb	0	; () banked
  7163  007C82  116F               	iorwf	(sprintf@val+2)& (0+255),w,b
  7164  007C84  0100               	movlb	0	; () banked
  7165  007C86  1170               	iorwf	(sprintf@val+3)& (0+255),w,b
  7166  007C88  A4D8               	btfss	status,2,c
  7167  007C8A  D003               	goto	l3696
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;doprnt.c: 1291: prec++;
  7171  007C8C  0100               	movlb	0	; () banked
  7172  007C8E  4B76               	infsnz	sprintf@prec& (0+255),f,b
  7173  007C90  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  7174  007C92                     l3696:
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7178  007C92  0E01               	movlw	1
  7179  007C94  0100               	movlb	0	; () banked
  7180  007C96  6F78               	movwf	sprintf@c& (0+255),b
  7181  007C98                     l3698:
  7182                           
  7183                           ; BSR set to: 0
  7184  007C98  0E0A               	movlw	10
  7185  007C9A  0100               	movlb	0	; () banked
  7186  007C9C  1978               	xorwf	sprintf@c& (0+255),w,b
  7187  007C9E  B4D8               	btfsc	status,2,c
  7188  007CA0  D01E               	goto	l3710
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;doprnt.c: 1306: if(val < dpowers[c])
  7192                           
  7193                           ; BSR set to: 0
  7194                           
  7195                           ; BSR set to: 0
  7196  007CA2  0100               	movlb	0	; () banked
  7197  007CA4  5178               	movf	sprintf@c& (0+255),w,b
  7198  007CA6  0D04               	mullw	4
  7199  007CA8  0EF5               	movlw	low _dpowers
  7200  007CAA  24F3               	addwf	prodl,w,c
  7201  007CAC  6EF6               	movwf	tblptrl,c
  7202  007CAE  0E7E               	movlw	high _dpowers
  7203  007CB0  20F4               	addwfc	prodh,w,c
  7204  007CB2  6EF7               	movwf	tblptrh,c
  7205  007CB4                     	if	0	;There are less than 3 active tblptr bytes
  7206  007CB4                     	endif
  7207  007CB4  0009               	tblrd		*+
  7208  007CB6  50F5               	movf	tablat,w,c
  7209  007CB8  0100               	movlb	0	; () banked
  7210  007CBA  5D6D               	subwf	sprintf@val& (0+255),w,b
  7211  007CBC  0009               	tblrd		*+
  7212  007CBE  50F5               	movf	tablat,w,c
  7213  007CC0  0100               	movlb	0	; () banked
  7214  007CC2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  7215  007CC4  0009               	tblrd		*+
  7216  007CC6  50F5               	movf	tablat,w,c
  7217  007CC8  0100               	movlb	0	; () banked
  7218  007CCA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  7219  007CCC  0009               	tblrd		*+
  7220  007CCE  50F5               	movf	tablat,w,c
  7221  007CD0  0100               	movlb	0	; () banked
  7222  007CD2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  7223  007CD4  A0D8               	btfss	status,0,c
  7224  007CD6  D003               	goto	l3710
  7225                           
  7226                           ; BSR set to: 0
  7227                           
  7228                           ; BSR set to: 0
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;doprnt.c: 1307: break;
  7232  007CD8  0100               	movlb	0	; () banked
  7233  007CDA  2B78               	incf	sprintf@c& (0+255),f,b
  7234  007CDC  D7DD               	goto	l3698
  7235  007CDE                     l3710:
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;doprnt.c: 1339: if(c < prec)
  7239  007CDE  0E80               	movlw	128
  7240  007CE0  0100               	movlb	0	; () banked
  7241  007CE2  BF78               	btfsc	sprintf@c& (0+255),7,b
  7242  007CE4  0E7F               	movlw	127
  7243  007CE6  6E4E               	movwf	??_sprintf& (0+255),c
  7244  007CE8  0100               	movlb	0	; () banked
  7245  007CEA  5176               	movf	sprintf@prec& (0+255),w,b
  7246  007CEC  0100               	movlb	0	; () banked
  7247  007CEE  5D78               	subwf	sprintf@c& (0+255),w,b
  7248  007CF0  0100               	movlb	0	; () banked
  7249  007CF2  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  7250  007CF4  0A80               	xorlw	128
  7251  007CF6  584E               	subwfb	??_sprintf& (0+255),w,c
  7252  007CF8  B0D8               	btfsc	status,0,c
  7253  007CFA  D003               	goto	l3714
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;doprnt.c: 1340: c = prec;
  7257  007CFC  C076  F078         	movff	sprintf@prec,sprintf@c
  7258  007D00  D016               	goto	l3718
  7259  007D02                     l3714:
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;doprnt.c: 1341: else if(prec < c)
  7263  007D02  0100               	movlb	0	; () banked
  7264  007D04  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  7265  007D06  0A80               	xorlw	128
  7266  007D08  6E4E               	movwf	??_sprintf& (0+255),c
  7267  007D0A  0100               	movlb	0	; () banked
  7268  007D0C  5178               	movf	sprintf@c& (0+255),w,b
  7269  007D0E  0100               	movlb	0	; () banked
  7270  007D10  5D76               	subwf	sprintf@prec& (0+255),w,b
  7271  007D12  0E80               	movlw	128
  7272  007D14  0100               	movlb	0	; () banked
  7273  007D16  BF78               	btfsc	sprintf@c& (0+255),7,b
  7274  007D18  0E7F               	movlw	127
  7275  007D1A  584E               	subwfb	??_sprintf& (0+255),w,c
  7276  007D1C  B0D8               	btfsc	status,0,c
  7277  007D1E  D007               	goto	l3718
  7278                           
  7279                           ; BSR set to: 0
  7280                           ;doprnt.c: 1342: prec = c;
  7281  007D20  0100               	movlb	0	; () banked
  7282  007D22  5178               	movf	sprintf@c& (0+255),w,b
  7283  007D24  0100               	movlb	0	; () banked
  7284  007D26  6F76               	movwf	sprintf@prec& (0+255),b
  7285  007D28  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  7286  007D2A  BF76               	btfsc	sprintf@prec& (0+255),7,b
  7287  007D2C  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  7288  007D2E                     l3718:
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7292  007D2E  0100               	movlb	0	; () banked
  7293  007D30  5167               	movf	sprintf@width& (0+255),w,b
  7294  007D32  0100               	movlb	0	; () banked
  7295  007D34  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  7296  007D36  B4D8               	btfsc	status,2,c
  7297  007D38  D010               	goto	l3724
  7298                           
  7299                           ; BSR set to: 0
  7300  007D3A  0E03               	movlw	3
  7301  007D3C  0100               	movlb	0	; () banked
  7302  007D3E  1565               	andwf	sprintf@flag& (0+255),w,b
  7303  007D40  6E4E               	movwf	??_sprintf& (0+255),c
  7304  007D42  0E00               	movlw	0
  7305  007D44  0100               	movlb	0	; () banked
  7306  007D46  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  7307  007D48  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  7308  007D4A  504E               	movf	??_sprintf,w,c
  7309  007D4C  104F               	iorwf	??_sprintf+1,w,c
  7310  007D4E  B4D8               	btfsc	status,2,c
  7311  007D50  D004               	goto	l3724
  7312                           
  7313                           ; BSR set to: 0
  7314                           ;doprnt.c: 1346: width--;
  7315  007D52  0100               	movlb	0	; () banked
  7316  007D54  0767               	decf	sprintf@width& (0+255),f,b
  7317  007D56  A0D8               	btfss	status,0,c
  7318  007D58  0768               	decf	(sprintf@width+1)& (0+255),f,b
  7319  007D5A                     l3724:
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7323  007D5A  0100               	movlb	0	; () banked
  7324  007D5C  AD66               	btfss	(sprintf@flag+1)& (0+255),6,b
  7325  007D5E  D01C               	goto	l3732
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;doprnt.c: 1349: if(width > prec)
  7329  007D60  0100               	movlb	0	; () banked
  7330  007D62  5167               	movf	sprintf@width& (0+255),w,b
  7331  007D64  0100               	movlb	0	; () banked
  7332  007D66  5D76               	subwf	sprintf@prec& (0+255),w,b
  7333  007D68  0100               	movlb	0	; () banked
  7334  007D6A  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  7335  007D6C  0A80               	xorlw	128
  7336  007D6E  6E4E               	movwf	??_sprintf& (0+255),c
  7337  007D70  0100               	movlb	0	; () banked
  7338  007D72  5168               	movf	(sprintf@width+1)& (0+255),w,b
  7339  007D74  0A80               	xorlw	128
  7340  007D76  584E               	subwfb	??_sprintf& (0+255),w,c
  7341  007D78  B0D8               	btfsc	status,0,c
  7342  007D7A  D009               	goto	l3730
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;doprnt.c: 1350: width -= prec;
  7346  007D7C  0100               	movlb	0	; () banked
  7347  007D7E  5176               	movf	sprintf@prec& (0+255),w,b
  7348  007D80  0100               	movlb	0	; () banked
  7349  007D82  5F67               	subwf	sprintf@width& (0+255),f,b
  7350  007D84  0100               	movlb	0	; () banked
  7351  007D86  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  7352  007D88  0100               	movlb	0	; () banked
  7353  007D8A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  7354  007D8C  D005               	goto	l3732
  7355  007D8E                     l3730:
  7356                           
  7357                           ; BSR set to: 0
  7358                           ;doprnt.c: 1351: else
  7359                           ;doprnt.c: 1352: width = 0;
  7360  007D8E  0E00               	movlw	0
  7361  007D90  0100               	movlb	0	; () banked
  7362  007D92  6F68               	movwf	(sprintf@width+1)& (0+255),b
  7363  007D94  0E00               	movlw	0
  7364  007D96  6F67               	movwf	sprintf@width& (0+255),b
  7365  007D98                     l3732:
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;doprnt.c: 1353: }
  7369                           ;doprnt.c: 1381: if(width > c)
  7370  007D98  0E80               	movlw	128
  7371  007D9A  0100               	movlb	0	; () banked
  7372  007D9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  7373  007D9E  0E7F               	movlw	127
  7374  007DA0  6E4E               	movwf	??_sprintf& (0+255),c
  7375  007DA2  0100               	movlb	0	; () banked
  7376  007DA4  5167               	movf	sprintf@width& (0+255),w,b
  7377  007DA6  0100               	movlb	0	; () banked
  7378  007DA8  5D78               	subwf	sprintf@c& (0+255),w,b
  7379  007DAA  0100               	movlb	0	; () banked
  7380  007DAC  5168               	movf	(sprintf@width+1)& (0+255),w,b
  7381  007DAE  0A80               	xorlw	128
  7382  007DB0  584E               	subwfb	??_sprintf& (0+255),w,c
  7383  007DB2  B0D8               	btfsc	status,0,c
  7384  007DB4  D00B               	goto	l3736
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;doprnt.c: 1382: width -= c;
  7388  007DB6  0100               	movlb	0	; () banked
  7389  007DB8  5178               	movf	sprintf@c& (0+255),w,b
  7390  007DBA  0100               	movlb	0	; () banked
  7391  007DBC  5F67               	subwf	sprintf@width& (0+255),f,b
  7392  007DBE  0E00               	movlw	0
  7393  007DC0  0100               	movlb	0	; () banked
  7394  007DC2  BF78               	btfsc	sprintf@c& (0+255),7,b
  7395  007DC4  0EFF               	movlw	255
  7396  007DC6  0100               	movlb	0	; () banked
  7397  007DC8  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  7398  007DCA  D005               	goto	l3738
  7399  007DCC                     l3736:
  7400                           
  7401                           ; BSR set to: 0
  7402                           ;doprnt.c: 1383: else
  7403                           ;doprnt.c: 1384: width = 0;
  7404  007DCC  0E00               	movlw	0
  7405  007DCE  0100               	movlb	0	; () banked
  7406  007DD0  6F68               	movwf	(sprintf@width+1)& (0+255),b
  7407  007DD2  0E00               	movlw	0
  7408  007DD4  6F67               	movwf	sprintf@width& (0+255),b
  7409  007DD6                     l3738:
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;doprnt.c: 1422: {
  7413                           ;doprnt.c: 1424: if(width
  7414                           ;doprnt.c: 1428: )
  7415  007DD6  0100               	movlb	0	; () banked
  7416  007DD8  5167               	movf	sprintf@width& (0+255),w,b
  7417  007DDA  0100               	movlb	0	; () banked
  7418  007DDC  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  7419  007DDE  B4D8               	btfsc	status,2,c
  7420  007DE0  D012               	goto	l3746
  7421  007DE2                     l3740:
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  7425  007DE2  C040  FFD9         	movff	sprintf@sp,fsr2l
  7426  007DE6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7427  007DEA  0E20               	movlw	32
  7428  007DEC  6EDF               	movwf	indf2,c
  7429                           
  7430                           ; BSR set to: 0
  7431  007DEE  4A40               	infsnz	sprintf@sp,f,c
  7432  007DF0  2A41               	incf	sprintf@sp+1,f,c
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;doprnt.c: 1431: while(--width);
  7436  007DF2  0100               	movlb	0	; () banked
  7437  007DF4  0767               	decf	sprintf@width& (0+255),f,b
  7438  007DF6  A0D8               	btfss	status,0,c
  7439  007DF8  0768               	decf	(sprintf@width+1)& (0+255),f,b
  7440  007DFA  0100               	movlb	0	; () banked
  7441  007DFC  5167               	movf	sprintf@width& (0+255),w,b
  7442  007DFE  0100               	movlb	0	; () banked
  7443  007E00  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  7444  007E02  A4D8               	btfss	status,2,c
  7445  007E04  D7EE               	goto	l3740
  7446  007E06                     l3746:
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;doprnt.c: 1438: if(flag & 0x03)
  7450  007E06  0E03               	movlw	3
  7451  007E08  0100               	movlb	0	; () banked
  7452  007E0A  1565               	andwf	sprintf@flag& (0+255),w,b
  7453  007E0C  6E4E               	movwf	??_sprintf& (0+255),c
  7454  007E0E  0E00               	movlw	0
  7455  007E10  0100               	movlb	0	; () banked
  7456  007E12  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  7457  007E14  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  7458  007E16  504E               	movf	??_sprintf,w,c
  7459  007E18  104F               	iorwf	??_sprintf+1,w,c
  7460  007E1A  B4D8               	btfsc	status,2,c
  7461  007E1C  D04B               	goto	l3758
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  7465  007E1E  C040  FFD9         	movff	sprintf@sp,fsr2l
  7466  007E22  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7467  007E26  0E2D               	movlw	45
  7468  007E28  6EDF               	movwf	indf2,c
  7469  007E2A  D042               	goto	l3756
  7470  007E2C                     l3752:
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;doprnt.c: 1478: {
  7474                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7475  007E2C  C076  F04E         	movff	sprintf@prec,??_sprintf
  7476  007E30  C077  F04F         	movff	sprintf@prec+1,??_sprintf+1
  7477  007E34  90D8               	bcf	status,0,c
  7478  007E36  364E               	rlcf	??_sprintf,f,c
  7479  007E38  364F               	rlcf	??_sprintf+1,f,c
  7480  007E3A  90D8               	bcf	status,0,c
  7481  007E3C  364E               	rlcf	??_sprintf,f,c
  7482  007E3E  364F               	rlcf	??_sprintf+1,f,c
  7483  007E40  0EF5               	movlw	low _dpowers
  7484  007E42  244E               	addwf	??_sprintf,w,c
  7485  007E44  6EF6               	movwf	tblptrl,c
  7486  007E46  0E7E               	movlw	high _dpowers
  7487  007E48  204F               	addwfc	??_sprintf+1,w,c
  7488  007E4A  6EF7               	movwf	tblptrh,c
  7489  007E4C                     	if	0	;There are less than 3 active tblptr bytes
  7490  007E4C                     	endif
  7491  007E4C  0009               	tblrd		*+
  7492  007E4E  CFF5 F005          	movff	tablat,___lldiv@divisor
  7493  007E52  0009               	tblrd		*+
  7494  007E54  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  7495  007E58  0009               	tblrd		*+
  7496  007E5A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  7497  007E5E  000A               	tblrd		*-
  7498  007E60  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  7499  007E64  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  7500  007E68  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  7501  007E6C  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  7502  007E70  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  7503  007E74  ECD3  F029         	call	___lldiv	;wreg free
  7504  007E78  C001  F00E         	movff	?___lldiv,___llmod@dividend
  7505  007E7C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  7506  007E80  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  7507  007E84  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  7508  007E88  0E0A               	movlw	10
  7509  007E8A  6E12               	movwf	___llmod@divisor,c
  7510  007E8C  0E00               	movlw	0
  7511  007E8E  6E13               	movwf	___llmod@divisor+1,c
  7512  007E90  0E00               	movlw	0
  7513  007E92  6E14               	movwf	___llmod@divisor+2,c
  7514  007E94  0E00               	movlw	0
  7515  007E96  6E15               	movwf	___llmod@divisor+3,c
  7516  007E98  EC68  F029         	call	___llmod	;wreg free
  7517  007E9C  500E               	movf	?___llmod,w,c
  7518  007E9E  0F30               	addlw	48
  7519  007EA0  0100               	movlb	0	; () banked
  7520  007EA2  6F78               	movwf	sprintf@c& (0+255),b
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;doprnt.c: 1523: }
  7524                           ;doprnt.c: 1524: ((*sp++ = (c)));
  7525  007EA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  7526  007EA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7527  007EAC  C078  FFDF         	movff	sprintf@c,indf2
  7528  007EB0                     l3756:
  7529                           
  7530                           ; BSR set to: 0
  7531  007EB0  4A40               	infsnz	sprintf@sp,f,c
  7532  007EB2  2A41               	incf	sprintf@sp+1,f,c
  7533  007EB4                     l3758:
  7534                           
  7535                           ; BSR set to: 0
  7536  007EB4  0100               	movlb	0	; () banked
  7537  007EB6  0776               	decf	sprintf@prec& (0+255),f,b
  7538  007EB8  A0D8               	btfss	status,0,c
  7539  007EBA  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  7540  007EBC  0100               	movlb	0	; () banked
  7541  007EBE  2976               	incf	sprintf@prec& (0+255),w,b
  7542  007EC0  E1B5               	bnz	l3752
  7543  007EC2  0100               	movlb	0	; () banked
  7544  007EC4  2977               	incf	(sprintf@prec+1)& (0+255),w,b
  7545  007EC6  A4D8               	btfss	status,2,c
  7546  007EC8  D7B1               	goto	l3752
  7547  007ECA                     l3760:
  7548                           
  7549                           ; BSR set to: 0
  7550  007ECA  C042  FFF6         	movff	sprintf@f,tblptrl
  7551  007ECE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  7552  007ED2  4A42               	infsnz	sprintf@f,f,c
  7553  007ED4  2A43               	incf	sprintf@f+1,f,c
  7554  007ED6                     	if	0	;tblptru may be non-zero
  7555  007ED6                     	endif
  7556  007ED6                     	if	0	;tblptru may be non-zero
  7557  007ED6                     	endif
  7558  007ED6  0008               	tblrd		*
  7559  007ED8  CFF5 F078          	movff	tablat,sprintf@c
  7560  007EDC  0100               	movlb	0	; () banked
  7561  007EDE  5178               	movf	sprintf@c& (0+255),w,b
  7562  007EE0  A4D8               	btfss	status,2,c
  7563  007EE2  EF0E  F03A         	goto	l3474
  7564  007EE6                     l3762:
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;doprnt.c: 1538: *sp = 0;
  7568  007EE6  C040  FFD9         	movff	sprintf@sp,fsr2l
  7569  007EEA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  7570  007EEE  0E00               	movlw	0
  7571  007EF0  6EDF               	movwf	indf2,c
  7572  007EF2  0012               	return	
  7573  007EF4                     __end_of_sprintf:
  7574                           	opt stack 0
  7575                           tblptru	equ	0xFF8
  7576                           tblptrh	equ	0xFF7
  7577                           tblptrl	equ	0xFF6
  7578                           tablat	equ	0xFF5
  7579                           prodh	equ	0xFF4
  7580                           prodl	equ	0xFF3
  7581                           indf0	equ	0xFEF
  7582                           fsr0h	equ	0xFEA
  7583                           fsr0l	equ	0xFE9
  7584                           wreg	equ	0xFE8
  7585                           indf1	equ	0xFE7
  7586                           fsr1h	equ	0xFE2
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           fsr2h	equ	0xFDA
  7592                           fsr2l	equ	0xFD9
  7593                           status	equ	0xFD8
  7594                           
  7595 ;; *************** function _scale *****************
  7596 ;; Defined at:
  7597 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7598 ;; Parameters:    Size  Location     Type
  7599 ;;  scl             1    wreg     char 
  7600 ;; Auto vars:     Size  Location     Type
  7601 ;;  scl             1   41[COMRAM] char 
  7602 ;; Return value:  Size  Location     Type
  7603 ;;                  3   35[COMRAM] char 
  7604 ;; Registers used:
  7605 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7606 ;; Tracked objects:
  7607 ;;		On entry : 0/0
  7608 ;;		On exit  : 0/0
  7609 ;;		Unchanged: 0/0
  7610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7611 ;;      Params:         3       0       0       0       0       0       0
  7612 ;;      Locals:         4       0       0       0       0       0       0
  7613 ;;      Temps:          0       0       0       0       0       0       0
  7614 ;;      Totals:         7       0       0       0       0       0       0
  7615 ;;Total ram usage:        7 bytes
  7616 ;; Hardware stack levels used:    1
  7617 ;; Hardware stack levels required when called:    2
  7618 ;; This function calls:
  7619 ;;		___awdiv
  7620 ;;		___awmod
  7621 ;;		___ftmul
  7622 ;;		___wmul
  7623 ;; This function is called by:
  7624 ;;		_sprintf
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text32
  7629  0068EC                     __ptext32:
  7630                           	opt stack 0
  7631  0068EC                     _scale:
  7632                           	opt stack 25
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;incstack = 0
  7636                           ;scale@scl stored from wreg
  7637  0068EC  6E2A               	movwf	scale@scl,c
  7638                           
  7639                           ;doprnt.c: 428: if(scl < 0) {
  7640  0068EE  AE2A               	btfss	scale@scl,7,c
  7641  0068F0  D0FB               	goto	l3100
  7642                           
  7643                           ;doprnt.c: 429: scl = -scl;
  7644  0068F2  6C2A               	negf	scale@scl,c
  7645                           
  7646                           ;doprnt.c: 430: if(scl>=110)
  7647  0068F4  502A               	movf	scale@scl,w,c
  7648  0068F6  0A80               	xorlw	128
  7649  0068F8  0F12               	addlw	-238
  7650  0068FA  A0D8               	btfss	status,0,c
  7651  0068FC  D091               	goto	l3090
  7652                           
  7653                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7654  0068FE  0E00               	movlw	0
  7655  006900  6E12               	movwf	___wmul@multiplicand+1,c
  7656  006902  0E03               	movlw	3
  7657  006904  6E11               	movwf	___wmul@multiplicand,c
  7658  006906  0E00               	movlw	0
  7659  006908  6E0A               	movwf	___awdiv@divisor+1,c
  7660  00690A  0E0A               	movlw	10
  7661  00690C  6E09               	movwf	___awdiv@divisor,c
  7662  00690E  0E00               	movlw	0
  7663  006910  6E04               	movwf	___awmod@divisor+1,c
  7664  006912  0E64               	movlw	100
  7665  006914  6E03               	movwf	___awmod@divisor,c
  7666  006916  502A               	movf	scale@scl,w,c
  7667  006918  6E01               	movwf	___awmod@dividend,c
  7668  00691A  6A02               	clrf	___awmod@dividend+1,c
  7669  00691C  BE01               	btfsc	___awmod@dividend,7,c
  7670  00691E  0602               	decf	___awmod@dividend+1,f,c
  7671  006920  EC9B  F029         	call	___awmod	;wreg free
  7672  006924  C001  F007         	movff	?___awmod,___awdiv@dividend
  7673  006928  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7674  00692C  EC14  F02A         	call	___awdiv	;wreg free
  7675  006930  0E09               	movlw	9
  7676  006932  2407               	addwf	?___awdiv,w,c
  7677  006934  6E0F               	movwf	___wmul@multiplier,c
  7678  006936  0E00               	movlw	0
  7679  006938  2008               	addwfc	?___awdiv+1,w,c
  7680  00693A  6E10               	movwf	___wmul@multiplier+1,c
  7681  00693C  EC3C  F027         	call	___wmul	;wreg free
  7682  006940  0E1D               	movlw	low __npowers_
  7683  006942  240F               	addwf	?___wmul,w,c
  7684  006944  6EF6               	movwf	tblptrl,c
  7685  006946  0E7F               	movlw	high __npowers_
  7686  006948  2010               	addwfc	?___wmul+1,w,c
  7687  00694A  6EF7               	movwf	tblptrh,c
  7688  00694C                     	if	0	;There are less than 3 active tblptr bytes
  7689  00694C                     	endif
  7690  00694C  0009               	tblrd		*+
  7691  00694E  CFF5 F018          	movff	tablat,___ftmul@f2
  7692  006952  0009               	tblrd		*+
  7693  006954  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7694  006958  000A               	tblrd		*-
  7695  00695A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7696  00695E  0E00               	movlw	0
  7697  006960  6E0A               	movwf	___awdiv@divisor+1,c
  7698  006962  0E64               	movlw	100
  7699  006964  6E09               	movwf	___awdiv@divisor,c
  7700  006966  502A               	movf	scale@scl,w,c
  7701  006968  6E07               	movwf	___awdiv@dividend,c
  7702  00696A  6A08               	clrf	___awdiv@dividend+1,c
  7703  00696C  BE07               	btfsc	___awdiv@dividend,7,c
  7704  00696E  0608               	decf	___awdiv@dividend+1,f,c
  7705  006970  EC14  F02A         	call	___awdiv	;wreg free
  7706  006974  0E12               	movlw	18
  7707  006976  2407               	addwf	?___awdiv,w,c
  7708  006978  6E0F               	movwf	___wmul@multiplier,c
  7709  00697A  0E00               	movlw	0
  7710  00697C  2008               	addwfc	?___awdiv+1,w,c
  7711  00697E  6E10               	movwf	___wmul@multiplier+1,c
  7712  006980  0E00               	movlw	0
  7713  006982  6E12               	movwf	___wmul@multiplicand+1,c
  7714  006984  0E03               	movlw	3
  7715  006986  6E11               	movwf	___wmul@multiplicand,c
  7716  006988  EC3C  F027         	call	___wmul	;wreg free
  7717  00698C  0E1D               	movlw	low __npowers_
  7718  00698E  240F               	addwf	?___wmul,w,c
  7719  006990  6EF6               	movwf	tblptrl,c
  7720  006992  0E7F               	movlw	high __npowers_
  7721  006994  2010               	addwfc	?___wmul+1,w,c
  7722  006996  6EF7               	movwf	tblptrh,c
  7723  006998                     	if	0	;There are less than 3 active tblptr bytes
  7724  006998                     	endif
  7725  006998  0009               	tblrd		*+
  7726  00699A  CFF5 F015          	movff	tablat,___ftmul@f1
  7727  00699E  0009               	tblrd		*+
  7728  0069A0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7729  0069A4  000A               	tblrd		*-
  7730  0069A6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7731  0069AA  ECDE  F02D         	call	___ftmul	;wreg free
  7732  0069AE  C015  F027         	movff	?___ftmul,_scale$1793
  7733  0069B2  C016  F028         	movff	?___ftmul+1,_scale$1793+1
  7734  0069B6  C017  F029         	movff	?___ftmul+2,_scale$1793+2
  7735                           
  7736                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7737  0069BA  C027  F015         	movff	_scale$1793,___ftmul@f1
  7738  0069BE  C028  F016         	movff	_scale$1793+1,___ftmul@f1+1
  7739  0069C2  C029  F017         	movff	_scale$1793+2,___ftmul@f1+2
  7740  0069C6  0E00               	movlw	0
  7741  0069C8  6E12               	movwf	___wmul@multiplicand+1,c
  7742  0069CA  0E03               	movlw	3
  7743  0069CC  6E11               	movwf	___wmul@multiplicand,c
  7744  0069CE  0E00               	movlw	0
  7745  0069D0  6E04               	movwf	___awmod@divisor+1,c
  7746  0069D2  0E0A               	movlw	10
  7747  0069D4  6E03               	movwf	___awmod@divisor,c
  7748  0069D6  502A               	movf	scale@scl,w,c
  7749  0069D8  6E01               	movwf	___awmod@dividend,c
  7750  0069DA  6A02               	clrf	___awmod@dividend+1,c
  7751  0069DC  BE01               	btfsc	___awmod@dividend,7,c
  7752  0069DE  0602               	decf	___awmod@dividend+1,f,c
  7753  0069E0  EC9B  F029         	call	___awmod	;wreg free
  7754  0069E4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7755  0069E8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7756  0069EC  EC3C  F027         	call	___wmul	;wreg free
  7757  0069F0  0E1D               	movlw	low __npowers_
  7758  0069F2  240F               	addwf	?___wmul,w,c
  7759  0069F4  6EF6               	movwf	tblptrl,c
  7760  0069F6  0E7F               	movlw	high __npowers_
  7761  0069F8  2010               	addwfc	?___wmul+1,w,c
  7762  0069FA  6EF7               	movwf	tblptrh,c
  7763  0069FC                     	if	0	;There are less than 3 active tblptr bytes
  7764  0069FC                     	endif
  7765  0069FC  0009               	tblrd		*+
  7766  0069FE  CFF5 F018          	movff	tablat,___ftmul@f2
  7767  006A02  0009               	tblrd		*+
  7768  006A04  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7769  006A08  000A               	tblrd		*-
  7770  006A0A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7771  006A0E  ECDE  F02D         	call	___ftmul	;wreg free
  7772  006A12  C015  F024         	movff	?___ftmul,?_scale
  7773  006A16  C016  F025         	movff	?___ftmul+1,?_scale+1
  7774  006A1A  C017  F026         	movff	?___ftmul+2,?_scale+2
  7775  006A1E  0012               	return	
  7776  006A20                     l3090:
  7777                           
  7778                           ;doprnt.c: 432: else if(scl > 10)
  7779  006A20  502A               	movf	scale@scl,w,c
  7780  006A22  0A80               	xorlw	128
  7781  006A24  0F75               	addlw	-139
  7782  006A26  A0D8               	btfss	status,0,c
  7783  006A28  D04D               	goto	l3096
  7784                           
  7785                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7786  006A2A  0E00               	movlw	0
  7787  006A2C  6E0A               	movwf	___awdiv@divisor+1,c
  7788  006A2E  0E0A               	movlw	10
  7789  006A30  6E09               	movwf	___awdiv@divisor,c
  7790  006A32  502A               	movf	scale@scl,w,c
  7791  006A34  6E07               	movwf	___awdiv@dividend,c
  7792  006A36  6A08               	clrf	___awdiv@dividend+1,c
  7793  006A38  BE07               	btfsc	___awdiv@dividend,7,c
  7794  006A3A  0608               	decf	___awdiv@dividend+1,f,c
  7795  006A3C  EC14  F02A         	call	___awdiv	;wreg free
  7796  006A40  0E09               	movlw	9
  7797  006A42  2407               	addwf	?___awdiv,w,c
  7798  006A44  6E0F               	movwf	___wmul@multiplier,c
  7799  006A46  0E00               	movlw	0
  7800  006A48  2008               	addwfc	?___awdiv+1,w,c
  7801  006A4A  6E10               	movwf	___wmul@multiplier+1,c
  7802  006A4C  0E00               	movlw	0
  7803  006A4E  6E12               	movwf	___wmul@multiplicand+1,c
  7804  006A50  0E03               	movlw	3
  7805  006A52  6E11               	movwf	___wmul@multiplicand,c
  7806  006A54  EC3C  F027         	call	___wmul	;wreg free
  7807  006A58  0E1D               	movlw	low __npowers_
  7808  006A5A  240F               	addwf	?___wmul,w,c
  7809  006A5C  6EF6               	movwf	tblptrl,c
  7810  006A5E  0E7F               	movlw	high __npowers_
  7811  006A60  2010               	addwfc	?___wmul+1,w,c
  7812  006A62  6EF7               	movwf	tblptrh,c
  7813  006A64                     	if	0	;There are less than 3 active tblptr bytes
  7814  006A64                     	endif
  7815  006A64  0009               	tblrd		*+
  7816  006A66  CFF5 F015          	movff	tablat,___ftmul@f1
  7817  006A6A  0009               	tblrd		*+
  7818  006A6C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7819  006A70  000A               	tblrd		*-
  7820  006A72  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7821  006A76  0E00               	movlw	0
  7822  006A78  6E12               	movwf	___wmul@multiplicand+1,c
  7823  006A7A  0E03               	movlw	3
  7824  006A7C  6E11               	movwf	___wmul@multiplicand,c
  7825  006A7E  0E00               	movlw	0
  7826  006A80  6E04               	movwf	___awmod@divisor+1,c
  7827  006A82  0E0A               	movlw	10
  7828  006A84  6E03               	movwf	___awmod@divisor,c
  7829  006A86  502A               	movf	scale@scl,w,c
  7830  006A88  6E01               	movwf	___awmod@dividend,c
  7831  006A8A  6A02               	clrf	___awmod@dividend+1,c
  7832  006A8C  BE01               	btfsc	___awmod@dividend,7,c
  7833  006A8E  0602               	decf	___awmod@dividend+1,f,c
  7834  006A90  EC9B  F029         	call	___awmod	;wreg free
  7835  006A94  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7836  006A98  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7837  006A9C  EC3C  F027         	call	___wmul	;wreg free
  7838  006AA0  0E1D               	movlw	low __npowers_
  7839  006AA2  240F               	addwf	?___wmul,w,c
  7840  006AA4  6EF6               	movwf	tblptrl,c
  7841  006AA6  0E7F               	movlw	high __npowers_
  7842  006AA8  2010               	addwfc	?___wmul+1,w,c
  7843  006AAA  6EF7               	movwf	tblptrh,c
  7844  006AAC                     	if	0	;There are less than 3 active tblptr bytes
  7845  006AAC                     	endif
  7846  006AAC  0009               	tblrd		*+
  7847  006AAE  CFF5 F018          	movff	tablat,___ftmul@f2
  7848  006AB2  0009               	tblrd		*+
  7849  006AB4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7850  006AB8  000A               	tblrd		*-
  7851  006ABA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7852  006ABE  ECDE  F02D         	call	___ftmul	;wreg free
  7853  006AC2  D7A7               	goto	L6
  7854  006AC4                     l3096:
  7855                           
  7856                           ;doprnt.c: 434: return _npowers_[scl];
  7857  006AC4  502A               	movf	scale@scl,w,c
  7858  006AC6  0D03               	mullw	3
  7859  006AC8  0E1D               	movlw	low __npowers_
  7860  006ACA  24F3               	addwf	prodl,w,c
  7861  006ACC  6EF6               	movwf	tblptrl,c
  7862  006ACE  0E7F               	movlw	high __npowers_
  7863  006AD0  20F4               	addwfc	prodh,w,c
  7864  006AD2  6EF7               	movwf	tblptrh,c
  7865  006AD4                     	if	0	;There are less than 3 active tblptr bytes
  7866  006AD4                     	endif
  7867  006AD4  0009               	tblrd		*+
  7868  006AD6  CFF5 F024          	movff	tablat,?_scale
  7869  006ADA  0009               	tblrd		*+
  7870  006ADC  CFF5 F025          	movff	tablat,?_scale+1
  7871  006AE0  000A               	tblrd		*-
  7872  006AE2  CFF5 F026          	movff	tablat,?_scale+2
  7873  006AE6  0012               	return	
  7874  006AE8                     l3100:
  7875                           
  7876                           ;doprnt.c: 435: }
  7877                           ;doprnt.c: 436: if(scl>=110)
  7878  006AE8  502A               	movf	scale@scl,w,c
  7879  006AEA  0A80               	xorlw	128
  7880  006AEC  0F12               	addlw	-238
  7881  006AEE  A0D8               	btfss	status,0,c
  7882  006AF0  D091               	goto	l3108
  7883                           
  7884                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7885  006AF2  0E00               	movlw	0
  7886  006AF4  6E12               	movwf	___wmul@multiplicand+1,c
  7887  006AF6  0E03               	movlw	3
  7888  006AF8  6E11               	movwf	___wmul@multiplicand,c
  7889  006AFA  0E00               	movlw	0
  7890  006AFC  6E0A               	movwf	___awdiv@divisor+1,c
  7891  006AFE  0E0A               	movlw	10
  7892  006B00  6E09               	movwf	___awdiv@divisor,c
  7893  006B02  0E00               	movlw	0
  7894  006B04  6E04               	movwf	___awmod@divisor+1,c
  7895  006B06  0E64               	movlw	100
  7896  006B08  6E03               	movwf	___awmod@divisor,c
  7897  006B0A  502A               	movf	scale@scl,w,c
  7898  006B0C  6E01               	movwf	___awmod@dividend,c
  7899  006B0E  6A02               	clrf	___awmod@dividend+1,c
  7900  006B10  BE01               	btfsc	___awmod@dividend,7,c
  7901  006B12  0602               	decf	___awmod@dividend+1,f,c
  7902  006B14  EC9B  F029         	call	___awmod	;wreg free
  7903  006B18  C001  F007         	movff	?___awmod,___awdiv@dividend
  7904  006B1C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  7905  006B20  EC14  F02A         	call	___awdiv	;wreg free
  7906  006B24  0E09               	movlw	9
  7907  006B26  2407               	addwf	?___awdiv,w,c
  7908  006B28  6E0F               	movwf	___wmul@multiplier,c
  7909  006B2A  0E00               	movlw	0
  7910  006B2C  2008               	addwfc	?___awdiv+1,w,c
  7911  006B2E  6E10               	movwf	___wmul@multiplier+1,c
  7912  006B30  EC3C  F027         	call	___wmul	;wreg free
  7913  006B34  0E44               	movlw	low __powers_
  7914  006B36  240F               	addwf	?___wmul,w,c
  7915  006B38  6EF6               	movwf	tblptrl,c
  7916  006B3A  0E7F               	movlw	high __powers_
  7917  006B3C  2010               	addwfc	?___wmul+1,w,c
  7918  006B3E  6EF7               	movwf	tblptrh,c
  7919  006B40                     	if	0	;There are less than 3 active tblptr bytes
  7920  006B40                     	endif
  7921  006B40  0009               	tblrd		*+
  7922  006B42  CFF5 F018          	movff	tablat,___ftmul@f2
  7923  006B46  0009               	tblrd		*+
  7924  006B48  CFF5 F019          	movff	tablat,___ftmul@f2+1
  7925  006B4C  000A               	tblrd		*-
  7926  006B4E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  7927  006B52  0E00               	movlw	0
  7928  006B54  6E0A               	movwf	___awdiv@divisor+1,c
  7929  006B56  0E64               	movlw	100
  7930  006B58  6E09               	movwf	___awdiv@divisor,c
  7931  006B5A  502A               	movf	scale@scl,w,c
  7932  006B5C  6E07               	movwf	___awdiv@dividend,c
  7933  006B5E  6A08               	clrf	___awdiv@dividend+1,c
  7934  006B60  BE07               	btfsc	___awdiv@dividend,7,c
  7935  006B62  0608               	decf	___awdiv@dividend+1,f,c
  7936  006B64  EC14  F02A         	call	___awdiv	;wreg free
  7937  006B68  0E12               	movlw	18
  7938  006B6A  2407               	addwf	?___awdiv,w,c
  7939  006B6C  6E0F               	movwf	___wmul@multiplier,c
  7940  006B6E  0E00               	movlw	0
  7941  006B70  2008               	addwfc	?___awdiv+1,w,c
  7942  006B72  6E10               	movwf	___wmul@multiplier+1,c
  7943  006B74  0E00               	movlw	0
  7944  006B76  6E12               	movwf	___wmul@multiplicand+1,c
  7945  006B78  0E03               	movlw	3
  7946  006B7A  6E11               	movwf	___wmul@multiplicand,c
  7947  006B7C  EC3C  F027         	call	___wmul	;wreg free
  7948  006B80  0E44               	movlw	low __powers_
  7949  006B82  240F               	addwf	?___wmul,w,c
  7950  006B84  6EF6               	movwf	tblptrl,c
  7951  006B86  0E7F               	movlw	high __powers_
  7952  006B88  2010               	addwfc	?___wmul+1,w,c
  7953  006B8A  6EF7               	movwf	tblptrh,c
  7954  006B8C                     	if	0	;There are less than 3 active tblptr bytes
  7955  006B8C                     	endif
  7956  006B8C  0009               	tblrd		*+
  7957  006B8E  CFF5 F015          	movff	tablat,___ftmul@f1
  7958  006B92  0009               	tblrd		*+
  7959  006B94  CFF5 F016          	movff	tablat,___ftmul@f1+1
  7960  006B98  000A               	tblrd		*-
  7961  006B9A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  7962  006B9E  ECDE  F02D         	call	___ftmul	;wreg free
  7963  006BA2  C015  F027         	movff	?___ftmul,_scale$1793
  7964  006BA6  C016  F028         	movff	?___ftmul+1,_scale$1793+1
  7965  006BAA  C017  F029         	movff	?___ftmul+2,_scale$1793+2
  7966                           
  7967                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7968  006BAE  C027  F015         	movff	_scale$1793,___ftmul@f1
  7969  006BB2  C028  F016         	movff	_scale$1793+1,___ftmul@f1+1
  7970  006BB6  C029  F017         	movff	_scale$1793+2,___ftmul@f1+2
  7971  006BBA  0E00               	movlw	0
  7972  006BBC  6E12               	movwf	___wmul@multiplicand+1,c
  7973  006BBE  0E03               	movlw	3
  7974  006BC0  6E11               	movwf	___wmul@multiplicand,c
  7975  006BC2  0E00               	movlw	0
  7976  006BC4  6E04               	movwf	___awmod@divisor+1,c
  7977  006BC6  0E0A               	movlw	10
  7978  006BC8  6E03               	movwf	___awmod@divisor,c
  7979  006BCA  502A               	movf	scale@scl,w,c
  7980  006BCC  6E01               	movwf	___awmod@dividend,c
  7981  006BCE  6A02               	clrf	___awmod@dividend+1,c
  7982  006BD0  BE01               	btfsc	___awmod@dividend,7,c
  7983  006BD2  0602               	decf	___awmod@dividend+1,f,c
  7984  006BD4  EC9B  F029         	call	___awmod	;wreg free
  7985  006BD8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  7986  006BDC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  7987  006BE0  EC3C  F027         	call	___wmul	;wreg free
  7988  006BE4  0E44               	movlw	low __powers_
  7989  006BE6  240F               	addwf	?___wmul,w,c
  7990  006BE8  6EF6               	movwf	tblptrl,c
  7991  006BEA  0E7F               	movlw	high __powers_
  7992  006BEC  2010               	addwfc	?___wmul+1,w,c
  7993  006BEE  6EF7               	movwf	tblptrh,c
  7994  006BF0                     	if	0	;There are less than 3 active tblptr bytes
  7995  006BF0                     	endif
  7996  006BF0  0009               	tblrd		*+
  7997  006BF2  CFF5 F018          	movff	tablat,___ftmul@f2
  7998  006BF6  0009               	tblrd		*+
  7999  006BF8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8000  006BFC  000A               	tblrd		*-
  8001  006BFE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8002  006C02  ECDE  F02D         	call	___ftmul	;wreg free
  8003  006C06  C015  F024         	movff	?___ftmul,?_scale
  8004  006C0A  C016  F025         	movff	?___ftmul+1,?_scale+1
  8005  006C0E  C017  F026         	movff	?___ftmul+2,?_scale+2
  8006  006C12  0012               	return	
  8007  006C14                     l3108:
  8008                           
  8009                           ;doprnt.c: 438: else if(scl > 10)
  8010  006C14  502A               	movf	scale@scl,w,c
  8011  006C16  0A80               	xorlw	128
  8012  006C18  0F75               	addlw	-139
  8013  006C1A  A0D8               	btfss	status,0,c
  8014  006C1C  D04D               	goto	l3114
  8015                           
  8016                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8017  006C1E  0E00               	movlw	0
  8018  006C20  6E0A               	movwf	___awdiv@divisor+1,c
  8019  006C22  0E0A               	movlw	10
  8020  006C24  6E09               	movwf	___awdiv@divisor,c
  8021  006C26  502A               	movf	scale@scl,w,c
  8022  006C28  6E07               	movwf	___awdiv@dividend,c
  8023  006C2A  6A08               	clrf	___awdiv@dividend+1,c
  8024  006C2C  BE07               	btfsc	___awdiv@dividend,7,c
  8025  006C2E  0608               	decf	___awdiv@dividend+1,f,c
  8026  006C30  EC14  F02A         	call	___awdiv	;wreg free
  8027  006C34  0E09               	movlw	9
  8028  006C36  2407               	addwf	?___awdiv,w,c
  8029  006C38  6E0F               	movwf	___wmul@multiplier,c
  8030  006C3A  0E00               	movlw	0
  8031  006C3C  2008               	addwfc	?___awdiv+1,w,c
  8032  006C3E  6E10               	movwf	___wmul@multiplier+1,c
  8033  006C40  0E00               	movlw	0
  8034  006C42  6E12               	movwf	___wmul@multiplicand+1,c
  8035  006C44  0E03               	movlw	3
  8036  006C46  6E11               	movwf	___wmul@multiplicand,c
  8037  006C48  EC3C  F027         	call	___wmul	;wreg free
  8038  006C4C  0E44               	movlw	low __powers_
  8039  006C4E  240F               	addwf	?___wmul,w,c
  8040  006C50  6EF6               	movwf	tblptrl,c
  8041  006C52  0E7F               	movlw	high __powers_
  8042  006C54  2010               	addwfc	?___wmul+1,w,c
  8043  006C56  6EF7               	movwf	tblptrh,c
  8044  006C58                     	if	0	;There are less than 3 active tblptr bytes
  8045  006C58                     	endif
  8046  006C58  0009               	tblrd		*+
  8047  006C5A  CFF5 F015          	movff	tablat,___ftmul@f1
  8048  006C5E  0009               	tblrd		*+
  8049  006C60  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8050  006C64  000A               	tblrd		*-
  8051  006C66  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8052  006C6A  0E00               	movlw	0
  8053  006C6C  6E12               	movwf	___wmul@multiplicand+1,c
  8054  006C6E  0E03               	movlw	3
  8055  006C70  6E11               	movwf	___wmul@multiplicand,c
  8056  006C72  0E00               	movlw	0
  8057  006C74  6E04               	movwf	___awmod@divisor+1,c
  8058  006C76  0E0A               	movlw	10
  8059  006C78  6E03               	movwf	___awmod@divisor,c
  8060  006C7A  502A               	movf	scale@scl,w,c
  8061  006C7C  6E01               	movwf	___awmod@dividend,c
  8062  006C7E  6A02               	clrf	___awmod@dividend+1,c
  8063  006C80  BE01               	btfsc	___awmod@dividend,7,c
  8064  006C82  0602               	decf	___awmod@dividend+1,f,c
  8065  006C84  EC9B  F029         	call	___awmod	;wreg free
  8066  006C88  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8067  006C8C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8068  006C90  EC3C  F027         	call	___wmul	;wreg free
  8069  006C94  0E44               	movlw	low __powers_
  8070  006C96  240F               	addwf	?___wmul,w,c
  8071  006C98  6EF6               	movwf	tblptrl,c
  8072  006C9A  0E7F               	movlw	high __powers_
  8073  006C9C  2010               	addwfc	?___wmul+1,w,c
  8074  006C9E  6EF7               	movwf	tblptrh,c
  8075  006CA0                     	if	0	;There are less than 3 active tblptr bytes
  8076  006CA0                     	endif
  8077  006CA0  0009               	tblrd		*+
  8078  006CA2  CFF5 F018          	movff	tablat,___ftmul@f2
  8079  006CA6  0009               	tblrd		*+
  8080  006CA8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8081  006CAC  000A               	tblrd		*-
  8082  006CAE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8083  006CB2  ECDE  F02D         	call	___ftmul	;wreg free
  8084  006CB6  D7A7               	goto	L7
  8085  006CB8                     l3114:
  8086                           
  8087                           ;doprnt.c: 440: return _powers_[scl];
  8088  006CB8  502A               	movf	scale@scl,w,c
  8089  006CBA  0D03               	mullw	3
  8090  006CBC  0E44               	movlw	low __powers_
  8091  006CBE  24F3               	addwf	prodl,w,c
  8092  006CC0  6EF6               	movwf	tblptrl,c
  8093  006CC2  0E7F               	movlw	high __powers_
  8094  006CC4  20F4               	addwfc	prodh,w,c
  8095  006CC6  6EF7               	movwf	tblptrh,c
  8096  006CC8                     	if	0	;There are less than 3 active tblptr bytes
  8097  006CC8                     	endif
  8098  006CC8  0009               	tblrd		*+
  8099  006CCA  CFF5 F024          	movff	tablat,?_scale
  8100  006CCE  0009               	tblrd		*+
  8101  006CD0  CFF5 F025          	movff	tablat,?_scale+1
  8102  006CD4  000A               	tblrd		*-
  8103  006CD6  CFF5 F026          	movff	tablat,?_scale+2
  8104  006CDA  0012               	return	
  8105  006CDC                     __end_of_scale:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           indf0	equ	0xFEF
  8114                           fsr0h	equ	0xFEA
  8115                           fsr0l	equ	0xFE9
  8116                           wreg	equ	0xFE8
  8117                           indf1	equ	0xFE7
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _isdigit *****************
  8128 ;; Defined at:
  8129 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  c               1    wreg     unsigned char 
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;  c               1    2[COMRAM] unsigned char 
  8134 ;; Return value:  Size  Location     Type
  8135 ;;		None               void
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8143 ;;      Params:         0       0       0       0       0       0       0
  8144 ;;      Locals:         2       0       0       0       0       0       0
  8145 ;;      Temps:          1       0       0       0       0       0       0
  8146 ;;      Totals:         3       0       0       0       0       0       0
  8147 ;;Total ram usage:        3 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_sprintf
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text33
  8157  004DF4                     __ptext33:
  8158                           	opt stack 0
  8159  004DF4                     _isdigit:
  8160                           	opt stack 27
  8161                           
  8162                           ;incstack = 0
  8163                           ;isdigit@c stored from wreg
  8164  004DF4  6E03               	movwf	isdigit@c,c
  8165  004DF6  0E00               	movlw	0
  8166  004DF8  6E02               	movwf	_isdigit$1452,c
  8167  004DFA  0E3A               	movlw	58
  8168  004DFC  6003               	cpfslt	isdigit@c,c
  8169  004DFE  D005               	goto	l3126
  8170  004E00  0E2F               	movlw	47
  8171  004E02  6403               	cpfsgt	isdigit@c,c
  8172  004E04  D002               	goto	l3126
  8173  004E06  0E01               	movlw	1
  8174  004E08  6E02               	movwf	_isdigit$1452,c
  8175  004E0A                     l3126:
  8176  004E0A  C002  F001         	movff	_isdigit$1452,??_isdigit
  8177  004E0E  3001               	rrcf	??_isdigit,w,c
  8178  004E10  0012               	return	
  8179  004E12                     __end_of_isdigit:
  8180                           	opt stack 0
  8181                           tblptru	equ	0xFF8
  8182                           tblptrh	equ	0xFF7
  8183                           tblptrl	equ	0xFF6
  8184                           tablat	equ	0xFF5
  8185                           prodh	equ	0xFF4
  8186                           prodl	equ	0xFF3
  8187                           indf0	equ	0xFEF
  8188                           fsr0h	equ	0xFEA
  8189                           fsr0l	equ	0xFE9
  8190                           wreg	equ	0xFE8
  8191                           indf1	equ	0xFE7
  8192                           fsr1h	equ	0xFE2
  8193                           fsr1l	equ	0xFE1
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _fround *****************
  8202 ;; Defined at:
  8203 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;  prec            1    wreg     unsigned char 
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  prec            1   44[COMRAM] unsigned char 
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  3   35[COMRAM] unsigned char 
  8210 ;; Registers used:
  8211 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8217 ;;      Params:         3       0       0       0       0       0       0
  8218 ;;      Locals:         7       0       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0
  8220 ;;      Totals:        10       0       0       0       0       0       0
  8221 ;;Total ram usage:       10 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    2
  8224 ;; This function calls:
  8225 ;;		___awdiv
  8226 ;;		___awmod
  8227 ;;		___ftmul
  8228 ;;		___wmul
  8229 ;; This function is called by:
  8230 ;;		_sprintf
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text34
  8235  00635A                     __ptext34:
  8236                           	opt stack 0
  8237  00635A                     _fround:
  8238                           	opt stack 25
  8239                           
  8240                           ;incstack = 0
  8241                           ;fround@prec stored from wreg
  8242  00635A  6E2D               	movwf	fround@prec,c
  8243                           
  8244                           ;doprnt.c: 413: if(prec>=110)
  8245  00635C  0E6D               	movlw	109
  8246  00635E  642D               	cpfsgt	fround@prec,c
  8247  006360  D09F               	goto	l3068
  8248                           
  8249                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8250  006362  0E00               	movlw	0
  8251  006364  6E12               	movwf	___wmul@multiplicand+1,c
  8252  006366  0E03               	movlw	3
  8253  006368  6E11               	movwf	___wmul@multiplicand,c
  8254  00636A  0E00               	movlw	0
  8255  00636C  6E0A               	movwf	___awdiv@divisor+1,c
  8256  00636E  0E0A               	movlw	10
  8257  006370  6E09               	movwf	___awdiv@divisor,c
  8258  006372  0E00               	movlw	0
  8259  006374  6E04               	movwf	___awmod@divisor+1,c
  8260  006376  0E64               	movlw	100
  8261  006378  6E03               	movwf	___awmod@divisor,c
  8262  00637A  C02D  F001         	movff	fround@prec,___awmod@dividend
  8263  00637E  6A02               	clrf	___awmod@dividend+1,c
  8264  006380  EC9B  F029         	call	___awmod	;wreg free
  8265  006384  C001  F007         	movff	?___awmod,___awdiv@dividend
  8266  006388  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  8267  00638C  EC14  F02A         	call	___awdiv	;wreg free
  8268  006390  0E09               	movlw	9
  8269  006392  2407               	addwf	?___awdiv,w,c
  8270  006394  6E0F               	movwf	___wmul@multiplier,c
  8271  006396  0E00               	movlw	0
  8272  006398  2008               	addwfc	?___awdiv+1,w,c
  8273  00639A  6E10               	movwf	___wmul@multiplier+1,c
  8274  00639C  EC3C  F027         	call	___wmul	;wreg free
  8275  0063A0  0E1D               	movlw	low __npowers_
  8276  0063A2  240F               	addwf	?___wmul,w,c
  8277  0063A4  6EF6               	movwf	tblptrl,c
  8278  0063A6  0E7F               	movlw	high __npowers_
  8279  0063A8  2010               	addwfc	?___wmul+1,w,c
  8280  0063AA  6EF7               	movwf	tblptrh,c
  8281  0063AC                     	if	0	;There are less than 3 active tblptr bytes
  8282  0063AC                     	endif
  8283  0063AC  0009               	tblrd		*+
  8284  0063AE  CFF5 F018          	movff	tablat,___ftmul@f2
  8285  0063B2  0009               	tblrd		*+
  8286  0063B4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8287  0063B8  000A               	tblrd		*-
  8288  0063BA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8289  0063BE  0E00               	movlw	0
  8290  0063C0  6E0A               	movwf	___awdiv@divisor+1,c
  8291  0063C2  0E64               	movlw	100
  8292  0063C4  6E09               	movwf	___awdiv@divisor,c
  8293  0063C6  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8294  0063CA  6A08               	clrf	___awdiv@dividend+1,c
  8295  0063CC  EC14  F02A         	call	___awdiv	;wreg free
  8296  0063D0  0E12               	movlw	18
  8297  0063D2  2407               	addwf	?___awdiv,w,c
  8298  0063D4  6E0F               	movwf	___wmul@multiplier,c
  8299  0063D6  0E00               	movlw	0
  8300  0063D8  2008               	addwfc	?___awdiv+1,w,c
  8301  0063DA  6E10               	movwf	___wmul@multiplier+1,c
  8302  0063DC  0E00               	movlw	0
  8303  0063DE  6E12               	movwf	___wmul@multiplicand+1,c
  8304  0063E0  0E03               	movlw	3
  8305  0063E2  6E11               	movwf	___wmul@multiplicand,c
  8306  0063E4  EC3C  F027         	call	___wmul	;wreg free
  8307  0063E8  0E1D               	movlw	low __npowers_
  8308  0063EA  240F               	addwf	?___wmul,w,c
  8309  0063EC  6EF6               	movwf	tblptrl,c
  8310  0063EE  0E7F               	movlw	high __npowers_
  8311  0063F0  2010               	addwfc	?___wmul+1,w,c
  8312  0063F2  6EF7               	movwf	tblptrh,c
  8313  0063F4                     	if	0	;There are less than 3 active tblptr bytes
  8314  0063F4                     	endif
  8315  0063F4  0009               	tblrd		*+
  8316  0063F6  CFF5 F015          	movff	tablat,___ftmul@f1
  8317  0063FA  0009               	tblrd		*+
  8318  0063FC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8319  006400  000A               	tblrd		*-
  8320  006402  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8321  006406  ECDE  F02D         	call	___ftmul	;wreg free
  8322  00640A  C015  F02A         	movff	?___ftmul,_fround$1791
  8323  00640E  C016  F02B         	movff	?___ftmul+1,_fround$1791+1
  8324  006412  C017  F02C         	movff	?___ftmul+2,_fround$1791+2
  8325                           
  8326                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8327  006416  0E00               	movlw	0
  8328  006418  6E12               	movwf	___wmul@multiplicand+1,c
  8329  00641A  0E03               	movlw	3
  8330  00641C  6E11               	movwf	___wmul@multiplicand,c
  8331  00641E  0E00               	movlw	0
  8332  006420  6E04               	movwf	___awmod@divisor+1,c
  8333  006422  0E0A               	movlw	10
  8334  006424  6E03               	movwf	___awmod@divisor,c
  8335  006426  C02D  F001         	movff	fround@prec,___awmod@dividend
  8336  00642A  6A02               	clrf	___awmod@dividend+1,c
  8337  00642C  EC9B  F029         	call	___awmod	;wreg free
  8338  006430  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8339  006434  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8340  006438  EC3C  F027         	call	___wmul	;wreg free
  8341  00643C  0E1D               	movlw	low __npowers_
  8342  00643E  240F               	addwf	?___wmul,w,c
  8343  006440  6EF6               	movwf	tblptrl,c
  8344  006442  0E7F               	movlw	high __npowers_
  8345  006444  2010               	addwfc	?___wmul+1,w,c
  8346  006446  6EF7               	movwf	tblptrh,c
  8347  006448                     	if	0	;There are less than 3 active tblptr bytes
  8348  006448                     	endif
  8349  006448  0009               	tblrd		*+
  8350  00644A  CFF5 F018          	movff	tablat,___ftmul@f2
  8351  00644E  0009               	tblrd		*+
  8352  006450  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8353  006454  000A               	tblrd		*-
  8354  006456  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8355  00645A  C02A  F015         	movff	_fround$1791,___ftmul@f1
  8356  00645E  C02B  F016         	movff	_fround$1791+1,___ftmul@f1+1
  8357  006462  C02C  F017         	movff	_fround$1791+2,___ftmul@f1+2
  8358  006466  ECDE  F02D         	call	___ftmul	;wreg free
  8359  00646A  C015  F027         	movff	?___ftmul,_fround$1792
  8360  00646E  C016  F028         	movff	?___ftmul+1,_fround$1792+1
  8361  006472  C017  F029         	movff	?___ftmul+2,_fround$1792+2
  8362                           
  8363                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  8364  006476  C027  F015         	movff	_fround$1792,___ftmul@f1
  8365  00647A  C028  F016         	movff	_fround$1792+1,___ftmul@f1+1
  8366  00647E  C029  F017         	movff	_fround$1792+2,___ftmul@f1+2
  8367  006482  0E00               	movlw	0
  8368  006484  6E18               	movwf	___ftmul@f2,c
  8369  006486  0E00               	movlw	0
  8370  006488  6E19               	movwf	___ftmul@f2+1,c
  8371  00648A  0E3F               	movlw	63
  8372  00648C  6E1A               	movwf	___ftmul@f2+2,c
  8373  00648E  ECDE  F02D         	call	___ftmul	;wreg free
  8374  006492  C015  F024         	movff	?___ftmul,?_fround
  8375  006496  C016  F025         	movff	?___ftmul+1,?_fround+1
  8376  00649A  C017  F026         	movff	?___ftmul+2,?_fround+2
  8377  00649E  0012               	return	
  8378  0064A0                     l3068:
  8379                           
  8380                           ;doprnt.c: 415: else if(prec > 10)
  8381  0064A0  0E0A               	movlw	10
  8382  0064A2  642D               	cpfsgt	fround@prec,c
  8383  0064A4  D05D               	goto	l3076
  8384                           
  8385                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8386  0064A6  0E00               	movlw	0
  8387  0064A8  6E12               	movwf	___wmul@multiplicand+1,c
  8388  0064AA  0E03               	movlw	3
  8389  0064AC  6E11               	movwf	___wmul@multiplicand,c
  8390  0064AE  0E00               	movlw	0
  8391  0064B0  6E04               	movwf	___awmod@divisor+1,c
  8392  0064B2  0E0A               	movlw	10
  8393  0064B4  6E03               	movwf	___awmod@divisor,c
  8394  0064B6  C02D  F001         	movff	fround@prec,___awmod@dividend
  8395  0064BA  6A02               	clrf	___awmod@dividend+1,c
  8396  0064BC  EC9B  F029         	call	___awmod	;wreg free
  8397  0064C0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  8398  0064C4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  8399  0064C8  EC3C  F027         	call	___wmul	;wreg free
  8400  0064CC  0E1D               	movlw	low __npowers_
  8401  0064CE  240F               	addwf	?___wmul,w,c
  8402  0064D0  6EF6               	movwf	tblptrl,c
  8403  0064D2  0E7F               	movlw	high __npowers_
  8404  0064D4  2010               	addwfc	?___wmul+1,w,c
  8405  0064D6  6EF7               	movwf	tblptrh,c
  8406  0064D8                     	if	0	;There are less than 3 active tblptr bytes
  8407  0064D8                     	endif
  8408  0064D8  0009               	tblrd		*+
  8409  0064DA  CFF5 F018          	movff	tablat,___ftmul@f2
  8410  0064DE  0009               	tblrd		*+
  8411  0064E0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  8412  0064E4  000A               	tblrd		*-
  8413  0064E6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  8414  0064EA  0E00               	movlw	0
  8415  0064EC  6E0A               	movwf	___awdiv@divisor+1,c
  8416  0064EE  0E0A               	movlw	10
  8417  0064F0  6E09               	movwf	___awdiv@divisor,c
  8418  0064F2  C02D  F007         	movff	fround@prec,___awdiv@dividend
  8419  0064F6  6A08               	clrf	___awdiv@dividend+1,c
  8420  0064F8  EC14  F02A         	call	___awdiv	;wreg free
  8421  0064FC  0E09               	movlw	9
  8422  0064FE  2407               	addwf	?___awdiv,w,c
  8423  006500  6E0F               	movwf	___wmul@multiplier,c
  8424  006502  0E00               	movlw	0
  8425  006504  2008               	addwfc	?___awdiv+1,w,c
  8426  006506  6E10               	movwf	___wmul@multiplier+1,c
  8427  006508  0E00               	movlw	0
  8428  00650A  6E12               	movwf	___wmul@multiplicand+1,c
  8429  00650C  0E03               	movlw	3
  8430  00650E  6E11               	movwf	___wmul@multiplicand,c
  8431  006510  EC3C  F027         	call	___wmul	;wreg free
  8432  006514  0E1D               	movlw	low __npowers_
  8433  006516  240F               	addwf	?___wmul,w,c
  8434  006518  6EF6               	movwf	tblptrl,c
  8435  00651A  0E7F               	movlw	high __npowers_
  8436  00651C  2010               	addwfc	?___wmul+1,w,c
  8437  00651E  6EF7               	movwf	tblptrh,c
  8438  006520                     	if	0	;There are less than 3 active tblptr bytes
  8439  006520                     	endif
  8440  006520  0009               	tblrd		*+
  8441  006522  CFF5 F015          	movff	tablat,___ftmul@f1
  8442  006526  0009               	tblrd		*+
  8443  006528  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8444  00652C  000A               	tblrd		*-
  8445  00652E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8446  006532  ECDE  F02D         	call	___ftmul	;wreg free
  8447  006536  C015  F02A         	movff	?___ftmul,_fround$1791
  8448  00653A  C016  F02B         	movff	?___ftmul+1,_fround$1791+1
  8449  00653E  C017  F02C         	movff	?___ftmul+2,_fround$1791+2
  8450                           
  8451                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  8452  006542  C02A  F015         	movff	_fround$1791,___ftmul@f1
  8453  006546  C02B  F016         	movff	_fround$1791+1,___ftmul@f1+1
  8454  00654A  C02C  F017         	movff	_fround$1791+2,___ftmul@f1+2
  8455  00654E  0E00               	movlw	0
  8456  006550  6E18               	movwf	___ftmul@f2,c
  8457  006552  0E00               	movlw	0
  8458  006554  6E19               	movwf	___ftmul@f2+1,c
  8459  006556  0E3F               	movlw	63
  8460  006558  6E1A               	movwf	___ftmul@f2+2,c
  8461  00655A  ECDE  F02D         	call	___ftmul	;wreg free
  8462  00655E  D799               	goto	L8
  8463  006560                     l3076:
  8464                           
  8465                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  8466  006560  502D               	movf	fround@prec,w,c
  8467  006562  0D03               	mullw	3
  8468  006564  0E1D               	movlw	low __npowers_
  8469  006566  24F3               	addwf	prodl,w,c
  8470  006568  6EF6               	movwf	tblptrl,c
  8471  00656A  0E7F               	movlw	high __npowers_
  8472  00656C  20F4               	addwfc	prodh,w,c
  8473  00656E  6EF7               	movwf	tblptrh,c
  8474  006570                     	if	0	;There are less than 3 active tblptr bytes
  8475  006570                     	endif
  8476  006570  0009               	tblrd		*+
  8477  006572  CFF5 F015          	movff	tablat,___ftmul@f1
  8478  006576  0009               	tblrd		*+
  8479  006578  CFF5 F016          	movff	tablat,___ftmul@f1+1
  8480  00657C  000A               	tblrd		*-
  8481  00657E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  8482  006582  0E00               	movlw	0
  8483  006584  6E18               	movwf	___ftmul@f2,c
  8484  006586  0E00               	movlw	0
  8485  006588  6E19               	movwf	___ftmul@f2+1,c
  8486  00658A  0E3F               	movlw	63
  8487  00658C  6E1A               	movwf	___ftmul@f2+2,c
  8488  00658E  ECDE  F02D         	call	___ftmul	;wreg free
  8489  006592  C015  F024         	movff	?___ftmul,?_fround
  8490  006596  C016  F025         	movff	?___ftmul+1,?_fround+1
  8491  00659A  C017  F026         	movff	?___ftmul+2,?_fround+2
  8492  00659E  0012               	return	
  8493  0065A0                     __end_of_fround:
  8494                           	opt stack 0
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           indf0	equ	0xFEF
  8502                           fsr0h	equ	0xFEA
  8503                           fsr0l	equ	0xFE9
  8504                           wreg	equ	0xFE8
  8505                           indf1	equ	0xFE7
  8506                           fsr1h	equ	0xFE2
  8507                           fsr1l	equ	0xFE1
  8508                           indf2	equ	0xFDF
  8509                           postinc2	equ	0xFDE
  8510                           postdec2	equ	0xFDD
  8511                           fsr2h	equ	0xFDA
  8512                           fsr2l	equ	0xFD9
  8513                           status	equ	0xFD8
  8514                           
  8515 ;; *************** function ___wmul *****************
  8516 ;; Defined at:
  8517 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  multiplier      2   14[COMRAM] unsigned int 
  8520 ;;  multiplicand    2   16[COMRAM] unsigned int 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;  product         2   18[COMRAM] unsigned int 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  2   14[COMRAM] unsigned int 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0, prodl, prodh
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8532 ;;      Params:         4       0       0       0       0       0       0
  8533 ;;      Locals:         2       0       0       0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0
  8535 ;;      Totals:         6       0       0       0       0       0       0
  8536 ;;Total ram usage:        6 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_fround
  8542 ;;		_scale
  8543 ;;		_sprintf
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           	psect	text35
  8548  004E78                     __ptext35:
  8549                           	opt stack 0
  8550  004E78                     ___wmul:
  8551                           	opt stack 26
  8552                           
  8553                           ;incstack = 0
  8554  004E78  500F               	movf	___wmul@multiplier,w,c
  8555  004E7A  0211               	mulwf	___wmul@multiplicand,c
  8556  004E7C  CFF3 F013          	movff	prodl,___wmul@product
  8557  004E80  CFF4 F014          	movff	prodh,___wmul@product+1
  8558  004E84  500F               	movf	___wmul@multiplier,w,c
  8559  004E86  0212               	mulwf	___wmul@multiplicand+1,c
  8560  004E88  50F3               	movf	prodl,w,c
  8561  004E8A  2614               	addwf	___wmul@product+1,f,c
  8562  004E8C  5010               	movf	___wmul@multiplier+1,w,c
  8563  004E8E  0211               	mulwf	___wmul@multiplicand,c
  8564  004E90  50F3               	movf	prodl,w,c
  8565  004E92  2614               	addwf	___wmul@product+1,f,c
  8566  004E94  C013  F00F         	movff	___wmul@product,?___wmul
  8567  004E98  C014  F010         	movff	___wmul@product+1,?___wmul+1
  8568  004E9C  0012               	return	
  8569  004E9E                     __end_of___wmul:
  8570                           	opt stack 0
  8571                           tblptru	equ	0xFF8
  8572                           tblptrh	equ	0xFF7
  8573                           tblptrl	equ	0xFF6
  8574                           tablat	equ	0xFF5
  8575                           prodh	equ	0xFF4
  8576                           prodl	equ	0xFF3
  8577                           indf0	equ	0xFEF
  8578                           fsr0h	equ	0xFEA
  8579                           fsr0l	equ	0xFE9
  8580                           wreg	equ	0xFE8
  8581                           indf1	equ	0xFE7
  8582                           fsr1h	equ	0xFE2
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function ___ftmul *****************
  8592 ;; Defined at:
  8593 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  f1              3   20[COMRAM] float 
  8596 ;;  f2              3   23[COMRAM] float 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  8599 ;;  sign            1   34[COMRAM] unsigned char 
  8600 ;;  cntr            1   33[COMRAM] unsigned char 
  8601 ;;  exp             1   29[COMRAM] unsigned char 
  8602 ;; Return value:  Size  Location     Type
  8603 ;;                  3   20[COMRAM] float 
  8604 ;; Registers used:
  8605 ;;		wreg, status,2, status,0, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8611 ;;      Params:         6       0       0       0       0       0       0
  8612 ;;      Locals:         6       0       0       0       0       0       0
  8613 ;;      Temps:          3       0       0       0       0       0       0
  8614 ;;      Totals:        15       0       0       0       0       0       0
  8615 ;;Total ram usage:       15 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    1
  8618 ;; This function calls:
  8619 ;;		___ftpack
  8620 ;; This function is called by:
  8621 ;;		_util_getBatteryVoltage
  8622 ;;		_util_getSolarCurrent
  8623 ;;		_util_getBatteryCurrent
  8624 ;;		_util_getTemperature
  8625 ;;		_fround
  8626 ;;		_scale
  8627 ;;		_sprintf
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           	psect	text36
  8632  005BBC                     __ptext36:
  8633                           	opt stack 0
  8634  005BBC                     ___ftmul:
  8635                           	opt stack 27
  8636                           
  8637                           ;incstack = 0
  8638  005BBC  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  8639  005BC0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8640  005BC2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8641  005BC4  3416               	rlcf	___ftmul@f1+1,w,c
  8642  005BC6  361B               	rlcf	??___ftmul& (0+255),f,c
  8643  005BC8  E301               	bnc	u2401
  8644  005BCA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8645  005BCC                     u2401:
  8646  005BCC  501B               	movf	??___ftmul,w,c
  8647  005BCE  6E1E               	movwf	___ftmul@exp,c
  8648  005BD0  501E               	movf	___ftmul@exp,w,c
  8649  005BD2  A4D8               	btfss	status,2,c
  8650  005BD4  D007               	goto	l2866
  8651  005BD6  0E00               	movlw	0
  8652  005BD8  6E15               	movwf	?___ftmul,c
  8653  005BDA  0E00               	movlw	0
  8654  005BDC  6E16               	movwf	?___ftmul+1,c
  8655  005BDE  0E00               	movlw	0
  8656  005BE0  6E17               	movwf	?___ftmul+2,c
  8657  005BE2  0012               	return	
  8658  005BE4                     l2866:
  8659  005BE4  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  8660  005BE8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  8661  005BEA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  8662  005BEC  3419               	rlcf	___ftmul@f2+1,w,c
  8663  005BEE  361B               	rlcf	??___ftmul& (0+255),f,c
  8664  005BF0  E301               	bnc	u2421
  8665  005BF2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  8666  005BF4                     u2421:
  8667  005BF4  501B               	movf	??___ftmul,w,c
  8668  005BF6  6E23               	movwf	___ftmul@sign,c
  8669  005BF8  5023               	movf	___ftmul@sign,w,c
  8670  005BFA  A4D8               	btfss	status,2,c
  8671  005BFC  D007               	goto	l2872
  8672  005BFE  0E00               	movlw	0
  8673  005C00  6E15               	movwf	?___ftmul,c
  8674  005C02  0E00               	movlw	0
  8675  005C04  6E16               	movwf	?___ftmul+1,c
  8676  005C06  0E00               	movlw	0
  8677  005C08  6E17               	movwf	?___ftmul+2,c
  8678  005C0A  0012               	return	
  8679  005C0C                     l2872:
  8680  005C0C  5023               	movf	___ftmul@sign,w,c
  8681  005C0E  0F7B               	addlw	123
  8682  005C10  261E               	addwf	___ftmul@exp,f,c
  8683  005C12  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  8684  005C16  501A               	movf	___ftmul@f2+2,w,c
  8685  005C18  1A23               	xorwf	___ftmul@sign,f,c
  8686  005C1A  0E80               	movlw	128
  8687  005C1C  1623               	andwf	___ftmul@sign,f,c
  8688  005C1E  8E16               	bsf	___ftmul@f1+1,7,c
  8689  005C20  8E19               	bsf	___ftmul@f2+1,7,c
  8690  005C22  0EFF               	movlw	255
  8691  005C24  1618               	andwf	___ftmul@f2,f,c
  8692  005C26  0EFF               	movlw	255
  8693  005C28  1619               	andwf	___ftmul@f2+1,f,c
  8694  005C2A  0E00               	movlw	0
  8695  005C2C  161A               	andwf	___ftmul@f2+2,f,c
  8696  005C2E  0E00               	movlw	0
  8697  005C30  6E1F               	movwf	___ftmul@f3_as_product,c
  8698  005C32  0E00               	movlw	0
  8699  005C34  6E20               	movwf	___ftmul@f3_as_product+1,c
  8700  005C36  0E00               	movlw	0
  8701  005C38  6E21               	movwf	___ftmul@f3_as_product+2,c
  8702  005C3A  0E07               	movlw	7
  8703  005C3C  6E22               	movwf	___ftmul@cntr,c
  8704  005C3E                     l2886:
  8705  005C3E  A015               	btfss	___ftmul@f1,0,c
  8706  005C40  D006               	goto	l2890
  8707  005C42  5018               	movf	___ftmul@f2,w,c
  8708  005C44  261F               	addwf	___ftmul@f3_as_product,f,c
  8709  005C46  5019               	movf	___ftmul@f2+1,w,c
  8710  005C48  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8711  005C4A  501A               	movf	___ftmul@f2+2,w,c
  8712  005C4C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8713  005C4E                     l2890:
  8714  005C4E  90D8               	bcf	status,0,c
  8715  005C50  3217               	rrcf	___ftmul@f1+2,f,c
  8716  005C52  3216               	rrcf	___ftmul@f1+1,f,c
  8717  005C54  3215               	rrcf	___ftmul@f1,f,c
  8718  005C56  90D8               	bcf	status,0,c
  8719  005C58  3618               	rlcf	___ftmul@f2,f,c
  8720  005C5A  3619               	rlcf	___ftmul@f2+1,f,c
  8721  005C5C  361A               	rlcf	___ftmul@f2+2,f,c
  8722  005C5E  2E22               	decfsz	___ftmul@cntr,f,c
  8723  005C60  D7EE               	goto	l2886
  8724  005C62  0E09               	movlw	9
  8725  005C64  6E22               	movwf	___ftmul@cntr,c
  8726  005C66                     l2896:
  8727  005C66  A015               	btfss	___ftmul@f1,0,c
  8728  005C68  D006               	goto	l2900
  8729  005C6A  5018               	movf	___ftmul@f2,w,c
  8730  005C6C  261F               	addwf	___ftmul@f3_as_product,f,c
  8731  005C6E  5019               	movf	___ftmul@f2+1,w,c
  8732  005C70  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  8733  005C72  501A               	movf	___ftmul@f2+2,w,c
  8734  005C74  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  8735  005C76                     l2900:
  8736  005C76  90D8               	bcf	status,0,c
  8737  005C78  3217               	rrcf	___ftmul@f1+2,f,c
  8738  005C7A  3216               	rrcf	___ftmul@f1+1,f,c
  8739  005C7C  3215               	rrcf	___ftmul@f1,f,c
  8740  005C7E  90D8               	bcf	status,0,c
  8741  005C80  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  8742  005C82  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  8743  005C84  321F               	rrcf	___ftmul@f3_as_product,f,c
  8744  005C86  2E22               	decfsz	___ftmul@cntr,f,c
  8745  005C88  D7EE               	goto	l2896
  8746  005C8A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8747  005C8E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8748  005C92  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8749  005C96  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  8750  005C9A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  8751  005C9E  EC77  F02B         	call	___ftpack	;wreg free
  8752  005CA2  C001  F015         	movff	?___ftpack,?___ftmul
  8753  005CA6  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  8754  005CAA  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  8755  005CAE  0012               	return	
  8756  005CB0                     __end_of___ftmul:
  8757                           	opt stack 0
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           indf0	equ	0xFEF
  8765                           fsr0h	equ	0xFEA
  8766                           fsr0l	equ	0xFE9
  8767                           wreg	equ	0xFE8
  8768                           indf1	equ	0xFE7
  8769                           fsr1h	equ	0xFE2
  8770                           fsr1l	equ	0xFE1
  8771                           indf2	equ	0xFDF
  8772                           postinc2	equ	0xFDE
  8773                           postdec2	equ	0xFDD
  8774                           fsr2h	equ	0xFDA
  8775                           fsr2l	equ	0xFD9
  8776                           status	equ	0xFD8
  8777                           
  8778 ;; *************** function ___awmod *****************
  8779 ;; Defined at:
  8780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  dividend        2    0[COMRAM] int 
  8783 ;;  divisor         2    2[COMRAM] int 
  8784 ;; Auto vars:     Size  Location     Type
  8785 ;;  sign            1    5[COMRAM] unsigned char 
  8786 ;;  counter         1    4[COMRAM] unsigned char 
  8787 ;; Return value:  Size  Location     Type
  8788 ;;                  2    0[COMRAM] int 
  8789 ;; Registers used:
  8790 ;;		wreg, status,2, status,0
  8791 ;; Tracked objects:
  8792 ;;		On entry : 0/0
  8793 ;;		On exit  : 0/0
  8794 ;;		Unchanged: 0/0
  8795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8796 ;;      Params:         4       0       0       0       0       0       0
  8797 ;;      Locals:         2       0       0       0       0       0       0
  8798 ;;      Temps:          0       0       0       0       0       0       0
  8799 ;;      Totals:         6       0       0       0       0       0       0
  8800 ;;Total ram usage:        6 bytes
  8801 ;; Hardware stack levels used:    1
  8802 ;; This function calls:
  8803 ;;		Nothing
  8804 ;; This function is called by:
  8805 ;;		_fround
  8806 ;;		_scale
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           	psect	text37
  8811  005336                     __ptext37:
  8812                           	opt stack 0
  8813  005336                     ___awmod:
  8814                           	opt stack 26
  8815                           
  8816                           ;incstack = 0
  8817  005336  0E00               	movlw	0
  8818  005338  6E06               	movwf	___awmod@sign,c
  8819  00533A  AE02               	btfss	___awmod@dividend+1,7,c
  8820  00533C  D006               	goto	l2960
  8821  00533E  6C01               	negf	___awmod@dividend,c
  8822  005340  1E02               	comf	___awmod@dividend+1,f,c
  8823  005342  B0D8               	btfsc	status,0,c
  8824  005344  2A02               	incf	___awmod@dividend+1,f,c
  8825  005346  0E01               	movlw	1
  8826  005348  6E06               	movwf	___awmod@sign,c
  8827  00534A                     l2960:
  8828  00534A  AE04               	btfss	___awmod@divisor+1,7,c
  8829  00534C  D004               	goto	l2964
  8830  00534E  6C03               	negf	___awmod@divisor,c
  8831  005350  1E04               	comf	___awmod@divisor+1,f,c
  8832  005352  B0D8               	btfsc	status,0,c
  8833  005354  2A04               	incf	___awmod@divisor+1,f,c
  8834  005356                     l2964:
  8835  005356  5003               	movf	___awmod@divisor,w,c
  8836  005358  1004               	iorwf	___awmod@divisor+1,w,c
  8837  00535A  B4D8               	btfsc	status,2,c
  8838  00535C  D018               	goto	l2980
  8839  00535E  0E01               	movlw	1
  8840  005360  6E05               	movwf	___awmod@counter,c
  8841  005362  D004               	goto	l2970
  8842  005364                     l2968:
  8843  005364  90D8               	bcf	status,0,c
  8844  005366  3603               	rlcf	___awmod@divisor,f,c
  8845  005368  3604               	rlcf	___awmod@divisor+1,f,c
  8846  00536A  2A05               	incf	___awmod@counter,f,c
  8847  00536C                     l2970:
  8848  00536C  AE04               	btfss	___awmod@divisor+1,7,c
  8849  00536E  D7FA               	goto	l2968
  8850  005370                     l2972:
  8851  005370  5003               	movf	___awmod@divisor,w,c
  8852  005372  5C01               	subwf	___awmod@dividend,w,c
  8853  005374  5004               	movf	___awmod@divisor+1,w,c
  8854  005376  5802               	subwfb	___awmod@dividend+1,w,c
  8855  005378  A0D8               	btfss	status,0,c
  8856  00537A  D004               	goto	l2976
  8857  00537C  5003               	movf	___awmod@divisor,w,c
  8858  00537E  5E01               	subwf	___awmod@dividend,f,c
  8859  005380  5004               	movf	___awmod@divisor+1,w,c
  8860  005382  5A02               	subwfb	___awmod@dividend+1,f,c
  8861  005384                     l2976:
  8862  005384  90D8               	bcf	status,0,c
  8863  005386  3204               	rrcf	___awmod@divisor+1,f,c
  8864  005388  3203               	rrcf	___awmod@divisor,f,c
  8865  00538A  2E05               	decfsz	___awmod@counter,f,c
  8866  00538C  D7F1               	goto	l2972
  8867  00538E                     l2980:
  8868  00538E  5006               	movf	___awmod@sign,w,c
  8869  005390  B4D8               	btfsc	status,2,c
  8870  005392  D004               	goto	l2984
  8871  005394  6C01               	negf	___awmod@dividend,c
  8872  005396  1E02               	comf	___awmod@dividend+1,f,c
  8873  005398  B0D8               	btfsc	status,0,c
  8874  00539A  2A02               	incf	___awmod@dividend+1,f,c
  8875  00539C                     l2984:
  8876  00539C  C001  F001         	movff	___awmod@dividend,?___awmod
  8877  0053A0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  8878  0053A4  0012               	return	
  8879  0053A6                     __end_of___awmod:
  8880                           	opt stack 0
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           indf0	equ	0xFEF
  8888                           fsr0h	equ	0xFEA
  8889                           fsr0l	equ	0xFE9
  8890                           wreg	equ	0xFE8
  8891                           indf1	equ	0xFE7
  8892                           fsr1h	equ	0xFE2
  8893                           fsr1l	equ	0xFE1
  8894                           indf2	equ	0xFDF
  8895                           postinc2	equ	0xFDE
  8896                           postdec2	equ	0xFDD
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function ___awdiv *****************
  8902 ;; Defined at:
  8903 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  dividend        2    6[COMRAM] int 
  8906 ;;  divisor         2    8[COMRAM] int 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  quotient        2   12[COMRAM] int 
  8909 ;;  sign            1   11[COMRAM] unsigned char 
  8910 ;;  counter         1   10[COMRAM] unsigned char 
  8911 ;; Return value:  Size  Location     Type
  8912 ;;                  2    6[COMRAM] int 
  8913 ;; Registers used:
  8914 ;;		wreg, status,2, status,0
  8915 ;; Tracked objects:
  8916 ;;		On entry : 0/0
  8917 ;;		On exit  : 0/0
  8918 ;;		Unchanged: 0/0
  8919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8920 ;;      Params:         4       0       0       0       0       0       0
  8921 ;;      Locals:         4       0       0       0       0       0       0
  8922 ;;      Temps:          0       0       0       0       0       0       0
  8923 ;;      Totals:         8       0       0       0       0       0       0
  8924 ;;Total ram usage:        8 bytes
  8925 ;; Hardware stack levels used:    1
  8926 ;; This function calls:
  8927 ;;		Nothing
  8928 ;; This function is called by:
  8929 ;;		_fround
  8930 ;;		_scale
  8931 ;;		_sprintf
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           	psect	text38
  8936  005428                     __ptext38:
  8937                           	opt stack 0
  8938  005428                     ___awdiv:
  8939                           	opt stack 26
  8940                           
  8941                           ;incstack = 0
  8942  005428  0E00               	movlw	0
  8943  00542A  6E0C               	movwf	___awdiv@sign,c
  8944  00542C  AE0A               	btfss	___awdiv@divisor+1,7,c
  8945  00542E  D006               	goto	l2916
  8946  005430  6C09               	negf	___awdiv@divisor,c
  8947  005432  1E0A               	comf	___awdiv@divisor+1,f,c
  8948  005434  B0D8               	btfsc	status,0,c
  8949  005436  2A0A               	incf	___awdiv@divisor+1,f,c
  8950  005438  0E01               	movlw	1
  8951  00543A  6E0C               	movwf	___awdiv@sign,c
  8952  00543C                     l2916:
  8953  00543C  AE08               	btfss	___awdiv@dividend+1,7,c
  8954  00543E  D006               	goto	l2922
  8955  005440  6C07               	negf	___awdiv@dividend,c
  8956  005442  1E08               	comf	___awdiv@dividend+1,f,c
  8957  005444  B0D8               	btfsc	status,0,c
  8958  005446  2A08               	incf	___awdiv@dividend+1,f,c
  8959  005448  0E01               	movlw	1
  8960  00544A  1A0C               	xorwf	___awdiv@sign,f,c
  8961  00544C                     l2922:
  8962  00544C  0E00               	movlw	0
  8963  00544E  6E0E               	movwf	___awdiv@quotient+1,c
  8964  005450  0E00               	movlw	0
  8965  005452  6E0D               	movwf	___awdiv@quotient,c
  8966  005454  5009               	movf	___awdiv@divisor,w,c
  8967  005456  100A               	iorwf	___awdiv@divisor+1,w,c
  8968  005458  B4D8               	btfsc	status,2,c
  8969  00545A  D01C               	goto	l2944
  8970  00545C  0E01               	movlw	1
  8971  00545E  6E0B               	movwf	___awdiv@counter,c
  8972  005460  D004               	goto	l2930
  8973  005462                     l2928:
  8974  005462  90D8               	bcf	status,0,c
  8975  005464  3609               	rlcf	___awdiv@divisor,f,c
  8976  005466  360A               	rlcf	___awdiv@divisor+1,f,c
  8977  005468  2A0B               	incf	___awdiv@counter,f,c
  8978  00546A                     l2930:
  8979  00546A  AE0A               	btfss	___awdiv@divisor+1,7,c
  8980  00546C  D7FA               	goto	l2928
  8981  00546E                     l2932:
  8982  00546E  90D8               	bcf	status,0,c
  8983  005470  360D               	rlcf	___awdiv@quotient,f,c
  8984  005472  360E               	rlcf	___awdiv@quotient+1,f,c
  8985  005474  5009               	movf	___awdiv@divisor,w,c
  8986  005476  5C07               	subwf	___awdiv@dividend,w,c
  8987  005478  500A               	movf	___awdiv@divisor+1,w,c
  8988  00547A  5808               	subwfb	___awdiv@dividend+1,w,c
  8989  00547C  A0D8               	btfss	status,0,c
  8990  00547E  D005               	goto	l2940
  8991  005480  5009               	movf	___awdiv@divisor,w,c
  8992  005482  5E07               	subwf	___awdiv@dividend,f,c
  8993  005484  500A               	movf	___awdiv@divisor+1,w,c
  8994  005486  5A08               	subwfb	___awdiv@dividend+1,f,c
  8995  005488  800D               	bsf	___awdiv@quotient,0,c
  8996  00548A                     l2940:
  8997  00548A  90D8               	bcf	status,0,c
  8998  00548C  320A               	rrcf	___awdiv@divisor+1,f,c
  8999  00548E  3209               	rrcf	___awdiv@divisor,f,c
  9000  005490  2E0B               	decfsz	___awdiv@counter,f,c
  9001  005492  D7ED               	goto	l2932
  9002  005494                     l2944:
  9003  005494  500C               	movf	___awdiv@sign,w,c
  9004  005496  B4D8               	btfsc	status,2,c
  9005  005498  D004               	goto	l2948
  9006  00549A  6C0D               	negf	___awdiv@quotient,c
  9007  00549C  1E0E               	comf	___awdiv@quotient+1,f,c
  9008  00549E  B0D8               	btfsc	status,0,c
  9009  0054A0  2A0E               	incf	___awdiv@quotient+1,f,c
  9010  0054A2                     l2948:
  9011  0054A2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  9012  0054A6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  9013  0054AA  0012               	return	
  9014  0054AC                     __end_of___awdiv:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           indf0	equ	0xFEF
  9023                           fsr0h	equ	0xFEA
  9024                           fsr0l	equ	0xFE9
  9025                           wreg	equ	0xFE8
  9026                           indf1	equ	0xFE7
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function __tdiv_to_l_ *****************
  9037 ;; Defined at:
  9038 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  f1              3    0[COMRAM] float 
  9041 ;;  f2              3    3[COMRAM] float 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  quot            4    9[COMRAM] unsigned long 
  9044 ;;  exp1            1   14[COMRAM] unsigned char 
  9045 ;;  cntr            1   13[COMRAM] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  4    0[COMRAM] unsigned long 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9055 ;;      Params:         6       0       0       0       0       0       0
  9056 ;;      Locals:         6       0       0       0       0       0       0
  9057 ;;      Temps:          3       0       0       0       0       0       0
  9058 ;;      Totals:        15       0       0       0       0       0       0
  9059 ;;Total ram usage:       15 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; This function calls:
  9062 ;;		Nothing
  9063 ;; This function is called by:
  9064 ;;		_sprintf
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           	psect	text39
  9069  005DD8                     __ptext39:
  9070                           	opt stack 0
  9071  005DD8                     __tdiv_to_l_:
  9072                           	opt stack 27
  9073                           
  9074                           ;incstack = 0
  9075  005DD8  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  9076  005DDC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9077  005DDE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9078  005DE0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  9079  005DE2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9080  005DE4  E301               	bnc	u2731
  9081  005DE6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9082  005DE8                     u2731:
  9083  005DE8  5007               	movf	??__tdiv_to_l_,w,c
  9084  005DEA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  9085  005DEC  500F               	movf	__tdiv_to_l_@exp1,w,c
  9086  005DEE  A4D8               	btfss	status,2,c
  9087  005DF0  D009               	goto	l3136
  9088  005DF2  0E00               	movlw	0
  9089  005DF4  6E01               	movwf	?__tdiv_to_l_,c
  9090  005DF6  0E00               	movlw	0
  9091  005DF8  6E02               	movwf	?__tdiv_to_l_+1,c
  9092  005DFA  0E00               	movlw	0
  9093  005DFC  6E03               	movwf	?__tdiv_to_l_+2,c
  9094  005DFE  0E00               	movlw	0
  9095  005E00  6E04               	movwf	?__tdiv_to_l_+3,c
  9096  005E02  0012               	return	
  9097  005E04                     l3136:
  9098  005E04  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  9099  005E08  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  9100  005E0A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  9101  005E0C  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  9102  005E0E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  9103  005E10  E301               	bnc	u2751
  9104  005E12  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  9105  005E14                     u2751:
  9106  005E14  5007               	movf	??__tdiv_to_l_,w,c
  9107  005E16  6E0E               	movwf	__tdiv_to_l_@cntr,c
  9108  005E18  500E               	movf	__tdiv_to_l_@cntr,w,c
  9109  005E1A  A4D8               	btfss	status,2,c
  9110  005E1C  D009               	goto	l3142
  9111  005E1E  0E00               	movlw	0
  9112  005E20  6E01               	movwf	?__tdiv_to_l_,c
  9113  005E22  0E00               	movlw	0
  9114  005E24  6E02               	movwf	?__tdiv_to_l_+1,c
  9115  005E26  0E00               	movlw	0
  9116  005E28  6E03               	movwf	?__tdiv_to_l_+2,c
  9117  005E2A  0E00               	movlw	0
  9118  005E2C  6E04               	movwf	?__tdiv_to_l_+3,c
  9119  005E2E  0012               	return	
  9120  005E30                     l3142:
  9121  005E30  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  9122  005E32  0EFF               	movlw	255
  9123  005E34  1601               	andwf	__tdiv_to_l_@f1,f,c
  9124  005E36  0EFF               	movlw	255
  9125  005E38  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  9126  005E3A  0E00               	movlw	0
  9127  005E3C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  9128  005E3E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  9129  005E40  0EFF               	movlw	255
  9130  005E42  1604               	andwf	__tdiv_to_l_@f2,f,c
  9131  005E44  0EFF               	movlw	255
  9132  005E46  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  9133  005E48  0E00               	movlw	0
  9134  005E4A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  9135  005E4C  0E00               	movlw	0
  9136  005E4E  6E0A               	movwf	__tdiv_to_l_@quot,c
  9137  005E50  0E00               	movlw	0
  9138  005E52  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  9139  005E54  0E00               	movlw	0
  9140  005E56  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  9141  005E58  0E00               	movlw	0
  9142  005E5A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  9143  005E5C  0E7F               	movlw	127
  9144  005E5E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  9145  005E60  500E               	movf	__tdiv_to_l_@cntr,w,c
  9146  005E62  0F98               	addlw	152
  9147  005E64  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  9148  005E66  0E18               	movlw	24
  9149  005E68  6E0E               	movwf	__tdiv_to_l_@cntr,c
  9150  005E6A                     l727:
  9151  005E6A  90D8               	bcf	status,0,c
  9152  005E6C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  9153  005E6E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  9154  005E70  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  9155  005E72  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  9156  005E74  5004               	movf	__tdiv_to_l_@f2,w,c
  9157  005E76  5C01               	subwf	__tdiv_to_l_@f1,w,c
  9158  005E78  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9159  005E7A  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  9160  005E7C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9161  005E7E  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  9162  005E80  A0D8               	btfss	status,0,c
  9163  005E82  D007               	goto	l728
  9164  005E84  5004               	movf	__tdiv_to_l_@f2,w,c
  9165  005E86  5E01               	subwf	__tdiv_to_l_@f1,f,c
  9166  005E88  5005               	movf	__tdiv_to_l_@f2+1,w,c
  9167  005E8A  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  9168  005E8C  5006               	movf	__tdiv_to_l_@f2+2,w,c
  9169  005E8E  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  9170  005E90  800A               	bsf	__tdiv_to_l_@quot,0,c
  9171  005E92                     l728:
  9172  005E92  90D8               	bcf	status,0,c
  9173  005E94  3601               	rlcf	__tdiv_to_l_@f1,f,c
  9174  005E96  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  9175  005E98  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  9176  005E9A  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  9177  005E9C  D7E6               	goto	l727
  9178  005E9E  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  9179  005EA0  D016               	goto	l3176
  9180  005EA2  500F               	movf	__tdiv_to_l_@exp1,w,c
  9181  005EA4  0A80               	xorlw	128
  9182  005EA6  0F97               	addlw	151
  9183  005EA8  B0D8               	btfsc	status,0,c
  9184  005EAA  D009               	goto	l3172
  9185  005EAC  0E00               	movlw	0
  9186  005EAE  6E01               	movwf	?__tdiv_to_l_,c
  9187  005EB0  0E00               	movlw	0
  9188  005EB2  6E02               	movwf	?__tdiv_to_l_+1,c
  9189  005EB4  0E00               	movlw	0
  9190  005EB6  6E03               	movwf	?__tdiv_to_l_+2,c
  9191  005EB8  0E00               	movlw	0
  9192  005EBA  6E04               	movwf	?__tdiv_to_l_+3,c
  9193  005EBC  0012               	return	
  9194  005EBE                     l3172:
  9195  005EBE  90D8               	bcf	status,0,c
  9196  005EC0  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  9197  005EC2  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  9198  005EC4  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  9199  005EC6  320A               	rrcf	__tdiv_to_l_@quot,f,c
  9200  005EC8  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  9201  005ECA  D7F9               	goto	l3172
  9202  005ECC  D015               	goto	l734
  9203  005ECE                     l3176:
  9204  005ECE  0E17               	movlw	23
  9205  005ED0  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  9206  005ED2  D00F               	goto	l3184
  9207  005ED4  0E00               	movlw	0
  9208  005ED6  6E01               	movwf	?__tdiv_to_l_,c
  9209  005ED8  0E00               	movlw	0
  9210  005EDA  6E02               	movwf	?__tdiv_to_l_+1,c
  9211  005EDC  0E00               	movlw	0
  9212  005EDE  6E03               	movwf	?__tdiv_to_l_+2,c
  9213  005EE0  0E00               	movlw	0
  9214  005EE2  6E04               	movwf	?__tdiv_to_l_+3,c
  9215  005EE4  0012               	return	
  9216  005EE6                     l3182:
  9217  005EE6  90D8               	bcf	status,0,c
  9218  005EE8  360A               	rlcf	__tdiv_to_l_@quot,f,c
  9219  005EEA  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  9220  005EEC  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  9221  005EEE  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  9222  005EF0  060F               	decf	__tdiv_to_l_@exp1,f,c
  9223  005EF2                     l3184:
  9224  005EF2  500F               	movf	__tdiv_to_l_@exp1,w,c
  9225  005EF4  A4D8               	btfss	status,2,c
  9226  005EF6  D7F7               	goto	l3182
  9227  005EF8                     l734:
  9228  005EF8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  9229  005EFC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  9230  005F00  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  9231  005F04  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  9232  005F08  0012               	return		;funcret
  9233  005F0A                     __end_of__tdiv_to_l_:
  9234                           	opt stack 0
  9235                           tblptru	equ	0xFF8
  9236                           tblptrh	equ	0xFF7
  9237                           tblptrl	equ	0xFF6
  9238                           tablat	equ	0xFF5
  9239                           prodh	equ	0xFF4
  9240                           prodl	equ	0xFF3
  9241                           indf0	equ	0xFEF
  9242                           fsr0h	equ	0xFEA
  9243                           fsr0l	equ	0xFE9
  9244                           wreg	equ	0xFE8
  9245                           indf1	equ	0xFE7
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function __div_to_l_ *****************
  9256 ;; Defined at:
  9257 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  f1              3    0[COMRAM] unsigned long 
  9260 ;;  f2              3    3[COMRAM] unsigned long 
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;  quot            4    6[COMRAM] unsigned long 
  9263 ;;  exp1            1   11[COMRAM] unsigned char 
  9264 ;;  cntr            1   10[COMRAM] unsigned char 
  9265 ;; Return value:  Size  Location     Type
  9266 ;;                  4    0[COMRAM] unsigned long 
  9267 ;; Registers used:
  9268 ;;		wreg, status,2, status,0
  9269 ;; Tracked objects:
  9270 ;;		On entry : 0/0
  9271 ;;		On exit  : 0/0
  9272 ;;		Unchanged: 0/0
  9273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9274 ;;      Params:         6       0       0       0       0       0       0
  9275 ;;      Locals:         6       0       0       0       0       0       0
  9276 ;;      Temps:          0       0       0       0       0       0       0
  9277 ;;      Totals:        12       0       0       0       0       0       0
  9278 ;;Total ram usage:       12 bytes
  9279 ;; Hardware stack levels used:    1
  9280 ;; This function calls:
  9281 ;;		Nothing
  9282 ;; This function is called by:
  9283 ;;		_sprintf
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text40
  9288  005CB0                     __ptext40:
  9289                           	opt stack 0
  9290  005CB0                     __div_to_l_:
  9291                           	opt stack 27
  9292                           
  9293                           ;incstack = 0
  9294  005CB0  3403               	rlcf	__div_to_l_@f1+2,w,c
  9295  005CB2  3404               	rlcf	__div_to_l_@f1+3,w,c
  9296  005CB4  6E0C               	movwf	__div_to_l_@exp1,c
  9297  005CB6  500C               	movf	__div_to_l_@exp1,w,c
  9298  005CB8  A4D8               	btfss	status,2,c
  9299  005CBA  D009               	goto	l3192
  9300  005CBC  0E00               	movlw	0
  9301  005CBE  6E01               	movwf	?__div_to_l_,c
  9302  005CC0  0E00               	movlw	0
  9303  005CC2  6E02               	movwf	?__div_to_l_+1,c
  9304  005CC4  0E00               	movlw	0
  9305  005CC6  6E03               	movwf	?__div_to_l_+2,c
  9306  005CC8  0E00               	movlw	0
  9307  005CCA  6E04               	movwf	?__div_to_l_+3,c
  9308  005CCC  0012               	return	
  9309  005CCE                     l3192:
  9310  005CCE  3406               	rlcf	__div_to_l_@f2+2,w,c
  9311  005CD0  3407               	rlcf	__div_to_l_@f2+3,w,c
  9312  005CD2  6E0B               	movwf	__div_to_l_@cntr,c
  9313  005CD4  500B               	movf	__div_to_l_@cntr,w,c
  9314  005CD6  A4D8               	btfss	status,2,c
  9315  005CD8  D009               	goto	l3198
  9316  005CDA  0E00               	movlw	0
  9317  005CDC  6E01               	movwf	?__div_to_l_,c
  9318  005CDE  0E00               	movlw	0
  9319  005CE0  6E02               	movwf	?__div_to_l_+1,c
  9320  005CE2  0E00               	movlw	0
  9321  005CE4  6E03               	movwf	?__div_to_l_+2,c
  9322  005CE6  0E00               	movlw	0
  9323  005CE8  6E04               	movwf	?__div_to_l_+3,c
  9324  005CEA  0012               	return	
  9325  005CEC                     l3198:
  9326  005CEC  8E03               	bsf	__div_to_l_@f1+2,7,c
  9327  005CEE  0EFF               	movlw	255
  9328  005CF0  1601               	andwf	__div_to_l_@f1,f,c
  9329  005CF2  0EFF               	movlw	255
  9330  005CF4  1602               	andwf	__div_to_l_@f1+1,f,c
  9331  005CF6  0EFF               	movlw	255
  9332  005CF8  1603               	andwf	__div_to_l_@f1+2,f,c
  9333  005CFA  0E00               	movlw	0
  9334  005CFC  1604               	andwf	__div_to_l_@f1+3,f,c
  9335  005CFE  8E06               	bsf	__div_to_l_@f2+2,7,c
  9336  005D00  0EFF               	movlw	255
  9337  005D02  1604               	andwf	__div_to_l_@f2,f,c
  9338  005D04  0EFF               	movlw	255
  9339  005D06  1605               	andwf	__div_to_l_@f2+1,f,c
  9340  005D08  0EFF               	movlw	255
  9341  005D0A  1606               	andwf	__div_to_l_@f2+2,f,c
  9342  005D0C  0E00               	movlw	0
  9343  005D0E  1607               	andwf	__div_to_l_@f2+3,f,c
  9344  005D10  0E00               	movlw	0
  9345  005D12  6E07               	movwf	__div_to_l_@quot,c
  9346  005D14  0E00               	movlw	0
  9347  005D16  6E08               	movwf	__div_to_l_@quot+1,c
  9348  005D18  0E00               	movlw	0
  9349  005D1A  6E09               	movwf	__div_to_l_@quot+2,c
  9350  005D1C  0E00               	movlw	0
  9351  005D1E  6E0A               	movwf	__div_to_l_@quot+3,c
  9352  005D20  0E7F               	movlw	127
  9353  005D22  5E0C               	subwf	__div_to_l_@exp1,f,c
  9354  005D24  500B               	movf	__div_to_l_@cntr,w,c
  9355  005D26  0FA0               	addlw	160
  9356  005D28  5E0C               	subwf	__div_to_l_@exp1,f,c
  9357  005D2A  0E20               	movlw	32
  9358  005D2C  6E0B               	movwf	__div_to_l_@cntr,c
  9359  005D2E                     l3212:
  9360  005D2E  90D8               	bcf	status,0,c
  9361  005D30  3607               	rlcf	__div_to_l_@quot,f,c
  9362  005D32  3608               	rlcf	__div_to_l_@quot+1,f,c
  9363  005D34  3609               	rlcf	__div_to_l_@quot+2,f,c
  9364  005D36  360A               	rlcf	__div_to_l_@quot+3,f,c
  9365  005D38  5004               	movf	__div_to_l_@f2,w,c
  9366  005D3A  5C01               	subwf	__div_to_l_@f1,w,c
  9367  005D3C  5005               	movf	__div_to_l_@f2+1,w,c
  9368  005D3E  5802               	subwfb	__div_to_l_@f1+1,w,c
  9369  005D40  5006               	movf	__div_to_l_@f2+2,w,c
  9370  005D42  5803               	subwfb	__div_to_l_@f1+2,w,c
  9371  005D44  5007               	movf	__div_to_l_@f2+3,w,c
  9372  005D46  5804               	subwfb	__div_to_l_@f1+3,w,c
  9373  005D48  A0D8               	btfss	status,0,c
  9374  005D4A  D009               	goto	l3220
  9375  005D4C  5004               	movf	__div_to_l_@f2,w,c
  9376  005D4E  5E01               	subwf	__div_to_l_@f1,f,c
  9377  005D50  5005               	movf	__div_to_l_@f2+1,w,c
  9378  005D52  5A02               	subwfb	__div_to_l_@f1+1,f,c
  9379  005D54  5006               	movf	__div_to_l_@f2+2,w,c
  9380  005D56  5A03               	subwfb	__div_to_l_@f1+2,f,c
  9381  005D58  5007               	movf	__div_to_l_@f2+3,w,c
  9382  005D5A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  9383  005D5C  8007               	bsf	__div_to_l_@quot,0,c
  9384  005D5E                     l3220:
  9385  005D5E  90D8               	bcf	status,0,c
  9386  005D60  3601               	rlcf	__div_to_l_@f1,f,c
  9387  005D62  3602               	rlcf	__div_to_l_@f1+1,f,c
  9388  005D64  3603               	rlcf	__div_to_l_@f1+2,f,c
  9389  005D66  3604               	rlcf	__div_to_l_@f1+3,f,c
  9390  005D68  2E0B               	decfsz	__div_to_l_@cntr,f,c
  9391  005D6A  D7E1               	goto	l3212
  9392  005D6C  AE0C               	btfss	__div_to_l_@exp1,7,c
  9393  005D6E  D016               	goto	l3236
  9394  005D70  500C               	movf	__div_to_l_@exp1,w,c
  9395  005D72  0A80               	xorlw	128
  9396  005D74  0F9F               	addlw	159
  9397  005D76  B0D8               	btfsc	status,0,c
  9398  005D78  D009               	goto	l3232
  9399  005D7A  0E00               	movlw	0
  9400  005D7C  6E01               	movwf	?__div_to_l_,c
  9401  005D7E  0E00               	movlw	0
  9402  005D80  6E02               	movwf	?__div_to_l_+1,c
  9403  005D82  0E00               	movlw	0
  9404  005D84  6E03               	movwf	?__div_to_l_+2,c
  9405  005D86  0E00               	movlw	0
  9406  005D88  6E04               	movwf	?__div_to_l_+3,c
  9407  005D8A  0012               	return	
  9408  005D8C                     l3232:
  9409  005D8C  90D8               	bcf	status,0,c
  9410  005D8E  320A               	rrcf	__div_to_l_@quot+3,f,c
  9411  005D90  3209               	rrcf	__div_to_l_@quot+2,f,c
  9412  005D92  3208               	rrcf	__div_to_l_@quot+1,f,c
  9413  005D94  3207               	rrcf	__div_to_l_@quot,f,c
  9414  005D96  3E0C               	incfsz	__div_to_l_@exp1,f,c
  9415  005D98  D7F9               	goto	l3232
  9416  005D9A  D015               	goto	l630
  9417  005D9C                     l3236:
  9418  005D9C  0E1F               	movlw	31
  9419  005D9E  640C               	cpfsgt	__div_to_l_@exp1,c
  9420  005DA0  D00F               	goto	l3244
  9421  005DA2  0E00               	movlw	0
  9422  005DA4  6E01               	movwf	?__div_to_l_,c
  9423  005DA6  0E00               	movlw	0
  9424  005DA8  6E02               	movwf	?__div_to_l_+1,c
  9425  005DAA  0E00               	movlw	0
  9426  005DAC  6E03               	movwf	?__div_to_l_+2,c
  9427  005DAE  0E00               	movlw	0
  9428  005DB0  6E04               	movwf	?__div_to_l_+3,c
  9429  005DB2  0012               	return	
  9430  005DB4                     l3242:
  9431  005DB4  90D8               	bcf	status,0,c
  9432  005DB6  3607               	rlcf	__div_to_l_@quot,f,c
  9433  005DB8  3608               	rlcf	__div_to_l_@quot+1,f,c
  9434  005DBA  3609               	rlcf	__div_to_l_@quot+2,f,c
  9435  005DBC  360A               	rlcf	__div_to_l_@quot+3,f,c
  9436  005DBE  060C               	decf	__div_to_l_@exp1,f,c
  9437  005DC0                     l3244:
  9438  005DC0  500C               	movf	__div_to_l_@exp1,w,c
  9439  005DC2  A4D8               	btfss	status,2,c
  9440  005DC4  D7F7               	goto	l3242
  9441  005DC6                     l630:
  9442  005DC6  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  9443  005DCA  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  9444  005DCE  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  9445  005DD2  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  9446  005DD6  0012               	return		;funcret
  9447  005DD8                     __end_of__div_to_l_:
  9448                           	opt stack 0
  9449                           tblptru	equ	0xFF8
  9450                           tblptrh	equ	0xFF7
  9451                           tblptrl	equ	0xFF6
  9452                           tablat	equ	0xFF5
  9453                           prodh	equ	0xFF4
  9454                           prodl	equ	0xFF3
  9455                           indf0	equ	0xFEF
  9456                           fsr0h	equ	0xFEA
  9457                           fsr0l	equ	0xFE9
  9458                           wreg	equ	0xFE8
  9459                           indf1	equ	0xFE7
  9460                           fsr1h	equ	0xFE2
  9461                           fsr1l	equ	0xFE1
  9462                           indf2	equ	0xFDF
  9463                           postinc2	equ	0xFDE
  9464                           postdec2	equ	0xFDD
  9465                           fsr2h	equ	0xFDA
  9466                           fsr2l	equ	0xFD9
  9467                           status	equ	0xFD8
  9468                           
  9469 ;; *************** function ___lltoft *****************
  9470 ;; Defined at:
  9471 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;  c               4    8[COMRAM] unsigned long 
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  exp             1   16[COMRAM] unsigned char 
  9476 ;; Return value:  Size  Location     Type
  9477 ;;                  3    8[COMRAM] float 
  9478 ;; Registers used:
  9479 ;;		wreg, status,2, status,0, cstack
  9480 ;; Tracked objects:
  9481 ;;		On entry : 0/0
  9482 ;;		On exit  : 0/0
  9483 ;;		Unchanged: 0/0
  9484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9485 ;;      Params:         4       0       0       0       0       0       0
  9486 ;;      Locals:         1       0       0       0       0       0       0
  9487 ;;      Temps:          4       0       0       0       0       0       0
  9488 ;;      Totals:         9       0       0       0       0       0       0
  9489 ;;Total ram usage:        9 bytes
  9490 ;; Hardware stack levels used:    1
  9491 ;; Hardware stack levels required when called:    1
  9492 ;; This function calls:
  9493 ;;		___ftpack
  9494 ;; This function is called by:
  9495 ;;		_sprintf
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text41
  9500  005218                     __ptext41:
  9501                           	opt stack 0
  9502  005218                     ___lltoft:
  9503                           	opt stack 26
  9504                           
  9505                           ;incstack = 0
  9506  005218  0E8E               	movlw	142
  9507  00521A  6E11               	movwf	___lltoft@exp,c
  9508  00521C  D006               	goto	l3364
  9509  00521E                     l3362:
  9510  00521E  90D8               	bcf	status,0,c
  9511  005220  320C               	rrcf	___lltoft@c+3,f,c
  9512  005222  320B               	rrcf	___lltoft@c+2,f,c
  9513  005224  320A               	rrcf	___lltoft@c+1,f,c
  9514  005226  3209               	rrcf	___lltoft@c,f,c
  9515  005228  2A11               	incf	___lltoft@exp,f,c
  9516  00522A                     l3364:
  9517  00522A  0E00               	movlw	0
  9518  00522C  1409               	andwf	___lltoft@c,w,c
  9519  00522E  6E0D               	movwf	??___lltoft& (0+255),c
  9520  005230  0E00               	movlw	0
  9521  005232  140A               	andwf	___lltoft@c+1,w,c
  9522  005234  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  9523  005236  0E00               	movlw	0
  9524  005238  140B               	andwf	___lltoft@c+2,w,c
  9525  00523A  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  9526  00523C  0EFF               	movlw	255
  9527  00523E  140C               	andwf	___lltoft@c+3,w,c
  9528  005240  6E10               	movwf	(??___lltoft+3)& (0+255),c
  9529  005242  500D               	movf	??___lltoft,w,c
  9530  005244  100E               	iorwf	??___lltoft+1,w,c
  9531  005246  100F               	iorwf	??___lltoft+2,w,c
  9532  005248  1010               	iorwf	??___lltoft+3,w,c
  9533  00524A  A4D8               	btfss	status,2,c
  9534  00524C  D7E8               	goto	l3362
  9535  00524E  C009  F001         	movff	___lltoft@c,___ftpack@arg
  9536  005252  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  9537  005256  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  9538  00525A  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  9539  00525E  0E00               	movlw	0
  9540  005260  6E05               	movwf	___ftpack@sign,c
  9541  005262  EC77  F02B         	call	___ftpack	;wreg free
  9542  005266  C001  F009         	movff	?___ftpack,?___lltoft
  9543  00526A  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  9544  00526E  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  9545  005272  0012               	return	
  9546  005274                     __end_of___lltoft:
  9547                           	opt stack 0
  9548                           tblptru	equ	0xFF8
  9549                           tblptrh	equ	0xFF7
  9550                           tblptrl	equ	0xFF6
  9551                           tablat	equ	0xFF5
  9552                           prodh	equ	0xFF4
  9553                           prodl	equ	0xFF3
  9554                           indf0	equ	0xFEF
  9555                           fsr0h	equ	0xFEA
  9556                           fsr0l	equ	0xFE9
  9557                           wreg	equ	0xFE8
  9558                           indf1	equ	0xFE7
  9559                           fsr1h	equ	0xFE2
  9560                           fsr1l	equ	0xFE1
  9561                           indf2	equ	0xFDF
  9562                           postinc2	equ	0xFDE
  9563                           postdec2	equ	0xFDD
  9564                           fsr2h	equ	0xFDA
  9565                           fsr2l	equ	0xFD9
  9566                           status	equ	0xFD8
  9567                           
  9568 ;; *************** function ___llmod *****************
  9569 ;; Defined at:
  9570 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  9571 ;; Parameters:    Size  Location     Type
  9572 ;;  dividend        4   13[COMRAM] unsigned long 
  9573 ;;  divisor         4   17[COMRAM] unsigned long 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  counter         1   21[COMRAM] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;                  4   13[COMRAM] unsigned long 
  9578 ;; Registers used:
  9579 ;;		wreg, status,2, status,0
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9585 ;;      Params:         8       0       0       0       0       0       0
  9586 ;;      Locals:         1       0       0       0       0       0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0
  9588 ;;      Totals:         9       0       0       0       0       0       0
  9589 ;;Total ram usage:        9 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; This function calls:
  9592 ;;		Nothing
  9593 ;; This function is called by:
  9594 ;;		_sprintf
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text42
  9599  0052D0                     __ptext42:
  9600                           	opt stack 0
  9601  0052D0                     ___llmod:
  9602                           	opt stack 27
  9603                           
  9604                           ;incstack = 0
  9605  0052D0  5012               	movf	___llmod@divisor,w,c
  9606  0052D2  1013               	iorwf	___llmod@divisor+1,w,c
  9607  0052D4  1014               	iorwf	___llmod@divisor+2,w,c
  9608  0052D6  1015               	iorwf	___llmod@divisor+3,w,c
  9609  0052D8  B4D8               	btfsc	status,2,c
  9610  0052DA  D024               	goto	l819
  9611  0052DC  0E01               	movlw	1
  9612  0052DE  6E16               	movwf	___llmod@counter,c
  9613  0052E0  D006               	goto	l3350
  9614  0052E2                     l3348:
  9615  0052E2  90D8               	bcf	status,0,c
  9616  0052E4  3612               	rlcf	___llmod@divisor,f,c
  9617  0052E6  3613               	rlcf	___llmod@divisor+1,f,c
  9618  0052E8  3614               	rlcf	___llmod@divisor+2,f,c
  9619  0052EA  3615               	rlcf	___llmod@divisor+3,f,c
  9620  0052EC  2A16               	incf	___llmod@counter,f,c
  9621  0052EE                     l3350:
  9622  0052EE  AE15               	btfss	___llmod@divisor+3,7,c
  9623  0052F0  D7F8               	goto	l3348
  9624  0052F2                     l3352:
  9625  0052F2  5012               	movf	___llmod@divisor,w,c
  9626  0052F4  5C0E               	subwf	___llmod@dividend,w,c
  9627  0052F6  5013               	movf	___llmod@divisor+1,w,c
  9628  0052F8  580F               	subwfb	___llmod@dividend+1,w,c
  9629  0052FA  5014               	movf	___llmod@divisor+2,w,c
  9630  0052FC  5810               	subwfb	___llmod@dividend+2,w,c
  9631  0052FE  5015               	movf	___llmod@divisor+3,w,c
  9632  005300  5811               	subwfb	___llmod@dividend+3,w,c
  9633  005302  A0D8               	btfss	status,0,c
  9634  005304  D008               	goto	l3356
  9635  005306  5012               	movf	___llmod@divisor,w,c
  9636  005308  5E0E               	subwf	___llmod@dividend,f,c
  9637  00530A  5013               	movf	___llmod@divisor+1,w,c
  9638  00530C  5A0F               	subwfb	___llmod@dividend+1,f,c
  9639  00530E  5014               	movf	___llmod@divisor+2,w,c
  9640  005310  5A10               	subwfb	___llmod@dividend+2,f,c
  9641  005312  5015               	movf	___llmod@divisor+3,w,c
  9642  005314  5A11               	subwfb	___llmod@dividend+3,f,c
  9643  005316                     l3356:
  9644  005316  90D8               	bcf	status,0,c
  9645  005318  3215               	rrcf	___llmod@divisor+3,f,c
  9646  00531A  3214               	rrcf	___llmod@divisor+2,f,c
  9647  00531C  3213               	rrcf	___llmod@divisor+1,f,c
  9648  00531E  3212               	rrcf	___llmod@divisor,f,c
  9649  005320  2E16               	decfsz	___llmod@counter,f,c
  9650  005322  D7E7               	goto	l3352
  9651  005324                     l819:
  9652  005324  C00E  F00E         	movff	___llmod@dividend,?___llmod
  9653  005328  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  9654  00532C  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  9655  005330  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  9656  005334  0012               	return		;funcret
  9657  005336                     __end_of___llmod:
  9658                           	opt stack 0
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           indf0	equ	0xFEF
  9666                           fsr0h	equ	0xFEA
  9667                           fsr0l	equ	0xFE9
  9668                           wreg	equ	0xFE8
  9669                           indf1	equ	0xFE7
  9670                           fsr1h	equ	0xFE2
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           fsr2h	equ	0xFDA
  9676                           fsr2l	equ	0xFD9
  9677                           status	equ	0xFD8
  9678                           
  9679 ;; *************** function ___lldiv *****************
  9680 ;; Defined at:
  9681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  9682 ;; Parameters:    Size  Location     Type
  9683 ;;  dividend        4    0[COMRAM] unsigned long 
  9684 ;;  divisor         4    4[COMRAM] unsigned long 
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;  quotient        4    8[COMRAM] unsigned long 
  9687 ;;  counter         1   12[COMRAM] unsigned char 
  9688 ;; Return value:  Size  Location     Type
  9689 ;;                  4    0[COMRAM] unsigned long 
  9690 ;; Registers used:
  9691 ;;		wreg, status,2, status,0
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9697 ;;      Params:         8       0       0       0       0       0       0
  9698 ;;      Locals:         5       0       0       0       0       0       0
  9699 ;;      Temps:          0       0       0       0       0       0       0
  9700 ;;      Totals:        13       0       0       0       0       0       0
  9701 ;;Total ram usage:       13 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_sprintf
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text43
  9711  0053A6                     __ptext43:
  9712                           	opt stack 0
  9713  0053A6                     ___lldiv:
  9714                           	opt stack 27
  9715                           
  9716                           ;incstack = 0
  9717  0053A6  0E00               	movlw	0
  9718  0053A8  6E09               	movwf	___lldiv@quotient,c
  9719  0053AA  0E00               	movlw	0
  9720  0053AC  6E0A               	movwf	___lldiv@quotient+1,c
  9721  0053AE  0E00               	movlw	0
  9722  0053B0  6E0B               	movwf	___lldiv@quotient+2,c
  9723  0053B2  0E00               	movlw	0
  9724  0053B4  6E0C               	movwf	___lldiv@quotient+3,c
  9725  0053B6  5005               	movf	___lldiv@divisor,w,c
  9726  0053B8  1006               	iorwf	___lldiv@divisor+1,w,c
  9727  0053BA  1007               	iorwf	___lldiv@divisor+2,w,c
  9728  0053BC  1008               	iorwf	___lldiv@divisor+3,w,c
  9729  0053BE  B4D8               	btfsc	status,2,c
  9730  0053C0  D02A               	goto	l809
  9731  0053C2  0E01               	movlw	1
  9732  0053C4  6E0D               	movwf	___lldiv@counter,c
  9733  0053C6  D006               	goto	l3330
  9734  0053C8                     l3328:
  9735  0053C8  90D8               	bcf	status,0,c
  9736  0053CA  3605               	rlcf	___lldiv@divisor,f,c
  9737  0053CC  3606               	rlcf	___lldiv@divisor+1,f,c
  9738  0053CE  3607               	rlcf	___lldiv@divisor+2,f,c
  9739  0053D0  3608               	rlcf	___lldiv@divisor+3,f,c
  9740  0053D2  2A0D               	incf	___lldiv@counter,f,c
  9741  0053D4                     l3330:
  9742  0053D4  AE08               	btfss	___lldiv@divisor+3,7,c
  9743  0053D6  D7F8               	goto	l3328
  9744  0053D8                     l3332:
  9745  0053D8  90D8               	bcf	status,0,c
  9746  0053DA  3609               	rlcf	___lldiv@quotient,f,c
  9747  0053DC  360A               	rlcf	___lldiv@quotient+1,f,c
  9748  0053DE  360B               	rlcf	___lldiv@quotient+2,f,c
  9749  0053E0  360C               	rlcf	___lldiv@quotient+3,f,c
  9750  0053E2  5005               	movf	___lldiv@divisor,w,c
  9751  0053E4  5C01               	subwf	___lldiv@dividend,w,c
  9752  0053E6  5006               	movf	___lldiv@divisor+1,w,c
  9753  0053E8  5802               	subwfb	___lldiv@dividend+1,w,c
  9754  0053EA  5007               	movf	___lldiv@divisor+2,w,c
  9755  0053EC  5803               	subwfb	___lldiv@dividend+2,w,c
  9756  0053EE  5008               	movf	___lldiv@divisor+3,w,c
  9757  0053F0  5804               	subwfb	___lldiv@dividend+3,w,c
  9758  0053F2  A0D8               	btfss	status,0,c
  9759  0053F4  D009               	goto	l3340
  9760  0053F6  5005               	movf	___lldiv@divisor,w,c
  9761  0053F8  5E01               	subwf	___lldiv@dividend,f,c
  9762  0053FA  5006               	movf	___lldiv@divisor+1,w,c
  9763  0053FC  5A02               	subwfb	___lldiv@dividend+1,f,c
  9764  0053FE  5007               	movf	___lldiv@divisor+2,w,c
  9765  005400  5A03               	subwfb	___lldiv@dividend+2,f,c
  9766  005402  5008               	movf	___lldiv@divisor+3,w,c
  9767  005404  5A04               	subwfb	___lldiv@dividend+3,f,c
  9768  005406  8009               	bsf	___lldiv@quotient,0,c
  9769  005408                     l3340:
  9770  005408  90D8               	bcf	status,0,c
  9771  00540A  3208               	rrcf	___lldiv@divisor+3,f,c
  9772  00540C  3207               	rrcf	___lldiv@divisor+2,f,c
  9773  00540E  3206               	rrcf	___lldiv@divisor+1,f,c
  9774  005410  3205               	rrcf	___lldiv@divisor,f,c
  9775  005412  2E0D               	decfsz	___lldiv@counter,f,c
  9776  005414  D7E1               	goto	l3332
  9777  005416                     l809:
  9778  005416  C009  F001         	movff	___lldiv@quotient,?___lldiv
  9779  00541A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  9780  00541E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  9781  005422  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  9782  005426  0012               	return		;funcret
  9783  005428                     __end_of___lldiv:
  9784                           	opt stack 0
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           indf0	equ	0xFEF
  9792                           fsr0h	equ	0xFEA
  9793                           fsr0l	equ	0xFE9
  9794                           wreg	equ	0xFE8
  9795                           indf1	equ	0xFE7
  9796                           fsr1h	equ	0xFE2
  9797                           fsr1l	equ	0xFE1
  9798                           indf2	equ	0xFDF
  9799                           postinc2	equ	0xFDE
  9800                           postdec2	equ	0xFDD
  9801                           fsr2h	equ	0xFDA
  9802                           fsr2l	equ	0xFD9
  9803                           status	equ	0xFD8
  9804                           
  9805 ;; *************** function ___fttol *****************
  9806 ;; Defined at:
  9807 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  f1              3   42[COMRAM] float 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;  lval            4   52[COMRAM] unsigned long 
  9812 ;;  exp1            1   56[COMRAM] unsigned char 
  9813 ;;  sign1           1   51[COMRAM] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  4   42[COMRAM] long 
  9816 ;; Registers used:
  9817 ;;		wreg, status,2, status,0
  9818 ;; Tracked objects:
  9819 ;;		On entry : 0/0
  9820 ;;		On exit  : 0/0
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9823 ;;      Params:         4       0       0       0       0       0       0
  9824 ;;      Locals:         6       0       0       0       0       0       0
  9825 ;;      Temps:          5       0       0       0       0       0       0
  9826 ;;      Totals:        15       0       0       0       0       0       0
  9827 ;;Total ram usage:       15 bytes
  9828 ;; Hardware stack levels used:    1
  9829 ;; This function calls:
  9830 ;;		Nothing
  9831 ;; This function is called by:
  9832 ;;		_util_getSolarCurrent
  9833 ;;		_util_getBatteryCurrent
  9834 ;;		_sprintf
  9835 ;; This function uses a non-reentrant model
  9836 ;;
  9837                           
  9838                           	psect	text44
  9839  005AC8                     __ptext44:
  9840                           	opt stack 0
  9841  005AC8                     ___fttol:
  9842                           	opt stack 28
  9843                           
  9844                           ;incstack = 0
  9845  005AC8  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  9846  005ACC  6A30               	clrf	(??___fttol+1)& (0+255),c
  9847  005ACE  6A31               	clrf	(??___fttol+2)& (0+255),c
  9848  005AD0  342C               	rlcf	___fttol@f1+1,w,c
  9849  005AD2  362F               	rlcf	??___fttol& (0+255),f,c
  9850  005AD4  E301               	bnc	u2941
  9851  005AD6  8030               	bsf	(??___fttol+1)& (0+255),0,c
  9852  005AD8                     u2941:
  9853  005AD8  502F               	movf	??___fttol,w,c
  9854  005ADA  6E39               	movwf	___fttol@exp1,c
  9855  005ADC  5039               	movf	___fttol@exp1,w,c
  9856  005ADE  A4D8               	btfss	status,2,c
  9857  005AE0  D009               	goto	l3282
  9858  005AE2  0E00               	movlw	0
  9859  005AE4  6E2B               	movwf	?___fttol,c
  9860  005AE6  0E00               	movlw	0
  9861  005AE8  6E2C               	movwf	?___fttol+1,c
  9862  005AEA  0E00               	movlw	0
  9863  005AEC  6E2D               	movwf	?___fttol+2,c
  9864  005AEE  0E00               	movlw	0
  9865  005AF0  6E2E               	movwf	?___fttol+3,c
  9866  005AF2  0012               	return	
  9867  005AF4                     l3282:
  9868  005AF4  0E17               	movlw	23
  9869  005AF6  6E2F               	movwf	??___fttol& (0+255),c
  9870  005AF8  C02B  F030         	movff	___fttol@f1,??___fttol+1
  9871  005AFC  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  9872  005B00  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  9873  005B04  282F               	incf	??___fttol,w,c
  9874  005B06  6E33               	movwf	(??___fttol+4)& (0+255),c
  9875  005B08  D004               	goto	u2960
  9876  005B0A                     u2965:
  9877  005B0A  90D8               	bcf	status,0,c
  9878  005B0C  3232               	rrcf	??___fttol+3,f,c
  9879  005B0E  3231               	rrcf	??___fttol+2,f,c
  9880  005B10  3230               	rrcf	??___fttol+1,f,c
  9881  005B12                     u2960:
  9882  005B12  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  9883  005B14  D7FA               	goto	u2965
  9884  005B16  5030               	movf	??___fttol+1,w,c
  9885  005B18  6E34               	movwf	___fttol@sign1,c
  9886  005B1A  8E2C               	bsf	___fttol@f1+1,7,c
  9887  005B1C  0EFF               	movlw	255
  9888  005B1E  162B               	andwf	___fttol@f1,f,c
  9889  005B20  0EFF               	movlw	255
  9890  005B22  162C               	andwf	___fttol@f1+1,f,c
  9891  005B24  0E00               	movlw	0
  9892  005B26  162D               	andwf	___fttol@f1+2,f,c
  9893  005B28  502B               	movf	___fttol@f1,w,c
  9894  005B2A  6E35               	movwf	___fttol@lval,c
  9895  005B2C  502C               	movf	___fttol@f1+1,w,c
  9896  005B2E  6E36               	movwf	___fttol@lval+1,c
  9897  005B30  502D               	movf	___fttol@f1+2,w,c
  9898  005B32  6E37               	movwf	___fttol@lval+2,c
  9899  005B34  6A38               	clrf	___fttol@lval+3,c
  9900  005B36  0E8E               	movlw	142
  9901  005B38  5E39               	subwf	___fttol@exp1,f,c
  9902  005B3A  AE39               	btfss	___fttol@exp1,7,c
  9903  005B3C  D016               	goto	l3304
  9904  005B3E  5039               	movf	___fttol@exp1,w,c
  9905  005B40  0A80               	xorlw	128
  9906  005B42  0F8F               	addlw	143
  9907  005B44  B0D8               	btfsc	status,0,c
  9908  005B46  D009               	goto	l3300
  9909  005B48  0E00               	movlw	0
  9910  005B4A  6E2B               	movwf	?___fttol,c
  9911  005B4C  0E00               	movlw	0
  9912  005B4E  6E2C               	movwf	?___fttol+1,c
  9913  005B50  0E00               	movlw	0
  9914  005B52  6E2D               	movwf	?___fttol+2,c
  9915  005B54  0E00               	movlw	0
  9916  005B56  6E2E               	movwf	?___fttol+3,c
  9917  005B58  0012               	return	
  9918  005B5A                     l3300:
  9919  005B5A  90D8               	bcf	status,0,c
  9920  005B5C  3238               	rrcf	___fttol@lval+3,f,c
  9921  005B5E  3237               	rrcf	___fttol@lval+2,f,c
  9922  005B60  3236               	rrcf	___fttol@lval+1,f,c
  9923  005B62  3235               	rrcf	___fttol@lval,f,c
  9924  005B64  3E39               	incfsz	___fttol@exp1,f,c
  9925  005B66  D7F9               	goto	l3300
  9926  005B68  D015               	goto	l3314
  9927  005B6A                     l3304:
  9928  005B6A  0E17               	movlw	23
  9929  005B6C  6439               	cpfsgt	___fttol@exp1,c
  9930  005B6E  D00F               	goto	l3312
  9931  005B70  0E00               	movlw	0
  9932  005B72  6E2B               	movwf	?___fttol,c
  9933  005B74  0E00               	movlw	0
  9934  005B76  6E2C               	movwf	?___fttol+1,c
  9935  005B78  0E00               	movlw	0
  9936  005B7A  6E2D               	movwf	?___fttol+2,c
  9937  005B7C  0E00               	movlw	0
  9938  005B7E  6E2E               	movwf	?___fttol+3,c
  9939  005B80  0012               	return	
  9940  005B82                     l3310:
  9941  005B82  90D8               	bcf	status,0,c
  9942  005B84  3635               	rlcf	___fttol@lval,f,c
  9943  005B86  3636               	rlcf	___fttol@lval+1,f,c
  9944  005B88  3637               	rlcf	___fttol@lval+2,f,c
  9945  005B8A  3638               	rlcf	___fttol@lval+3,f,c
  9946  005B8C  0639               	decf	___fttol@exp1,f,c
  9947  005B8E                     l3312:
  9948  005B8E  5039               	movf	___fttol@exp1,w,c
  9949  005B90  A4D8               	btfss	status,2,c
  9950  005B92  D7F7               	goto	l3310
  9951  005B94                     l3314:
  9952  005B94  5034               	movf	___fttol@sign1,w,c
  9953  005B96  B4D8               	btfsc	status,2,c
  9954  005B98  D008               	goto	l3318
  9955  005B9A  1E38               	comf	___fttol@lval+3,f,c
  9956  005B9C  1E37               	comf	___fttol@lval+2,f,c
  9957  005B9E  1E36               	comf	___fttol@lval+1,f,c
  9958  005BA0  6C35               	negf	___fttol@lval,c
  9959  005BA2  0E00               	movlw	0
  9960  005BA4  2236               	addwfc	___fttol@lval+1,f,c
  9961  005BA6  2237               	addwfc	___fttol@lval+2,f,c
  9962  005BA8  2238               	addwfc	___fttol@lval+3,f,c
  9963  005BAA                     l3318:
  9964  005BAA  C035  F02B         	movff	___fttol@lval,?___fttol
  9965  005BAE  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  9966  005BB2  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  9967  005BB6  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  9968  005BBA  0012               	return	
  9969  005BBC                     __end_of___fttol:
  9970                           	opt stack 0
  9971                           tblptru	equ	0xFF8
  9972                           tblptrh	equ	0xFF7
  9973                           tblptrl	equ	0xFF6
  9974                           tablat	equ	0xFF5
  9975                           prodh	equ	0xFF4
  9976                           prodl	equ	0xFF3
  9977                           indf0	equ	0xFEF
  9978                           fsr0h	equ	0xFEA
  9979                           fsr0l	equ	0xFE9
  9980                           wreg	equ	0xFE8
  9981                           indf1	equ	0xFE7
  9982                           fsr1h	equ	0xFE2
  9983                           fsr1l	equ	0xFE1
  9984                           indf2	equ	0xFDF
  9985                           postinc2	equ	0xFDE
  9986                           postdec2	equ	0xFDD
  9987                           fsr2h	equ	0xFDA
  9988                           fsr2l	equ	0xFD9
  9989                           status	equ	0xFD8
  9990                           
  9991 ;; *************** function ___ftsub *****************
  9992 ;; Defined at:
  9993 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  f1              3   57[COMRAM] float 
  9996 ;;  f2              3   60[COMRAM] float 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  3   57[COMRAM] float 
 10001 ;; Registers used:
 10002 ;;		wreg, status,2, status,0, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10008 ;;      Params:         6       0       0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0
 10011 ;;      Totals:         6       0       0       0       0       0       0
 10012 ;;Total ram usage:        6 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    2
 10015 ;; This function calls:
 10016 ;;		___ftadd
 10017 ;; This function is called by:
 10018 ;;		_sprintf
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text45
 10023  0050B4                     __ptext45:
 10024                           	opt stack 0
 10025  0050B4                     ___ftsub:
 10026                           	opt stack 25
 10027                           
 10028                           ;incstack = 0
 10029  0050B4  503D               	movf	___ftsub@f2,w,c
 10030  0050B6  103E               	iorwf	___ftsub@f2+1,w,c
 10031  0050B8  103F               	iorwf	___ftsub@f2+2,w,c
 10032  0050BA  B4D8               	btfsc	status,2,c
 10033  0050BC  D006               	goto	l3250
 10034  0050BE  0E00               	movlw	0
 10035  0050C0  1A3D               	xorwf	___ftsub@f2,f,c
 10036  0050C2  0E00               	movlw	0
 10037  0050C4  1A3E               	xorwf	___ftsub@f2+1,f,c
 10038  0050C6  0E80               	movlw	128
 10039  0050C8  1A3F               	xorwf	___ftsub@f2+2,f,c
 10040  0050CA                     l3250:
 10041  0050CA  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
 10042  0050CE  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
 10043  0050D2  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
 10044  0050D6  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
 10045  0050DA  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
 10046  0050DE  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
 10047  0050E2  ECD7  F030         	call	___ftadd	;wreg free
 10048  0050E6  C02E  F03A         	movff	?___ftadd,?___ftsub
 10049  0050EA  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
 10050  0050EE  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
 10051  0050F2  0012               	return	
 10052  0050F4                     __end_of___ftsub:
 10053                           	opt stack 0
 10054                           tblptru	equ	0xFF8
 10055                           tblptrh	equ	0xFF7
 10056                           tblptrl	equ	0xFF6
 10057                           tablat	equ	0xFF5
 10058                           prodh	equ	0xFF4
 10059                           prodl	equ	0xFF3
 10060                           indf0	equ	0xFEF
 10061                           fsr0h	equ	0xFEA
 10062                           fsr0l	equ	0xFE9
 10063                           wreg	equ	0xFE8
 10064                           indf1	equ	0xFE7
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function ___ftadd *****************
 10075 ;; Defined at:
 10076 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;  f1              3   45[COMRAM] float 
 10079 ;;  f2              3   48[COMRAM] float 
 10080 ;; Auto vars:     Size  Location     Type
 10081 ;;  exp1            1   56[COMRAM] unsigned char 
 10082 ;;  exp2            1   55[COMRAM] unsigned char 
 10083 ;;  sign            1   54[COMRAM] unsigned char 
 10084 ;; Return value:  Size  Location     Type
 10085 ;;                  3   45[COMRAM] float 
 10086 ;; Registers used:
 10087 ;;		wreg, status,2, status,0, cstack
 10088 ;; Tracked objects:
 10089 ;;		On entry : 0/0
 10090 ;;		On exit  : 0/0
 10091 ;;		Unchanged: 0/0
 10092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10093 ;;      Params:         6       0       0       0       0       0       0
 10094 ;;      Locals:         3       0       0       0       0       0       0
 10095 ;;      Temps:          3       0       0       0       0       0       0
 10096 ;;      Totals:        12       0       0       0       0       0       0
 10097 ;;Total ram usage:       12 bytes
 10098 ;; Hardware stack levels used:    1
 10099 ;; Hardware stack levels required when called:    1
 10100 ;; This function calls:
 10101 ;;		___ftpack
 10102 ;; This function is called by:
 10103 ;;		_util_getTemperature
 10104 ;;		_sprintf
 10105 ;;		___ftsub
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text46
 10110  0061AE                     __ptext46:
 10111                           	opt stack 0
 10112  0061AE                     ___ftadd:
 10113                           	opt stack 27
 10114                           
 10115                           ;incstack = 0
 10116  0061AE  C030  F034         	movff	___ftadd@f1+2,??___ftadd
 10117  0061B2  6A35               	clrf	(??___ftadd+1)& (0+255),c
 10118  0061B4  6A36               	clrf	(??___ftadd+2)& (0+255),c
 10119  0061B6  342F               	rlcf	___ftadd@f1+1,w,c
 10120  0061B8  3634               	rlcf	??___ftadd& (0+255),f,c
 10121  0061BA  E301               	bnc	u2191
 10122  0061BC  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 10123  0061BE                     u2191:
 10124  0061BE  5034               	movf	??___ftadd,w,c
 10125  0061C0  6E39               	movwf	___ftadd@exp1,c
 10126  0061C2  C033  F034         	movff	___ftadd@f2+2,??___ftadd
 10127  0061C6  6A35               	clrf	(??___ftadd+1)& (0+255),c
 10128  0061C8  6A36               	clrf	(??___ftadd+2)& (0+255),c
 10129  0061CA  3432               	rlcf	___ftadd@f2+1,w,c
 10130  0061CC  3634               	rlcf	??___ftadd& (0+255),f,c
 10131  0061CE  E301               	bnc	u2201
 10132  0061D0  8035               	bsf	(??___ftadd+1)& (0+255),0,c
 10133  0061D2                     u2201:
 10134  0061D2  5034               	movf	??___ftadd,w,c
 10135  0061D4  6E38               	movwf	___ftadd@exp2,c
 10136  0061D6  5039               	movf	___ftadd@exp1,w,c
 10137  0061D8  B4D8               	btfsc	status,2,c
 10138  0061DA  D00B               	goto	l685
 10139  0061DC  5038               	movf	___ftadd@exp2,w,c
 10140  0061DE  5C39               	subwf	___ftadd@exp1,w,c
 10141  0061E0  B0D8               	btfsc	status,0,c
 10142  0061E2  D00E               	goto	l2798
 10143  0061E4  5039               	movf	___ftadd@exp1,w,c
 10144  0061E6  0800               	sublw	0
 10145  0061E8  2438               	addwf	___ftadd@exp2,w,c
 10146  0061EA  6E34               	movwf	??___ftadd& (0+255),c
 10147  0061EC  0E18               	movlw	24
 10148  0061EE  6434               	cpfsgt	??___ftadd,c
 10149  0061F0  D007               	goto	l2798
 10150  0061F2                     l685:
 10151  0061F2  C031  F02E         	movff	___ftadd@f2,?___ftadd
 10152  0061F6  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
 10153  0061FA  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
 10154  0061FE  0012               	return	
 10155  006200                     l2798:
 10156  006200  5038               	movf	___ftadd@exp2,w,c
 10157  006202  B4D8               	btfsc	status,2,c
 10158  006204  D00B               	goto	l689
 10159  006206  5039               	movf	___ftadd@exp1,w,c
 10160  006208  5C38               	subwf	___ftadd@exp2,w,c
 10161  00620A  B0D8               	btfsc	status,0,c
 10162  00620C  D00E               	goto	l2804
 10163  00620E  5038               	movf	___ftadd@exp2,w,c
 10164  006210  0800               	sublw	0
 10165  006212  2439               	addwf	___ftadd@exp1,w,c
 10166  006214  6E34               	movwf	??___ftadd& (0+255),c
 10167  006216  0E18               	movlw	24
 10168  006218  6434               	cpfsgt	??___ftadd,c
 10169  00621A  D007               	goto	l2804
 10170  00621C                     l689:
 10171  00621C  C02E  F02E         	movff	___ftadd@f1,?___ftadd
 10172  006220  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
 10173  006224  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
 10174  006228  0012               	return	
 10175  00622A                     l2804:
 10176  00622A  0E06               	movlw	6
 10177  00622C  6E37               	movwf	___ftadd@sign,c
 10178  00622E  BE30               	btfsc	___ftadd@f1+2,7,c
 10179  006230  8E37               	bsf	___ftadd@sign,7,c
 10180  006232  BE33               	btfsc	___ftadd@f2+2,7,c
 10181  006234  8C37               	bsf	___ftadd@sign,6,c
 10182  006236  8E2F               	bsf	___ftadd@f1+1,7,c
 10183  006238  0EFF               	movlw	255
 10184  00623A  162E               	andwf	___ftadd@f1,f,c
 10185  00623C  0EFF               	movlw	255
 10186  00623E  162F               	andwf	___ftadd@f1+1,f,c
 10187  006240  0E00               	movlw	0
 10188  006242  1630               	andwf	___ftadd@f1+2,f,c
 10189  006244  8E32               	bsf	___ftadd@f2+1,7,c
 10190  006246  0EFF               	movlw	255
 10191  006248  1631               	andwf	___ftadd@f2,f,c
 10192  00624A  0EFF               	movlw	255
 10193  00624C  1632               	andwf	___ftadd@f2+1,f,c
 10194  00624E  0E00               	movlw	0
 10195  006250  1633               	andwf	___ftadd@f2+2,f,c
 10196  006252  5038               	movf	___ftadd@exp2,w,c
 10197  006254  5C39               	subwf	___ftadd@exp1,w,c
 10198  006256  B0D8               	btfsc	status,0,c
 10199  006258  D01B               	goto	l2830
 10200  00625A                     l2820:
 10201  00625A  90D8               	bcf	status,0,c
 10202  00625C  3631               	rlcf	___ftadd@f2,f,c
 10203  00625E  3632               	rlcf	___ftadd@f2+1,f,c
 10204  006260  3633               	rlcf	___ftadd@f2+2,f,c
 10205  006262  0638               	decf	___ftadd@exp2,f,c
 10206  006264  5039               	movf	___ftadd@exp1,w,c
 10207  006266  1838               	xorwf	___ftadd@exp2,w,c
 10208  006268  B4D8               	btfsc	status,2,c
 10209  00626A  D00D               	goto	l2828
 10210  00626C  0637               	decf	___ftadd@sign,f,c
 10211  00626E  C037  F034         	movff	___ftadd@sign,??___ftadd
 10212  006272  0E07               	movlw	7
 10213  006274  1634               	andwf	??___ftadd,f,c
 10214  006276  B4D8               	btfsc	status,2,c
 10215  006278  D006               	goto	l2828
 10216  00627A  D7EF               	goto	l2820
 10217  00627C                     l2826:
 10218  00627C  90D8               	bcf	status,0,c
 10219  00627E  3230               	rrcf	___ftadd@f1+2,f,c
 10220  006280  322F               	rrcf	___ftadd@f1+1,f,c
 10221  006282  322E               	rrcf	___ftadd@f1,f,c
 10222  006284  2A39               	incf	___ftadd@exp1,f,c
 10223  006286                     l2828:
 10224  006286  5038               	movf	___ftadd@exp2,w,c
 10225  006288  1839               	xorwf	___ftadd@exp1,w,c
 10226  00628A  B4D8               	btfsc	status,2,c
 10227  00628C  D01F               	goto	l700
 10228  00628E  D7F6               	goto	l2826
 10229  006290                     l2830:
 10230  006290  5039               	movf	___ftadd@exp1,w,c
 10231  006292  5C38               	subwf	___ftadd@exp2,w,c
 10232  006294  B0D8               	btfsc	status,0,c
 10233  006296  D01A               	goto	l700
 10234  006298                     l2832:
 10235  006298  90D8               	bcf	status,0,c
 10236  00629A  362E               	rlcf	___ftadd@f1,f,c
 10237  00629C  362F               	rlcf	___ftadd@f1+1,f,c
 10238  00629E  3630               	rlcf	___ftadd@f1+2,f,c
 10239  0062A0  0639               	decf	___ftadd@exp1,f,c
 10240  0062A2  5039               	movf	___ftadd@exp1,w,c
 10241  0062A4  1838               	xorwf	___ftadd@exp2,w,c
 10242  0062A6  B4D8               	btfsc	status,2,c
 10243  0062A8  D00D               	goto	l2840
 10244  0062AA  0637               	decf	___ftadd@sign,f,c
 10245  0062AC  C037  F034         	movff	___ftadd@sign,??___ftadd
 10246  0062B0  0E07               	movlw	7
 10247  0062B2  1634               	andwf	??___ftadd,f,c
 10248  0062B4  B4D8               	btfsc	status,2,c
 10249  0062B6  D006               	goto	l2840
 10250  0062B8  D7EF               	goto	l2832
 10251  0062BA                     l2838:
 10252  0062BA  90D8               	bcf	status,0,c
 10253  0062BC  3233               	rrcf	___ftadd@f2+2,f,c
 10254  0062BE  3232               	rrcf	___ftadd@f2+1,f,c
 10255  0062C0  3231               	rrcf	___ftadd@f2,f,c
 10256  0062C2  2A38               	incf	___ftadd@exp2,f,c
 10257  0062C4                     l2840:
 10258  0062C4  5038               	movf	___ftadd@exp2,w,c
 10259  0062C6  1839               	xorwf	___ftadd@exp1,w,c
 10260  0062C8  A4D8               	btfss	status,2,c
 10261  0062CA  D7F7               	goto	l2838
 10262  0062CC                     l700:
 10263  0062CC  AE37               	btfss	___ftadd@sign,7,c
 10264  0062CE  D00C               	goto	l709
 10265  0062D0  0EFF               	movlw	255
 10266  0062D2  1A2E               	xorwf	___ftadd@f1,f,c
 10267  0062D4  0EFF               	movlw	255
 10268  0062D6  1A2F               	xorwf	___ftadd@f1+1,f,c
 10269  0062D8  0EFF               	movlw	255
 10270  0062DA  1A30               	xorwf	___ftadd@f1+2,f,c
 10271  0062DC  0E01               	movlw	1
 10272  0062DE  262E               	addwf	___ftadd@f1,f,c
 10273  0062E0  0E00               	movlw	0
 10274  0062E2  222F               	addwfc	___ftadd@f1+1,f,c
 10275  0062E4  0E00               	movlw	0
 10276  0062E6  2230               	addwfc	___ftadd@f1+2,f,c
 10277  0062E8                     l709:
 10278  0062E8  AC37               	btfss	___ftadd@sign,6,c
 10279  0062EA  D00C               	goto	l2846
 10280  0062EC  0EFF               	movlw	255
 10281  0062EE  1A31               	xorwf	___ftadd@f2,f,c
 10282  0062F0  0EFF               	movlw	255
 10283  0062F2  1A32               	xorwf	___ftadd@f2+1,f,c
 10284  0062F4  0EFF               	movlw	255
 10285  0062F6  1A33               	xorwf	___ftadd@f2+2,f,c
 10286  0062F8  0E01               	movlw	1
 10287  0062FA  2631               	addwf	___ftadd@f2,f,c
 10288  0062FC  0E00               	movlw	0
 10289  0062FE  2232               	addwfc	___ftadd@f2+1,f,c
 10290  006300  0E00               	movlw	0
 10291  006302  2233               	addwfc	___ftadd@f2+2,f,c
 10292  006304                     l2846:
 10293  006304  0E00               	movlw	0
 10294  006306  6E37               	movwf	___ftadd@sign,c
 10295  006308  502E               	movf	___ftadd@f1,w,c
 10296  00630A  2631               	addwf	___ftadd@f2,f,c
 10297  00630C  502F               	movf	___ftadd@f1+1,w,c
 10298  00630E  2232               	addwfc	___ftadd@f2+1,f,c
 10299  006310  5030               	movf	___ftadd@f1+2,w,c
 10300  006312  2233               	addwfc	___ftadd@f2+2,f,c
 10301  006314  AE33               	btfss	___ftadd@f2+2,7,c
 10302  006316  D00E               	goto	l2856
 10303  006318  0EFF               	movlw	255
 10304  00631A  1A31               	xorwf	___ftadd@f2,f,c
 10305  00631C  0EFF               	movlw	255
 10306  00631E  1A32               	xorwf	___ftadd@f2+1,f,c
 10307  006320  0EFF               	movlw	255
 10308  006322  1A33               	xorwf	___ftadd@f2+2,f,c
 10309  006324  0E01               	movlw	1
 10310  006326  2631               	addwf	___ftadd@f2,f,c
 10311  006328  0E00               	movlw	0
 10312  00632A  2232               	addwfc	___ftadd@f2+1,f,c
 10313  00632C  0E00               	movlw	0
 10314  00632E  2233               	addwfc	___ftadd@f2+2,f,c
 10315  006330  0E01               	movlw	1
 10316  006332  6E37               	movwf	___ftadd@sign,c
 10317  006334                     l2856:
 10318  006334  C031  F001         	movff	___ftadd@f2,___ftpack@arg
 10319  006338  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 10320  00633C  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 10321  006340  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
 10322  006344  C037  F005         	movff	___ftadd@sign,___ftpack@sign
 10323  006348  EC77  F02B         	call	___ftpack	;wreg free
 10324  00634C  C001  F02E         	movff	?___ftpack,?___ftadd
 10325  006350  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
 10326  006354  C003  F030         	movff	?___ftpack+2,?___ftadd+2
 10327  006358  0012               	return	
 10328  00635A                     __end_of___ftadd:
 10329                           	opt stack 0
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           indf0	equ	0xFEF
 10337                           fsr0h	equ	0xFEA
 10338                           fsr0l	equ	0xFE9
 10339                           wreg	equ	0xFE8
 10340                           indf1	equ	0xFE7
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           fsr2h	equ	0xFDA
 10347                           fsr2l	equ	0xFD9
 10348                           status	equ	0xFD8
 10349                           
 10350 ;; *************** function ___ftpack *****************
 10351 ;; Defined at:
 10352 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 10353 ;; Parameters:    Size  Location     Type
 10354 ;;  arg             3    0[COMRAM] unsigned um
 10355 ;;  exp             1    3[COMRAM] unsigned char 
 10356 ;;  sign            1    4[COMRAM] unsigned char 
 10357 ;; Auto vars:     Size  Location     Type
 10358 ;;		None
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  3    0[COMRAM] float 
 10361 ;; Registers used:
 10362 ;;		wreg, status,2, status,0
 10363 ;; Tracked objects:
 10364 ;;		On entry : 0/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10368 ;;      Params:         5       0       0       0       0       0       0
 10369 ;;      Locals:         0       0       0       0       0       0       0
 10370 ;;      Temps:          3       0       0       0       0       0       0
 10371 ;;      Totals:         8       0       0       0       0       0       0
 10372 ;;Total ram usage:        8 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; This function calls:
 10375 ;;		Nothing
 10376 ;; This function is called by:
 10377 ;;		___awtoft
 10378 ;;		___ftadd
 10379 ;;		___ftdiv
 10380 ;;		___ftmul
 10381 ;;		___lltoft
 10382 ;;		___lwtoft
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text47
 10387  0056EE                     __ptext47:
 10388                           	opt stack 0
 10389  0056EE                     ___ftpack:
 10390                           	opt stack 27
 10391                           
 10392                           ;incstack = 0
 10393  0056EE  5004               	movf	___ftpack@exp,w,c
 10394  0056F0  B4D8               	btfsc	status,2,c
 10395  0056F2  D005               	goto	l2708
 10396  0056F4  5001               	movf	___ftpack@arg,w,c
 10397  0056F6  1002               	iorwf	___ftpack@arg+1,w,c
 10398  0056F8  1003               	iorwf	___ftpack@arg+2,w,c
 10399  0056FA  A4D8               	btfss	status,2,c
 10400  0056FC  D00C               	goto	l2714
 10401  0056FE                     l2708:
 10402  0056FE  0E00               	movlw	0
 10403  005700  6E01               	movwf	?___ftpack,c
 10404  005702  0E00               	movlw	0
 10405  005704  6E02               	movwf	?___ftpack+1,c
 10406  005706  0E00               	movlw	0
 10407  005708  6E03               	movwf	?___ftpack+2,c
 10408  00570A  0012               	return	
 10409  00570C                     l2712:
 10410  00570C  2A04               	incf	___ftpack@exp,f,c
 10411  00570E  90D8               	bcf	status,0,c
 10412  005710  3203               	rrcf	___ftpack@arg+2,f,c
 10413  005712  3202               	rrcf	___ftpack@arg+1,f,c
 10414  005714  3201               	rrcf	___ftpack@arg,f,c
 10415  005716                     l2714:
 10416  005716  0E00               	movlw	0
 10417  005718  1401               	andwf	___ftpack@arg,w,c
 10418  00571A  6E06               	movwf	??___ftpack& (0+255),c
 10419  00571C  0E00               	movlw	0
 10420  00571E  1402               	andwf	___ftpack@arg+1,w,c
 10421  005720  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10422  005722  0EFE               	movlw	254
 10423  005724  1403               	andwf	___ftpack@arg+2,w,c
 10424  005726  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10425  005728  5006               	movf	??___ftpack,w,c
 10426  00572A  1007               	iorwf	??___ftpack+1,w,c
 10427  00572C  1008               	iorwf	??___ftpack+2,w,c
 10428  00572E  B4D8               	btfsc	status,2,c
 10429  005730  D00C               	goto	l2720
 10430  005732  D7EC               	goto	l2712
 10431  005734                     l2716:
 10432  005734  2A04               	incf	___ftpack@exp,f,c
 10433  005736  0E01               	movlw	1
 10434  005738  2601               	addwf	___ftpack@arg,f,c
 10435  00573A  0E00               	movlw	0
 10436  00573C  2202               	addwfc	___ftpack@arg+1,f,c
 10437  00573E  0E00               	movlw	0
 10438  005740  2203               	addwfc	___ftpack@arg+2,f,c
 10439  005742  90D8               	bcf	status,0,c
 10440  005744  3203               	rrcf	___ftpack@arg+2,f,c
 10441  005746  3202               	rrcf	___ftpack@arg+1,f,c
 10442  005748  3201               	rrcf	___ftpack@arg,f,c
 10443  00574A                     l2720:
 10444  00574A  0E00               	movlw	0
 10445  00574C  1401               	andwf	___ftpack@arg,w,c
 10446  00574E  6E06               	movwf	??___ftpack& (0+255),c
 10447  005750  0E00               	movlw	0
 10448  005752  1402               	andwf	___ftpack@arg+1,w,c
 10449  005754  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10450  005756  0EFF               	movlw	255
 10451  005758  1403               	andwf	___ftpack@arg+2,w,c
 10452  00575A  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10453  00575C  5006               	movf	??___ftpack,w,c
 10454  00575E  1007               	iorwf	??___ftpack+1,w,c
 10455  005760  1008               	iorwf	??___ftpack+2,w,c
 10456  005762  B4D8               	btfsc	status,2,c
 10457  005764  D006               	goto	l2724
 10458  005766  D7E6               	goto	l2716
 10459  005768                     l2722:
 10460  005768  0604               	decf	___ftpack@exp,f,c
 10461  00576A  90D8               	bcf	status,0,c
 10462  00576C  3601               	rlcf	___ftpack@arg,f,c
 10463  00576E  3602               	rlcf	___ftpack@arg+1,f,c
 10464  005770  3603               	rlcf	___ftpack@arg+2,f,c
 10465  005772                     l2724:
 10466  005772  BE02               	btfsc	___ftpack@arg+1,7,c
 10467  005774  D003               	goto	l662
 10468  005776  0E02               	movlw	2
 10469  005778  6004               	cpfslt	___ftpack@exp,c
 10470  00577A  D7F6               	goto	l2722
 10471  00577C                     l662:
 10472  00577C  A004               	btfss	___ftpack@exp,0,c
 10473  00577E  9E02               	bcf	___ftpack@arg+1,7,c
 10474  005780  90D8               	bcf	status,0,c
 10475  005782  3204               	rrcf	___ftpack@exp,f,c
 10476  005784  5004               	movf	___ftpack@exp,w,c
 10477  005786  1203               	iorwf	___ftpack@arg+2,f,c
 10478  005788  5005               	movf	___ftpack@sign,w,c
 10479  00578A  A4D8               	btfss	status,2,c
 10480  00578C  8E03               	bsf	___ftpack@arg+2,7,c
 10481  00578E  C001  F001         	movff	___ftpack@arg,?___ftpack
 10482  005792  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10483  005796  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10484  00579A  0012               	return	
 10485  00579C                     __end_of___ftpack:
 10486                           	opt stack 0
 10487                           tblptru	equ	0xFF8
 10488                           tblptrh	equ	0xFF7
 10489                           tblptrl	equ	0xFF6
 10490                           tablat	equ	0xFF5
 10491                           prodh	equ	0xFF4
 10492                           prodl	equ	0xFF3
 10493                           indf0	equ	0xFEF
 10494                           fsr0h	equ	0xFEA
 10495                           fsr0l	equ	0xFE9
 10496                           wreg	equ	0xFE8
 10497                           indf1	equ	0xFE7
 10498                           fsr1h	equ	0xFE2
 10499                           fsr1l	equ	0xFE1
 10500                           indf2	equ	0xFDF
 10501                           postinc2	equ	0xFDE
 10502                           postdec2	equ	0xFDD
 10503                           fsr2h	equ	0xFDA
 10504                           fsr2l	equ	0xFD9
 10505                           status	equ	0xFD8
 10506                           
 10507 ;; *************** function ___ftneg *****************
 10508 ;; Defined at:
 10509 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;  f1              3    0[COMRAM] float 
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;		None
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  3    0[COMRAM] float 
 10516 ;; Registers used:
 10517 ;;		wreg, status,2, status,0
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10523 ;;      Params:         3       0       0       0       0       0       0
 10524 ;;      Locals:         0       0       0       0       0       0       0
 10525 ;;      Temps:          0       0       0       0       0       0       0
 10526 ;;      Totals:         3       0       0       0       0       0       0
 10527 ;;Total ram usage:        3 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; This function calls:
 10530 ;;		Nothing
 10531 ;; This function is called by:
 10532 ;;		_sprintf
 10533 ;; This function uses a non-reentrant model
 10534 ;;
 10535                           
 10536                           	psect	text48
 10537  004E30                     __ptext48:
 10538                           	opt stack 0
 10539  004E30                     ___ftneg:
 10540                           	opt stack 27
 10541                           
 10542                           ;incstack = 0
 10543  004E30  5001               	movf	___ftneg@f1,w,c
 10544  004E32  1002               	iorwf	___ftneg@f1+1,w,c
 10545  004E34  1003               	iorwf	___ftneg@f1+2,w,c
 10546  004E36  B4D8               	btfsc	status,2,c
 10547  004E38  D006               	goto	l759
 10548  004E3A  0E00               	movlw	0
 10549  004E3C  1A01               	xorwf	___ftneg@f1,f,c
 10550  004E3E  0E00               	movlw	0
 10551  004E40  1A02               	xorwf	___ftneg@f1+1,f,c
 10552  004E42  0E80               	movlw	128
 10553  004E44  1A03               	xorwf	___ftneg@f1+2,f,c
 10554  004E46                     l759:
 10555  004E46  C001  F001         	movff	___ftneg@f1,?___ftneg
 10556  004E4A  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 10557  004E4E  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 10558  004E52  0012               	return		;funcret
 10559  004E54                     __end_of___ftneg:
 10560                           	opt stack 0
 10561                           tblptru	equ	0xFF8
 10562                           tblptrh	equ	0xFF7
 10563                           tblptrl	equ	0xFF6
 10564                           tablat	equ	0xFF5
 10565                           prodh	equ	0xFF4
 10566                           prodl	equ	0xFF3
 10567                           indf0	equ	0xFEF
 10568                           fsr0h	equ	0xFEA
 10569                           fsr0l	equ	0xFE9
 10570                           wreg	equ	0xFE8
 10571                           indf1	equ	0xFE7
 10572                           fsr1h	equ	0xFE2
 10573                           fsr1l	equ	0xFE1
 10574                           indf2	equ	0xFDF
 10575                           postinc2	equ	0xFDE
 10576                           postdec2	equ	0xFDD
 10577                           fsr2h	equ	0xFDA
 10578                           fsr2l	equ	0xFD9
 10579                           status	equ	0xFD8
 10580                           
 10581 ;; *************** function ___ftge *****************
 10582 ;; Defined at:
 10583 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 10584 ;; Parameters:    Size  Location     Type
 10585 ;;  ff1             3    0[COMRAM] float 
 10586 ;;  ff2             3    3[COMRAM] float 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;		None
 10589 ;; Return value:  Size  Location     Type
 10590 ;;		None               void
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10598 ;;      Params:         6       0       0       0       0       0       0
 10599 ;;      Locals:         0       0       0       0       0       0       0
 10600 ;;      Temps:          3       0       0       0       0       0       0
 10601 ;;      Totals:         9       0       0       0       0       0       0
 10602 ;;Total ram usage:        9 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; This function calls:
 10605 ;;		Nothing
 10606 ;; This function is called by:
 10607 ;;		_sprintf
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611                           	psect	text49
 10612  0055B8                     __ptext49:
 10613                           	opt stack 0
 10614  0055B8                     ___ftge:
 10615                           	opt stack 27
 10616                           
 10617                           ;incstack = 0
 10618  0055B8  AE03               	btfss	___ftge@ff1+2,7,c
 10619  0055BA  D016               	goto	l3258
 10620  0055BC  C001  F007         	movff	___ftge@ff1,??___ftge
 10621  0055C0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 10622  0055C4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 10623  0055C8  1E07               	comf	??___ftge,f,c
 10624  0055CA  1E08               	comf	??___ftge+1,f,c
 10625  0055CC  1E09               	comf	??___ftge+2,f,c
 10626  0055CE  2A07               	incf	??___ftge,f,c
 10627  0055D0  0E00               	movlw	0
 10628  0055D2  2208               	addwfc	??___ftge+1,f,c
 10629  0055D4  2209               	addwfc	??___ftge+2,f,c
 10630  0055D6  0E00               	movlw	0
 10631  0055D8  2407               	addwf	??___ftge,w,c
 10632  0055DA  6E01               	movwf	___ftge@ff1,c
 10633  0055DC  0E00               	movlw	0
 10634  0055DE  2008               	addwfc	??___ftge+1,w,c
 10635  0055E0  6E02               	movwf	___ftge@ff1+1,c
 10636  0055E2  0E80               	movlw	128
 10637  0055E4  2009               	addwfc	??___ftge+2,w,c
 10638  0055E6  6E03               	movwf	___ftge@ff1+2,c
 10639  0055E8                     l3258:
 10640  0055E8  AE06               	btfss	___ftge@ff2+2,7,c
 10641  0055EA  D016               	goto	l3262
 10642  0055EC  C004  F007         	movff	___ftge@ff2,??___ftge
 10643  0055F0  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 10644  0055F4  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 10645  0055F8  1E07               	comf	??___ftge,f,c
 10646  0055FA  1E08               	comf	??___ftge+1,f,c
 10647  0055FC  1E09               	comf	??___ftge+2,f,c
 10648  0055FE  2A07               	incf	??___ftge,f,c
 10649  005600  0E00               	movlw	0
 10650  005602  2208               	addwfc	??___ftge+1,f,c
 10651  005604  2209               	addwfc	??___ftge+2,f,c
 10652  005606  0E00               	movlw	0
 10653  005608  2407               	addwf	??___ftge,w,c
 10654  00560A  6E04               	movwf	___ftge@ff2,c
 10655  00560C  0E00               	movlw	0
 10656  00560E  2008               	addwfc	??___ftge+1,w,c
 10657  005610  6E05               	movwf	___ftge@ff2+1,c
 10658  005612  0E80               	movlw	128
 10659  005614  2009               	addwfc	??___ftge+2,w,c
 10660  005616  6E06               	movwf	___ftge@ff2+2,c
 10661  005618                     l3262:
 10662  005618  0E00               	movlw	0
 10663  00561A  1A01               	xorwf	___ftge@ff1,f,c
 10664  00561C  0E00               	movlw	0
 10665  00561E  1A02               	xorwf	___ftge@ff1+1,f,c
 10666  005620  0E80               	movlw	128
 10667  005622  1A03               	xorwf	___ftge@ff1+2,f,c
 10668  005624  0E00               	movlw	0
 10669  005626  1A04               	xorwf	___ftge@ff2,f,c
 10670  005628  0E00               	movlw	0
 10671  00562A  1A05               	xorwf	___ftge@ff2+1,f,c
 10672  00562C  0E80               	movlw	128
 10673  00562E  1A06               	xorwf	___ftge@ff2+2,f,c
 10674  005630  5004               	movf	___ftge@ff2,w,c
 10675  005632  5C01               	subwf	___ftge@ff1,w,c
 10676  005634  5005               	movf	___ftge@ff2+1,w,c
 10677  005636  5802               	subwfb	___ftge@ff1+1,w,c
 10678  005638  5006               	movf	___ftge@ff2+2,w,c
 10679  00563A  5803               	subwfb	___ftge@ff1+2,w,c
 10680  00563C  B0D8               	btfsc	status,0,c
 10681  00563E  D002               	goto	l3268
 10682  005640  90D8               	bcf	status,0,c
 10683  005642  0012               	return	
 10684  005644                     l3268:
 10685  005644  80D8               	bsf	status,0,c
 10686  005646  0012               	return	
 10687  005648                     __end_of___ftge:
 10688                           	opt stack 0
 10689                           tblptru	equ	0xFF8
 10690                           tblptrh	equ	0xFF7
 10691                           tblptrl	equ	0xFF6
 10692                           tablat	equ	0xFF5
 10693                           prodh	equ	0xFF4
 10694                           prodl	equ	0xFF3
 10695                           indf0	equ	0xFEF
 10696                           fsr0h	equ	0xFEA
 10697                           fsr0l	equ	0xFE9
 10698                           wreg	equ	0xFE8
 10699                           indf1	equ	0xFE7
 10700                           fsr1h	equ	0xFE2
 10701                           fsr1l	equ	0xFE1
 10702                           indf2	equ	0xFDF
 10703                           postinc2	equ	0xFDE
 10704                           postdec2	equ	0xFDD
 10705                           fsr2h	equ	0xFDA
 10706                           fsr2l	equ	0xFD9
 10707                           status	equ	0xFD8
 10708                           
 10709 ;; *************** function _memset *****************
 10710 ;; Defined at:
 10711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;  p1              2    0[COMRAM] PTR void 
 10714 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
 10715 ;;  c               2    2[COMRAM] int 
 10716 ;;  n               2    4[COMRAM] unsigned int 
 10717 ;; Auto vars:     Size  Location     Type
 10718 ;;  p               2    6[COMRAM] PTR unsigned char 
 10719 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
 10720 ;; Return value:  Size  Location     Type
 10721 ;;                  2    0[COMRAM] PTR void 
 10722 ;; Registers used:
 10723 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10724 ;; Tracked objects:
 10725 ;;		On entry : 0/0
 10726 ;;		On exit  : 0/0
 10727 ;;		Unchanged: 0/0
 10728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10729 ;;      Params:         6       0       0       0       0       0       0
 10730 ;;      Locals:         2       0       0       0       0       0       0
 10731 ;;      Temps:          0       0       0       0       0       0       0
 10732 ;;      Totals:         8       0       0       0       0       0       0
 10733 ;;Total ram usage:        8 bytes
 10734 ;; Hardware stack levels used:    1
 10735 ;; This function calls:
 10736 ;;		Nothing
 10737 ;; This function is called by:
 10738 ;;		_util_beacon_transmission
 10739 ;; This function uses a non-reentrant model
 10740 ;;
 10741                           
 10742                           	psect	text50
 10743  004E9E                     __ptext50:
 10744                           	opt stack 0
 10745  004E9E                     _memset:
 10746                           	opt stack 28
 10747                           
 10748                           ;incstack = 0
 10749  004E9E  C001  F007         	movff	memset@p1,memset@p
 10750  004EA2  C002  F008         	movff	memset@p1+1,memset@p+1
 10751  004EA6  D008               	goto	l3464
 10752  004EA8                     l3460:
 10753  004EA8  C007  FFD9         	movff	memset@p,fsr2l
 10754  004EAC  C008  FFDA         	movff	memset@p+1,fsr2h
 10755  004EB0  C003  FFDF         	movff	memset@c,indf2
 10756  004EB4  4A07               	infsnz	memset@p,f,c
 10757  004EB6  2A08               	incf	memset@p+1,f,c
 10758  004EB8                     l3464:
 10759  004EB8  0605               	decf	memset@n,f,c
 10760  004EBA  A0D8               	btfss	status,0,c
 10761  004EBC  0606               	decf	memset@n+1,f,c
 10762  004EBE  2805               	incf	memset@n,w,c
 10763  004EC0  E1F3               	bnz	l3460
 10764  004EC2  2806               	incf	memset@n+1,w,c
 10765  004EC4  B4D8               	btfsc	status,2,c
 10766  004EC6  0012               	return	
 10767  004EC8  D7EF               	goto	l3460
 10768  004ECA                     __end_of_memset:
 10769                           	opt stack 0
 10770                           tblptru	equ	0xFF8
 10771                           tblptrh	equ	0xFF7
 10772                           tblptrl	equ	0xFF6
 10773                           tablat	equ	0xFF5
 10774                           prodh	equ	0xFF4
 10775                           prodl	equ	0xFF3
 10776                           indf0	equ	0xFEF
 10777                           fsr0h	equ	0xFEA
 10778                           fsr0l	equ	0xFE9
 10779                           wreg	equ	0xFE8
 10780                           indf1	equ	0xFE7
 10781                           fsr1h	equ	0xFE2
 10782                           fsr1l	equ	0xFE1
 10783                           indf2	equ	0xFDF
 10784                           postinc2	equ	0xFDE
 10785                           postdec2	equ	0xFDD
 10786                           fsr2h	equ	0xFDA
 10787                           fsr2l	equ	0xFD9
 10788                           status	equ	0xFD8
 10789                           
 10790 ;; *************** function _initialize *****************
 10791 ;; Defined at:
 10792 ;;		line 16 in file "easat2_util_initialize.c"
 10793 ;; Parameters:    Size  Location     Type
 10794 ;;		None
 10795 ;; Auto vars:     Size  Location     Type
 10796 ;;		None
 10797 ;; Return value:  Size  Location     Type
 10798 ;;                  1    wreg      void 
 10799 ;; Registers used:
 10800 ;;		wreg, status,2
 10801 ;; Tracked objects:
 10802 ;;		On entry : 0/0
 10803 ;;		On exit  : 0/0
 10804 ;;		Unchanged: 0/0
 10805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10806 ;;      Params:         0       0       0       0       0       0       0
 10807 ;;      Locals:         0       0       0       0       0       0       0
 10808 ;;      Temps:          0       0       0       0       0       0       0
 10809 ;;      Totals:         0       0       0       0       0       0       0
 10810 ;;Total ram usage:        0 bytes
 10811 ;; Hardware stack levels used:    1
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		_main
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           	psect	text51
 10820  0054AC                     __ptext51:
 10821                           	opt stack 0
 10822  0054AC                     _initialize:
 10823                           	opt stack 30
 10824                           
 10825                           ;easat2_util_initialize.c: 25: VREFCON0bits.FVREN = 1;
 10826                           
 10827                           ;incstack = 0
 10828  0054AC  010F               	movlb	15	; () banked
 10829  0054AE  8F42               	bsf	66,7,b	;volatile
 10830                           
 10831                           ;easat2_util_initialize.c: 26: VREFCON0bits.FVRS0 = 1;
 10832  0054B0  010F               	movlb	15	; () banked
 10833  0054B2  8942               	bsf	66,4,b	;volatile
 10834                           
 10835                           ;easat2_util_initialize.c: 27: VREFCON0bits.FVRS1 = 0;
 10836  0054B4  010F               	movlb	15	; () banked
 10837  0054B6  9B42               	bcf	66,5,b	;volatile
 10838                           
 10839                           ;easat2_util_initialize.c: 29: VREFCON0bits.FVRST = 1;
 10840  0054B8  010F               	movlb	15	; () banked
 10841  0054BA  8D42               	bsf	66,6,b	;volatile
 10842                           
 10843                           ; BSR set to: 15
 10844                           ;easat2_util_initialize.c: 34: ADCON1 = 0x08;
 10845  0054BC  0E08               	movlw	8
 10846  0054BE  6EC1               	movwf	4033,c	;volatile
 10847                           
 10848                           ;easat2_util_initialize.c: 35: ADCON2 = 0xAF;
 10849  0054C0  0EAF               	movlw	175
 10850  0054C2  6EC0               	movwf	4032,c	;volatile
 10851                           
 10852                           ; BSR set to: 15
 10853                           ;easat2_util_initialize.c: 39: TRISAbits.TRISA0 = 1;
 10854  0054C4  8092               	bsf	3986,0,c	;volatile
 10855                           
 10856                           ; BSR set to: 15
 10857                           ;easat2_util_initialize.c: 40: TRISAbits.TRISA1 = 1;
 10858  0054C6  8292               	bsf	3986,1,c	;volatile
 10859                           
 10860                           ; BSR set to: 15
 10861                           ;easat2_util_initialize.c: 41: TRISAbits.TRISA2 = 1;
 10862  0054C8  8492               	bsf	3986,2,c	;volatile
 10863                           
 10864                           ; BSR set to: 15
 10865                           ;easat2_util_initialize.c: 42: TRISAbits.TRISA3 = 1;
 10866  0054CA  8692               	bsf	3986,3,c	;volatile
 10867                           
 10868                           ; BSR set to: 15
 10869                           ;easat2_util_initialize.c: 43: TRISAbits.TRISA4 = 1;
 10870  0054CC  8892               	bsf	3986,4,c	;volatile
 10871                           
 10872                           ; BSR set to: 15
 10873                           ;easat2_util_initialize.c: 44: TRISAbits.TRISA5 = 1;
 10874  0054CE  8A92               	bsf	3986,5,c	;volatile
 10875                           
 10876                           ; BSR set to: 15
 10877                           ;easat2_util_initialize.c: 51: ANSELAbits.ANSA0 = 1;
 10878  0054D0  010F               	movlb	15	; () banked
 10879  0054D2  8138               	bsf	56,0,b	;volatile
 10880                           
 10881                           ; BSR set to: 15
 10882                           ;easat2_util_initialize.c: 52: ANSELAbits.ANSA1 = 1;
 10883  0054D4  010F               	movlb	15	; () banked
 10884  0054D6  8338               	bsf	56,1,b	;volatile
 10885                           
 10886                           ; BSR set to: 15
 10887                           ;easat2_util_initialize.c: 53: ANSELAbits.ANSA2 = 1;
 10888  0054D8  010F               	movlb	15	; () banked
 10889  0054DA  8538               	bsf	56,2,b	;volatile
 10890                           
 10891                           ; BSR set to: 15
 10892                           ;easat2_util_initialize.c: 54: ANSELAbits.ANSA3 = 0;
 10893  0054DC  010F               	movlb	15	; () banked
 10894  0054DE  9738               	bcf	56,3,b	;volatile
 10895                           
 10896                           ; BSR set to: 15
 10897                           ;easat2_util_initialize.c: 56: ANSELAbits.ANSA5 = 1;
 10898  0054E0  010F               	movlb	15	; () banked
 10899  0054E2  8B38               	bsf	56,5,b	;volatile
 10900                           
 10901                           ; BSR set to: 15
 10902                           ;easat2_util_initialize.c: 60: LATAbits.LATA0 = 0;
 10903  0054E4  9089               	bcf	3977,0,c	;volatile
 10904                           
 10905                           ; BSR set to: 15
 10906                           ;easat2_util_initialize.c: 61: LATAbits.LATA1 = 0;
 10907  0054E6  9289               	bcf	3977,1,c	;volatile
 10908                           
 10909                           ; BSR set to: 15
 10910                           ;easat2_util_initialize.c: 62: LATAbits.LATA2 = 0;
 10911  0054E8  9489               	bcf	3977,2,c	;volatile
 10912                           
 10913                           ; BSR set to: 15
 10914                           ;easat2_util_initialize.c: 63: LATAbits.LATA3 = 0;
 10915  0054EA  9689               	bcf	3977,3,c	;volatile
 10916                           
 10917                           ; BSR set to: 15
 10918                           ;easat2_util_initialize.c: 64: LATAbits.LATA4 = 0;
 10919  0054EC  9889               	bcf	3977,4,c	;volatile
 10920                           
 10921                           ; BSR set to: 15
 10922                           ;easat2_util_initialize.c: 65: LATAbits.LATA5 = 0;
 10923  0054EE  9A89               	bcf	3977,5,c	;volatile
 10924                           
 10925                           ; BSR set to: 15
 10926                           ;easat2_util_initialize.c: 72: TRISDbits.TRISD0 = 0;
 10927  0054F0  9095               	bcf	3989,0,c	;volatile
 10928                           
 10929                           ; BSR set to: 15
 10930                           ;easat2_util_initialize.c: 73: TRISDbits.TRISD1 = 0;
 10931  0054F2  9295               	bcf	3989,1,c	;volatile
 10932                           
 10933                           ; BSR set to: 15
 10934                           ;easat2_util_initialize.c: 74: TRISDbits.TRISD2 = 0;
 10935  0054F4  9495               	bcf	3989,2,c	;volatile
 10936                           
 10937                           ; BSR set to: 15
 10938                           ;easat2_util_initialize.c: 75: TRISDbits.TRISD3 = 0;
 10939  0054F6  9695               	bcf	3989,3,c	;volatile
 10940                           
 10941                           ; BSR set to: 15
 10942                           ;easat2_util_initialize.c: 76: TRISDbits.TRISD4 = 0;
 10943  0054F8  9895               	bcf	3989,4,c	;volatile
 10944                           
 10945                           ; BSR set to: 15
 10946                           ;easat2_util_initialize.c: 77: TRISDbits.TRISD5 = 0;
 10947  0054FA  9A95               	bcf	3989,5,c	;volatile
 10948                           
 10949                           ; BSR set to: 15
 10950                           ;easat2_util_initialize.c: 78: TRISDbits.TRISD6 = 0;
 10951  0054FC  9C95               	bcf	3989,6,c	;volatile
 10952                           
 10953                           ; BSR set to: 15
 10954                           ;easat2_util_initialize.c: 79: TRISDbits.TRISD7 = 0;
 10955  0054FE  9E95               	bcf	3989,7,c	;volatile
 10956                           
 10957                           ; BSR set to: 15
 10958                           ;easat2_util_initialize.c: 83: ANSELDbits.ANSD0 = 0;
 10959  005500  010F               	movlb	15	; () banked
 10960  005502  913B               	bcf	59,0,b	;volatile
 10961                           
 10962                           ; BSR set to: 15
 10963                           ;easat2_util_initialize.c: 84: ANSELDbits.ANSD1 = 0;
 10964  005504  010F               	movlb	15	; () banked
 10965  005506  933B               	bcf	59,1,b	;volatile
 10966                           
 10967                           ; BSR set to: 15
 10968                           ;easat2_util_initialize.c: 85: ANSELDbits.ANSD2 = 0;
 10969  005508  010F               	movlb	15	; () banked
 10970  00550A  953B               	bcf	59,2,b	;volatile
 10971                           
 10972                           ; BSR set to: 15
 10973                           ;easat2_util_initialize.c: 86: ANSELDbits.ANSD3 = 0;
 10974  00550C  010F               	movlb	15	; () banked
 10975  00550E  973B               	bcf	59,3,b	;volatile
 10976                           
 10977                           ; BSR set to: 15
 10978                           ;easat2_util_initialize.c: 87: ANSELDbits.ANSD4 = 0;
 10979  005510  010F               	movlb	15	; () banked
 10980  005512  993B               	bcf	59,4,b	;volatile
 10981                           
 10982                           ; BSR set to: 15
 10983                           ;easat2_util_initialize.c: 88: ANSELDbits.ANSD5 = 0;
 10984  005514  010F               	movlb	15	; () banked
 10985  005516  9B3B               	bcf	59,5,b	;volatile
 10986                           
 10987                           ; BSR set to: 15
 10988                           ;easat2_util_initialize.c: 89: ANSELDbits.ANSD6 = 0;
 10989  005518  010F               	movlb	15	; () banked
 10990  00551A  9D3B               	bcf	59,6,b	;volatile
 10991                           
 10992                           ; BSR set to: 15
 10993                           ;easat2_util_initialize.c: 90: ANSELDbits.ANSD7 = 0;
 10994  00551C  010F               	movlb	15	; () banked
 10995  00551E  9F3B               	bcf	59,7,b	;volatile
 10996                           
 10997                           ; BSR set to: 15
 10998                           ;easat2_util_initialize.c: 94: LATDbits.LATD0 = 0;
 10999  005520  908C               	bcf	3980,0,c	;volatile
 11000                           
 11001                           ; BSR set to: 15
 11002                           ;easat2_util_initialize.c: 95: LATDbits.LATD1 = 0;
 11003  005522  928C               	bcf	3980,1,c	;volatile
 11004                           
 11005                           ; BSR set to: 15
 11006                           ;easat2_util_initialize.c: 96: LATDbits.LATD2 = 0;
 11007  005524  948C               	bcf	3980,2,c	;volatile
 11008                           
 11009                           ; BSR set to: 15
 11010                           ;easat2_util_initialize.c: 97: LATDbits.LATD3 = 0;
 11011  005526  968C               	bcf	3980,3,c	;volatile
 11012                           
 11013                           ; BSR set to: 15
 11014                           ;easat2_util_initialize.c: 98: LATDbits.LATD4 = 0;
 11015  005528  988C               	bcf	3980,4,c	;volatile
 11016                           
 11017                           ; BSR set to: 15
 11018                           ;easat2_util_initialize.c: 99: LATDbits.LATD5 = 0;
 11019  00552A  9A8C               	bcf	3980,5,c	;volatile
 11020                           
 11021                           ; BSR set to: 15
 11022                           ;easat2_util_initialize.c: 100: LATDbits.LATD6 = 0;
 11023  00552C  9C8C               	bcf	3980,6,c	;volatile
 11024                           
 11025                           ; BSR set to: 15
 11026                           ;easat2_util_initialize.c: 101: LATDbits.LATD7 = 0;
 11027  00552E  9E8C               	bcf	3980,7,c	;volatile
 11028                           
 11029                           ; BSR set to: 15
 11030  005530  0012               	return		;funcret
 11031  005532                     __end_of_initialize:
 11032                           	opt stack 0
 11033                           tblptru	equ	0xFF8
 11034                           tblptrh	equ	0xFF7
 11035                           tblptrl	equ	0xFF6
 11036                           tablat	equ	0xFF5
 11037                           prodh	equ	0xFF4
 11038                           prodl	equ	0xFF3
 11039                           indf0	equ	0xFEF
 11040                           fsr0h	equ	0xFEA
 11041                           fsr0l	equ	0xFE9
 11042                           wreg	equ	0xFE8
 11043                           indf1	equ	0xFE7
 11044                           fsr1h	equ	0xFE2
 11045                           fsr1l	equ	0xFE1
 11046                           indf2	equ	0xFDF
 11047                           postinc2	equ	0xFDE
 11048                           postdec2	equ	0xFDD
 11049                           fsr2h	equ	0xFDA
 11050                           fsr2l	equ	0xFD9
 11051                           status	equ	0xFD8
 11052                           tblptru	equ	0xFF8
 11053                           tblptrh	equ	0xFF7
 11054                           tblptrl	equ	0xFF6
 11055                           tablat	equ	0xFF5
 11056                           prodh	equ	0xFF4
 11057                           prodl	equ	0xFF3
 11058                           indf0	equ	0xFEF
 11059                           fsr0h	equ	0xFEA
 11060                           fsr0l	equ	0xFE9
 11061                           wreg	equ	0xFE8
 11062                           indf1	equ	0xFE7
 11063                           fsr1h	equ	0xFE2
 11064                           fsr1l	equ	0xFE1
 11065                           indf2	equ	0xFDF
 11066                           postinc2	equ	0xFDE
 11067                           postdec2	equ	0xFDD
 11068                           fsr2h	equ	0xFDA
 11069                           fsr2l	equ	0xFD9
 11070                           status	equ	0xFD8
 11071                           
 11072                           	psect	rparam
 11073  0000                     tblptru	equ	0xFF8
 11074                           tblptrh	equ	0xFF7
 11075                           tblptrl	equ	0xFF6
 11076                           tablat	equ	0xFF5
 11077                           prodh	equ	0xFF4
 11078                           prodl	equ	0xFF3
 11079                           indf0	equ	0xFEF
 11080                           fsr0h	equ	0xFEA
 11081                           fsr0l	equ	0xFE9
 11082                           wreg	equ	0xFE8
 11083                           indf1	equ	0xFE7
 11084                           fsr1h	equ	0xFE2
 11085                           fsr1l	equ	0xFE1
 11086                           indf2	equ	0xFDF
 11087                           postinc2	equ	0xFDE
 11088                           postdec2	equ	0xFDD
 11089                           fsr2h	equ	0xFDA
 11090                           fsr2l	equ	0xFD9
 11091                           status	equ	0xFD8


Data Sizes:
    Strings     148
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      93
    BANK0           160     35      35
    BANK1           256    206     206
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_43(CODE[7]), STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), 
		 -> STR_39(CODE[7]), STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), 
		 -> STR_35(CODE[6]), STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), 
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), 
		 -> STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), 
		 -> STR_23(CODE[4]), STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), 
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), 
		 -> STR_7(CODE[2]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[3]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_43(CODE[7]), STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), 
		 -> STR_39(CODE[7]), STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), 
		 -> STR_35(CODE[6]), STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), 
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), 
		 -> STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), 
		 -> STR_23(CODE[4]), STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), 
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), 
		 -> STR_7(CODE[2]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[3]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p1	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    util_transmit_morse_sequence@morse_sequence	PTR unsigned char  size(2) Largest target is 7
		 -> STR_43(CODE[7]), STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), 
		 -> STR_39(CODE[7]), STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), 
		 -> STR_35(CODE[6]), STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), 
		 -> STR_31(CODE[6]), STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), 
		 -> STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), 
		 -> STR_23(CODE[4]), STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), 
		 -> STR_19(CODE[5]), STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), 
		 -> STR_11(CODE[3]), STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), 
		 -> STR_7(CODE[2]), STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[3]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__memset	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main_loop->_util_beacon_transmission
    _util_waits_delay_hours->_util_waits_delay_mins
    _util_waits_delay_mins->_util_waits_delay_secs
    _util_getTemperature->___ftadd
    _util_waits_delay_secs->_util_waits_delay_ms
    _util_onewire_write_byte->_util_onewire_write_bit
    _util_onewire_read_byte->_util_onewire_read_bit
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _util_getSolarCurrent->___fttol
    _util_getBatteryVoltage->___ftmul
    _util_getBatteryCurrent->___fttol
    ___lwtoft->___ftpack
    _util_beacon_transmission->_sprintf
    _util_transmit_letter->_util_transmit_morse_sequence
    _util_transmit_space_between_words->_util_waits_delay_ms
    _util_transmit_space_between_letters->_util_waits_delay_ms
    _util_transmit_morse_sequence->_util_transmit_dash
    _util_transmit_morse_sequence->_util_transmit_dot
    _util_transmit_space_between_dots_dashes->_util_waits_delay_ms
    _util_transmit_dot->_util_waits_delay_ms
    _util_transmit_dash->_util_waits_delay_ms
    _util_transmit_buzzer_1ms_cycle->_util_waits_delay_hundred_us
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK0

    _main->_main_loop
    _util_beacon_transmission->_sprintf

Critical Paths under _main in BANK1

    _main_loop->_util_getTemperature

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  108130
                         _initialize
                          _main_loop
 ---------------------------------------------------------------------------------
 (1) _main_loop                                           10    10      0  108130
                                             25 BANK0     10    10      0
           _util_beacon_transmission
             _util_getBatteryCurrent
             _util_getBatteryVoltage
               _util_getSolarCurrent
                _util_getTemperature
             _util_waits_delay_hours
              _util_waits_delay_mins
 ---------------------------------------------------------------------------------
 (2) _util_waits_delay_hours                               5     3      2     934
                                             17 COMRAM     5     3      2
              _util_waits_delay_mins
 ---------------------------------------------------------------------------------
 (2) _util_waits_delay_mins                                5     3      2     824
                                             12 COMRAM     5     3      2
              _util_waits_delay_secs
 ---------------------------------------------------------------------------------
 (2) _util_getTemperature                                224   221      3   20413
                                             57 COMRAM     6     3      3
                                              0 BANK1    206   206      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
             _util_onewire_read_byte
                 _util_onewire_reset
            _util_onewire_write_byte
              _util_waits_delay_secs
 ---------------------------------------------------------------------------------
 (3) _util_waits_delay_secs                                7     5      2     650
                                              5 COMRAM     7     5      2
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (3) _util_onewire_write_byte                             21    19      2    1150
                                              2 COMRAM    21    19      2
             _util_onewire_write_bit
 ---------------------------------------------------------------------------------
 (4) _util_onewire_write_bit                               2     0      2     534
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _util_onewire_reset                                   5     3      2      24
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _util_onewire_read_byte                              34    32      2     232
                                              5 COMRAM    34    32      2
              _util_onewire_read_bit
 ---------------------------------------------------------------------------------
 (4) _util_onewire_read_bit                                5     3      2      24
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3042
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2943
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _util_getSolarCurrent                                 8     6      2    9037
                                             57 COMRAM     8     6      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _util_getBatteryVoltage                               9     6      3    8465
                                             35 COMRAM     9     6      3
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _util_getBatteryCurrent                               8     6      2    9037
                                             57 COMRAM     8     6      2
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2362
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _util_beacon_transmission                           204   194     10   59306
                                             83 COMRAM    10     0     10
                                              0 BANK1    194   194      0
                             _memset
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
               _util_transmit_letter
 ---------------------------------------------------------------------------------
 (3) _util_transmit_letter                                 1     1      0    5544
                                             13 COMRAM     1     1      0
       _util_transmit_morse_sequence
_util_transmit_space_between_letters
  _util_transmit_space_between_words
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_words                    0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_letters                  0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_morse_sequence                         6     4      2    4662
                                              7 COMRAM     6     4      2
                             _strlen
                 _util_transmit_dash
                  _util_transmit_dot
_util_transmit_space_between_dots_da
 ---------------------------------------------------------------------------------
 (5) _util_transmit_space_between_dots_dashes              0     0      0     430
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dot                                    2     2      0     650
                                              5 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dash                                   2     2      0     650
                                              5 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_waits_delay_ms                                  5     3      2     430
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _util_transmit_buzzer_1ms_cycle                       0     0      0     174
        _util_waits_delay_hundred_us
 ---------------------------------------------------------------------------------
 (7) _util_waits_delay_hundred_us                          5     3      2     174
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     218
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     226
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             51    37     14   52033
                                             63 COMRAM    20     6     14
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   12012
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   11814
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6032
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     572
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4923
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4626
                                             45 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     480
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
   _main_loop
     _util_beacon_transmission
       _memset
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _strcat
       _strcpy
       _strlen
       _util_transmit_letter
         _util_transmit_morse_sequence
           _strlen
           _util_transmit_dash
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_hundred_us
             _util_waits_delay_ms
           _util_transmit_dot
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_hundred_us
             _util_waits_delay_ms
           _util_transmit_space_between_dots_dashes
             _util_waits_delay_ms
         _util_transmit_space_between_letters
           _util_waits_delay_ms
         _util_transmit_space_between_words
           _util_waits_delay_ms
     _util_getBatteryCurrent
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _util_getBatteryVoltage
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _util_getSolarCurrent
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lwtoft
         ___ftpack
     _util_getTemperature
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _util_onewire_read_byte
         _util_onewire_read_bit
       _util_onewire_reset
       _util_onewire_write_byte
         _util_onewire_write_bit
       _util_waits_delay_secs
         _util_waits_delay_ms
     _util_waits_delay_hours
       _util_waits_delay_mins
         _util_waits_delay_secs
           _util_waits_delay_ms
     _util_waits_delay_mins
       _util_waits_delay_secs
         _util_waits_delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5D      5D       1       97.9%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      23       4       21.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100     CE      CE       6       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri Dec 02 20:19:00 2016

                     util_onewire_read_byte@value 0026                              util_getTemperature@i 01CC  
                                              l26 55AA                                                l65 4EE0  
                                              l59 4F0C                                      ___awdiv@sign 000C  
                             ___wmul@multiplicand 0011                  __end_of_util_beacon_transmission 59E2  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                    ___ftadd@exp1 0039                                      ___ftadd@exp2 0038  
                                    ___ftadd@sign 0037                                               l110 5670  
                                             l122 57C4                                               l116 5876  
                                             l252 5076                                               l259 5042  
                                             l700 62CC                                               l630 5DC6  
                                             l720 5A96                                               l296 4F6E  
                                             l709 62E8                                               l389 7A8C  
                                             l662 577C                                               l734 5EF8  
                                             l727 5E6A                                               l728 5E92  
                                             l809 5416                                               l819 5324  
                                             l685 61F2                                               l759 4E46  
                                             l689 621C                           ??_util_onewire_read_bit 0003  
                                    __CFG_CPB$OFF 000000                                      __CFG_CPD$OFF 000000  
                     __end_of_util_getTemperature 740C                                      ___awmod@sign 0006  
                  ??_util_transmit_morse_sequence 000A                                               wreg 000FE8  
                                    __CFG_FOSC$XT 000000                                      __CFG_LVP$OFF 000000  
      util_transmit_morse_sequence@morse_sequence 0008                                      ___ftdiv@cntr 0016  
                                    ___ftdiv@sign 001B                                              l3010 5284  
                                            l3002 51AC                                              l3100 6AE8  
                                            l3020 52B6                                              l3004 51B0  
                                            l3014 528A                                              l3016 52AE  
                                            l3008 527E                                              l4000 6DC2  
                                            l3114 6CB8                                              l3300 5B5A  
                                            l3220 5D5E                                              l3212 5D2E  
                                            l3108 6C14                                              l4020 6E24  
                                            l4004 6DD4                                              l3310 5B82  
                                            l3142 5E30                                              l3126 4E0A  
                                            l4030 6ED2                                              l4014 6E0A  
                                            l4006 6DEA                                              l3312 5B8E  
                                            l3304 5B6A                                              l3232 5D8C  
                                            l3136 5E04                                              l4024 6EB2  
                                            l4008 6DEE                                              l3250 50CA  
                                            l3314 5B94                                              l3330 53D4  
                                            l3242 5DB4                                              l3090 6A20  
                                            l4042 6F4C                                              l4034 6EE8  
                                            l3340 5408                                              l3332 53D8  
                                            l3244 5DC0                                              l3236 5D9C  
                                            l3172 5EBE                                              l3076 6560  
                                            l3068 64A0                                              l3500 74F2  
                                            l4052 6F74                                              l4028 6EC8  
                                            l3262 5618                                              l3318 5BAA  
                                            l3350 52EE                                              l3182 5EE6  
                                            l3510 7552                                              l4142 59C4  
                                            l4046 6F54                                              l4150 4FCC  
                                            l2720 574A                                              l2712 570C  
                                            l3328 53C8                                              l3352 52F2  
                                            l3192 5CCE                                              l3184 5EF2  
                                            l3176 5ECE                                              l3096 6AC4  
                                            l3504 752C                                              l4048 6F5E  
                                            l4160 559E                                              l4152 5532  
                                            l3258 55E8                                              l2722 5768  
                                            l2714 5716                                              l3282 5AF4  
                                            l3362 521E                                              l3522 75A4  
                                            l3514 7558                                              l3506 7542  
                                            l4138 59A8                                              l4082 703E  
                                            l4090 706E                                              l4074 700E  
                                            l4146 4FBC                                              l3460 4EA8  
                                            l3268 5644                                              l2724 5772  
                                            l2716 5734                                              l2708 56FE  
                                            l2820 625A                                              l2804 622A  
                                            l3356 5316                                              l3348 52E2  
                                            l3364 522A                                              l2900 5C76  
                                            l3620 7976                                              l3612 794A  
                                            l3604 78EE                                              l3532 75EA  
                                            l3516 758A                                              l3372 4F8C  
                                            l2830 6290                                              l3198 5CEC  
                                            l3710 7CDE                                              l3470 4F34  
                                            l2742 51D0                                              l4094 707C  
                                            l3464 4EB8                                              l2840 62C4  
                                            l2832 6298                                              l3624 799A  
                                            l3616 795A                                              l3608 7930  
                                            l3560 771A                                              l3480 743A  
                                            l2744 51D4                                              l3800 663E  
                                            l4088 7062                                              l3376 4F9C  
                                            l2826 627C                                              l2930 546A  
                                            l2922 544C                                              l3730 7D8E  
                                            l3714 7D02                                              l3642 7A5A  
                                            l3626 79A0                                              l3634 7A34  
                                            l3618 7962                                              l3562 7730  
                                            l3474 741C                                              l3810 6684  
                                            l3802 664C                                              l4098 7098  
                                            l2828 6286                                              l2940 548A  
                                            l2932 546E                                              l2916 543C  
                                            l3740 7DE2                                              l3732 7D98  
                                            l3724 7D5A                                              l3660 7B10  
                                            l3644 7A6E                                              l3636 7A42  
                                            l3572 77B8                                              l3564 7760  
                                            l3556 76F4                                              l3548 768C  
                                            l3468 4F2C                                              l3820 66CA  
                                            l3812 6692                                              l3804 665A  
                                            l3900 5A70                                              l2846 6304  
                                            l2838 62BA                                              l3718 7D2E  
                                            l3670 7BF4                                              l3590 78A2  
                                            l3566 7776                                              l3486 746C  
                                            l3494 74CC                                              l2694 4F00  
                                            l2774 5030                                              l2758 5064  
                                            l3830 6710                                              l3822 66D8  
                                            l3814 66A0                                              l3806 6668  
                                            l2856 6334                                              l2928 5462  
                                            l2944 5494                                              l2960 534A  
                                            l2872 5C0C                                              l3752 7E2C  
                                            l3736 7DCC                                              l3672 7C02  
                                            l3656 7ABE                                              l3648 7A90  
                                            l3592 78A8                                              l3576 77DE  
                                            l3680 7C28                                              l3760 7ECA  
                                            l2688 4ED4                                              l3840 6756  
                                            l3832 671E                                              l3824 66E6  
                                            l3816 66AE                                              l3808 6676  
                                            l2970 536C                                              l2890 5C4E  
                                            l2866 5BE4                                              l3746 7E06  
                                            l3738 7DD6                                              l3690 7C6C  
                                            l3586 783C                                              l3762 7EE6  
                                            l3770 5102                                              l3850 679C  
                                            l3842 6764                                              l3834 672C  
                                            l3826 66F4                                              l3818 66BC  
                                            l3922 5090                                              l2948 54A2  
                                            l2972 5370                                              l2980 538E  
                                            l2964 5356                                              l3756 7EB0  
                                            l3772 5112                                              l3860 67E2  
                                            l3852 67AA                                              l3844 6772  
                                            l3836 673A                                              l3828 6702  
                                            l3780 65B2                                              l2798 6200  
                                            l2886 5C3E                                              l3758 7EB4  
                                            l3678 7C1A                                              l3774 511A  
                                            l3854 67B8                                              l3846 6780  
                                            l3838 6748                                              l3790 65F8  
                                            l3782 65C0                                              l2990 5182  
                                            l2984 539C                                              l2976 5384  
                                            l2968 5364                                              l2896 5C66  
                                            l3696 7C92                                              l3768 50FE  
                                            l3856 67C6                                              l3848 678E  
                                            l3792 6606                                              l3784 65CE  
                                            l3864 67E8                                              l3880 5A32  
                                            l2992 518A                                              l3698 7C98  
                                            l3858 67D4                                              l3794 6614  
                                            l3786 65DC                                              l3866 68E6  
                                            l3778 65A4                                              l3874 5A0A  
                                            l3796 6622                                              l3788 65EA  
                                            l2996 519A                                              l3798 6630  
                                            l3994 6D9C                                              STR_1 7F9E  
                                            STR_2 7F6B                                              STR_3 7FE8  
                                            STR_4 7FD0                                              STR_5 7FF5  
                                            STR_6 7FCB                                              STR_7 7FC1  
                                            STR_8 7FC4                                              STR_9 7FBF  
                                            u2201 61D2                                              u2130 51F4  
                                            u3100 5160                                              u2160 5076  
                                            u2401 5BCC                                              u2137 51EA  
                                            u3115 60B0                                              u2180 5042  
                                            u3108 5162                                              u2421 5BF4  
                                            u3125 60CE                                              u2191 61BE  
                                            u3135 60EC                                              u3145 610A  
                                            u4107 5006                                              u3155 5F7E  
                                            u4117 4F02                                              u3165 5F92  
                                            u2630 4FFC                                              u4127 4ED6  
                                            u3175 5FA6                                              u4057 4F68  
                                            u3290 762A                                              u2731 5DE8  
                                            u4067 4F72                                              u4077 5144  
                                            u2638 4FFE                                              u2751 5E14  
                                            u3295 7620                                              u4087 514E  
                                            u3480 7A84                                              u3721 59F2  
                                            u4097 516A                                              u2941 5AD8  
                                            u3741 5A1A                                              u2960 5B12  
                                            u2965 5B0A                                              u3884 6F14  
                                            u3885 6F0E                          ??_util_onewire_read_byte 0008  
                                    __CFG_WRTC$ON 000000                                      __CFG_WRTD$ON 000000  
                                            _main 4DBE                                      ___ftpack@arg 0001  
                                    ___ftpack@exp 0004                                              fsr0h 000FEA  
                                            fsr1h 000FE2                                              indf0 000FEF  
                                            fsr0l 000FE9                                              fsr2h 000FDA  
                                            indf1 000FE7                                              fsr1l 000FE1  
                                            indf2 000FDF                                              fsr2l 000FD9  
                                   __CFG_BORV$190 000000                                              prodh 000FF4  
                                            prodl 000FF3                                              start 0000  
                                   __CFG_IESO$OFF 000000   __end_of_util_transmit_space_between_dots_dashes 4DD8  
__size_of_util_transmit_space_between_dots_dashes 000E         ??_util_transmit_space_between_dots_dashes 0006  
        ?_util_transmit_space_between_dots_dashes 0001           _util_transmit_space_between_dots_dashes 4DCA  
                                    _sprintf$1794 0060                                      ___ftmul@cntr 0022  
                                    ___param_bank 000010                                      ___ftmul@sign 0023  
                                    ___fttol@exp1 0039                                      ___fttol@lval 0035  
                              _util_transmit_dash 5014                           util_getTemperature@sign 01A4  
                                           ?_main 0001               __end_of_util_waits_delay_hundred_us 4EF6  
                     _util_waits_delay_hundred_us 4ECA                                   __end_of___awdiv 54AC  
                                           _ADRES 000FC3                                   __end_of___ftadd 635A  
                                           STR_10 7FD6                                             STR_11 7FCC  
                                           STR_12 7FB2                                             STR_20 7FF6  
                                           STR_13 7FE7                                             STR_21 7FD1  
                                           STR_22 7FA9                                             STR_14 7FFA  
                                           STR_30 7FAB                                             STR_15 7FA8  
                                           STR_23 7FEC                                             STR_31 7FB1  
                                           STR_24 7F92                                             STR_16 7FC0  
                                           STR_32 7FB7                                             STR_40 7F97  
                                           STR_17 7FA7                                             STR_25 7FE2  
                                           STR_33 7F91                                             STR_41 7FC3  
                                           STR_18 7FF0                                             STR_26 7FEB  
                                           STR_34 7FDB                                             STR_42 7F89  
                                           STR_19 7FE6                                             STR_27 7FE1  
                                           STR_35 7FD5                                             STR_43 7F90  
                                           STR_28 7FCA                                             STR_36 7FCF  
                                 __end_of___awmod 53A6                                             STR_37 7FC9  
                                           STR_29 7FA5                                             STR_38 7FBD  
                                           STR_39 7F82                                   __end_of___ftdiv 5AC8  
                                 __end_of___ftneg 4E54                                   __end_of___lldiv 5428  
                                 __end_of___ftmul 5CB0                                   ___awdiv@divisor 0009  
                                 __end_of___llmod 5336                                   __end_of___ftsub 50F4  
                                 __end_of___fttol 5BBC                       __size_of_util_onewire_reset 0042  
                                 ___awdiv@counter 000B                               ?_util_transmit_dash 0001  
                                   __CFG_WRT0$OFF 000000                                     __CFG_WRT1$OFF 000000  
                                   __CFG_WRT2$OFF 000000                                     __CFG_WRT3$OFF 000000  
                                    ___lltoft@exp 0011                                    __CFG_EBTR0$OFF 000000  
                                  __CFG_FCMEN$OFF 000000                                    __CFG_EBTR1$OFF 000000  
                                  __CFG_EBTR2$OFF 000000                                    __CFG_EBTR3$OFF 000000  
                    __end_of_util_getSolarCurrent 5900                                     __CFG_WRTB$OFF 000000  
                                  __CFG_EBTRB$OFF 000000                                     ___awtoft@sign 000C  
                                 __end_of_dpowers 7F1D                                             _scale 68EC  
                                 __end_of_isdigit 4E12                                __CFG_MCLRE$EXTMCLR 000000  
                                   ___ftpack@sign 0005                          ??_util_onewire_write_bit 0003  
                       util_waits_delay_secs@secs 0006                                    __CFG_BOREN$OFF 000000  
                                           tablat 000FF5                                             status 000FD8  
                     __end_of_util_waits_delay_ms 4F22                                   __end_of_sprintf 7EF4  
                            ??_util_transmit_dash 0006                           util_waits_delay_hours@i 0015  
                  util_getTemperature@bit_in_byte 01C7                                   __initialization 4DB4  
                       util_beacon_transmission@i 01C0                                      __end_of_main 4DCA  
                    __end_of_util_transmit_letter 68EC                                            ??_main 005E  
                                   ___fttol@sign1 0034                                     __activetblptr 000002  
                            __size_of__tdiv_to_l_ 0132                        util_onewire_read_bit@value 0004  
                       util_getSolarCurrent@value 003C                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                  ___llmod@dividend 000E  
                                          ?_scale 0024                                  ___awdiv@dividend 0007  
                                __end_of___awtoft 50B4                                  __end_of___ftpack 579C  
                                __end_of___lltoft 5274                                    __CFG_WDTEN$OFF 000000  
                                __end_of___lwtoft 4E78                   __size_of_util_onewire_read_byte 0142  
               __size_of_util_beacon_transmission 00E2                         ?_util_beacon_transmission 0054  
                                  __CFG_XINST$OFF 000000                                  __end_of__powers_ 7F6B  
                        ?_util_onewire_write_byte 0003                                            ___ftge 55B8  
                      util_onewire_read_byte@bit0 0016                        util_onewire_read_byte@bit1 0018  
                      util_onewire_read_byte@bit2 001A                        util_onewire_read_byte@bit3 001C  
                      util_onewire_read_byte@bit4 001E                        util_onewire_read_byte@bit5 0020  
                      util_onewire_read_byte@bit6 0022                        util_onewire_read_byte@bit7 0024  
                         ??_util_waits_delay_mins 000F                           ??_util_waits_delay_secs 0008  
                                          ___wmul 4E78                                         ??___awdiv 000B  
                                       ??___ftadd 0034                                    __CFG_STVREN$ON 000000  
                                       ??___awmod 0005                                         ??___ftdiv 0013  
                                       ??___ftneg 0004                                         ??___lldiv 0009  
                                       ??___ftmul 001B                                         ??___llmod 0016  
                                       ??___ftsub 0040                                         ??___fttol 002F  
                     util_onewire_write_byte@bit0 0008                       util_onewire_write_byte@bit1 000A  
                     util_onewire_write_byte@bit2 000C                       util_onewire_write_byte@bit3 000E  
                     util_onewire_write_byte@bit4 0010                       util_onewire_write_byte@bit5 0012  
                     util_onewire_write_byte@bit6 0014                       util_onewire_write_byte@bit7 0016  
                                          _memset 4E9E                                            _fround 635A  
                                ___awdiv@quotient 000D                                   ___awmod@divisor 0003  
                                 ___awmod@counter 0005                       util_waits_delay_hours@hours 0012  
                                          _strcat 50F4                                            _strcpy 4F22  
                                          _strlen 51C6                             ___ftmul@f3_as_product 001F  
                                       ??_isdigit 0001                                      __mediumconst 7EF4  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                         ??_sprintf 004E  
                                 __CFG_HFOFST$OFF 000000                          ??_util_getBatteryCurrent 003C  
                 __size_of_util_onewire_write_bit 0030                                        __accesstop 0060  
                         __end_of__initialization 4DB4                                   __CFG_PBADEN$OFF 000000  
                                      ___ftadd@f1 002E                                        ___ftadd@f2 0031  
                                      ___ftge@ff1 0001                                        ___ftge@ff2 0004  
                                   ___rparam_used 000001                                        ___ftdiv@f1 000D  
                                      ___ftdiv@f2 0010                                        ___ftdiv@f3 0017  
                        ??_util_getBatteryVoltage 0027                                        ___ftneg@f1 0001  
                                      ___awtoft@c 0009                                        ___ftmul@f1 0015  
                                      ___ftmul@f2 0018                                        ___ftsub@f1 003A  
                                      ___ftsub@f2 003D                                        ___fttol@f1 002B  
                                  __pcstackCOMRAM 0001                              _util_getSolarCurrent 584E  
                                      ___lltoft@c 0009                          main_loop@battery_current 007E  
                                   __end_of_scale 6CDC                            _util_onewire_read_byte 5F0A  
                                      ___lwtoft@c 0009                                        __div_to_l_ 5CB0  
                        main_loop@battery_voltage 0080                    __size_of_util_onewire_read_bit 0032  
                   __end_of_util_onewire_read_bit 5014                                   __div_to_l_@exp1 000C  
                                 __div_to_l_@cntr 000B                                           ??_scale 0027  
                                 __div_to_l_@quot 0007                                      sprintf@width 0067  
       __end_of_util_transmit_space_between_words 4DF4        __size_of_util_transmit_space_between_words 000E  
             ??_util_transmit_space_between_words 0006                ?_util_transmit_space_between_words 0001  
               _util_transmit_space_between_words 4DE6                                __size_of_main_loop 0086  
                                 __CFG_PLLCFG$OFF 000000                              _util_transmit_letter 65A0  
                                   __div_to_l_@f1 0001                                     __div_to_l_@f2 0004  
                              __CFG_CCP2MX$PORTC1 000000                             ?_util_getSolarCurrent 003A  
                                         ?___ftge 0001                      util_onewire_write_bit@bit_in 0001  
                                         ?___wmul 000F                                __CFG_CCP3MX$PORTB5 000000  
                          _util_onewire_write_bit 4F52                                           ?_memset 0001  
                                         ?_fround 0024                                         ?___awtoft 0009  
                                       ?___ftpack 0001                                         ?___lltoft 0009  
                                         ?_strcat 0001                                           ?_strcpy 0001  
                                         ?_strlen 0001                                         ?___lwtoft 0009  
                    __size_of_util_getTemperature 0730                             ?_util_transmit_letter 0001  
            __size_of_util_waits_delay_hundred_us 002C                   __size_of_util_getBatteryCurrent 00B2  
                            util_waits_delay_ms@i 0004                      util_waits_delay_mins@minutes 000D  
                                 __CFG_PWRTEN$OFF 000000                                 __end_of__npowers_ 7F44  
                                         __Hparam 0000                   __size_of_util_getBatteryVoltage 00A6  
                                      _scale$1793 0027              __end_of_util_transmit_morse_sequence 52D0  
           __size_of_util_transmit_morse_sequence 005C                      _util_transmit_morse_sequence 5274  
                                         __Lparam 0000                        util_getTemperature@bit_mem 0100  
     __end_of_util_transmit_space_between_letters 4DE6      __size_of_util_transmit_space_between_letters 000E  
           ??_util_transmit_space_between_letters 0006              ?_util_transmit_space_between_letters 0001  
             _util_transmit_space_between_letters 4DD8                                   __size_of___ftge 0090  
                                         ___awdiv 5428                                           ___ftadd 61AE  
                                         ___awmod 5336                                           ___ftdiv 59E2  
                                         ___ftneg 4E30                                           ___lldiv 53A6  
                                 __size_of___wmul 0026                                           ___ftmul 5BBC  
                        ??_util_waits_delay_hours 0014                                           ___llmod 52D0  
                                         ___ftsub 50B4                       util_getTemperature@byte_mem 0190  
                                         ___fttol 5AC8                    util_getTemperature@temperature 01C9  
                      __end_of_util_onewire_reset 5178                                 __end_of_main_loop 55B8  
                                         __pcinit 4DB4                                        ??___awtoft 000C  
                                      ??___ftpack 0006                                   __size_of_memset 002C  
                                 __size_of_fround 0246                                           __ramtop 0600  
                                      _initialize 54AC                        util_getTemperature@num_bit 01A2  
                                      ??___lltoft 000D                                           __ptext0 4DBE  
                                         __ptext1 5532                                           __ptext2 4FB2  
                                         __ptext3 4F82                                           __ptext4 6CDC  
                                         __ptext5 5178                                           __ptext6 604C  
                                         __ptext7 4F52                                           __ptext8 5136  
                                         __ptext9 5F0A                                        ??___lwtoft 000C  
                                 __size_of_strcat 0042                                   __size_of_strcpy 0030  
                                 __size_of_strlen 0052                                       ?__div_to_l_ 0001  
                                         _dpowers 7EF5                       util_getTemperature@num_byte 01C5  
                                         _isdigit 4DF4                                  ___awmod@dividend 0001  
                    util_onewire_write_byte@value 0003                  ??_util_transmit_buzzer_1ms_cycle 0006  
                 ?_util_transmit_buzzer_1ms_cycle 0001                              main_loop@temperature 0079  
                                         _sprintf 740C                     util_transmit_morse_sequence@i 000C  
                            end_of_initialization 4DB4                      util_waits_delay_hundred_us@i 0004  
                                         memset@c 0003                                           memset@n 0005  
                                         memset@p 0007                                     __Lmediumconst 7EF4  
                     __size_of_util_transmit_dash 0034                                   ___lldiv@divisor 0005  
                          ??_util_getSolarCurrent 003C                                   ___lldiv@counter 000D  
                                         postdec2 000FDD                      __size_of_util_waits_delay_ms 002C  
                                         postinc2 000FDE             util_beacon_transmission@solar_current 0057  
                  __size_of_util_waits_delay_mins 0030                                    __tdiv_to_l_@f1 0001  
                                  __tdiv_to_l_@f2 0004                    __size_of_util_waits_delay_secs 004E  
                   __end_of_util_waits_delay_mins 4FB2                            _util_getBatteryCurrent 579C  
                   __end_of_util_waits_delay_secs 51C6                                           strlen@s 0001  
                                   ??__tdiv_to_l_ 0007                                         _PORTAbits 000F80  
                                       _PORTDbits 000F83                            _util_getBatteryVoltage 5648  
                __size_of_util_onewire_write_byte 0162                          _util_getTemperature$1790 01B0  
                        _util_getTemperature$1787 01A7                          _util_getTemperature$1788 01AA  
                        _util_getTemperature$1789 01AD                                         _TRISAbits 000F92  
                                       _TRISDbits 000F95                            ??_util_transmit_letter 000E  
                                     ___ftdiv@exp 001A             util_beacon_transmission@BEACON_BUFFER 0180  
                             __size_of__div_to_l_ 0128                                       ___ftmul@exp 001E  
                         ?_util_onewire_read_byte 0006                                 _util_transmit_dot 5048  
                                  __end_of___ftge 5648                   __size_of_util_waits_delay_hours 0030  
                                  __end_of___wmul 4E9E                                ?_util_transmit_dot 0001  
                                     ?_initialize 0001                                    __end_of_memset 4ECA  
                                  __end_of_fround 65A0                                    __end_of_strcat 5136  
                                  __end_of_strcpy 4F52                                    __end_of_strlen 5218  
               util_waits_delay_hundred_us@hun_us 0001                               start_initialization 4DB4  
                             ??_util_transmit_dot 0006                            util_waits_delay_mins@i 0010  
                          util_waits_delay_secs@i 0009                            util_waits_delay_secs@j 000B  
                             __end_of__tdiv_to_l_ 5F0A                          _util_beacon_transmission 5900  
             util_beacon_transmission@temperature 005B                                   ___llmod@divisor 0012  
                                 ___llmod@counter 0016                               util_transmit_dash@i 0006  
                  __end_of_util_onewire_read_byte 604C                         __end_of_util_transmit_dot 507C  
                         ?_util_onewire_write_bit 0001                                          ??___ftge 0007  
                                        ??___wmul 0013                               _util_getTemperature 6CDC  
                                        ??_memset 0007                                          ??_fround 0027  
                                   sprintf@tmpval 0069                                          ??_strcat 0005  
                                        ??_strcpy 0005                                          ??_strlen 0003  
                    ?_util_waits_delay_hundred_us 0001                                        fround@prec 002D  
                               __size_of___awtoft 0038                                 __size_of___ftpack 00AE  
                               __size_of___lltoft 005C                                 __size_of___lwtoft 0024  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0100  
                                    _isdigit$1452 0002                             _util_onewire_read_bit 4FE2  
                            ?_util_getTemperature 003A                            _util_waits_delay_hours 4FB2  
               util_getTemperature@shift_reg_bit0 01B3                 util_getTemperature@shift_reg_bit1 01B5  
               util_getTemperature@shift_reg_bit2 01B7                 util_getTemperature@shift_reg_bit3 01B9  
               util_getTemperature@shift_reg_bit4 01BB                 util_getTemperature@shift_reg_bit5 01BD  
               util_getTemperature@shift_reg_bit6 01BF                 util_getTemperature@shift_reg_bit7 01C1  
          util_beacon_transmission@BEACON_MESSAGE 0100                                       sprintf@flag 0065  
                                     sprintf@fval 0073             util_getTemperature@shift_reg_bit_temp 01C3  
                                     sprintf@prec 0076                               __size_of_initialize 0086  
                  __end_of_util_onewire_write_bit 4F82                                     __pmediumconst 7EF4  
                                        ?___awdiv 0007                                          ?___ftadd 002E  
                                        ?___awmod 0001                                          ?___ftdiv 000D  
                                        ?___ftneg 0001                                          ?___lldiv 0001  
                                        ?___ftmul 0015                                          ?___llmod 000E  
                                        ?___ftsub 003A                                         __npowers_ 7F1D  
                                        ?___fttol 002B                                  __CFG_PRICLKEN$ON 000000  
                                     __tdiv_to_l_ 5DD8                                      ??__div_to_l_ 0007  
                         _util_onewire_write_byte 604C                                          ?_isdigit 0001  
                                       _main_loop 5532                     ??_util_waits_delay_hundred_us 0003  
                             _util_waits_delay_ms 4EF6                             ??_util_getTemperature 003D  
                              _util_onewire_reset 5136                                          ?_sprintf 0040  
                                  __size_of_scale 03F0                       util_getBatteryVoltage@value 0027  
                                  ___wmul@product 0013                                          _LATAbits 000F89  
                                        _LATDbits 000F8C                               ?_util_onewire_reset 0001  
                      __size_of_util_transmit_dot 0034                                          _PIR1bits 000F9E  
                              __end_of__div_to_l_ 5DD8            __end_of_util_transmit_buzzer_1ms_cycle 4E30  
         __size_of_util_transmit_buzzer_1ms_cycle 001E                    _util_transmit_buzzer_1ms_cycle 4E12  
                         ?_util_getBatteryCurrent 003A                                  __CFG_WDTPS$32768 000000  
                            ?_util_waits_delay_ms 0001           util_beacon_transmission@battery_current 0059  
                         ?_util_getBatteryVoltage 0024                                        _ADCON0bits 000FC2  
                               ___wmul@multiplier 000F                              ??_util_onewire_reset 0003  
                      util_transmit_letter@letter 000E                                        ?_main_loop 0001  
         util_beacon_transmission@battery_voltage 0054                            ?_util_onewire_read_bit 0001  
                     util_getBatteryCurrent@value 003C                             util_waits_delay_ms@ms 0001  
                      __end_of_util_transmit_dash 5048                    __end_of_util_getBatteryCurrent 584E  
                                        __Hrparam 0000                                util_transmit_dot@i 0006  
                                        __Lrparam 0000                             ??_util_waits_delay_ms 0003  
                   __size_of_util_getSolarCurrent 00B2                                 __CFG_P2BMX$PORTC0 000000  
                  __end_of_util_getBatteryVoltage 56EE                                  __size_of___awdiv 0084  
                                __size_of___ftadd 01AC                                  __size_of___awmod 0070  
                                __size_of___ftdiv 00E6                                  __size_of___ftneg 0024  
                                __size_of___lldiv 0082                                  __size_of___ftmul 00F4  
                       ??_util_onewire_write_byte 0005                                  __size_of___llmod 0066  
                                __size_of___ftsub 0040                                  __size_of___fttol 00F4  
                                    ??_initialize 0001                                          ___awtoft 507C  
                                        ___ftpack 56EE                                       _fround$1791 002A  
                                     _fround$1792 0027                                          ___lltoft 5218  
                      ??_util_beacon_transmission 005E                             _util_waits_delay_mins 4F82  
                           _util_waits_delay_secs 5178                                        _ANSELAbits 000F38  
                                        ___lwtoft 4E54                                        _ANSELDbits 000F3B  
                                      sprintf@exp 0071                                        sprintf@val 006D  
                                      strcat@from 0003                                  __size_of_isdigit 001E  
                                        __ptext10 4FE2                                          __ptext11 59E2  
                                        __ptext20 4DD8                                          __ptext12 507C  
                                        __ptext21 5274                                          __ptext13 584E  
                                        __ptext30 50F4                                          __ptext22 4DCA  
                                        __ptext14 5648                                          __ptext31 740C  
                                        __ptext23 5048                                          __ptext15 579C  
                                        __ptext40 5CB0                                          __ptext32 68EC  
                                        __ptext24 5014                                          __ptext16 4E54  
                                        __ptext41 5218                                          __ptext33 4DF4  
                                        __ptext25 4EF6                                          __ptext17 5900  
                                        __ptext50 4E9E                                          __ptext42 52D0  
                                        __ptext34 635A                                          __ptext26 4E12  
                                        __ptext18 65A0                                          __ptext51 54AC  
                                        __ptext43 53A6                                          __ptext35 4E78  
                                        __ptext27 4ECA                                          __ptext19 4DE6  
                                        __ptext44 5AC8                                          __ptext36 5BBC  
                                        __ptext28 51C6                                          __ptext45 50B4  
                                        __ptext37 5336                                          __ptext29 4F22  
                                        __ptext46 61AE                                          __ptext38 5428  
                                        __ptext47 56EE                                          __ptext39 5DD8  
                                        __ptext48 4E30                                          __ptext49 55B8  
                                        __powers_ 7F44                                  __size_of_sprintf 0AE8  
                                      strcpy@from 0003                     __size_of_util_transmit_letter 034C  
                util_getSolarCurrent@solarCurrent 003F                                     __size_of_main 000C  
                      util_onewire_reset@presence 0004                                __end_of_initialize 5532  
                   ?_util_transmit_morse_sequence 0008                     util_getBatteryVoltage@voltage 002A  
                                     ??_main_loop 005E                           ?_util_waits_delay_hours 0012  
                                        isdigit@c 0003                                          memset@p1 0001  
                          main_loop@solar_current 007C                                          scale@scl 002A  
                 __end_of_util_onewire_write_byte 61AE                                         sprintf@ap 0063  
                                __tdiv_to_l_@exp1 000F                                         sprintf@sp 0040  
                                __tdiv_to_l_@cntr 000E                                  __tdiv_to_l_@quot 000A  
                                    _VREFCON0bits 000F42                                  ___lldiv@dividend 0001  
                          ?_util_waits_delay_mins 000D                            ?_util_waits_delay_secs 0006  
                                    ?__tdiv_to_l_ 0001                                          sprintf@c 0078  
                                        sprintf@f 0042                                          strcat@cp 0005  
                                        strcat@to 0001                    __end_of_util_waits_delay_hours 4FE2  
                                ___lldiv@quotient 0009                                          strcpy@cp 0005  
                                        strlen@cp 0005                                          strcpy@to 0001  
                               __CFG_T3CMX$PORTB5 000000              util_getBatteryCurrent@batteryCurrent 003F  
