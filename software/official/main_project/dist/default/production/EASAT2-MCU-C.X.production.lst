

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Thu Oct 27 21:32:51 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	text34,global,reloc=2,class=CODE,delta=1
    45                           	psect	text35,global,reloc=2,class=CODE,delta=1
    46                           	psect	text36,global,reloc=2,class=CODE,delta=1
    47                           	psect	text37,global,reloc=2,class=CODE,delta=1
    48                           	psect	text38,global,reloc=2,class=CODE,delta=1
    49                           	psect	text39,global,reloc=2,class=CODE,delta=1
    50                           	psect	text40,global,reloc=2,class=CODE,delta=1
    51                           	psect	text41,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	mediumconst
    56  007EF4                     __pmediumconst:
    57                           	opt stack 0
    58  007EF4  00                 	db	0
    59  007EF5                     _dpowers:
    60                           	opt stack 0
    61  007EF5  0001               	dw	1
    62  007EF7  0000               	dw	0
    63  007EF9  000A               	dw	10
    64  007EFB  0000               	dw	0
    65  007EFD  0064               	dw	100
    66  007EFF  0000               	dw	0
    67  007F01  03E8               	dw	1000
    68  007F03  0000               	dw	0
    69  007F05  2710               	dw	10000
    70  007F07  0000               	dw	0
    71  007F09  86A0               	dw	34464
    72  007F0B  0001               	dw	1
    73  007F0D  4240               	dw	16960
    74  007F0F  000F               	dw	15
    75  007F11  9680               	dw	38528
    76  007F13  0098               	dw	152
    77  007F15  E100               	dw	57600
    78  007F17  05F5               	dw	1525
    79  007F19  CA00               	dw	51712
    80  007F1B  3B9A               	dw	15258
    81  007F1D                     __end_of_dpowers:
    82                           	opt stack 0
    83  007F1D                     __npowers_:
    84                           	opt stack 0
    85  007F1D  00                 	db	0
    86  007F1E  80                 	db	128
    87  007F1F  3F                 	db	63
    88  007F20  CD                 	db	205
    89  007F21  CC                 	db	204
    90  007F22  3D                 	db	61
    91  007F23  D7                 	db	215
    92  007F24  23                 	db	35
    93  007F25  3C                 	db	60
    94  007F26  12                 	db	18
    95  007F27  83                 	db	131
    96  007F28  3A                 	db	58
    97  007F29  B7                 	db	183
    98  007F2A  D1                 	db	209
    99  007F2B  38                 	db	56
   100  007F2C  C6                 	db	198
   101  007F2D  27                 	db	39
   102  007F2E  37                 	db	55
   103  007F2F  38                 	db	56
   104  007F30  86                 	db	134
   105  007F31  35                 	db	53
   106  007F32  C0                 	db	192
   107  007F33  D6                 	db	214
   108  007F34  33                 	db	51
   109  007F35  CC                 	db	204
   110  007F36  2B                 	db	43
   111  007F37  32                 	db	50
   112  007F38  70                 	db	112
   113  007F39  89                 	db	137
   114  007F3A  30                 	db	48
   115  007F3B  E7                 	db	231
   116  007F3C  DB                 	db	219
   117  007F3D  2E                 	db	46
   118  007F3E  E5                 	db	229
   119  007F3F  3C                 	db	60
   120  007F40  1E                 	db	30
   121  007F41  42                 	db	66
   122  007F42  A2                 	db	162
   123  007F43  0D                 	db	13
   124  007F44                     __end_of__npowers_:
   125                           	opt stack 0
   126  007F44                     __powers_:
   127                           	opt stack 0
   128  007F44  00                 	db	0
   129  007F45  80                 	db	128
   130  007F46  3F                 	db	63
   131  007F47  00                 	db	0
   132  007F48  20                 	db	32
   133  007F49  41                 	db	65
   134  007F4A  00                 	db	0
   135  007F4B  C8                 	db	200
   136  007F4C  42                 	db	66
   137  007F4D  00                 	db	0
   138  007F4E  7A                 	db	122
   139  007F4F  44                 	db	68
   140  007F50  40                 	db	64
   141  007F51  1C                 	db	28
   142  007F52  46                 	db	70
   143  007F53  50                 	db	80
   144  007F54  C3                 	db	195
   145  007F55  47                 	db	71
   146  007F56  24                 	db	36
   147  007F57  74                 	db	116
   148  007F58  49                 	db	73
   149  007F59  97                 	db	151
   150  007F5A  18                 	db	24
   151  007F5B  4B                 	db	75
   152  007F5C  BC                 	db	188
   153  007F5D  BE                 	db	190
   154  007F5E  4C                 	db	76
   155  007F5F  6B                 	db	107
   156  007F60  6E                 	db	110
   157  007F61  4E                 	db	78
   158  007F62  03                 	db	3
   159  007F63  15                 	db	21
   160  007F64  50                 	db	80
   161  007F65  79                 	db	121
   162  007F66  AD                 	db	173
   163  007F67  60                 	db	96
   164  007F68  F3                 	db	243
   165  007F69  49                 	db	73
   166  007F6A  71                 	db	113
   167  007F6B                     __end_of__powers_:
   168                           	opt stack 0
   169  0000                     _PORTDbits	set	3971
   170  007F6B                     STR_2:
   171  007F6B  20                 	db	32
   172  007F6C  25                 	db	37
   173  007F6D  2E                 	db	46
   174  007F6E  31                 	db	49	;'1'
   175  007F6F  66                 	db	102	;'f'
   176  007F70  20                 	db	32
   177  007F71  25                 	db	37
   178  007F72  2E                 	db	46
   179  007F73  31                 	db	49	;'1'
   180  007F74  66                 	db	102	;'f'
   181  007F75  20                 	db	32
   182  007F76  25                 	db	37
   183  007F77  33                 	db	51	;'3'
   184  007F78  2E                 	db	46
   185  007F79  30                 	db	48	;'0'
   186  007F7A  64                 	db	100	;'d'
   187  007F7B  20                 	db	32
   188  007F7C  25                 	db	37
   189  007F7D  33                 	db	51	;'3'
   190  007F7E  2E                 	db	46
   191  007F7F  30                 	db	48	;'0'
   192  007F80  64                 	db	100	;'d'
   193  007F81  00                 	db	0
   194  007F82                     STR_39:
   195  007F82  2D                 	db	45
   196  007F83  2D                 	db	45
   197  007F84  2E                 	db	46
   198  007F85  2E                 	db	46
   199  007F86  2D                 	db	45
   200  007F87  2D                 	db	45
   201  007F88  00                 	db	0
   202  007F89                     STR_42:
   203  007F89  2E                 	db	46
   204  007F8A  2D                 	db	45
   205  007F8B  2E                 	db	46
   206  007F8C  2D                 	db	45
   207  007F8D  2E                 	db	46
   208  007F8E  2D                 	db	45
   209  007F8F  00                 	db	0
   210  007F90                     STR_40:
   211  007F90  2E                 	db	46
   212  007F91  2E                 	db	46
   213  007F92  2D                 	db	45
   214  007F93  2D                 	db	45
   215  007F94  2E                 	db	46
   216  007F95  2E                 	db	46
   217  007F96  00                 	db	0
   218  007F97                     STR_1:
   219  007F97  45                 	db	69	;'E'
   220  007F98  41                 	db	65	;'A'
   221  007F99  53                 	db	83	;'S'
   222  007F9A  41                 	db	65	;'A'
   223  007F9B  54                 	db	84	;'T'
   224  007F9C  32                 	db	50	;'2'
   225  007F9D  00                 	db	0
   226  007F9E                     STR_29:
   227  007F9E  2D                 	db	45
   228  007F9F  2D                 	db	45
   229  007FA0  2D                 	db	45
   230  007FA1  2D                 	db	45
   231  007FA2  2D                 	db	45
   232  007FA3  00                 	db	0
   233  007FA4                     STR_30:
   234  007FA4  2E                 	db	46
   235  007FA5  2D                 	db	45
   236  007FA6  2D                 	db	45
   237  007FA7  2D                 	db	45
   238  007FA8  2D                 	db	45
   239  007FA9  00                 	db	0
   240  007FAA                     STR_31:
   241  007FAA  2E                 	db	46
   242  007FAB  2E                 	db	46
   243  007FAC  2D                 	db	45
   244  007FAD  2D                 	db	45
   245  007FAE  2D                 	db	45
   246  007FAF  00                 	db	0
   247  007FB0                     STR_32:
   248  007FB0  2E                 	db	46
   249  007FB1  2E                 	db	46
   250  007FB2  2E                 	db	46
   251  007FB3  2D                 	db	45
   252  007FB4  2D                 	db	45
   253  007FB5  00                 	db	0
   254  007FB6                     STR_33:
   255  007FB6  2E                 	db	46
   256  007FB7  2E                 	db	46
   257  007FB8  2E                 	db	46
   258  007FB9  2E                 	db	46
   259  007FBA  2D                 	db	45
   260  007FBB  00                 	db	0
   261  007FBC                     STR_38:
   262  007FBC  2D                 	db	45
   263  007FBD  2D                 	db	45
   264  007FBE  2D                 	db	45
   265  007FBF  2D                 	db	45
   266  007FC0  2E                 	db	46
   267  007FC1  00                 	db	0
   268  007FC2                     STR_41:
   269  007FC2  2D                 	db	45
   270  007FC3  2E                 	db	46
   271  007FC4  2E                 	db	46
   272  007FC5  2D                 	db	45
   273  007FC6  2E                 	db	46
   274  007FC7  00                 	db	0
   275  007FC8                     STR_37:
   276  007FC8  2D                 	db	45
   277  007FC9  2D                 	db	45
   278  007FCA  2D                 	db	45
   279  007FCB  2E                 	db	46
   280  007FCC  2E                 	db	46
   281  007FCD  00                 	db	0
   282  007FCE                     STR_36:
   283  007FCE  2D                 	db	45
   284  007FCF  2D                 	db	45
   285  007FD0  2E                 	db	46
   286  007FD1  2E                 	db	46
   287  007FD2  2E                 	db	46
   288  007FD3  00                 	db	0
   289  007FD4                     STR_35:
   290  007FD4  2D                 	db	45
   291  007FD5  2E                 	db	46
   292  007FD6  2E                 	db	46
   293  007FD7  2E                 	db	46
   294  007FD8  2E                 	db	46
   295  007FD9  00                 	db	0
   296  007FDA                     STR_34:
   297  007FDA  2E                 	db	46
   298  007FDB  2E                 	db	46
   299  007FDC  2E                 	db	46
   300  007FDD  2E                 	db	46
   301  007FDE  2E                 	db	46
   302  007FDF  00                 	db	0
   303  007FE0                     STR_27:
   304  007FE0  2D                 	db	45
   305  007FE1  2E                 	db	46
   306  007FE2  2D                 	db	45
   307  007FE3  2D                 	db	45
   308  007FE4  00                 	db	0
   309  007FE5                     STR_19:
   310  007FE5  2D                 	db	45
   311  007FE6  2D                 	db	45
   312  007FE7  2E                 	db	46
   313  007FE8  2D                 	db	45
   314  007FE9  00                 	db	0
   315  007FEA                     STR_26:
   316  007FEA  2D                 	db	45
   317  007FEB  2E                 	db	46
   318  007FEC  2E                 	db	46
   319  007FED  2D                 	db	45
   320  007FEE  00                 	db	0
   321  007FEF                     STR_18:
   322  007FEF  2E                 	db	46
   323  007FF0  2D                 	db	45
   324  007FF1  2D                 	db	45
   325  007FF2  2E                 	db	46
   326  007FF3  00                 	db	0
   327  007FF4                     STR_5:
   328  007FF4  2D                 	db	45
   329  007FF5  2E                 	db	46
   330  007FF6  2D                 	db	45
   331  007FF7  2E                 	db	46
   332  007FF8  00                 	db	0
   333  007FF9                     STR_14:
   334  007FF9  2E                 	db	46
   335  007FFA  2D                 	db	45
   336  007FFB  2E                 	db	46
   337  007FFC  2E                 	db	46
   338  007FFD  00                 	db	0
   339  0000                     
   340                           ; #config settings
   341  007FFE  00                 	db	0	; dummy byte at the end
   342  0000                     
   343                           	psect	cinit
   344  005C80                     __pcinit:
   345                           	opt stack 0
   346  005C80                     start_initialization:
   347                           	opt stack 0
   348  005C80                     __initialization:
   349                           	opt stack 0
   350  005C80                     end_of_initialization:
   351                           	opt stack 0
   352  005C80                     __end_of__initialization:
   353                           	opt stack 0
   354  005C80  0E00               	movlw	low (__Lmediumconst shr (0+16))
   355  005C82  6EF8               	movwf	tblptru,c
   356  005C84  0100               	movlb	0
   357  005C86  EF45  F02E         	goto	_main	;jump to C main() function
   358                           tblptru	equ	0xFF8
   359                           
   360                           	psect	cstackBANK1
   361  000100                     __pcstackBANK1:
   362                           	opt stack 0
   363  000100                     util_beacon_transmission@BEACON_MESSAGE:
   364                           	opt stack 0
   365                           
   366                           ; 128 bytes @ 0x0
   367  000100                     	ds	128
   368  000180                     util_beacon_transmission@BEACON_BUFFER:
   369                           	opt stack 0
   370                           
   371                           ; 64 bytes @ 0x80
   372  000180                     	ds	64
   373  0001C0                     util_beacon_transmission@i:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0xC0
   377  0001C0                     	ds	2
   378                           tblptru	equ	0xFF8
   379                           
   380                           	psect	cstackBANK0
   381  000060                     __pcstackBANK0:
   382                           	opt stack 0
   383  000060                     _sprintf$960:
   384                           	opt stack 0
   385                           
   386                           ; 3 bytes @ 0x0
   387  000060                     	ds	3
   388  000063                     sprintf@ap:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x3
   392  000063                     	ds	2
   393  000065                     sprintf@flag:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x5
   397  000065                     	ds	2
   398  000067                     sprintf@width:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x7
   402  000067                     	ds	2
   403  000069                     sprintf@tmpval:
   404                           	opt stack 0
   405                           
   406                           ; 4 bytes @ 0x9
   407  000069                     	ds	4
   408  00006D                     sprintf@val:
   409                           	opt stack 0
   410                           
   411                           ; 4 bytes @ 0xD
   412  00006D                     	ds	4
   413  000071                     sprintf@exp:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x11
   417  000071                     	ds	2
   418  000073                     sprintf@fval:
   419                           	opt stack 0
   420                           
   421                           ; 3 bytes @ 0x13
   422  000073                     	ds	3
   423  000076                     sprintf@prec:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x16
   427  000076                     	ds	2
   428  000078                     sprintf@c:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x18
   432  000078                     	ds	1
   433  000079                     main_loop@temperature:
   434                           	opt stack 0
   435                           
   436                           ; 3 bytes @ 0x19
   437  000079                     	ds	3
   438  00007C                     main_loop@solar_current:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x1C
   442  00007C                     	ds	2
   443  00007E                     main_loop@battery_current:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x1E
   447  00007E                     	ds	2
   448  000080                     main_loop@battery_voltage:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x20
   452  000080                     	ds	3
   453                           tblptru	equ	0xFF8
   454                           
   455                           	psect	cstackCOMRAM
   456  000001                     __pcstackCOMRAM:
   457                           	opt stack 0
   458  000001                     ??_isdigit:
   459  000001                     ?_getSolarCurrent:
   460                           	opt stack 0
   461  000001                     ?_getBatteryCurrent:
   462                           	opt stack 0
   463  000001                     ?_strlen:
   464                           	opt stack 0
   465  000001                     ?___awmod:
   466                           	opt stack 0
   467  000001                     ?_getBatteryVoltage:
   468                           	opt stack 0
   469  000001                     ?_getTemperature:
   470                           	opt stack 0
   471  000001                     ?___ftpack:
   472                           	opt stack 0
   473  000001                     ?___ftneg:
   474                           	opt stack 0
   475  000001                     ?__tdiv_to_l_:
   476                           	opt stack 0
   477  000001                     ?__div_to_l_:
   478                           	opt stack 0
   479  000001                     ?___lldiv:
   480                           	opt stack 0
   481  000001                     util_wait_delay_mins@minutes:
   482                           	opt stack 0
   483  000001                     util_waits_delay_ms@ms:
   484                           	opt stack 0
   485  000001                     util_waits_delay_us@us:
   486                           	opt stack 0
   487  000001                     ___awmod@dividend:
   488                           	opt stack 0
   489  000001                     memset@p1:
   490                           	opt stack 0
   491  000001                     strcat@to:
   492                           	opt stack 0
   493  000001                     strcpy@to:
   494                           	opt stack 0
   495  000001                     strlen@s:
   496                           	opt stack 0
   497  000001                     __div_to_l_@f1:
   498                           	opt stack 0
   499  000001                     ___ftpack@arg:
   500                           	opt stack 0
   501  000001                     __tdiv_to_l_@f1:
   502                           	opt stack 0
   503  000001                     ___ftge@ff1:
   504                           	opt stack 0
   505  000001                     ___ftneg@f1:
   506                           	opt stack 0
   507  000001                     ___lldiv@dividend:
   508                           	opt stack 0
   509                           
   510                           ; 4 bytes @ 0x0
   511  000001                     	ds	1
   512  000002                     _isdigit$614:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x1
   516  000002                     	ds	1
   517  000003                     ??_strlen:
   518  000003                     ??_util_waits_delay_ms:
   519  000003                     ??_util_waits_delay_us:
   520  000003                     isdigit@c:
   521                           	opt stack 0
   522  000003                     ___awmod@divisor:
   523                           	opt stack 0
   524  000003                     memset@c:
   525                           	opt stack 0
   526  000003                     strcat@from:
   527                           	opt stack 0
   528  000003                     strcpy@from:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	1
   533  000004                     ___ftpack@exp:
   534                           	opt stack 0
   535  000004                     util_waits_delay_ms@i:
   536                           	opt stack 0
   537  000004                     util_waits_delay_us@i:
   538                           	opt stack 0
   539  000004                     __div_to_l_@f2:
   540                           	opt stack 0
   541  000004                     __tdiv_to_l_@f2:
   542                           	opt stack 0
   543  000004                     ___ftge@ff2:
   544                           	opt stack 0
   545                           
   546                           ; 3 bytes @ 0x3
   547  000004                     	ds	1
   548  000005                     ___awmod@counter:
   549                           	opt stack 0
   550  000005                     ___ftpack@sign:
   551                           	opt stack 0
   552  000005                     memset@n:
   553                           	opt stack 0
   554  000005                     strcat@cp:
   555                           	opt stack 0
   556  000005                     strcpy@cp:
   557                           	opt stack 0
   558  000005                     strlen@cp:
   559                           	opt stack 0
   560  000005                     ___lldiv@divisor:
   561                           	opt stack 0
   562                           
   563                           ; 4 bytes @ 0x4
   564  000005                     	ds	1
   565  000006                     ??___ftpack:
   566  000006                     ___awmod@sign:
   567                           	opt stack 0
   568  000006                     util_transmit_buzzer_1ms_cycle@j:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x5
   572  000006                     	ds	1
   573  000007                     ??__tdiv_to_l_:
   574  000007                     ??___ftge:
   575  000007                     ?___awdiv:
   576                           	opt stack 0
   577  000007                     ___awdiv@dividend:
   578                           	opt stack 0
   579  000007                     memset@p:
   580                           	opt stack 0
   581  000007                     __div_to_l_@quot:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x6
   585  000007                     	ds	1
   586  000008                     util_transmit_dot@i:
   587                           	opt stack 0
   588  000008                     util_transmit_dash@i:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x7
   592  000008                     	ds	1
   593  000009                     ?___lltoft:
   594                           	opt stack 0
   595  000009                     ___awdiv@divisor:
   596                           	opt stack 0
   597  000009                     ___lldiv@quotient:
   598                           	opt stack 0
   599  000009                     ___lltoft@c:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x8
   603  000009                     	ds	1
   604  00000A                     util_transmit_morse_sequence@morse_sequence:
   605                           	opt stack 0
   606  00000A                     __tdiv_to_l_@quot:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x9
   610  00000A                     	ds	1
   611  00000B                     ___awdiv@counter:
   612                           	opt stack 0
   613  00000B                     __div_to_l_@cntr:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0xA
   617  00000B                     	ds	1
   618  00000C                     ??_util_transmit_morse_sequence:
   619  00000C                     ___awdiv@sign:
   620                           	opt stack 0
   621  00000C                     __div_to_l_@exp1:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0xB
   625  00000C                     	ds	1
   626  00000D                     ??___lltoft:
   627  00000D                     ___lldiv@counter:
   628                           	opt stack 0
   629  00000D                     ___awdiv@quotient:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0xC
   633  00000D                     	ds	1
   634  00000E                     ?___llmod:
   635                           	opt stack 0
   636  00000E                     __tdiv_to_l_@cntr:
   637                           	opt stack 0
   638  00000E                     util_transmit_morse_sequence@i:
   639                           	opt stack 0
   640  00000E                     ___llmod@dividend:
   641                           	opt stack 0
   642                           
   643                           ; 4 bytes @ 0xD
   644  00000E                     	ds	1
   645  00000F                     ?___wmul:
   646                           	opt stack 0
   647  00000F                     __tdiv_to_l_@exp1:
   648                           	opt stack 0
   649  00000F                     ___wmul@multiplier:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0xE
   653  00000F                     	ds	1
   654  000010                     util_transmit_letter@letter:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0xF
   658  000010                     	ds	1
   659  000011                     ___lltoft@exp:
   660                           	opt stack 0
   661  000011                     ___wmul@multiplicand:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x10
   665  000011                     	ds	1
   666  000012                     ___llmod@divisor:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x11
   670  000012                     	ds	1
   671  000013                     ___wmul@product:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x12
   675  000013                     	ds	2
   676  000015                     ?___ftmul:
   677                           	opt stack 0
   678  000015                     ___ftmul@f1:
   679                           	opt stack 0
   680                           
   681                           ; 3 bytes @ 0x14
   682  000015                     	ds	1
   683  000016                     ___llmod@counter:
   684                           	opt stack 0
   685                           
   686                           ; 1 bytes @ 0x15
   687  000016                     	ds	2
   688  000018                     ___ftmul@f2:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x17
   692  000018                     	ds	3
   693  00001B                     ??___ftmul:
   694                           
   695                           ; 1 bytes @ 0x1A
   696  00001B                     	ds	3
   697  00001E                     ___ftmul@exp:
   698                           	opt stack 0
   699                           
   700                           ; 1 bytes @ 0x1D
   701  00001E                     	ds	1
   702  00001F                     ___ftmul@f3_as_product:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x1E
   706  00001F                     	ds	3
   707  000022                     ___ftmul@cntr:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x21
   711  000022                     	ds	1
   712  000023                     ___ftmul@sign:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x22
   716  000023                     	ds	1
   717  000024                     ?_fround:
   718                           	opt stack 0
   719  000024                     ?_scale:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x23
   723  000024                     	ds	3
   724  000027                     _fround$958:
   725                           	opt stack 0
   726  000027                     _scale$959:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x26
   730  000027                     	ds	3
   731  00002A                     scale@scl:
   732                           	opt stack 0
   733  00002A                     _fround$957:
   734                           	opt stack 0
   735                           
   736                           ; 3 bytes @ 0x29
   737  00002A                     	ds	1
   738  00002B                     ?___fttol:
   739                           	opt stack 0
   740  00002B                     ___fttol@f1:
   741                           	opt stack 0
   742                           
   743                           ; 3 bytes @ 0x2A
   744  00002B                     	ds	2
   745  00002D                     fround@prec:
   746                           	opt stack 0
   747                           
   748                           ; 1 bytes @ 0x2C
   749  00002D                     	ds	1
   750  00002E                     ?___ftadd:
   751                           	opt stack 0
   752  00002E                     ___ftadd@f1:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x2D
   756  00002E                     	ds	1
   757  00002F                     ??___fttol:
   758                           
   759                           ; 1 bytes @ 0x2E
   760  00002F                     	ds	2
   761  000031                     ___ftadd@f2:
   762                           	opt stack 0
   763                           
   764                           ; 3 bytes @ 0x30
   765  000031                     	ds	3
   766  000034                     ??___ftadd:
   767  000034                     ___fttol@sign1:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x33
   771  000034                     	ds	1
   772  000035                     ___fttol@lval:
   773                           	opt stack 0
   774                           
   775                           ; 4 bytes @ 0x34
   776  000035                     	ds	2
   777  000037                     ___ftadd@sign:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x36
   781  000037                     	ds	1
   782  000038                     ___ftadd@exp2:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x37
   786  000038                     	ds	1
   787  000039                     ___ftadd@exp1:
   788                           	opt stack 0
   789  000039                     ___fttol@exp1:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x38
   793  000039                     	ds	1
   794  00003A                     ?___ftsub:
   795                           	opt stack 0
   796  00003A                     ___ftsub@f1:
   797                           	opt stack 0
   798                           
   799                           ; 3 bytes @ 0x39
   800  00003A                     	ds	3
   801  00003D                     ___ftsub@f2:
   802                           	opt stack 0
   803                           
   804                           ; 3 bytes @ 0x3C
   805  00003D                     	ds	3
   806  000040                     ?_sprintf:
   807                           	opt stack 0
   808  000040                     sprintf@sp:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x3F
   812  000040                     	ds	2
   813  000042                     sprintf@f:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x41
   817  000042                     	ds	12
   818  00004E                     ??_sprintf:
   819                           
   820                           ; 1 bytes @ 0x4D
   821  00004E                     	ds	6
   822  000054                     util_beacon_transmission@battery_voltage:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x53
   826  000054                     	ds	3
   827  000057                     util_beacon_transmission@solar_current:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x56
   831  000057                     	ds	2
   832  000059                     util_beacon_transmission@battery_current:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x58
   836  000059                     	ds	2
   837  00005B                     util_beacon_transmission@temperature:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x5A
   841  00005B                     	ds	3
   842  00005E                     tblptru	equ	0xFF8
   843                           
   844                           ; 1 bytes @ 0x5D
   845 ;;
   846 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   847 ;;
   848 ;; *************** function _main *****************
   849 ;; Defined at:
   850 ;;		line 19 in file "easat2_main_mcu.c"
   851 ;; Parameters:    Size  Location     Type
   852 ;;		None
   853 ;; Auto vars:     Size  Location     Type
   854 ;;		None
   855 ;; Return value:  Size  Location     Type
   856 ;;                  1    wreg      void 
   857 ;; Registers used:
   858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   859 ;; Tracked objects:
   860 ;;		On entry : 0/0
   861 ;;		On exit  : 0/0
   862 ;;		Unchanged: 0/0
   863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   864 ;;      Params:         0       0       0       0       0       0       0
   865 ;;      Locals:         0       0       0       0       0       0       0
   866 ;;      Temps:          0       0       0       0       0       0       0
   867 ;;      Totals:         0       0       0       0       0       0       0
   868 ;;Total ram usage:        0 bytes
   869 ;; Hardware stack levels required when called:    7
   870 ;; This function calls:
   871 ;;		_initialize
   872 ;;		_main_loop
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  005C8A                     __ptext0:
   880                           	opt stack 0
   881  005C8A                     _main:
   882                           	opt stack 24
   883                           
   884                           ;easat2_main_mcu.c: 22: initialize();
   885                           
   886                           ;incstack = 0
   887  005C8A  EC34  F02E         	call	_initialize	;wreg free
   888                           
   889                           ;easat2_main_mcu.c: 25: main_loop();
   890  005C8E  EC47  F031         	call	_main_loop	;wreg free
   891  005C92  EF00  F000         	goto	start
   892  005C96                     __end_of_main:
   893                           	opt stack 0
   894                           tblptru	equ	0xFF8
   895                           
   896 ;; *************** function _main_loop *****************
   897 ;; Defined at:
   898 ;;		line 31 in file "easat2_main_mcu.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;		None
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  battery_volt    3   32[BANK0 ] float 
   903 ;;  temperature     3   25[BANK0 ] float 
   904 ;;  battery_curr    2   30[BANK0 ] int 
   905 ;;  solar_curren    2   28[BANK0 ] int 
   906 ;; Return value:  Size  Location     Type
   907 ;;                  1    wreg      void 
   908 ;; Registers used:
   909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   910 ;; Tracked objects:
   911 ;;		On entry : 0/0
   912 ;;		On exit  : 0/0
   913 ;;		Unchanged: 0/0
   914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   915 ;;      Params:         0       0       0       0       0       0       0
   916 ;;      Locals:         0      10       0       0       0       0       0
   917 ;;      Temps:          0       0       0       0       0       0       0
   918 ;;      Totals:         0      10       0       0       0       0       0
   919 ;;Total ram usage:       10 bytes
   920 ;; Hardware stack levels used:    1
   921 ;; Hardware stack levels required when called:    6
   922 ;; This function calls:
   923 ;;		___ftge
   924 ;;		_getBatteryCurrent
   925 ;;		_getBatteryVoltage
   926 ;;		_getSolarCurrent
   927 ;;		_getTemperature
   928 ;;		_util_beacon_transmission
   929 ;;		_util_wait_delay_mins
   930 ;; This function is called by:
   931 ;;		_main
   932 ;; This function uses a non-reentrant model
   933 ;;
   934                           
   935                           	psect	text1
   936  00628E                     __ptext1:
   937                           	opt stack 0
   938  00628E                     _main_loop:
   939                           	opt stack 24
   940  00628E                     
   941                           ;easat2_main_mcu.c: 43: battery_voltage = getBatteryVoltage();
   942  00628E  EC4B  F02E         	call	_getBatteryVoltage	;wreg free
   943  006292  C001  F080         	movff	?_getBatteryVoltage,main_loop@battery_voltage
   944  006296  C002  F081         	movff	?_getBatteryVoltage+1,main_loop@battery_voltage+1
   945  00629A  C003  F082         	movff	?_getBatteryVoltage+2,main_loop@battery_voltage+2
   946                           
   947                           ;easat2_main_mcu.c: 46: solar_current = getSolarCurrent();
   948  00629E  EC3B  F02E         	call	_getSolarCurrent	;wreg free
   949  0062A2  C001  F07C         	movff	?_getSolarCurrent,main_loop@solar_current
   950  0062A6  C002  F07D         	movff	?_getSolarCurrent+1,main_loop@solar_current+1
   951                           
   952                           ;easat2_main_mcu.c: 49: battery_current = getBatteryCurrent();
   953  0062AA  EC36  F02E         	call	_getBatteryCurrent	;wreg free
   954  0062AE  C001  F07E         	movff	?_getBatteryCurrent,main_loop@battery_current
   955  0062B2  C002  F07F         	movff	?_getBatteryCurrent+1,main_loop@battery_current+1
   956                           
   957                           ;easat2_main_mcu.c: 52: temperature = getTemperature();
   958  0062B6  EC52  F02E         	call	_getTemperature	;wreg free
   959  0062BA  C001  F079         	movff	?_getTemperature,main_loop@temperature
   960  0062BE  C002  F07A         	movff	?_getTemperature+1,main_loop@temperature+1
   961  0062C2  C003  F07B         	movff	?_getTemperature+2,main_loop@temperature+2
   962                           
   963                           ;easat2_main_mcu.c: 56: if (battery_voltage > 2.8) {
   964  0062C6  0E33               	movlw	51
   965  0062C8  6E01               	movwf	___ftge@ff1,c
   966  0062CA  0E33               	movlw	51
   967  0062CC  6E02               	movwf	___ftge@ff1+1,c
   968  0062CE  0E40               	movlw	64
   969  0062D0  6E03               	movwf	___ftge@ff1+2,c
   970  0062D2  C080  F004         	movff	main_loop@battery_voltage,___ftge@ff2
   971  0062D6  C081  F005         	movff	main_loop@battery_voltage+1,___ftge@ff2+1
   972  0062DA  C082  F006         	movff	main_loop@battery_voltage+2,___ftge@ff2+2
   973  0062DE  ECFF  F030         	call	___ftge	;wreg free
   974  0062E2  B0D8               	btfsc	status,0,c
   975  0062E4  D016               	goto	l3188
   976                           
   977                           ;easat2_main_mcu.c: 57: util_beacon_transmission(battery_voltage, solar_current, battery
      +                          _current, temperature);
   978  0062E6  C080  F054         	movff	main_loop@battery_voltage,util_beacon_transmission@battery_voltage
   979  0062EA  C081  F055         	movff	main_loop@battery_voltage+1,util_beacon_transmission@battery_voltage+1
   980  0062EE  C082  F056         	movff	main_loop@battery_voltage+2,util_beacon_transmission@battery_voltage+2
   981  0062F2  C07C  F057         	movff	main_loop@solar_current,util_beacon_transmission@solar_current
   982  0062F6  C07D  F058         	movff	main_loop@solar_current+1,util_beacon_transmission@solar_current+1
   983  0062FA  C07E  F059         	movff	main_loop@battery_current,util_beacon_transmission@battery_current
   984  0062FE  C07F  F05A         	movff	main_loop@battery_current+1,util_beacon_transmission@battery_current+1
   985  006302  C079  F05B         	movff	main_loop@temperature,util_beacon_transmission@temperature
   986  006306  C07A  F05C         	movff	main_loop@temperature+1,util_beacon_transmission@temperature+1
   987  00630A  C07B  F05D         	movff	main_loop@temperature+2,util_beacon_transmission@temperature+2
   988  00630E  ECE7  F031         	call	_util_beacon_transmission	;wreg free
   989  006312                     l3188:
   990                           
   991                           ;easat2_main_mcu.c: 58: }
   992                           ;easat2_main_mcu.c: 61: util_wait_delay_mins(3);
   993  006312  0E00               	movlw	0
   994  006314  6E02               	movwf	util_wait_delay_mins@minutes+1,c
   995  006316  0E03               	movlw	3
   996  006318  6E01               	movwf	util_wait_delay_mins@minutes,c
   997  00631A  EC35  F02E         	call	_util_wait_delay_mins	;wreg free
   998                           
   999                           ;easat2_main_mcu.c: 64: } while (1);
  1000  00631E  D7B7               	goto	l3182
  1001  006320                     __end_of_main_loop:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function _util_wait_delay_mins *****************
  1007 ;; Defined at:
  1008 ;;		line 25 in file "easat2_util_waits.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  minutes         2    0[COMRAM] int 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;		None
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  1    wreg      void 
  1015 ;; Registers used:
  1016 ;;		None
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1022 ;;      Params:         2       0       0       0       0       0       0
  1023 ;;      Locals:         0       0       0       0       0       0       0
  1024 ;;      Temps:          0       0       0       0       0       0       0
  1025 ;;      Totals:         2       0       0       0       0       0       0
  1026 ;;Total ram usage:        2 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; This function calls:
  1029 ;;		Nothing
  1030 ;; This function is called by:
  1031 ;;		_main_loop
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           	psect	text2
  1036  005C6A                     __ptext2:
  1037                           	opt stack 0
  1038  005C6A                     _util_wait_delay_mins:
  1039                           	opt stack 29
  1040                           
  1041                           ;incstack = 0
  1042  005C6A  0012               	return		;funcret
  1043  005C6C                     __end_of_util_wait_delay_mins:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           status	equ	0xFD8
  1047                           
  1048 ;; *************** function _util_beacon_transmission *****************
  1049 ;; Defined at:
  1050 ;;		line 21 in file "easat2_util_transmission.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;  battery_volt    3   83[COMRAM] float 
  1053 ;;  solar_curren    2   86[COMRAM] int 
  1054 ;;  battery_curr    2   88[COMRAM] int 
  1055 ;;  temperature     3   90[COMRAM] float 
  1056 ;; Auto vars:     Size  Location     Type
  1057 ;;  i               2  192[BANK1 ] int 
  1058 ;;  BEACON_MESSA  128    0[BANK1 ] unsigned char [128]
  1059 ;;  BEACON_BUFFE   64  128[BANK1 ] unsigned char [64]
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:        10       0       0       0       0       0       0
  1070 ;;      Locals:         0       0     194       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0
  1072 ;;      Totals:        10       0     194       0       0       0       0
  1073 ;;Total ram usage:      204 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    5
  1076 ;; This function calls:
  1077 ;;		_memset
  1078 ;;		_sprintf
  1079 ;;		_strcat
  1080 ;;		_strcpy
  1081 ;;		_strlen
  1082 ;;		_util_transmit_letter
  1083 ;; This function is called by:
  1084 ;;		_main_loop
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text3
  1089  0063CE                     __ptext3:
  1090                           	opt stack 0
  1091  0063CE                     _util_beacon_transmission:
  1092                           	opt stack 24
  1093                           
  1094                           ;easat2_util_transmission.c: 24: char BEACON_MESSAGE[128];
  1095                           ;easat2_util_transmission.c: 25: char BEACON_BUFFER[64];
  1096                           ;easat2_util_transmission.c: 29: memset(BEACON_MESSAGE, 0, sizeof(BEACON_MESSAGE));
  1097                           
  1098                           ;incstack = 0
  1099  0063CE  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1100  0063D0  6E01               	movwf	memset@p1,c
  1101  0063D2  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1102  0063D4  6E02               	movwf	memset@p1+1,c
  1103  0063D6  0E00               	movlw	0
  1104  0063D8  6E04               	movwf	memset@c+1,c
  1105  0063DA  0E00               	movlw	0
  1106  0063DC  6E03               	movwf	memset@c,c
  1107  0063DE  0E00               	movlw	0
  1108  0063E0  6E06               	movwf	memset@n+1,c
  1109  0063E2  0E80               	movlw	128
  1110  0063E4  6E05               	movwf	memset@n,c
  1111  0063E6  ECB4  F02E         	call	_memset	;wreg free
  1112                           
  1113                           ;easat2_util_transmission.c: 30: strcpy(BEACON_MESSAGE, "EASAT2");
  1114  0063EA  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1115  0063EC  6E01               	movwf	strcpy@to,c
  1116  0063EE  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1117  0063F0  6E02               	movwf	strcpy@to+1,c
  1118  0063F2  0E97               	movlw	low STR_1
  1119  0063F4  6E03               	movwf	strcpy@from,c
  1120  0063F6  0E7F               	movlw	high STR_1
  1121  0063F8  6E04               	movwf	strcpy@from+1,c
  1122  0063FA  ECE0  F02E         	call	_strcpy	;wreg free
  1123                           
  1124                           ;easat2_util_transmission.c: 32: memset(BEACON_BUFFER, 0, sizeof(BEACON_BUFFER));
  1125  0063FE  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1126  006400  6E01               	movwf	memset@p1,c
  1127  006402  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1128  006404  6E02               	movwf	memset@p1+1,c
  1129  006406  0E00               	movlw	0
  1130  006408  6E04               	movwf	memset@c+1,c
  1131  00640A  0E00               	movlw	0
  1132  00640C  6E03               	movwf	memset@c,c
  1133  00640E  0E00               	movlw	0
  1134  006410  6E06               	movwf	memset@n+1,c
  1135  006412  0E40               	movlw	64
  1136  006414  6E05               	movwf	memset@n,c
  1137  006416  ECB4  F02E         	call	_memset	;wreg free
  1138                           
  1139                           ;easat2_util_transmission.c: 33: sprintf(BEACON_BUFFER, " %.1f %.1f %3.0d %3.0d", temper
      +                          ature, battery_voltage,
  1140                           ;easat2_util_transmission.c: 34: solar_current, battery_current);
  1141  00641A  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1142  00641C  6E40               	movwf	sprintf@sp,c
  1143  00641E  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1144  006420  6E41               	movwf	sprintf@sp+1,c
  1145  006422  0E6B               	movlw	low STR_2
  1146  006424  6E42               	movwf	sprintf@f,c
  1147  006426  0E7F               	movlw	high STR_2
  1148  006428  6E43               	movwf	sprintf@f+1,c
  1149  00642A  C05B  F044         	movff	util_beacon_transmission@temperature,?_sprintf+4
  1150  00642E  C05C  F045         	movff	util_beacon_transmission@temperature+1,?_sprintf+5
  1151  006432  C05D  F046         	movff	util_beacon_transmission@temperature+2,?_sprintf+6
  1152  006436  C054  F047         	movff	util_beacon_transmission@battery_voltage,?_sprintf+7
  1153  00643A  C055  F048         	movff	util_beacon_transmission@battery_voltage+1,?_sprintf+8
  1154  00643E  C056  F049         	movff	util_beacon_transmission@battery_voltage+2,?_sprintf+9
  1155  006442  C057  F04A         	movff	util_beacon_transmission@solar_current,?_sprintf+10
  1156  006446  C058  F04B         	movff	util_beacon_transmission@solar_current+1,?_sprintf+11
  1157  00644A  C059  F04C         	movff	util_beacon_transmission@battery_current,?_sprintf+12
  1158  00644E  C05A  F04D         	movff	util_beacon_transmission@battery_current+1,?_sprintf+13
  1159  006452  EC06  F03A         	call	_sprintf	;wreg free
  1160                           
  1161                           ;easat2_util_transmission.c: 36: strcat(BEACON_MESSAGE, BEACON_BUFFER);
  1162  006456  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1163  006458  6E01               	movwf	strcat@to,c
  1164  00645A  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1165  00645C  6E02               	movwf	strcat@to+1,c
  1166  00645E  0E80               	movlw	low util_beacon_transmission@BEACON_BUFFER
  1167  006460  6E03               	movwf	strcat@from,c
  1168  006462  0E01               	movlw	high util_beacon_transmission@BEACON_BUFFER
  1169  006464  6E04               	movwf	strcat@from+1,c
  1170  006466  EC69  F02F         	call	_strcat	;wreg free
  1171                           
  1172                           ;easat2_util_transmission.c: 41: for (int i = 0; i < strlen(BEACON_MESSAGE); i++) {
  1173  00646A  0E00               	movlw	0
  1174  00646C  0101               	movlb	1	; () banked
  1175  00646E  6FC1               	movwf	(util_beacon_transmission@i+1)& (0+255),b
  1176  006470  0E00               	movlw	0
  1177  006472  6FC0               	movwf	util_beacon_transmission@i& (0+255),b
  1178  006474  D00E               	goto	l3180
  1179  006476                     l3176:
  1180                           
  1181                           ; BSR set to: 1
  1182                           ;easat2_util_transmission.c: 42: util_transmit_letter(BEACON_MESSAGE[i]);
  1183  006476  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1184  006478  0101               	movlb	1	; () banked
  1185  00647A  25C0               	addwf	util_beacon_transmission@i& (0+255),w,b
  1186  00647C  6ED9               	movwf	fsr2l,c
  1187  00647E  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1188  006480  0101               	movlb	1	; () banked
  1189  006482  21C1               	addwfc	(util_beacon_transmission@i+1)& (0+255),w,b
  1190  006484  6EDA               	movwf	fsr2h,c
  1191  006486  50DF               	movf	indf2,w,c
  1192  006488  EC72  F036         	call	_util_transmit_letter
  1193  00648C  0101               	movlb	1	; () banked
  1194  00648E  4BC0               	infsnz	util_beacon_transmission@i& (0+255),f,b
  1195  006490  2BC1               	incf	(util_beacon_transmission@i+1)& (0+255),f,b
  1196  006492                     l3180:
  1197                           
  1198                           ; BSR set to: 1
  1199  006492  0E00               	movlw	low util_beacon_transmission@BEACON_MESSAGE
  1200  006494  6E01               	movwf	strlen@s,c
  1201  006496  0E01               	movlw	high util_beacon_transmission@BEACON_MESSAGE
  1202  006498  6E02               	movwf	strlen@s+1,c
  1203  00649A  EC8A  F02F         	call	_strlen	;wreg free
  1204  00649E  5001               	movf	?_strlen,w,c
  1205  0064A0  0101               	movlb	1	; () banked
  1206  0064A2  5DC0               	subwf	util_beacon_transmission@i& (0+255),w,b
  1207  0064A4  5002               	movf	?_strlen+1,w,c
  1208  0064A6  0101               	movlb	1	; () banked
  1209  0064A8  59C1               	subwfb	(util_beacon_transmission@i+1)& (0+255),w,b
  1210  0064AA  B0D8               	btfsc	status,0,c
  1211  0064AC  0012               	return	
  1212  0064AE  D7E3               	goto	l3176
  1213  0064B0                     __end_of_util_beacon_transmission:
  1214                           	opt stack 0
  1215                           tblptru	equ	0xFF8
  1216                           indf2	equ	0xFDF
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8
  1220                           
  1221 ;; *************** function _util_transmit_letter *****************
  1222 ;; Defined at:
  1223 ;;		line 52 in file "easat2_util_transmission.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;  letter          1    wreg     unsigned char 
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;  letter          1   15[COMRAM] unsigned char 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1237 ;;      Params:         0       0       0       0       0       0       0
  1238 ;;      Locals:         1       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0
  1240 ;;      Totals:         1       0       0       0       0       0       0
  1241 ;;Total ram usage:        1 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    4
  1244 ;; This function calls:
  1245 ;;		_util_transmit_morse_sequence
  1246 ;;		_util_transmit_space_between_letters
  1247 ;;		_util_transmit_space_between_words
  1248 ;; This function is called by:
  1249 ;;		_util_beacon_transmission
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text4
  1254  006CE4                     __ptext4:
  1255                           	opt stack 0
  1256  006CE4                     _util_transmit_letter:
  1257                           	opt stack 24
  1258                           
  1259                           ; BSR set to: 1
  1260                           ;incstack = 0
  1261                           ;util_transmit_letter@letter stored from wreg
  1262  006CE4  6E10               	movwf	util_transmit_letter@letter,c
  1263                           
  1264                           ;easat2_util_transmission.c: 54: switch (letter) {
  1265  006CE6  D11D               	goto	l3146
  1266  006CE8                     l3062:
  1267                           
  1268                           ;easat2_util_transmission.c: 60: util_transmit_morse_sequence((char*)".-");
  1269  006CE8  0EE7               	movlw	low (STR_19+2)
  1270  006CEA  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1271  006CEC  0E7F               	movlw	high (STR_19+2)
  1272  006CEE  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1273  006CF0  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1274                           
  1275                           ;easat2_util_transmission.c: 61: break;
  1276  006CF4  0012               	return	
  1277  006CF6                     l3064:
  1278                           
  1279                           ;easat2_util_transmission.c: 63: util_transmit_morse_sequence((char*)"-...");
  1280  006CF6  0ECF               	movlw	low (STR_36+1)
  1281  006CF8  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1282  006CFA  0E7F               	movlw	high (STR_36+1)
  1283  006CFC  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1284  006CFE  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1285                           
  1286                           ;easat2_util_transmission.c: 64: break;
  1287  006D02  0012               	return	
  1288  006D04                     l3066:
  1289                           
  1290                           ;easat2_util_transmission.c: 66: util_transmit_morse_sequence((char*)"-.-.");
  1291  006D04  0EF4               	movlw	low STR_5
  1292  006D06  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1293  006D08  0E7F               	movlw	high STR_5
  1294  006D0A  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1295  006D0C  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1296                           
  1297                           ;easat2_util_transmission.c: 67: break;
  1298  006D10  0012               	return	
  1299  006D12                     l3068:
  1300                           
  1301                           ;easat2_util_transmission.c: 69: util_transmit_morse_sequence((char*)"-..");
  1302  006D12  0ECA               	movlw	low (STR_37+2)
  1303  006D14  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1304  006D16  0E7F               	movlw	high (STR_37+2)
  1305  006D18  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1306  006D1A  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1307                           
  1308                           ;easat2_util_transmission.c: 70: break;
  1309  006D1E  0012               	return	
  1310  006D20                     l3070:
  1311                           
  1312                           ;easat2_util_transmission.c: 72: util_transmit_morse_sequence((char*)".");
  1313  006D20  0EC0               	movlw	low (STR_38+4)
  1314  006D22  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1315  006D24  0E7F               	movlw	high (STR_38+4)
  1316  006D26  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1317  006D28  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1318                           
  1319                           ;easat2_util_transmission.c: 73: break;
  1320  006D2C  0012               	return	
  1321  006D2E                     l3072:
  1322                           
  1323                           ;easat2_util_transmission.c: 75: util_transmit_morse_sequence((char*)"..-.");
  1324  006D2E  0EC3               	movlw	low (STR_41+1)
  1325  006D30  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1326  006D32  0E7F               	movlw	high (STR_41+1)
  1327  006D34  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1328  006D36  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1329                           
  1330                           ;easat2_util_transmission.c: 76: break;
  1331  006D3A  0012               	return	
  1332  006D3C                     l3074:
  1333                           
  1334                           ;easat2_util_transmission.c: 78: util_transmit_morse_sequence((char*)"--.");
  1335  006D3C  0EBE               	movlw	low (STR_38+2)
  1336  006D3E  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1337  006D40  0E7F               	movlw	high (STR_38+2)
  1338  006D42  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1339  006D44  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1340                           
  1341                           ;easat2_util_transmission.c: 79: break;
  1342  006D48  0012               	return	
  1343  006D4A                     l3076:
  1344                           
  1345                           ;easat2_util_transmission.c: 81: util_transmit_morse_sequence((char*)"....");
  1346  006D4A  0ED5               	movlw	low (STR_35+1)
  1347  006D4C  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1348  006D4E  0E7F               	movlw	high (STR_35+1)
  1349  006D50  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1350  006D52  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1351                           
  1352                           ;easat2_util_transmission.c: 82: break;
  1353  006D56  0012               	return	
  1354  006D58                     l3078:
  1355                           
  1356                           ;easat2_util_transmission.c: 84: util_transmit_morse_sequence((char*)"..");
  1357  006D58  0ECB               	movlw	low (STR_37+3)
  1358  006D5A  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1359  006D5C  0E7F               	movlw	high (STR_37+3)
  1360  006D5E  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1361  006D60  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1362                           
  1363                           ;easat2_util_transmission.c: 85: break;
  1364  006D64  0012               	return	
  1365  006D66                     l3080:
  1366                           
  1367                           ;easat2_util_transmission.c: 87: util_transmit_morse_sequence((char*)".---");
  1368  006D66  0EAB               	movlw	low (STR_31+1)
  1369  006D68  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1370  006D6A  0E7F               	movlw	high (STR_31+1)
  1371  006D6C  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1372  006D6E  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1373                           
  1374                           ;easat2_util_transmission.c: 88: break;
  1375  006D72  0012               	return	
  1376  006D74                     l3082:
  1377                           
  1378                           ;easat2_util_transmission.c: 90: util_transmit_morse_sequence((char*)"-.-");
  1379  006D74  0EE6               	movlw	low (STR_19+1)
  1380  006D76  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1381  006D78  0E7F               	movlw	high (STR_19+1)
  1382  006D7A  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1383  006D7C  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1384                           
  1385                           ;easat2_util_transmission.c: 91: break;
  1386  006D80  0012               	return	
  1387  006D82                     l3084:
  1388                           
  1389                           ;easat2_util_transmission.c: 93: util_transmit_morse_sequence((char*)".-..");
  1390  006D82  0EF9               	movlw	low STR_14
  1391  006D84  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1392  006D86  0E7F               	movlw	high STR_14
  1393  006D88  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1394  006D8A  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1395                           
  1396                           ;easat2_util_transmission.c: 94: break;
  1397  006D8E  0012               	return	
  1398  006D90                     l3086:
  1399                           
  1400                           ;easat2_util_transmission.c: 96: util_transmit_morse_sequence((char*)"--");
  1401  006D90  0EA1               	movlw	low (STR_29+3)
  1402  006D92  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1403  006D94  0E7F               	movlw	high (STR_29+3)
  1404  006D96  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1405  006D98  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1406                           
  1407                           ;easat2_util_transmission.c: 97: break;
  1408  006D9C  0012               	return	
  1409  006D9E                     l3088:
  1410                           
  1411                           ;easat2_util_transmission.c: 99: util_transmit_morse_sequence((char*)"-.");
  1412  006D9E  0EBF               	movlw	low (STR_38+3)
  1413  006DA0  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1414  006DA2  0E7F               	movlw	high (STR_38+3)
  1415  006DA4  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1416  006DA6  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1417                           
  1418                           ;easat2_util_transmission.c: 100: break;
  1419  006DAA  0012               	return	
  1420  006DAC                     l3090:
  1421                           
  1422                           ;easat2_util_transmission.c: 102: util_transmit_morse_sequence((char*)"---");
  1423  006DAC  0EA0               	movlw	low (STR_29+2)
  1424  006DAE  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1425  006DB0  0E7F               	movlw	high (STR_29+2)
  1426  006DB2  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1427  006DB4  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1428                           
  1429                           ;easat2_util_transmission.c: 103: break;
  1430  006DB8  0012               	return	
  1431  006DBA                     l3092:
  1432                           
  1433                           ;easat2_util_transmission.c: 105: util_transmit_morse_sequence((char*)".--.");
  1434  006DBA  0EEF               	movlw	low STR_18
  1435  006DBC  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1436  006DBE  0E7F               	movlw	high STR_18
  1437  006DC0  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1438  006DC2  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1439                           
  1440                           ;easat2_util_transmission.c: 106: break;
  1441  006DC6  0012               	return	
  1442  006DC8                     l3094:
  1443                           
  1444                           ;easat2_util_transmission.c: 108: util_transmit_morse_sequence((char*)"--.-");
  1445  006DC8  0EE5               	movlw	low STR_19
  1446  006DCA  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1447  006DCC  0E7F               	movlw	high STR_19
  1448  006DCE  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1449  006DD0  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1450                           
  1451                           ;easat2_util_transmission.c: 109: break;
  1452  006DD4  0012               	return	
  1453  006DD6                     l3096:
  1454                           
  1455                           ;easat2_util_transmission.c: 111: util_transmit_morse_sequence((char*)".-.");
  1456  006DD6  0EF5               	movlw	low (STR_5+1)
  1457  006DD8  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1458  006DDA  0E7F               	movlw	high (STR_5+1)
  1459  006DDC  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1460  006DDE  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1461                           
  1462                           ;easat2_util_transmission.c: 112: break;
  1463  006DE2  0012               	return	
  1464  006DE4                     l3098:
  1465                           
  1466                           ;easat2_util_transmission.c: 114: util_transmit_morse_sequence((char*)"...");
  1467  006DE4  0ED0               	movlw	low (STR_36+2)
  1468  006DE6  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1469  006DE8  0E7F               	movlw	high (STR_36+2)
  1470  006DEA  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1471  006DEC  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1472                           
  1473                           ;easat2_util_transmission.c: 115: break;
  1474  006DF0  0012               	return	
  1475  006DF2                     l3100:
  1476                           
  1477                           ;easat2_util_transmission.c: 117: util_transmit_morse_sequence((char*)"-");
  1478  006DF2  0EA2               	movlw	low (STR_29+4)
  1479  006DF4  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1480  006DF6  0E7F               	movlw	high (STR_29+4)
  1481  006DF8  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1482  006DFA  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1483                           
  1484                           ;easat2_util_transmission.c: 118: break;
  1485  006DFE  0012               	return	
  1486  006E00                     l3102:
  1487                           
  1488                           ;easat2_util_transmission.c: 120: util_transmit_morse_sequence((char*)"..-");
  1489  006E00  0EEB               	movlw	low (STR_26+1)
  1490  006E02  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1491  006E04  0E7F               	movlw	high (STR_26+1)
  1492  006E06  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1493  006E08  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1494                           
  1495                           ;easat2_util_transmission.c: 121: break;
  1496  006E0C  0012               	return	
  1497  006E0E                     l3104:
  1498                           
  1499                           ;easat2_util_transmission.c: 123: util_transmit_morse_sequence((char*)"...-");
  1500  006E0E  0EB7               	movlw	low (STR_33+1)
  1501  006E10  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1502  006E12  0E7F               	movlw	high (STR_33+1)
  1503  006E14  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1504  006E16  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1505                           
  1506                           ;easat2_util_transmission.c: 124: break;
  1507  006E1A  0012               	return	
  1508  006E1C                     l3106:
  1509                           
  1510                           ;easat2_util_transmission.c: 126: util_transmit_morse_sequence((char*)".--");
  1511  006E1C  0EE1               	movlw	low (STR_27+1)
  1512  006E1E  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1513  006E20  0E7F               	movlw	high (STR_27+1)
  1514  006E22  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1515  006E24  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1516                           
  1517                           ;easat2_util_transmission.c: 127: break;
  1518  006E28  0012               	return	
  1519  006E2A                     l3108:
  1520                           
  1521                           ;easat2_util_transmission.c: 129: util_transmit_morse_sequence((char*)"-..-");
  1522  006E2A  0EEA               	movlw	low STR_26
  1523  006E2C  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1524  006E2E  0E7F               	movlw	high STR_26
  1525  006E30  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1526  006E32  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1527                           
  1528                           ;easat2_util_transmission.c: 130: break;
  1529  006E36  0012               	return	
  1530  006E38                     l3110:
  1531                           
  1532                           ;easat2_util_transmission.c: 132: util_transmit_morse_sequence((char*)"-.--");
  1533  006E38  0EE0               	movlw	low STR_27
  1534  006E3A  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1535  006E3C  0E7F               	movlw	high STR_27
  1536  006E3E  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1537  006E40  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1538                           
  1539                           ;easat2_util_transmission.c: 133: break;
  1540  006E44  0012               	return	
  1541  006E46                     l3112:
  1542                           
  1543                           ;easat2_util_transmission.c: 135: util_transmit_morse_sequence((char*)"--..");
  1544  006E46  0EC9               	movlw	low (STR_37+1)
  1545  006E48  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1546  006E4A  0E7F               	movlw	high (STR_37+1)
  1547  006E4C  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1548  006E4E  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1549                           
  1550                           ;easat2_util_transmission.c: 136: break;
  1551  006E52  0012               	return	
  1552  006E54                     l3114:
  1553                           
  1554                           ;easat2_util_transmission.c: 138: util_transmit_morse_sequence((char*)"-----");
  1555  006E54  0E9E               	movlw	low STR_29
  1556  006E56  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1557  006E58  0E7F               	movlw	high STR_29
  1558  006E5A  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1559  006E5C  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1560                           
  1561                           ;easat2_util_transmission.c: 139: break;
  1562  006E60  0012               	return	
  1563  006E62                     l3116:
  1564                           
  1565                           ;easat2_util_transmission.c: 141: util_transmit_morse_sequence((char*)".----");
  1566  006E62  0EA4               	movlw	low STR_30
  1567  006E64  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1568  006E66  0E7F               	movlw	high STR_30
  1569  006E68  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1570  006E6A  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1571                           
  1572                           ;easat2_util_transmission.c: 142: break;
  1573  006E6E  0012               	return	
  1574  006E70                     l3118:
  1575                           
  1576                           ;easat2_util_transmission.c: 144: util_transmit_morse_sequence((char*)"..---");
  1577  006E70  0EAA               	movlw	low STR_31
  1578  006E72  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1579  006E74  0E7F               	movlw	high STR_31
  1580  006E76  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1581  006E78  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1582                           
  1583                           ;easat2_util_transmission.c: 145: break;
  1584  006E7C  0012               	return	
  1585  006E7E                     l3120:
  1586                           
  1587                           ;easat2_util_transmission.c: 147: util_transmit_morse_sequence((char*)"...--");
  1588  006E7E  0EB0               	movlw	low STR_32
  1589  006E80  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1590  006E82  0E7F               	movlw	high STR_32
  1591  006E84  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1592  006E86  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1593                           
  1594                           ;easat2_util_transmission.c: 148: break;
  1595  006E8A  0012               	return	
  1596  006E8C                     l3122:
  1597                           
  1598                           ;easat2_util_transmission.c: 150: util_transmit_morse_sequence((char*)"....-");
  1599  006E8C  0EB6               	movlw	low STR_33
  1600  006E8E  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1601  006E90  0E7F               	movlw	high STR_33
  1602  006E92  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1603  006E94  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1604                           
  1605                           ;easat2_util_transmission.c: 151: break;
  1606  006E98  0012               	return	
  1607  006E9A                     l3124:
  1608                           
  1609                           ;easat2_util_transmission.c: 153: util_transmit_morse_sequence((char*)".....");
  1610  006E9A  0EDA               	movlw	low STR_34
  1611  006E9C  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1612  006E9E  0E7F               	movlw	high STR_34
  1613  006EA0  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1614  006EA2  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1615                           
  1616                           ;easat2_util_transmission.c: 154: break;
  1617  006EA6  0012               	return	
  1618  006EA8                     l3126:
  1619                           
  1620                           ;easat2_util_transmission.c: 156: util_transmit_morse_sequence((char*)"-....");
  1621  006EA8  0ED4               	movlw	low STR_35
  1622  006EAA  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1623  006EAC  0E7F               	movlw	high STR_35
  1624  006EAE  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1625  006EB0  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1626                           
  1627                           ;easat2_util_transmission.c: 157: break;
  1628  006EB4  0012               	return	
  1629  006EB6                     l3128:
  1630                           
  1631                           ;easat2_util_transmission.c: 159: util_transmit_morse_sequence((char*)"--...");
  1632  006EB6  0ECE               	movlw	low STR_36
  1633  006EB8  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1634  006EBA  0E7F               	movlw	high STR_36
  1635  006EBC  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1636  006EBE  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1637                           
  1638                           ;easat2_util_transmission.c: 160: break;
  1639  006EC2  0012               	return	
  1640  006EC4                     l3130:
  1641                           
  1642                           ;easat2_util_transmission.c: 162: util_transmit_morse_sequence((char*)"---..");
  1643  006EC4  0EC8               	movlw	low STR_37
  1644  006EC6  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1645  006EC8  0E7F               	movlw	high STR_37
  1646  006ECA  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1647  006ECC  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1648                           
  1649                           ;easat2_util_transmission.c: 163: break;
  1650  006ED0  0012               	return	
  1651  006ED2                     l3132:
  1652                           
  1653                           ;easat2_util_transmission.c: 165: util_transmit_morse_sequence((char*)"----.");
  1654  006ED2  0EBC               	movlw	low STR_38
  1655  006ED4  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1656  006ED6  0E7F               	movlw	high STR_38
  1657  006ED8  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1658  006EDA  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1659                           
  1660                           ;easat2_util_transmission.c: 166: break;
  1661  006EDE  0012               	return	
  1662  006EE0                     l3134:
  1663                           
  1664                           ;easat2_util_transmission.c: 168: util_transmit_morse_sequence((char*)"--..--");
  1665  006EE0  0E82               	movlw	low STR_39
  1666  006EE2  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1667  006EE4  0E7F               	movlw	high STR_39
  1668  006EE6  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1669  006EE8  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1670                           
  1671                           ;easat2_util_transmission.c: 169: break;
  1672  006EEC  0012               	return	
  1673  006EEE                     l3136:
  1674                           
  1675                           ;easat2_util_transmission.c: 171: util_transmit_morse_sequence((char*)"..--..");
  1676  006EEE  0E90               	movlw	low STR_40
  1677  006EF0  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1678  006EF2  0E7F               	movlw	high STR_40
  1679  006EF4  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1680  006EF6  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1681                           
  1682                           ;easat2_util_transmission.c: 172: break;
  1683  006EFA  0012               	return	
  1684  006EFC                     l3138:
  1685                           
  1686                           ;easat2_util_transmission.c: 174: util_transmit_morse_sequence((char*)"-..-.");
  1687  006EFC  0EC2               	movlw	low STR_41
  1688  006EFE  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1689  006F00  0E7F               	movlw	high STR_41
  1690  006F02  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1691  006F04  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1692                           
  1693                           ;easat2_util_transmission.c: 175: break;
  1694  006F08  0012               	return	
  1695  006F0A                     l3140:
  1696                           
  1697                           ;easat2_util_transmission.c: 177: util_transmit_morse_sequence((char*)".-.-.-");
  1698  006F0A  0E89               	movlw	low STR_42
  1699  006F0C  6E0A               	movwf	util_transmit_morse_sequence@morse_sequence,c
  1700  006F0E  0E7F               	movlw	high STR_42
  1701  006F10  6E0B               	movwf	util_transmit_morse_sequence@morse_sequence+1,c
  1702  006F12  ECE1  F02F         	call	_util_transmit_morse_sequence	;wreg free
  1703                           
  1704                           ;easat2_util_transmission.c: 178: break;
  1705  006F16  0012               	return	
  1706  006F18                     l3142:
  1707                           
  1708                           ;easat2_util_transmission.c: 180: util_transmit_space_between_words();
  1709  006F18  EC67  F02E         	call	_util_transmit_space_between_words	;wreg free
  1710  006F1C                     l147:
  1711                           
  1712                           ;easat2_util_transmission.c: 183: util_transmit_space_between_letters();
  1713  006F1C  EC60  F02E         	call	_util_transmit_space_between_letters	;wreg free
  1714                           
  1715                           ;easat2_util_transmission.c: 186: }
  1716                           
  1717                           ;easat2_util_transmission.c: 184: break;
  1718  006F20  0012               	return	
  1719  006F22                     l3146:
  1720  006F22  5010               	movf	util_transmit_letter@letter,w,c
  1721                           
  1722                           ; Switch size 1, requested type "space"
  1723                           ; Number of cases is 41, Range of values is 32 to 90
  1724                           ; switch strategies available:
  1725                           ; Name         Instructions Cycles
  1726                           ; simple_byte          124    63 (average)
  1727                           ;	Chosen strategy is simple_byte
  1728  006F24  0A20               	xorlw	32	; case 32
  1729  006F26  B4D8               	btfsc	status,2,c
  1730  006F28  D7F7               	goto	l3142
  1731  006F2A  0A0C               	xorlw	12	; case 44
  1732  006F2C  B4D8               	btfsc	status,2,c
  1733  006F2E  D7D8               	goto	l3134
  1734  006F30  0A02               	xorlw	2	; case 46
  1735  006F32  B4D8               	btfsc	status,2,c
  1736  006F34  D7EA               	goto	l3140
  1737  006F36  0A01               	xorlw	1	; case 47
  1738  006F38  B4D8               	btfsc	status,2,c
  1739  006F3A  D7E0               	goto	l3138
  1740  006F3C  0A1F               	xorlw	31	; case 48
  1741  006F3E  B4D8               	btfsc	status,2,c
  1742  006F40  D789               	goto	l3114
  1743  006F42  0A01               	xorlw	1	; case 49
  1744  006F44  B4D8               	btfsc	status,2,c
  1745  006F46  D78D               	goto	l3116
  1746  006F48  0A03               	xorlw	3	; case 50
  1747  006F4A  B4D8               	btfsc	status,2,c
  1748  006F4C  D791               	goto	l3118
  1749  006F4E  0A01               	xorlw	1	; case 51
  1750  006F50  B4D8               	btfsc	status,2,c
  1751  006F52  D795               	goto	l3120
  1752  006F54  0A07               	xorlw	7	; case 52
  1753  006F56  B4D8               	btfsc	status,2,c
  1754  006F58  D799               	goto	l3122
  1755  006F5A  0A01               	xorlw	1	; case 53
  1756  006F5C  B4D8               	btfsc	status,2,c
  1757  006F5E  D79D               	goto	l3124
  1758  006F60  0A03               	xorlw	3	; case 54
  1759  006F62  B4D8               	btfsc	status,2,c
  1760  006F64  D7A1               	goto	l3126
  1761  006F66  0A01               	xorlw	1	; case 55
  1762  006F68  B4D8               	btfsc	status,2,c
  1763  006F6A  D7A5               	goto	l3128
  1764  006F6C  0A0F               	xorlw	15	; case 56
  1765  006F6E  B4D8               	btfsc	status,2,c
  1766  006F70  D7A9               	goto	l3130
  1767  006F72  0A01               	xorlw	1	; case 57
  1768  006F74  B4D8               	btfsc	status,2,c
  1769  006F76  D7AD               	goto	l3132
  1770  006F78  0A06               	xorlw	6	; case 63
  1771  006F7A  B4D8               	btfsc	status,2,c
  1772  006F7C  D7B8               	goto	l3136
  1773  006F7E  0A7E               	xorlw	126	; case 65
  1774  006F80  B4D8               	btfsc	status,2,c
  1775  006F82  D6B2               	goto	l3062
  1776  006F84  0A03               	xorlw	3	; case 66
  1777  006F86  B4D8               	btfsc	status,2,c
  1778  006F88  D6B6               	goto	l3064
  1779  006F8A  0A01               	xorlw	1	; case 67
  1780  006F8C  B4D8               	btfsc	status,2,c
  1781  006F8E  D6BA               	goto	l3066
  1782  006F90  0A07               	xorlw	7	; case 68
  1783  006F92  B4D8               	btfsc	status,2,c
  1784  006F94  D6BE               	goto	l3068
  1785  006F96  0A01               	xorlw	1	; case 69
  1786  006F98  B4D8               	btfsc	status,2,c
  1787  006F9A  D6C2               	goto	l3070
  1788  006F9C  0A03               	xorlw	3	; case 70
  1789  006F9E  B4D8               	btfsc	status,2,c
  1790  006FA0  D6C6               	goto	l3072
  1791  006FA2  0A01               	xorlw	1	; case 71
  1792  006FA4  B4D8               	btfsc	status,2,c
  1793  006FA6  D6CA               	goto	l3074
  1794  006FA8  0A0F               	xorlw	15	; case 72
  1795  006FAA  B4D8               	btfsc	status,2,c
  1796  006FAC  D6CE               	goto	l3076
  1797  006FAE  0A01               	xorlw	1	; case 73
  1798  006FB0  B4D8               	btfsc	status,2,c
  1799  006FB2  D6D2               	goto	l3078
  1800  006FB4  0A03               	xorlw	3	; case 74
  1801  006FB6  B4D8               	btfsc	status,2,c
  1802  006FB8  D6D6               	goto	l3080
  1803  006FBA  0A01               	xorlw	1	; case 75
  1804  006FBC  B4D8               	btfsc	status,2,c
  1805  006FBE  D6DA               	goto	l3082
  1806  006FC0  0A07               	xorlw	7	; case 76
  1807  006FC2  B4D8               	btfsc	status,2,c
  1808  006FC4  D6DE               	goto	l3084
  1809  006FC6  0A01               	xorlw	1	; case 77
  1810  006FC8  B4D8               	btfsc	status,2,c
  1811  006FCA  D6E2               	goto	l3086
  1812  006FCC  0A03               	xorlw	3	; case 78
  1813  006FCE  B4D8               	btfsc	status,2,c
  1814  006FD0  D6E6               	goto	l3088
  1815  006FD2  0A01               	xorlw	1	; case 79
  1816  006FD4  B4D8               	btfsc	status,2,c
  1817  006FD6  D6EA               	goto	l3090
  1818  006FD8  0A1F               	xorlw	31	; case 80
  1819  006FDA  B4D8               	btfsc	status,2,c
  1820  006FDC  D6EE               	goto	l3092
  1821  006FDE  0A01               	xorlw	1	; case 81
  1822  006FE0  B4D8               	btfsc	status,2,c
  1823  006FE2  D6F2               	goto	l3094
  1824  006FE4  0A03               	xorlw	3	; case 82
  1825  006FE6  B4D8               	btfsc	status,2,c
  1826  006FE8  D6F6               	goto	l3096
  1827  006FEA  0A01               	xorlw	1	; case 83
  1828  006FEC  B4D8               	btfsc	status,2,c
  1829  006FEE  D6FA               	goto	l3098
  1830  006FF0  0A07               	xorlw	7	; case 84
  1831  006FF2  B4D8               	btfsc	status,2,c
  1832  006FF4  D6FE               	goto	l3100
  1833  006FF6  0A01               	xorlw	1	; case 85
  1834  006FF8  B4D8               	btfsc	status,2,c
  1835  006FFA  D702               	goto	l3102
  1836  006FFC  0A03               	xorlw	3	; case 86
  1837  006FFE  B4D8               	btfsc	status,2,c
  1838  007000  D706               	goto	l3104
  1839  007002  0A01               	xorlw	1	; case 87
  1840  007004  B4D8               	btfsc	status,2,c
  1841  007006  D70A               	goto	l3106
  1842  007008  0A0F               	xorlw	15	; case 88
  1843  00700A  B4D8               	btfsc	status,2,c
  1844  00700C  D70E               	goto	l3108
  1845  00700E  0A01               	xorlw	1	; case 89
  1846  007010  B4D8               	btfsc	status,2,c
  1847  007012  D712               	goto	l3110
  1848  007014  0A03               	xorlw	3	; case 90
  1849  007016  B4D8               	btfsc	status,2,c
  1850  007018  D716               	goto	l3112
  1851  00701A  D780               	goto	l147
  1852  00701C                     __end_of_util_transmit_letter:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           indf2	equ	0xFDF
  1856                           fsr2h	equ	0xFDA
  1857                           fsr2l	equ	0xFD9
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _util_transmit_space_between_words *****************
  1861 ;; Defined at:
  1862 ;;		line 298 in file "easat2_util_transmission.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;		None
  1865 ;; Auto vars:     Size  Location     Type
  1866 ;;		None
  1867 ;; Return value:  Size  Location     Type
  1868 ;;                  1    wreg      void 
  1869 ;; Registers used:
  1870 ;;		wreg, status,2, status,0, cstack
  1871 ;; Tracked objects:
  1872 ;;		On entry : 0/0
  1873 ;;		On exit  : 0/0
  1874 ;;		Unchanged: 0/0
  1875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1876 ;;      Params:         0       0       0       0       0       0       0
  1877 ;;      Locals:         0       0       0       0       0       0       0
  1878 ;;      Temps:          0       0       0       0       0       0       0
  1879 ;;      Totals:         0       0       0       0       0       0       0
  1880 ;;Total ram usage:        0 bytes
  1881 ;; Hardware stack levels used:    1
  1882 ;; Hardware stack levels required when called:    1
  1883 ;; This function calls:
  1884 ;;		_util_waits_delay_ms
  1885 ;; This function is called by:
  1886 ;;		_util_transmit_letter
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           	psect	text5
  1891  005CCE                     __ptext5:
  1892                           	opt stack 0
  1893  005CCE                     _util_transmit_space_between_words:
  1894                           	opt stack 26
  1895                           
  1896                           ;easat2_util_transmission.c: 299: util_waits_delay_ms(7*(int)(2400/32));
  1897                           
  1898                           ;incstack = 0
  1899  005CCE  0E02               	movlw	2
  1900  005CD0  6E02               	movwf	util_waits_delay_ms@ms+1,c
  1901  005CD2  0E0D               	movlw	13
  1902  005CD4  6E01               	movwf	util_waits_delay_ms@ms,c
  1903  005CD6  ECCA  F02E         	call	_util_waits_delay_ms	;wreg free
  1904  005CDA  0012               	return		;funcret
  1905  005CDC                     __end_of_util_transmit_space_between_words:
  1906                           	opt stack 0
  1907                           tblptru	equ	0xFF8
  1908                           indf2	equ	0xFDF
  1909                           fsr2h	equ	0xFDA
  1910                           fsr2l	equ	0xFD9
  1911                           status	equ	0xFD8
  1912                           
  1913 ;; *************** function _util_transmit_space_between_letters *****************
  1914 ;; Defined at:
  1915 ;;		line 291 in file "easat2_util_transmission.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  1    wreg      void 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1929 ;;      Params:         0       0       0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0       0       0
  1932 ;;      Totals:         0       0       0       0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    1
  1936 ;; This function calls:
  1937 ;;		_util_waits_delay_ms
  1938 ;; This function is called by:
  1939 ;;		_util_transmit_letter
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text6
  1944  005CC0                     __ptext6:
  1945                           	opt stack 0
  1946  005CC0                     _util_transmit_space_between_letters:
  1947                           	opt stack 26
  1948                           
  1949                           ;easat2_util_transmission.c: 292: util_waits_delay_ms(3*(int)(2400/32));
  1950                           
  1951                           ;incstack = 0
  1952  005CC0  0E00               	movlw	0
  1953  005CC2  6E02               	movwf	util_waits_delay_ms@ms+1,c
  1954  005CC4  0EE1               	movlw	225
  1955  005CC6  6E01               	movwf	util_waits_delay_ms@ms,c
  1956  005CC8  ECCA  F02E         	call	_util_waits_delay_ms	;wreg free
  1957  005CCC  0012               	return		;funcret
  1958  005CCE                     __end_of_util_transmit_space_between_letters:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           indf2	equ	0xFDF
  1962                           fsr2h	equ	0xFDA
  1963                           fsr2l	equ	0xFD9
  1964                           status	equ	0xFD8
  1965                           
  1966 ;; *************** function _util_transmit_morse_sequence *****************
  1967 ;; Defined at:
  1968 ;;		line 196 in file "easat2_util_transmission.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  morse_sequen    2    9[COMRAM] PTR unsigned char 
  1971 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  1972 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  1973 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  1974 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  1975 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  1976 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  1977 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  1978 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  1979 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  1980 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  1981 ;; Auto vars:     Size  Location     Type
  1982 ;;  i               2   13[COMRAM] int 
  1983 ;; Return value:  Size  Location     Type
  1984 ;;                  1    wreg      void 
  1985 ;; Registers used:
  1986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1987 ;; Tracked objects:
  1988 ;;		On entry : 0/0
  1989 ;;		On exit  : 0/0
  1990 ;;		Unchanged: 0/0
  1991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1992 ;;      Params:         2       0       0       0       0       0       0
  1993 ;;      Locals:         2       0       0       0       0       0       0
  1994 ;;      Temps:          2       0       0       0       0       0       0
  1995 ;;      Totals:         6       0       0       0       0       0       0
  1996 ;;Total ram usage:        6 bytes
  1997 ;; Hardware stack levels used:    1
  1998 ;; Hardware stack levels required when called:    3
  1999 ;; This function calls:
  2000 ;;		_strlen
  2001 ;;		_util_transmit_dash
  2002 ;;		_util_transmit_dot
  2003 ;;		_util_transmit_space_between_dots_dashs
  2004 ;; This function is called by:
  2005 ;;		_util_transmit_letter
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           
  2009                           	psect	text7
  2010  005FC2                     __ptext7:
  2011                           	opt stack 0
  2012  005FC2                     _util_transmit_morse_sequence:
  2013                           	opt stack 24
  2014                           
  2015                           ;easat2_util_transmission.c: 200: for (int i = 0; i < strlen(morse_sequence); i++) {
  2016                           
  2017                           ;incstack = 0
  2018  005FC2  0E00               	movlw	0
  2019  005FC4  6E0F               	movwf	util_transmit_morse_sequence@i+1,c
  2020  005FC6  0E00               	movlw	0
  2021  005FC8  6E0E               	movwf	util_transmit_morse_sequence@i,c
  2022  005FCA  D01E               	goto	l2424
  2023  005FCC                     l2412:
  2024                           
  2025                           ;easat2_util_transmission.c: 205: util_transmit_dot();
  2026  005FCC  EC12  F02F         	call	_util_transmit_dot	;wreg free
  2027                           
  2028                           ;easat2_util_transmission.c: 206: break;
  2029  005FD0  D019               	goto	l2422
  2030  005FD2                     l2414:
  2031                           
  2032                           ;easat2_util_transmission.c: 208: util_transmit_dash();
  2033  005FD2  ECF8  F02E         	call	_util_transmit_dash	;wreg free
  2034                           
  2035                           ;easat2_util_transmission.c: 209: break;
  2036  005FD6  D016               	goto	l2422
  2037  005FD8                     l2416:
  2038                           
  2039                           ;easat2_util_transmission.c: 212: util_transmit_space_between_dots_dashs();
  2040  005FD8  EC59  F02E         	call	_util_transmit_space_between_dots_dashs	;wreg free
  2041                           
  2042                           ;easat2_util_transmission.c: 214: }
  2043                           
  2044                           ;easat2_util_transmission.c: 213: break;
  2045  005FDC  D013               	goto	l2422
  2046  005FDE                     l2420:
  2047  005FDE  500E               	movf	util_transmit_morse_sequence@i,w,c
  2048  005FE0  240A               	addwf	util_transmit_morse_sequence@morse_sequence,w,c
  2049  005FE2  6E0C               	movwf	??_util_transmit_morse_sequence& (0+255),c
  2050  005FE4  500F               	movf	util_transmit_morse_sequence@i+1,w,c
  2051  005FE6  200B               	addwfc	util_transmit_morse_sequence@morse_sequence+1,w,c
  2052  005FE8  6E0D               	movwf	(??_util_transmit_morse_sequence+1)& (0+255),c
  2053  005FEA  C00C  FFF6         	movff	??_util_transmit_morse_sequence,tblptrl
  2054  005FEE  C00D  FFF7         	movff	??_util_transmit_morse_sequence+1,tblptrh
  2055  005FF2                     	if	0	;tblptru may be non-zero
  2056  005FF2                     	endif
  2057  005FF2                     	if	0	;tblptru may be non-zero
  2058  005FF2                     	endif
  2059  005FF2  0008               	tblrd		*
  2060  005FF4  50F5               	movf	tablat,w,c
  2061                           
  2062                           ; Switch size 1, requested type "space"
  2063                           ; Number of cases is 2, Range of values is 45 to 46
  2064                           ; switch strategies available:
  2065                           ; Name         Instructions Cycles
  2066                           ; simple_byte            7     4 (average)
  2067                           ;	Chosen strategy is simple_byte
  2068  005FF6  0A2D               	xorlw	45	; case 45
  2069  005FF8  B4D8               	btfsc	status,2,c
  2070  005FFA  D7EB               	goto	l2414
  2071  005FFC  0A03               	xorlw	3	; case 46
  2072  005FFE  B4D8               	btfsc	status,2,c
  2073  006000  D7E5               	goto	l2412
  2074  006002  D7EA               	goto	l2416
  2075  006004                     l2422:
  2076  006004  4A0E               	infsnz	util_transmit_morse_sequence@i,f,c
  2077  006006  2A0F               	incf	util_transmit_morse_sequence@i+1,f,c
  2078  006008                     l2424:
  2079  006008  C00A  F001         	movff	util_transmit_morse_sequence@morse_sequence,strlen@s
  2080  00600C  C00B  F002         	movff	util_transmit_morse_sequence@morse_sequence+1,strlen@s+1
  2081  006010  EC8A  F02F         	call	_strlen	;wreg free
  2082  006014  5001               	movf	?_strlen,w,c
  2083  006016  5C0E               	subwf	util_transmit_morse_sequence@i,w,c
  2084  006018  5002               	movf	?_strlen+1,w,c
  2085  00601A  580F               	subwfb	util_transmit_morse_sequence@i+1,w,c
  2086  00601C  B0D8               	btfsc	status,0,c
  2087  00601E  0012               	return	
  2088  006020  D7DE               	goto	l2420
  2089  006022                     __end_of_util_transmit_morse_sequence:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           indf2	equ	0xFDF
  2096                           fsr2h	equ	0xFDA
  2097                           fsr2l	equ	0xFD9
  2098                           status	equ	0xFD8
  2099                           
  2100 ;; *************** function _util_transmit_space_between_dots_dashs *****************
  2101 ;; Defined at:
  2102 ;;		line 283 in file "easat2_util_transmission.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, status,2, status,0, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2116 ;;      Params:         0       0       0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0
  2118 ;;      Temps:          0       0       0       0       0       0       0
  2119 ;;      Totals:         0       0       0       0       0       0       0
  2120 ;;Total ram usage:        0 bytes
  2121 ;; Hardware stack levels used:    1
  2122 ;; Hardware stack levels required when called:    1
  2123 ;; This function calls:
  2124 ;;		_util_waits_delay_ms
  2125 ;; This function is called by:
  2126 ;;		_util_transmit_morse_sequence
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text8
  2131  005CB2                     __ptext8:
  2132                           	opt stack 0
  2133  005CB2                     _util_transmit_space_between_dots_dashs:
  2134                           	opt stack 25
  2135                           
  2136                           ;easat2_util_transmission.c: 284: util_waits_delay_ms((int)(2400/32));
  2137                           
  2138                           ;incstack = 0
  2139  005CB2  0E00               	movlw	0
  2140  005CB4  6E02               	movwf	util_waits_delay_ms@ms+1,c
  2141  005CB6  0E4B               	movlw	75
  2142  005CB8  6E01               	movwf	util_waits_delay_ms@ms,c
  2143  005CBA  ECCA  F02E         	call	_util_waits_delay_ms	;wreg free
  2144  005CBE  0012               	return		;funcret
  2145  005CC0                     __end_of_util_transmit_space_between_dots_dashs:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           indf2	equ	0xFDF
  2152                           fsr2h	equ	0xFDA
  2153                           fsr2l	equ	0xFD9
  2154                           status	equ	0xFD8
  2155                           
  2156 ;; *************** function _util_transmit_dot *****************
  2157 ;; Defined at:
  2158 ;;		line 225 in file "easat2_util_transmission.c"
  2159 ;; Parameters:    Size  Location     Type
  2160 ;;		None
  2161 ;; Auto vars:     Size  Location     Type
  2162 ;;  i               2    7[COMRAM] int 
  2163 ;; Return value:  Size  Location     Type
  2164 ;;                  1    wreg      void 
  2165 ;; Registers used:
  2166 ;;		wreg, status,2, status,0, cstack
  2167 ;; Tracked objects:
  2168 ;;		On entry : 0/0
  2169 ;;		On exit  : 0/0
  2170 ;;		Unchanged: 0/0
  2171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2172 ;;      Params:         0       0       0       0       0       0       0
  2173 ;;      Locals:         2       0       0       0       0       0       0
  2174 ;;      Temps:          0       0       0       0       0       0       0
  2175 ;;      Totals:         2       0       0       0       0       0       0
  2176 ;;Total ram usage:        2 bytes
  2177 ;; Hardware stack levels used:    1
  2178 ;; Hardware stack levels required when called:    2
  2179 ;; This function calls:
  2180 ;;		_util_transmit_buzzer_1ms_cycle
  2181 ;;		_util_waits_delay_ms
  2182 ;; This function is called by:
  2183 ;;		_util_transmit_morse_sequence
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text9
  2188  005E24                     __ptext9:
  2189                           	opt stack 0
  2190  005E24                     _util_transmit_dot:
  2191                           	opt stack 24
  2192                           
  2193                           ;easat2_util_transmission.c: 229: PORTDbits.RD0 = 1;
  2194                           
  2195                           ;incstack = 0
  2196  005E24  8083               	bsf	3971,0,c	;volatile
  2197                           
  2198                           ;easat2_util_transmission.c: 230: PORTDbits.RD2 = 1;
  2199  005E26  8483               	bsf	3971,2,c	;volatile
  2200                           
  2201                           ;easat2_util_transmission.c: 232: for (int i = 0; i < (int)(2400/32); i++) {
  2202  005E28  0E00               	movlw	0
  2203  005E2A  6E09               	movwf	util_transmit_dot@i+1,c
  2204  005E2C  0E00               	movlw	0
  2205  005E2E  6E08               	movwf	util_transmit_dot@i,c
  2206  005E30  BE09               	btfsc	util_transmit_dot@i+1,7,c
  2207  005E32  D006               	goto	l2180
  2208  005E34  5009               	movf	util_transmit_dot@i+1,w,c
  2209  005E36  E10D               	bnz	l163
  2210  005E38  0E4B               	movlw	75
  2211  005E3A  5C08               	subwf	util_transmit_dot@i,w,c
  2212  005E3C  B0D8               	btfsc	status,0,c
  2213  005E3E  D009               	goto	l163
  2214  005E40                     l2180:
  2215                           
  2216                           ;easat2_util_transmission.c: 239: util_transmit_buzzer_1ms_cycle();
  2217  005E40  EC2C  F02F         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  2218                           
  2219                           ;easat2_util_transmission.c: 240: else
  2220                           ;easat2_util_transmission.c: 241: util_waits_delay_ms(1);
  2221  005E44  4A08               	infsnz	util_transmit_dot@i,f,c
  2222  005E46  2A09               	incf	util_transmit_dot@i+1,f,c
  2223  005E48  BE09               	btfsc	util_transmit_dot@i+1,7,c
  2224  005E4A  D7FA               	goto	l2180
  2225  005E4C  5009               	movf	util_transmit_dot@i+1,w,c
  2226  005E4E  E101               	bnz	u1750
  2227  005E50  D7F3               	goto	L1
  2228  005E52                     u1750:
  2229  005E52                     l163:
  2230                           
  2231                           ;easat2_util_transmission.c: 243: }
  2232                           ;easat2_util_transmission.c: 245: PORTDbits.RD0 = 0;
  2233  005E52  9083               	bcf	3971,0,c	;volatile
  2234                           
  2235                           ;easat2_util_transmission.c: 246: PORTDbits.RD2 = 0;
  2236  005E54  9483               	bcf	3971,2,c	;volatile
  2237  005E56  0012               	return		;funcret
  2238  005E58                     __end_of_util_transmit_dot:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           indf2	equ	0xFDF
  2245                           fsr2h	equ	0xFDA
  2246                           fsr2l	equ	0xFD9
  2247                           status	equ	0xFD8
  2248                           
  2249 ;; *************** function _util_transmit_dash *****************
  2250 ;; Defined at:
  2251 ;;		line 256 in file "easat2_util_transmission.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;		None
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;  i               2    7[COMRAM] int 
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  1    wreg      void 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0, cstack
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2265 ;;      Params:         0       0       0       0       0       0       0
  2266 ;;      Locals:         2       0       0       0       0       0       0
  2267 ;;      Temps:          0       0       0       0       0       0       0
  2268 ;;      Totals:         2       0       0       0       0       0       0
  2269 ;;Total ram usage:        2 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    2
  2272 ;; This function calls:
  2273 ;;		_util_transmit_buzzer_1ms_cycle
  2274 ;;		_util_waits_delay_ms
  2275 ;; This function is called by:
  2276 ;;		_util_transmit_morse_sequence
  2277 ;; This function uses a non-reentrant model
  2278 ;;
  2279                           
  2280                           	psect	text10
  2281  005DF0                     __ptext10:
  2282                           	opt stack 0
  2283  005DF0                     _util_transmit_dash:
  2284                           	opt stack 24
  2285                           
  2286                           ;easat2_util_transmission.c: 260: PORTDbits.RD0 = 1;
  2287                           
  2288                           ;incstack = 0
  2289  005DF0  8083               	bsf	3971,0,c	;volatile
  2290                           
  2291                           ;easat2_util_transmission.c: 261: PORTDbits.RD2 = 1;
  2292  005DF2  8483               	bsf	3971,2,c	;volatile
  2293                           
  2294                           ;easat2_util_transmission.c: 263: for (int i = 0; i < ((int)(2400/32)*3); i++) {
  2295  005DF4  0E00               	movlw	0
  2296  005DF6  6E09               	movwf	util_transmit_dash@i+1,c
  2297  005DF8  0E00               	movlw	0
  2298  005DFA  6E08               	movwf	util_transmit_dash@i,c
  2299  005DFC  BE09               	btfsc	util_transmit_dash@i+1,7,c
  2300  005DFE  D006               	goto	l2196
  2301  005E00  5009               	movf	util_transmit_dash@i+1,w,c
  2302  005E02  E10D               	bnz	l170
  2303  005E04  0EE1               	movlw	225
  2304  005E06  5C08               	subwf	util_transmit_dash@i,w,c
  2305  005E08  B0D8               	btfsc	status,0,c
  2306  005E0A  D009               	goto	l170
  2307  005E0C                     l2196:
  2308                           
  2309                           ;easat2_util_transmission.c: 270: util_transmit_buzzer_1ms_cycle();
  2310  005E0C  EC2C  F02F         	call	_util_transmit_buzzer_1ms_cycle	;wreg free
  2311                           
  2312                           ;easat2_util_transmission.c: 271: else
  2313                           ;easat2_util_transmission.c: 272: util_waits_delay_ms(1);
  2314  005E10  4A08               	infsnz	util_transmit_dash@i,f,c
  2315  005E12  2A09               	incf	util_transmit_dash@i+1,f,c
  2316  005E14  BE09               	btfsc	util_transmit_dash@i+1,7,c
  2317  005E16  D7FA               	goto	l2196
  2318  005E18  5009               	movf	util_transmit_dash@i+1,w,c
  2319  005E1A  E101               	bnz	u1770
  2320  005E1C  D7F3               	goto	L2
  2321  005E1E                     u1770:
  2322  005E1E                     l170:
  2323                           
  2324                           ;easat2_util_transmission.c: 274: }
  2325                           ;easat2_util_transmission.c: 276: PORTDbits.RD0 = 0;
  2326  005E1E  9083               	bcf	3971,0,c	;volatile
  2327                           
  2328                           ;easat2_util_transmission.c: 277: PORTDbits.RD2 = 0;
  2329  005E20  9483               	bcf	3971,2,c	;volatile
  2330  005E22  0012               	return		;funcret
  2331  005E24                     __end_of_util_transmit_dash:
  2332                           	opt stack 0
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           indf2	equ	0xFDF
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _util_waits_delay_ms *****************
  2343 ;; Defined at:
  2344 ;;		line 41 in file "easat2_util_waits.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  ms              2    0[COMRAM] int 
  2347 ;; Auto vars:     Size  Location     Type
  2348 ;;  i               2    3[COMRAM] int 
  2349 ;; Return value:  Size  Location     Type
  2350 ;;                  1    wreg      void 
  2351 ;; Registers used:
  2352 ;;		wreg, status,2, status,0
  2353 ;; Tracked objects:
  2354 ;;		On entry : 0/0
  2355 ;;		On exit  : 0/0
  2356 ;;		Unchanged: 0/0
  2357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2358 ;;      Params:         2       0       0       0       0       0       0
  2359 ;;      Locals:         2       0       0       0       0       0       0
  2360 ;;      Temps:          1       0       0       0       0       0       0
  2361 ;;      Totals:         5       0       0       0       0       0       0
  2362 ;;Total ram usage:        5 bytes
  2363 ;; Hardware stack levels used:    1
  2364 ;; This function calls:
  2365 ;;		Nothing
  2366 ;; This function is called by:
  2367 ;;		_util_transmit_dot
  2368 ;;		_util_transmit_dash
  2369 ;;		_util_transmit_space_between_dots_dashs
  2370 ;;		_util_transmit_space_between_letters
  2371 ;;		_util_transmit_space_between_words
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text11
  2376  005D94                     __ptext11:
  2377                           	opt stack 0
  2378  005D94                     _util_waits_delay_ms:
  2379                           	opt stack 26
  2380                           
  2381                           ;easat2_util_waits.c: 42: for (int i = 0; i < ms; i++)
  2382                           
  2383                           ;incstack = 0
  2384  005D94  0E00               	movlw	0
  2385  005D96  6E05               	movwf	util_waits_delay_ms@i+1,c
  2386  005D98  0E00               	movlw	0
  2387  005D9A  6E04               	movwf	util_waits_delay_ms@i,c
  2388  005D9C  D006               	goto	l39
  2389  005D9E                     l2108:
  2390                           
  2391                           ;easat2_util_waits.c: 43: _delay((unsigned long)((1)*(2000000/4000.0)));
  2392  005D9E  0EA6               	movlw	166
  2393  005DA0                     u3197:
  2394  005DA0  2EE8               	decfsz	wreg,f,c
  2395  005DA2  D7FE               	goto	u3197
  2396  005DA4  D000               	nop2		;nop
  2397  005DA6  4A04               	infsnz	util_waits_delay_ms@i,f,c
  2398  005DA8  2A05               	incf	util_waits_delay_ms@i+1,f,c
  2399  005DAA                     l39:
  2400  005DAA  5001               	movf	util_waits_delay_ms@ms,w,c
  2401  005DAC  5C04               	subwf	util_waits_delay_ms@i,w,c
  2402  005DAE  5005               	movf	util_waits_delay_ms@i+1,w,c
  2403  005DB0  0A80               	xorlw	128
  2404  005DB2  6E03               	movwf	??_util_waits_delay_ms& (0+255),c
  2405  005DB4  5002               	movf	util_waits_delay_ms@ms+1,w,c
  2406  005DB6  0A80               	xorlw	128
  2407  005DB8  5803               	subwfb	??_util_waits_delay_ms& (0+255),w,c
  2408  005DBA  B0D8               	btfsc	status,0,c
  2409  005DBC  0012               	return	
  2410  005DBE  D7EF               	goto	l2108
  2411  005DC0                     __end_of_util_waits_delay_ms:
  2412                           	opt stack 0
  2413                           tblptru	equ	0xFF8
  2414                           tblptrh	equ	0xFF7
  2415                           tblptrl	equ	0xFF6
  2416                           tablat	equ	0xFF5
  2417                           wreg	equ	0xFE8
  2418                           indf2	equ	0xFDF
  2419                           fsr2h	equ	0xFDA
  2420                           fsr2l	equ	0xFD9
  2421                           status	equ	0xFD8
  2422                           
  2423 ;; *************** function _util_transmit_buzzer_1ms_cycle *****************
  2424 ;; Defined at:
  2425 ;;		line 304 in file "easat2_util_transmission.c"
  2426 ;; Parameters:    Size  Location     Type
  2427 ;;		None
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  j               2    5[COMRAM] int 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;                  1    wreg      void 
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2439 ;;      Params:         0       0       0       0       0       0       0
  2440 ;;      Locals:         2       0       0       0       0       0       0
  2441 ;;      Temps:          0       0       0       0       0       0       0
  2442 ;;      Totals:         2       0       0       0       0       0       0
  2443 ;;Total ram usage:        2 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    1
  2446 ;; This function calls:
  2447 ;;		_util_waits_delay_us
  2448 ;; This function is called by:
  2449 ;;		_util_transmit_dot
  2450 ;;		_util_transmit_dash
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text12
  2455  005E58                     __ptext12:
  2456                           	opt stack 0
  2457  005E58                     _util_transmit_buzzer_1ms_cycle:
  2458                           	opt stack 24
  2459                           
  2460                           ;easat2_util_transmission.c: 306: for (int j = 0; j < (int)(1000/1000); j++) {
  2461                           
  2462                           ;incstack = 0
  2463  005E58  0E00               	movlw	0
  2464  005E5A  6E07               	movwf	util_transmit_buzzer_1ms_cycle@j+1,c
  2465  005E5C  0E00               	movlw	0
  2466  005E5E  6E06               	movwf	util_transmit_buzzer_1ms_cycle@j,c
  2467  005E60                     l2114:
  2468  005E60  BE07               	btfsc	util_transmit_buzzer_1ms_cycle@j+1,7,c
  2469  005E62  D005               	goto	l185
  2470  005E64  5007               	movf	util_transmit_buzzer_1ms_cycle@j+1,w,c
  2471  005E66  E114               	bnz	l187
  2472  005E68  0406               	decf	util_transmit_buzzer_1ms_cycle@j,w,c
  2473  005E6A  B0D8               	btfsc	status,0,c
  2474  005E6C  0012               	return	
  2475  005E6E                     l185:
  2476                           
  2477                           ;easat2_util_transmission.c: 308: PORTDbits.RD1 = 1;
  2478  005E6E  8283               	bsf	3971,1,c	;volatile
  2479                           
  2480                           ;easat2_util_transmission.c: 309: util_waits_delay_us((int)(1000/2));
  2481  005E70  0E01               	movlw	1
  2482  005E72  6E02               	movwf	util_waits_delay_us@us+1,c
  2483  005E74  0EF4               	movlw	244
  2484  005E76  6E01               	movwf	util_waits_delay_us@us,c
  2485  005E78  EC8F  F02E         	call	_util_waits_delay_us	;wreg free
  2486                           
  2487                           ;easat2_util_transmission.c: 311: PORTDbits.RD1 = 0;
  2488  005E7C  9283               	bcf	3971,1,c	;volatile
  2489                           
  2490                           ;easat2_util_transmission.c: 312: util_waits_delay_us((int)(1000/2));
  2491  005E7E  0E01               	movlw	1
  2492  005E80  6E02               	movwf	util_waits_delay_us@us+1,c
  2493  005E82  0EF4               	movlw	244
  2494  005E84  6E01               	movwf	util_waits_delay_us@us,c
  2495  005E86  EC8F  F02E         	call	_util_waits_delay_us	;wreg free
  2496  005E8A  4A06               	infsnz	util_transmit_buzzer_1ms_cycle@j,f,c
  2497  005E8C  2A07               	incf	util_transmit_buzzer_1ms_cycle@j+1,f,c
  2498  005E8E  D7E8               	goto	l2114
  2499  005E90                     l187:
  2500  005E90  0012               	return		;funcret
  2501  005E92                     __end_of_util_transmit_buzzer_1ms_cycle:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           wreg	equ	0xFE8
  2508                           indf2	equ	0xFDF
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513 ;; *************** function _util_waits_delay_us *****************
  2514 ;; Defined at:
  2515 ;;		line 48 in file "easat2_util_waits.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  us              2    0[COMRAM] int 
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  i               2    3[COMRAM] int 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2, status,0
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 0/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2529 ;;      Params:         2       0       0       0       0       0       0
  2530 ;;      Locals:         2       0       0       0       0       0       0
  2531 ;;      Temps:          1       0       0       0       0       0       0
  2532 ;;      Totals:         5       0       0       0       0       0       0
  2533 ;;Total ram usage:        5 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_util_transmit_buzzer_1ms_cycle
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text13
  2543  005D1E                     __ptext13:
  2544                           	opt stack 0
  2545  005D1E                     _util_waits_delay_us:
  2546                           	opt stack 24
  2547                           
  2548                           ;easat2_util_waits.c: 49: for (int i = 0; i < us; i++)
  2549                           
  2550                           ;incstack = 0
  2551  005D1E  0E00               	movlw	0
  2552  005D20  6E05               	movwf	util_waits_delay_us@i+1,c
  2553  005D22  0E00               	movlw	0
  2554  005D24  6E04               	movwf	util_waits_delay_us@i,c
  2555  005D26  D002               	goto	l2104
  2556  005D28  4A04               	infsnz	util_waits_delay_us@i,f,c
  2557  005D2A  2A05               	incf	util_waits_delay_us@i+1,f,c
  2558  005D2C                     l2104:
  2559  005D2C  5001               	movf	util_waits_delay_us@us,w,c
  2560  005D2E  5C04               	subwf	util_waits_delay_us@i,w,c
  2561  005D30  5005               	movf	util_waits_delay_us@i+1,w,c
  2562  005D32  0A80               	xorlw	128
  2563  005D34  6E03               	movwf	??_util_waits_delay_us& (0+255),c
  2564  005D36  5002               	movf	util_waits_delay_us@us+1,w,c
  2565  005D38  0A80               	xorlw	128
  2566  005D3A  5803               	subwfb	??_util_waits_delay_us& (0+255),w,c
  2567  005D3C  B0D8               	btfsc	status,0,c
  2568  005D3E  0012               	return	
  2569  005D40  D7F3               	goto	l2102
  2570  005D42                     __end_of_util_waits_delay_us:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           wreg	equ	0xFE8
  2577                           indf2	equ	0xFDF
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _strlen *****************
  2583 ;; Defined at:
  2584 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strlen.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  s               2    0[COMRAM] PTR const unsigned char 
  2587 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  2588 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  2589 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  2590 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  2591 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  2592 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  2593 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  2594 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  2595 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  2596 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  2597 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  2600 ;;		 -> STR_42(7), STR_41(6), STR_40(7), STR_39(7), 
  2601 ;;		 -> STR_38(6), STR_37(6), STR_36(6), STR_35(6), 
  2602 ;;		 -> STR_34(6), STR_33(6), STR_32(6), STR_31(6), 
  2603 ;;		 -> STR_30(6), STR_29(6), STR_28(5), STR_27(5), 
  2604 ;;		 -> STR_26(5), STR_25(4), STR_24(5), STR_23(4), 
  2605 ;;		 -> STR_22(2), STR_21(4), STR_20(4), STR_19(5), 
  2606 ;;		 -> STR_18(5), STR_17(4), STR_16(3), STR_15(3), 
  2607 ;;		 -> STR_14(5), STR_13(4), STR_12(5), STR_11(3), 
  2608 ;;		 -> STR_10(5), STR_9(4), STR_8(5), STR_7(2), 
  2609 ;;		 -> STR_6(4), STR_5(5), STR_4(5), STR_3(3), 
  2610 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  2    0[COMRAM] unsigned int 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2620 ;;      Params:         2       0       0       0       0       0       0
  2621 ;;      Locals:         2       0       0       0       0       0       0
  2622 ;;      Temps:          2       0       0       0       0       0       0
  2623 ;;      Totals:         6       0       0       0       0       0       0
  2624 ;;Total ram usage:        6 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		_util_beacon_transmission
  2630 ;;		_util_transmit_morse_sequence
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text14
  2635  005F14                     __ptext14:
  2636                           	opt stack 0
  2637  005F14                     _strlen:
  2638                           	opt stack 26
  2639                           
  2640                           ;incstack = 0
  2641  005F14  C001  F005         	movff	strlen@s,strlen@cp
  2642  005F18  C002  F006         	movff	strlen@s+1,strlen@cp+1
  2643  005F1C  D002               	goto	l2166
  2644  005F1E                     l2164:
  2645  005F1E  4A05               	infsnz	strlen@cp,f,c
  2646  005F20  2A06               	incf	strlen@cp+1,f,c
  2647  005F22                     l2166:
  2648  005F22  C005  FFF6         	movff	strlen@cp,tblptrl
  2649  005F26  C006  FFF7         	movff	strlen@cp+1,tblptrh
  2650  005F2A  6AF8               	clrf	tblptru,c
  2651  005F2C  0E05               	movlw	(high __ramtop+-1)
  2652  005F2E  64F7               	cpfsgt	tblptrh,c
  2653  005F30  D003               	bra	u1727
  2654  005F32  0008               	tblrd		*
  2655  005F34  50F5               	movf	tablat,w,c
  2656  005F36  D005               	bra	u1720
  2657  005F38                     u1727:
  2658  005F38  CFF6 FFE9          	movff	tblptrl,fsr0l
  2659  005F3C  CFF7 FFEA          	movff	tblptrh,fsr0h
  2660  005F40  50EF               	movf	indf0,w,c
  2661  005F42                     u1720:
  2662  005F42  0900               	iorlw	0
  2663  005F44  A4D8               	btfss	status,2,c
  2664  005F46  D7EB               	goto	l2164
  2665  005F48  C001  F003         	movff	strlen@s,??_strlen
  2666  005F4C  C002  F004         	movff	strlen@s+1,??_strlen+1
  2667  005F50  1E03               	comf	??_strlen,f,c
  2668  005F52  1E04               	comf	??_strlen+1,f,c
  2669  005F54  4A03               	infsnz	??_strlen,f,c
  2670  005F56  2A04               	incf	??_strlen+1,f,c
  2671  005F58  5005               	movf	strlen@cp,w,c
  2672  005F5A  2403               	addwf	??_strlen,w,c
  2673  005F5C  6E01               	movwf	?_strlen,c
  2674  005F5E  5006               	movf	strlen@cp+1,w,c
  2675  005F60  2004               	addwfc	??_strlen+1,w,c
  2676  005F62  6E02               	movwf	?_strlen+1,c
  2677  005F64  0012               	return	
  2678  005F66                     __end_of_strlen:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           indf0	equ	0xFEF
  2685                           fsr0h	equ	0xFEA
  2686                           fsr0l	equ	0xFE9
  2687                           wreg	equ	0xFE8
  2688                           indf2	equ	0xFDF
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function _strcpy *****************
  2694 ;; Defined at:
  2695 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcpy.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  to              2    0[COMRAM] PTR unsigned char 
  2698 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2699 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2700 ;;		 -> STR_1(7), 
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2703 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2704 ;; Return value:  Size  Location     Type
  2705 ;;                  2    0[COMRAM] PTR unsigned char 
  2706 ;; Registers used:
  2707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2708 ;; Tracked objects:
  2709 ;;		On entry : 0/0
  2710 ;;		On exit  : 0/0
  2711 ;;		Unchanged: 0/0
  2712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2713 ;;      Params:         4       0       0       0       0       0       0
  2714 ;;      Locals:         2       0       0       0       0       0       0
  2715 ;;      Temps:          0       0       0       0       0       0       0
  2716 ;;      Totals:         6       0       0       0       0       0       0
  2717 ;;Total ram usage:        6 bytes
  2718 ;; Hardware stack levels used:    1
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_util_beacon_transmission
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text15
  2727  005DC0                     __ptext15:
  2728                           	opt stack 0
  2729  005DC0                     _strcpy:
  2730                           	opt stack 28
  2731                           
  2732                           ;incstack = 0
  2733  005DC0  C001  F005         	movff	strcpy@to,strcpy@cp
  2734  005DC4  C002  F006         	movff	strcpy@to+1,strcpy@cp+1
  2735  005DC8  D004               	goto	l2754
  2736  005DCA                     l2752:
  2737  005DCA  4A05               	infsnz	strcpy@cp,f,c
  2738  005DCC  2A06               	incf	strcpy@cp+1,f,c
  2739  005DCE  4A03               	infsnz	strcpy@from,f,c
  2740  005DD0  2A04               	incf	strcpy@from+1,f,c
  2741  005DD2                     l2754:
  2742  005DD2  C003  FFF6         	movff	strcpy@from,tblptrl
  2743  005DD6  C004  FFF7         	movff	strcpy@from+1,tblptrh
  2744  005DDA                     	if	0	;tblptru may be non-zero
  2745  005DDA                     	endif
  2746  005DDA                     	if	0	;tblptru may be non-zero
  2747  005DDA                     	endif
  2748  005DDA  C005  FFD9         	movff	strcpy@cp,fsr2l
  2749  005DDE  C006  FFDA         	movff	strcpy@cp+1,fsr2h
  2750  005DE2  0008               	tblrd		*
  2751  005DE4  CFF5 FFDF          	movff	tablat,indf2
  2752  005DE8  50DF               	movf	indf2,w,c
  2753  005DEA  B4D8               	btfsc	status,2,c
  2754  005DEC  0012               	return	
  2755  005DEE  D7ED               	goto	l2752
  2756  005DF0                     __end_of_strcpy:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           indf0	equ	0xFEF
  2763                           fsr0h	equ	0xFEA
  2764                           fsr0l	equ	0xFE9
  2765                           wreg	equ	0xFE8
  2766                           indf2	equ	0xFDF
  2767                           fsr2h	equ	0xFDA
  2768                           fsr2l	equ	0xFD9
  2769                           status	equ	0xFD8
  2770                           
  2771 ;; *************** function _strcat *****************
  2772 ;; Defined at:
  2773 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\strcat.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;  to              2    0[COMRAM] PTR unsigned char 
  2776 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2777 ;;  from            2    2[COMRAM] PTR const unsigned char 
  2778 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  cp              2    4[COMRAM] PTR unsigned char 
  2781 ;;		 -> util_beacon_transmission@BEACON_MESSAGE(128), 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  2    0[COMRAM] PTR unsigned char 
  2784 ;; Registers used:
  2785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 0/0
  2788 ;;		On exit  : 0/0
  2789 ;;		Unchanged: 0/0
  2790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2791 ;;      Params:         4       0       0       0       0       0       0
  2792 ;;      Locals:         2       0       0       0       0       0       0
  2793 ;;      Temps:          0       0       0       0       0       0       0
  2794 ;;      Totals:         6       0       0       0       0       0       0
  2795 ;;Total ram usage:        6 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_util_beacon_transmission
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text16
  2805  005ED2                     __ptext16:
  2806                           	opt stack 0
  2807  005ED2                     _strcat:
  2808                           	opt stack 28
  2809                           
  2810                           ;incstack = 0
  2811  005ED2  C001  F005         	movff	strcat@to,strcat@cp
  2812  005ED6  C002  F006         	movff	strcat@to+1,strcat@cp+1
  2813  005EDA  D002               	goto	l3054
  2814  005EDC                     l3052:
  2815  005EDC  4A05               	infsnz	strcat@cp,f,c
  2816  005EDE  2A06               	incf	strcat@cp+1,f,c
  2817  005EE0                     l3054:
  2818  005EE0  C005  FFD9         	movff	strcat@cp,fsr2l
  2819  005EE4  C006  FFDA         	movff	strcat@cp+1,fsr2h
  2820  005EE8  50DF               	movf	indf2,w,c
  2821  005EEA  B4D8               	btfsc	status,2,c
  2822  005EEC  D005               	goto	l3058
  2823  005EEE  D7F6               	goto	l3052
  2824  005EF0                     l3056:
  2825  005EF0  4A05               	infsnz	strcat@cp,f,c
  2826  005EF2  2A06               	incf	strcat@cp+1,f,c
  2827  005EF4  4A03               	infsnz	strcat@from,f,c
  2828  005EF6  2A04               	incf	strcat@from+1,f,c
  2829  005EF8                     l3058:
  2830  005EF8  C003  FFD9         	movff	strcat@from,fsr2l
  2831  005EFC  C004  FFDA         	movff	strcat@from+1,fsr2h
  2832  005F00  C005  FFE1         	movff	strcat@cp,fsr1l
  2833  005F04  C006  FFE2         	movff	strcat@cp+1,fsr1h
  2834  005F08  CFDF FFE7          	movff	indf2,indf1
  2835  005F0C  50E7               	movf	indf1,w,c
  2836  005F0E  B4D8               	btfsc	status,2,c
  2837  005F10  0012               	return	
  2838  005F12  D7EE               	goto	l3056
  2839  005F14                     __end_of_strcat:
  2840                           	opt stack 0
  2841                           tblptru	equ	0xFF8
  2842                           tblptrh	equ	0xFF7
  2843                           tblptrl	equ	0xFF6
  2844                           tablat	equ	0xFF5
  2845                           indf0	equ	0xFEF
  2846                           fsr0h	equ	0xFEA
  2847                           fsr0l	equ	0xFE9
  2848                           wreg	equ	0xFE8
  2849                           indf1	equ	0xFE7
  2850                           fsr1h	equ	0xFE2
  2851                           fsr1l	equ	0xFE1
  2852                           indf2	equ	0xFDF
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _sprintf *****************
  2858 ;; Defined at:
  2859 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;  sp              2   63[COMRAM] PTR unsigned char 
  2862 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), 
  2863 ;;  f               2   65[COMRAM] PTR const unsigned char 
  2864 ;;		 -> STR_2(23), 
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  val             4   13[BANK0 ] unsigned long 
  2867 ;;  tmpval          4    9[BANK0 ] struct .
  2868 ;;  fval            3   19[BANK0 ] struct .
  2869 ;;  cp              3    0        PTR const unsigned char 
  2870 ;;  prec            2   22[BANK0 ] int 
  2871 ;;  exp             2   17[BANK0 ] int 
  2872 ;;  width           2    7[BANK0 ] int 
  2873 ;;  flag            2    5[BANK0 ] unsigned short 
  2874 ;;  ap              2    3[BANK0 ] PTR void [1]
  2875 ;;		 -> ?_sprintf(2), 
  2876 ;;  len             2    0        unsigned int 
  2877 ;;  c               1   24[BANK0 ] char 
  2878 ;;  d               1    0        unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  2   63[COMRAM] int 
  2881 ;; Registers used:
  2882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2888 ;;      Params:        14       0       0       0       0       0       0
  2889 ;;      Locals:         0      25       0       0       0       0       0
  2890 ;;      Temps:          6       0       0       0       0       0       0
  2891 ;;      Totals:        20      25       0       0       0       0       0
  2892 ;;Total ram usage:       45 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    3
  2895 ;; This function calls:
  2896 ;;		___awdiv
  2897 ;;		___ftadd
  2898 ;;		___ftge
  2899 ;;		___ftmul
  2900 ;;		___ftneg
  2901 ;;		___ftsub
  2902 ;;		___fttol
  2903 ;;		___lldiv
  2904 ;;		___llmod
  2905 ;;		___lltoft
  2906 ;;		___wmul
  2907 ;;		__div_to_l_
  2908 ;;		__tdiv_to_l_
  2909 ;;		_fround
  2910 ;;		_isdigit
  2911 ;;		_scale
  2912 ;; This function is called by:
  2913 ;;		_util_beacon_transmission
  2914 ;; This function uses a non-reentrant model
  2915 ;;
  2916                           
  2917                           	psect	text17
  2918  00740C                     __ptext17:
  2919                           	opt stack 0
  2920  00740C                     _sprintf:
  2921                           	opt stack 25
  2922                           
  2923                           ;doprnt.c: 494: va_list ap;
  2924                           ;doprnt.c: 499: signed char c;
  2925                           ;doprnt.c: 501: int width;
  2926                           ;doprnt.c: 504: int prec;
  2927                           ;doprnt.c: 508: unsigned short flag;
  2928                           ;doprnt.c: 515: char d;
  2929                           ;doprnt.c: 516: double fval;
  2930                           ;doprnt.c: 517: int exp;
  2931                           ;doprnt.c: 523: union {
  2932                           ;doprnt.c: 524: unsigned long vd;
  2933                           ;doprnt.c: 525: double integ;
  2934                           ;doprnt.c: 526: } tmpval;
  2935                           ;doprnt.c: 528: unsigned long val;
  2936                           ;doprnt.c: 529: unsigned len;
  2937                           ;doprnt.c: 530: const char * cp;
  2938                           ;doprnt.c: 533: *ap = __va_start();
  2939                           
  2940                           ;incstack = 0
  2941  00740C  0E44               	movlw	low (?_sprintf+4)
  2942  00740E  0100               	movlb	0	; () banked
  2943  007410  6F63               	movwf	sprintf@ap& (0+255),b
  2944  007412  0E00               	movlw	high (?_sprintf+4)
  2945  007414  0100               	movlb	0	; () banked
  2946  007416  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  2947                           
  2948                           ;doprnt.c: 536: while(c = *f++) {
  2949  007418  EF65  F03F         	goto	l3044
  2950  00741C                     l2758:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;doprnt.c: 538: if(c != '%')
  2954  00741C  0E25               	movlw	37
  2955  00741E  0100               	movlb	0	; () banked
  2956  007420  1978               	xorwf	sprintf@c& (0+255),w,b
  2957  007422  B4D8               	btfsc	status,2,c
  2958  007424  D00A               	goto	l2764
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;doprnt.c: 540: {
  2962                           ;doprnt.c: 541: ((*sp++ = (c)));
  2963  007426  C040  FFD9         	movff	sprintf@sp,fsr2l
  2964  00742A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2965  00742E  C078  FFDF         	movff	sprintf@c,indf2
  2966                           
  2967                           ; BSR set to: 0
  2968  007432  4A40               	infsnz	sprintf@sp,f,c
  2969  007434  2A41               	incf	sprintf@sp+1,f,c
  2970                           
  2971                           ;doprnt.c: 542: continue;
  2972  007436  EF65  F03F         	goto	l3044
  2973  00743A                     l2764:
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;doprnt.c: 543: }
  2977                           ;doprnt.c: 546: width = 0;
  2978  00743A  0E00               	movlw	0
  2979  00743C  0100               	movlb	0	; () banked
  2980  00743E  6F68               	movwf	(sprintf@width+1)& (0+255),b
  2981  007440  0E00               	movlw	0
  2982  007442  6F67               	movwf	sprintf@width& (0+255),b
  2983                           
  2984                           ;doprnt.c: 548: flag = 0;
  2985  007444  0E00               	movlw	0
  2986  007446  0100               	movlb	0	; () banked
  2987  007448  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  2988  00744A  0E00               	movlw	0
  2989  00744C  6F65               	movwf	sprintf@flag& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2993  00744E  C042  FFF6         	movff	sprintf@f,tblptrl
  2994  007452  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2995  007456                     	if	0	;tblptru may be non-zero
  2996  007456                     	endif
  2997  007456                     	if	0	;tblptru may be non-zero
  2998  007456                     	endif
  2999  007456  0008               	tblrd		*
  3000  007458  50F5               	movf	tablat,w,c
  3001  00745A  EC6E  F02E         	call	_isdigit
  3002  00745E  A0D8               	btfss	status,0,c
  3003  007460  D035               	goto	l2778
  3004                           
  3005                           ;doprnt.c: 598: width = 0;
  3006  007462  0E00               	movlw	0
  3007  007464  0100               	movlb	0	; () banked
  3008  007466  6F68               	movwf	(sprintf@width+1)& (0+255),b
  3009  007468  0E00               	movlw	0
  3010  00746A  6F67               	movwf	sprintf@width& (0+255),b
  3011  00746C                     l2770:
  3012                           
  3013                           ;doprnt.c: 600: width *= 10;
  3014  00746C  C067  F00F         	movff	sprintf@width,___wmul@multiplier
  3015  007470  C068  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  3016  007474  0E00               	movlw	0
  3017  007476  6E12               	movwf	___wmul@multiplicand+1,c
  3018  007478  0E0A               	movlw	10
  3019  00747A  6E11               	movwf	___wmul@multiplicand,c
  3020  00747C  ECA1  F02E         	call	___wmul	;wreg free
  3021  007480  C00F  F067         	movff	?___wmul,sprintf@width
  3022  007484  C010  F068         	movff	?___wmul+1,sprintf@width+1
  3023                           
  3024                           ;doprnt.c: 601: width += *f++ - '0';
  3025  007488  0ED0               	movlw	208
  3026  00748A  6E4E               	movwf	??_sprintf& (0+255),c
  3027  00748C  0EFF               	movlw	255
  3028  00748E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3029  007490  C042  FFF6         	movff	sprintf@f,tblptrl
  3030  007494  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3031  007498                     	if	0	;tblptru may be non-zero
  3032  007498                     	endif
  3033  007498                     	if	0	;tblptru may be non-zero
  3034  007498                     	endif
  3035  007498  0008               	tblrd		*
  3036  00749A  50F5               	movf	tablat,w,c
  3037  00749C  6E50               	movwf	(??_sprintf+2)& (0+255),c
  3038  00749E  6A51               	clrf	(??_sprintf+3)& (0+255),c
  3039  0074A0  504E               	movf	??_sprintf,w,c
  3040  0074A2  2650               	addwf	??_sprintf+2,f,c
  3041  0074A4  504F               	movf	??_sprintf+1,w,c
  3042  0074A6  2251               	addwfc	??_sprintf+3,f,c
  3043  0074A8  5050               	movf	??_sprintf+2,w,c
  3044  0074AA  0100               	movlb	0	; () banked
  3045  0074AC  2767               	addwf	sprintf@width& (0+255),f,b
  3046  0074AE  5051               	movf	??_sprintf+3,w,c
  3047  0074B0  0100               	movlb	0	; () banked
  3048  0074B2  2368               	addwfc	(sprintf@width+1)& (0+255),f,b
  3049                           
  3050                           ; BSR set to: 0
  3051  0074B4  4A42               	infsnz	sprintf@f,f,c
  3052  0074B6  2A43               	incf	sprintf@f+1,f,c
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3056  0074B8  C042  FFF6         	movff	sprintf@f,tblptrl
  3057  0074BC  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3058  0074C0                     	if	0	;tblptru may be non-zero
  3059  0074C0                     	endif
  3060  0074C0                     	if	0	;tblptru may be non-zero
  3061  0074C0                     	endif
  3062  0074C0  0008               	tblrd		*
  3063  0074C2  50F5               	movf	tablat,w,c
  3064  0074C4  EC6E  F02E         	call	_isdigit
  3065  0074C8  B0D8               	btfsc	status,0,c
  3066  0074CA  D7D0               	goto	l2770
  3067  0074CC                     l2778:
  3068                           
  3069                           ;doprnt.c: 608: }
  3070                           ;doprnt.c: 611: if(*f == '.') {
  3071  0074CC  C042  FFF6         	movff	sprintf@f,tblptrl
  3072  0074D0  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3073  0074D4                     	if	0	;tblptru may be non-zero
  3074  0074D4                     	endif
  3075  0074D4                     	if	0	;tblptru may be non-zero
  3076  0074D4                     	endif
  3077  0074D4  0008               	tblrd		*
  3078  0074D6  50F5               	movf	tablat,w,c
  3079  0074D8  0A2E               	xorlw	46
  3080  0074DA  A4D8               	btfss	status,2,c
  3081  0074DC  D032               	goto	l2790
  3082                           
  3083                           ;doprnt.c: 612: flag |= 0x4000;
  3084  0074DE  0100               	movlb	0	; () banked
  3085  0074E0  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  3086                           
  3087                           ;doprnt.c: 613: f++;
  3088  0074E2  4A42               	infsnz	sprintf@f,f,c
  3089  0074E4  2A43               	incf	sprintf@f+1,f,c
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;doprnt.c: 620: {
  3093                           ;doprnt.c: 621: prec = 0;
  3094  0074E6  0E00               	movlw	0
  3095  0074E8  0100               	movlb	0	; () banked
  3096  0074EA  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3097  0074EC  0E00               	movlw	0
  3098  0074EE  6F76               	movwf	sprintf@prec& (0+255),b
  3099                           
  3100                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  3101  0074F0  D01D               	goto	l2788
  3102  0074F2                     l2784:
  3103                           
  3104                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  3105  0074F2  C076  F00F         	movff	sprintf@prec,___wmul@multiplier
  3106  0074F6  C077  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  3107  0074FA  0E00               	movlw	0
  3108  0074FC  6E12               	movwf	___wmul@multiplicand+1,c
  3109  0074FE  0E0A               	movlw	10
  3110  007500  6E11               	movwf	___wmul@multiplicand,c
  3111  007502  ECA1  F02E         	call	___wmul	;wreg free
  3112  007506  C042  FFF6         	movff	sprintf@f,tblptrl
  3113  00750A  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3114  00750E                     	if	0	;tblptru may be non-zero
  3115  00750E                     	endif
  3116  00750E                     	if	0	;tblptru may be non-zero
  3117  00750E                     	endif
  3118  00750E  0008               	tblrd		*
  3119  007510  50F5               	movf	tablat,w,c
  3120  007512  260F               	addwf	?___wmul,f,c
  3121  007514  0E00               	movlw	0
  3122  007516  2210               	addwfc	?___wmul+1,f,c
  3123  007518  0ED0               	movlw	208
  3124  00751A  240F               	addwf	?___wmul,w,c
  3125  00751C  0100               	movlb	0	; () banked
  3126  00751E  6F76               	movwf	sprintf@prec& (0+255),b
  3127  007520  0EFF               	movlw	255
  3128  007522  2010               	addwfc	?___wmul+1,w,c
  3129  007524  0100               	movlb	0	; () banked
  3130  007526  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3131                           
  3132                           ; BSR set to: 0
  3133  007528  4A42               	infsnz	sprintf@f,f,c
  3134  00752A  2A43               	incf	sprintf@f+1,f,c
  3135  00752C                     l2788:
  3136                           
  3137                           ; BSR set to: 0
  3138  00752C  C042  FFF6         	movff	sprintf@f,tblptrl
  3139  007530  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3140  007534                     	if	0	;tblptru may be non-zero
  3141  007534                     	endif
  3142  007534                     	if	0	;tblptru may be non-zero
  3143  007534                     	endif
  3144  007534  0008               	tblrd		*
  3145  007536  50F5               	movf	tablat,w,c
  3146  007538  EC6E  F02E         	call	_isdigit
  3147  00753C  A0D8               	btfss	status,0,c
  3148  00753E  D00C               	goto	l2798
  3149  007540  D7D8               	goto	l2784
  3150  007542                     l2790:
  3151                           
  3152                           ;doprnt.c: 626: prec = 0;
  3153  007542  0E00               	movlw	0
  3154  007544  0100               	movlb	0	; () banked
  3155  007546  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3156  007548  0E00               	movlw	0
  3157  00754A  6F76               	movwf	sprintf@prec& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;doprnt.c: 628: flag |= 0x1000;
  3161  00754C  0100               	movlb	0	; () banked
  3162  00754E  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 630: }
  3166                           ;doprnt.c: 635: switch(c = *f++) {
  3167  007550  D003               	goto	l2798
  3168  007552                     l2794:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;doprnt.c: 663: flag |= 0x400;
  3172  007552  0100               	movlb	0	; () banked
  3173  007554  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;doprnt.c: 698: case 'i':
  3177                           ;doprnt.c: 699: break;
  3178                           
  3179                           ; BSR set to: 0
  3180                           
  3181                           ;doprnt.c: 697: case 'd':
  3182                           
  3183                           ;doprnt.c: 664: break;
  3184  007556  D019               	goto	l2800
  3185  007558                     l2798:
  3186  007558  C042  FFF6         	movff	sprintf@f,tblptrl
  3187  00755C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  3188  007560  4A42               	infsnz	sprintf@f,f,c
  3189  007562  2A43               	incf	sprintf@f+1,f,c
  3190  007564                     	if	0	;tblptru may be non-zero
  3191  007564                     	endif
  3192  007564                     	if	0	;tblptru may be non-zero
  3193  007564                     	endif
  3194  007564  0008               	tblrd		*
  3195  007566  CFF5 F078          	movff	tablat,sprintf@c
  3196  00756A  0100               	movlb	0	; () banked
  3197  00756C  5178               	movf	sprintf@c& (0+255),w,b
  3198                           
  3199                           ; Switch size 1, requested type "space"
  3200                           ; Number of cases is 4, Range of values is 0 to 105
  3201                           ; switch strategies available:
  3202                           ; Name         Instructions Cycles
  3203                           ; simple_byte           13     7 (average)
  3204                           ;	Chosen strategy is simple_byte
  3205  00756E  0A00               	xorlw	0	; case 0
  3206  007570  B4D8               	btfsc	status,2,c
  3207  007572  EF73  F03F         	goto	l3046
  3208  007576  0A64               	xorlw	100	; case 100
  3209  007578  B4D8               	btfsc	status,2,c
  3210  00757A  D007               	goto	l2800
  3211  00757C  0A02               	xorlw	2	; case 102
  3212  00757E  B4D8               	btfsc	status,2,c
  3213  007580  D7E8               	goto	l2794
  3214  007582  0A0F               	xorlw	15	; case 105
  3215  007584  A4D8               	btfss	status,2,c
  3216  007586  EF65  F03F         	goto	l3044
  3217  00758A                     l2800:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;doprnt.c: 825: if(flag & (0x700)) {
  3221  00758A  0E07               	movlw	7
  3222  00758C  0100               	movlb	0	; () banked
  3223  00758E  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3224  007590  B4D8               	btfsc	status,2,c
  3225  007592  D34A               	goto	l2964
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;doprnt.c: 827: if(flag & 0x1000)
  3229  007594  0100               	movlb	0	; () banked
  3230  007596  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  3231  007598  D005               	goto	l2806
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;doprnt.c: 829: prec = 6;
  3235  00759A  0E00               	movlw	0
  3236  00759C  0100               	movlb	0	; () banked
  3237  00759E  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  3238  0075A0  0E06               	movlw	6
  3239  0075A2  6F76               	movwf	sprintf@prec& (0+255),b
  3240  0075A4                     l2806:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3244  0075A4  C063  FFD9         	movff	sprintf@ap,fsr2l
  3245  0075A8  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  3246  0075AC  CFDE F073          	movff	postinc2,sprintf@fval
  3247  0075B0  CFDE F074          	movff	postinc2,sprintf@fval+1
  3248  0075B4  CFDD F075          	movff	postdec2,sprintf@fval+2
  3249                           
  3250                           ; BSR set to: 0
  3251  0075B8  0E03               	movlw	3
  3252  0075BA  0100               	movlb	0	; () banked
  3253  0075BC  2763               	addwf	sprintf@ap& (0+255),f,b
  3254  0075BE  0E00               	movlw	0
  3255  0075C0  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 831: if(fval < 0.0) {
  3259  0075C2  0100               	movlb	0	; () banked
  3260  0075C4  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  3261  0075C6  D011               	goto	l2816
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;doprnt.c: 832: fval = -fval;
  3265  0075C8  C073  F001         	movff	sprintf@fval,___ftneg@f1
  3266  0075CC  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  3267  0075D0  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  3268  0075D4  EC7D  F02E         	call	___ftneg	;wreg free
  3269  0075D8  C001  F073         	movff	?___ftneg,sprintf@fval
  3270  0075DC  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  3271  0075E0  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  3272                           
  3273                           ;doprnt.c: 833: flag |= 0x03;
  3274  0075E4  0E03               	movlw	3
  3275  0075E6  0100               	movlb	0	; () banked
  3276  0075E8  1365               	iorwf	sprintf@flag& (0+255),f,b
  3277  0075EA                     l2816:
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;doprnt.c: 834: }
  3281                           ;doprnt.c: 835: exp = 0;
  3282  0075EA  0E00               	movlw	0
  3283  0075EC  0100               	movlb	0	; () banked
  3284  0075EE  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3285  0075F0  0E00               	movlw	0
  3286  0075F2  6F71               	movwf	sprintf@exp& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;doprnt.c: 836: if( fval!=0) {
  3290  0075F4  0100               	movlb	0	; () banked
  3291  0075F6  5173               	movf	sprintf@fval& (0+255),w,b
  3292  0075F8  0100               	movlb	0	; () banked
  3293  0075FA  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3294  0075FC  0100               	movlb	0	; () banked
  3295  0075FE  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3296  007600  B4D8               	btfsc	status,2,c
  3297  007602  D08B               	goto	l2844
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3301  007604  0E82               	movlw	130
  3302  007606  6E4E               	movwf	??_sprintf& (0+255),c
  3303  007608  0EFF               	movlw	255
  3304  00760A  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3305  00760C  C073  F050         	movff	sprintf@fval,??_sprintf+2
  3306  007610  C074  F051         	movff	sprintf@fval+1,??_sprintf+3
  3307  007614  C075  F052         	movff	sprintf@fval+2,??_sprintf+4
  3308  007618  C076  F053         	movff	sprintf@fval+3,??_sprintf+5
  3309  00761C  0E10               	movlw	16
  3310  00761E  D005               	goto	u2740
  3311  007620                     u2745:
  3312  007620  90D8               	bcf	status,0,c
  3313  007622  3253               	rrcf	??_sprintf+5,f,c
  3314  007624  3252               	rrcf	??_sprintf+4,f,c
  3315  007626  3251               	rrcf	??_sprintf+3,f,c
  3316  007628  3250               	rrcf	??_sprintf+2,f,c
  3317  00762A                     u2740:
  3318  00762A  2EE8               	decfsz	wreg,f,c
  3319  00762C  D7F9               	goto	u2745
  3320  00762E  5050               	movf	??_sprintf+2,w,c
  3321  007630  244E               	addwf	??_sprintf,w,c
  3322  007632  0100               	movlb	0	; () banked
  3323  007634  6F71               	movwf	sprintf@exp& (0+255),b
  3324  007636  0E00               	movlw	0
  3325  007638  204F               	addwfc	??_sprintf+1,w,c
  3326  00763A  0100               	movlb	0	; () banked
  3327  00763C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;doprnt.c: 838: exp--;
  3331  00763E  0100               	movlb	0	; () banked
  3332  007640  0771               	decf	sprintf@exp& (0+255),f,b
  3333  007642  A0D8               	btfss	status,0,c
  3334  007644  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 839: exp *= 3;
  3338  007646  C071  F00F         	movff	sprintf@exp,___wmul@multiplier
  3339  00764A  C072  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  3340  00764E  0E00               	movlw	0
  3341  007650  6E12               	movwf	___wmul@multiplicand+1,c
  3342  007652  0E03               	movlw	3
  3343  007654  6E11               	movwf	___wmul@multiplicand,c
  3344  007656  ECA1  F02E         	call	___wmul	;wreg free
  3345  00765A  C00F  F071         	movff	?___wmul,sprintf@exp
  3346  00765E  C010  F072         	movff	?___wmul+1,sprintf@exp+1
  3347                           
  3348                           ;doprnt.c: 840: exp /= 10;
  3349  007662  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  3350  007666  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  3351  00766A  0E00               	movlw	0
  3352  00766C  6E0A               	movwf	___awdiv@divisor+1,c
  3353  00766E  0E0A               	movlw	10
  3354  007670  6E09               	movwf	___awdiv@divisor,c
  3355  007672  ECBD  F030         	call	___awdiv	;wreg free
  3356  007676  C007  F071         	movff	?___awdiv,sprintf@exp
  3357  00767A  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  3358                           
  3359                           ;doprnt.c: 841: if(exp < 0)
  3360  00767E  0100               	movlb	0	; () banked
  3361  007680  AF72               	btfss	(sprintf@exp+1)& (0+255),7,b
  3362  007682  D004               	goto	l2832
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;doprnt.c: 842: exp--;
  3366  007684  0100               	movlb	0	; () banked
  3367  007686  0771               	decf	sprintf@exp& (0+255),f,b
  3368  007688  A0D8               	btfss	status,0,c
  3369  00768A  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3370  00768C                     l2832:
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3374  00768C  0100               	movlb	0	; () banked
  3375  00768E  5171               	movf	sprintf@exp& (0+255),w,b
  3376  007690  0800               	sublw	0
  3377  007692  EC0E  F038         	call	_scale
  3378  007696  C024  F069         	movff	?_scale,sprintf@tmpval
  3379  00769A  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  3380  00769E  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  3381                           
  3382                           ;doprnt.c: 847: tmpval.integ *= fval;
  3383  0076A2  C069  F015         	movff	sprintf@tmpval,___ftmul@f1
  3384  0076A6  C06A  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  3385  0076AA  C06B  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  3386  0076AE  C073  F018         	movff	sprintf@fval,___ftmul@f2
  3387  0076B2  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  3388  0076B6  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  3389  0076BA  ECD2  F032         	call	___ftmul	;wreg free
  3390  0076BE  C015  F069         	movff	?___ftmul,sprintf@tmpval
  3391  0076C2  C016  F06A         	movff	?___ftmul+1,sprintf@tmpval+1
  3392  0076C6  C017  F06B         	movff	?___ftmul+2,sprintf@tmpval+2
  3393                           
  3394                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3395  0076CA  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3396  0076CE  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3397  0076D2  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3398  0076D6  0E00               	movlw	0
  3399  0076D8  6E04               	movwf	___ftge@ff2,c
  3400  0076DA  0E80               	movlw	128
  3401  0076DC  6E05               	movwf	___ftge@ff2+1,c
  3402  0076DE  0E3F               	movlw	63
  3403  0076E0  6E06               	movwf	___ftge@ff2+2,c
  3404  0076E2  ECFF  F030         	call	___ftge	;wreg free
  3405  0076E6  B0D8               	btfsc	status,0,c
  3406  0076E8  D005               	goto	l2840
  3407                           
  3408                           ;doprnt.c: 849: exp--;
  3409  0076EA  0100               	movlb	0	; () banked
  3410  0076EC  0771               	decf	sprintf@exp& (0+255),f,b
  3411  0076EE  A0D8               	btfss	status,0,c
  3412  0076F0  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3413  0076F2  D013               	goto	l2844
  3414  0076F4                     l2840:
  3415                           
  3416                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3417  0076F4  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3418  0076F8  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3419  0076FC  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3420  007700  0E00               	movlw	0
  3421  007702  6E04               	movwf	___ftge@ff2,c
  3422  007704  0E20               	movlw	32
  3423  007706  6E05               	movwf	___ftge@ff2+1,c
  3424  007708  0E41               	movlw	65
  3425  00770A  6E06               	movwf	___ftge@ff2+2,c
  3426  00770C  ECFF  F030         	call	___ftge	;wreg free
  3427  007710  A0D8               	btfss	status,0,c
  3428  007712  D003               	goto	l2844
  3429                           
  3430                           ;doprnt.c: 851: exp++;
  3431  007714  0100               	movlb	0	; () banked
  3432  007716  4B71               	infsnz	sprintf@exp& (0+255),f,b
  3433  007718  2B72               	incf	(sprintf@exp+1)& (0+255),f,b
  3434  00771A                     l2844:
  3435                           
  3436                           ;doprnt.c: 852: }
  3437                           ;doprnt.c: 1112: if(prec <= 12)
  3438  00771A  0100               	movlb	0	; () banked
  3439  00771C  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3440  00771E  D008               	goto	l2846
  3441  007720  0100               	movlb	0	; () banked
  3442  007722  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  3443  007724  E11D               	bnz	l2848
  3444  007726  0E0D               	movlw	13
  3445  007728  0100               	movlb	0	; () banked
  3446  00772A  5D76               	subwf	sprintf@prec& (0+255),w,b
  3447  00772C  B0D8               	btfsc	status,0,c
  3448  00772E  D018               	goto	l2848
  3449  007730                     l2846:
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;doprnt.c: 1113: fval += fround(prec);
  3453  007730  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  3454  007734  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  3455  007738  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  3456  00773C  0100               	movlb	0	; () banked
  3457  00773E  5176               	movf	sprintf@prec& (0+255),w,b
  3458  007740  EC4F  F035         	call	_fround
  3459  007744  C024  F031         	movff	?_fround,___ftadd@f2
  3460  007748  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  3461  00774C  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  3462  007750  EC79  F034         	call	___ftadd	;wreg free
  3463  007754  C02E  F073         	movff	?___ftadd,sprintf@fval
  3464  007758  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  3465  00775C  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  3466  007760                     l2848:
  3467                           
  3468                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3469  007760  0100               	movlb	0	; () banked
  3470  007762  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3471  007764  D008               	goto	l2850
  3472  007766  0100               	movlb	0	; () banked
  3473  007768  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3474  00776A  E126               	bnz	l2856
  3475  00776C  0E0A               	movlw	10
  3476  00776E  0100               	movlb	0	; () banked
  3477  007770  5D71               	subwf	sprintf@exp& (0+255),w,b
  3478  007772  B0D8               	btfsc	status,0,c
  3479  007774  D021               	goto	l2856
  3480  007776                     l2850:
  3481                           
  3482                           ; BSR set to: 0
  3483  007776  0100               	movlb	0	; () banked
  3484  007778  5173               	movf	sprintf@fval& (0+255),w,b
  3485  00777A  0100               	movlb	0	; () banked
  3486  00777C  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  3487  00777E  0100               	movlb	0	; () banked
  3488  007780  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  3489  007782  B4D8               	btfsc	status,2,c
  3490  007784  D05B               	goto	l2870
  3491                           
  3492                           ; BSR set to: 0
  3493  007786  C073  F02B         	movff	sprintf@fval,___fttol@f1
  3494  00778A  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  3495  00778E  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  3496  007792  EC58  F032         	call	___fttol	;wreg free
  3497  007796  502B               	movf	?___fttol,w,c
  3498  007798  102C               	iorwf	?___fttol+1,w,c
  3499  00779A  102D               	iorwf	?___fttol+2,w,c
  3500  00779C  102E               	iorwf	?___fttol+3,w,c
  3501  00779E  A4D8               	btfss	status,2,c
  3502  0077A0  D04D               	goto	l2870
  3503  0077A2  0100               	movlb	0	; () banked
  3504  0077A4  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3505  0077A6  D04A               	goto	l2870
  3506  0077A8  0100               	movlb	0	; () banked
  3507  0077AA  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3508  0077AC  E105               	bnz	l2856
  3509  0077AE  0E02               	movlw	2
  3510  0077B0  0100               	movlb	0	; () banked
  3511  0077B2  5D71               	subwf	sprintf@exp& (0+255),w,b
  3512  0077B4  A0D8               	btfss	status,0,c
  3513  0077B6  D042               	goto	l2870
  3514  0077B8                     l2856:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3518  0077B8  C069  F001         	movff	sprintf@tmpval,___ftge@ff1
  3519  0077BC  C06A  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  3520  0077C0  C06B  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  3521  0077C4  0E70               	movlw	112
  3522  0077C6  6E04               	movwf	___ftge@ff2,c
  3523  0077C8  0E89               	movlw	137
  3524  0077CA  6E05               	movwf	___ftge@ff2+1,c
  3525  0077CC  0E40               	movlw	64
  3526  0077CE  6E06               	movwf	___ftge@ff2+2,c
  3527  0077D0  ECFF  F030         	call	___ftge	;wreg free
  3528  0077D4  B0D8               	btfsc	status,0,c
  3529  0077D6  D003               	goto	l2860
  3530                           
  3531                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3532  0077D8  0100               	movlb	0	; () banked
  3533  0077DA  0EF7               	movlw	247
  3534  0077DC  D002               	goto	L3
  3535  0077DE                     l2860:
  3536                           
  3537                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3538  0077DE  0100               	movlb	0	; () banked
  3539  0077E0  0EF8               	movlw	248
  3540  0077E2                     L3:
  3541  0077E2  2771               	addwf	sprintf@exp& (0+255),f,b
  3542  0077E4  0EFF               	movlw	255
  3543  0077E6  2372               	addwfc	(sprintf@exp+1)& (0+255),f,b
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;doprnt.c: 1124: }
  3547                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3548                           
  3549                           ; BSR set to: 0
  3550  0077E8  0100               	movlb	0	; () banked
  3551  0077EA  5171               	movf	sprintf@exp& (0+255),w,b
  3552  0077EC  EC0E  F038         	call	_scale
  3553  0077F0  C024  F069         	movff	?_scale,sprintf@tmpval
  3554  0077F4  C025  F06A         	movff	?_scale+1,sprintf@tmpval+1
  3555  0077F8  C026  F06B         	movff	?_scale+2,sprintf@tmpval+2
  3556                           
  3557                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3558  0077FC  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  3559  007800  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  3560  007804  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  3561  007808  C069  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  3562  00780C  C06A  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  3563  007810  C06B  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  3564  007814  ECE0  F033         	call	__tdiv_to_l_	;wreg free
  3565  007818  C001  F06D         	movff	?__tdiv_to_l_,sprintf@val
  3566  00781C  C002  F06E         	movff	?__tdiv_to_l_+1,sprintf@val+1
  3567  007820  C003  F06F         	movff	?__tdiv_to_l_+2,sprintf@val+2
  3568  007824  C004  F070         	movff	?__tdiv_to_l_+3,sprintf@val+3
  3569                           
  3570                           ;doprnt.c: 1129: fval = 0.0;
  3571  007828  0E00               	movlw	0
  3572  00782A  0100               	movlb	0	; () banked
  3573  00782C  6F73               	movwf	sprintf@fval& (0+255),b
  3574  00782E  0E00               	movlw	0
  3575  007830  0100               	movlb	0	; () banked
  3576  007832  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  3577  007834  0E00               	movlw	0
  3578  007836  0100               	movlb	0	; () banked
  3579  007838  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  3580                           
  3581                           ;doprnt.c: 1130: } else {
  3582  00783A  D033               	goto	l2874
  3583  00783C                     l2870:
  3584                           
  3585                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3586  00783C  C073  F02B         	movff	sprintf@fval,___fttol@f1
  3587  007840  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  3588  007844  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  3589  007848  EC58  F032         	call	___fttol	;wreg free
  3590  00784C  C02B  F06D         	movff	?___fttol,sprintf@val
  3591  007850  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  3592  007854  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  3593  007858  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  3594                           
  3595                           ;doprnt.c: 1132: fval -= (double)val;
  3596  00785C  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  3597  007860  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  3598  007864  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  3599  007868  C06D  F009         	movff	sprintf@val,___lltoft@c
  3600  00786C  C06E  F00A         	movff	sprintf@val+1,___lltoft@c+1
  3601  007870  C06F  F00B         	movff	sprintf@val+2,___lltoft@c+2
  3602  007874  C070  F00C         	movff	sprintf@val+3,___lltoft@c+3
  3603  007878  ECB3  F02F         	call	___lltoft	;wreg free
  3604  00787C  C009  F03D         	movff	?___lltoft,___ftsub@f2
  3605  007880  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  3606  007884  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  3607  007888  EC49  F02F         	call	___ftsub	;wreg free
  3608  00788C  C03A  F073         	movff	?___ftsub,sprintf@fval
  3609  007890  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  3610  007894  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  3611                           
  3612                           ;doprnt.c: 1133: exp = 0;
  3613  007898  0E00               	movlw	0
  3614  00789A  0100               	movlb	0	; () banked
  3615  00789C  6F72               	movwf	(sprintf@exp+1)& (0+255),b
  3616  00789E  0E00               	movlw	0
  3617  0078A0  6F71               	movwf	sprintf@exp& (0+255),b
  3618  0078A2                     l2874:
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;doprnt.c: 1134: }
  3622                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3623  0078A2  0E01               	movlw	1
  3624  0078A4  0100               	movlb	0	; () banked
  3625  0078A6  6F78               	movwf	sprintf@c& (0+255),b
  3626  0078A8                     l2876:
  3627                           
  3628                           ; BSR set to: 0
  3629  0078A8  0E0A               	movlw	10
  3630  0078AA  0100               	movlb	0	; () banked
  3631  0078AC  1978               	xorwf	sprintf@c& (0+255),w,b
  3632  0078AE  B4D8               	btfsc	status,2,c
  3633  0078B0  D01E               	goto	l2888
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;doprnt.c: 1137: if(val < dpowers[c])
  3637                           
  3638                           ; BSR set to: 0
  3639                           
  3640                           ; BSR set to: 0
  3641  0078B2  0100               	movlb	0	; () banked
  3642  0078B4  5178               	movf	sprintf@c& (0+255),w,b
  3643  0078B6  0D04               	mullw	4
  3644  0078B8  0EF5               	movlw	low _dpowers
  3645  0078BA  24F3               	addwf	prodl,w,c
  3646  0078BC  6EF6               	movwf	tblptrl,c
  3647  0078BE  0E7E               	movlw	high _dpowers
  3648  0078C0  20F4               	addwfc	prodh,w,c
  3649  0078C2  6EF7               	movwf	tblptrh,c
  3650  0078C4                     	if	0	;There are less than 3 active tblptr bytes
  3651  0078C4                     	endif
  3652  0078C4  0009               	tblrd		*+
  3653  0078C6  50F5               	movf	tablat,w,c
  3654  0078C8  0100               	movlb	0	; () banked
  3655  0078CA  5D6D               	subwf	sprintf@val& (0+255),w,b
  3656  0078CC  0009               	tblrd		*+
  3657  0078CE  50F5               	movf	tablat,w,c
  3658  0078D0  0100               	movlb	0	; () banked
  3659  0078D2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  3660  0078D4  0009               	tblrd		*+
  3661  0078D6  50F5               	movf	tablat,w,c
  3662  0078D8  0100               	movlb	0	; () banked
  3663  0078DA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  3664  0078DC  0009               	tblrd		*+
  3665  0078DE  50F5               	movf	tablat,w,c
  3666  0078E0  0100               	movlb	0	; () banked
  3667  0078E2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  3668  0078E4  A0D8               	btfss	status,0,c
  3669  0078E6  D003               	goto	l2888
  3670                           
  3671                           ; BSR set to: 0
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;doprnt.c: 1138: break;
  3677  0078E8  0100               	movlb	0	; () banked
  3678  0078EA  2B78               	incf	sprintf@c& (0+255),f,b
  3679  0078EC  D7DD               	goto	l2876
  3680  0078EE                     l2888:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;doprnt.c: 1142: width -= prec + c + exp;
  3684  0078EE  C078  F04E         	movff	sprintf@c,??_sprintf
  3685  0078F2  6A4F               	clrf	(??_sprintf+1)& (0+255),c
  3686  0078F4  BE4E               	btfsc	??_sprintf& (0+255),7,c
  3687  0078F6  064F               	decf	(??_sprintf+1)& (0+255),f,c
  3688  0078F8  0100               	movlb	0	; () banked
  3689  0078FA  5176               	movf	sprintf@prec& (0+255),w,b
  3690  0078FC  264E               	addwf	??_sprintf,f,c
  3691  0078FE  0100               	movlb	0	; () banked
  3692  007900  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  3693  007902  224F               	addwfc	??_sprintf+1,f,c
  3694  007904  0100               	movlb	0	; () banked
  3695  007906  5171               	movf	sprintf@exp& (0+255),w,b
  3696  007908  264E               	addwf	??_sprintf,f,c
  3697  00790A  0100               	movlb	0	; () banked
  3698  00790C  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3699  00790E  224F               	addwfc	??_sprintf+1,f,c
  3700  007910  504E               	movf	??_sprintf,w,c
  3701  007912  0100               	movlb	0	; () banked
  3702  007914  5F67               	subwf	sprintf@width& (0+255),f,b
  3703  007916  504F               	movf	??_sprintf+1,w,c
  3704  007918  0100               	movlb	0	; () banked
  3705  00791A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  3706                           
  3707                           ;doprnt.c: 1143: if(
  3708                           ;doprnt.c: 1147: prec)
  3709  00791C  0100               	movlb	0	; () banked
  3710  00791E  5176               	movf	sprintf@prec& (0+255),w,b
  3711  007920  0100               	movlb	0	; () banked
  3712  007922  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3713  007924  B4D8               	btfsc	status,2,c
  3714  007926  D004               	goto	l2892
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;doprnt.c: 1148: width--;
  3718  007928  0100               	movlb	0	; () banked
  3719  00792A  0767               	decf	sprintf@width& (0+255),f,b
  3720  00792C  A0D8               	btfss	status,0,c
  3721  00792E  0768               	decf	(sprintf@width+1)& (0+255),f,b
  3722  007930                     l2892:
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;doprnt.c: 1149: if(flag & 0x03)
  3726  007930  0E03               	movlw	3
  3727  007932  0100               	movlb	0	; () banked
  3728  007934  1565               	andwf	sprintf@flag& (0+255),w,b
  3729  007936  6E4E               	movwf	??_sprintf& (0+255),c
  3730  007938  0E00               	movlw	0
  3731  00793A  0100               	movlb	0	; () banked
  3732  00793C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3733  00793E  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3734  007940  504E               	movf	??_sprintf,w,c
  3735  007942  104F               	iorwf	??_sprintf+1,w,c
  3736  007944  B4D8               	btfsc	status,2,c
  3737  007946  D00D               	goto	l2902
  3738  007948  D008               	goto	l2900
  3739  00794A                     l2896:
  3740                           
  3741                           ; BSR set to: 0
  3742                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3743  00794A  C040  FFD9         	movff	sprintf@sp,fsr2l
  3744  00794E  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3745  007952  0E20               	movlw	32
  3746  007954  6EDF               	movwf	indf2,c
  3747                           
  3748                           ; BSR set to: 0
  3749  007956  4A40               	infsnz	sprintf@sp,f,c
  3750  007958  2A41               	incf	sprintf@sp+1,f,c
  3751  00795A                     l2900:
  3752                           
  3753                           ; BSR set to: 0
  3754                           ;doprnt.c: 1182: width--;
  3755  00795A  0100               	movlb	0	; () banked
  3756  00795C  0767               	decf	sprintf@width& (0+255),f,b
  3757  00795E  A0D8               	btfss	status,0,c
  3758  007960  0768               	decf	(sprintf@width+1)& (0+255),f,b
  3759  007962                     l2902:
  3760                           
  3761                           ; BSR set to: 0
  3762  007962  0100               	movlb	0	; () banked
  3763  007964  BF68               	btfsc	(sprintf@width+1)& (0+255),7,b
  3764  007966  D007               	goto	l2904
  3765  007968  0100               	movlb	0	; () banked
  3766  00796A  5168               	movf	(sprintf@width+1)& (0+255),w,b
  3767  00796C  E1EE               	bnz	l2896
  3768  00796E  0100               	movlb	0	; () banked
  3769  007970  0567               	decf	sprintf@width& (0+255),w,b
  3770  007972  B0D8               	btfsc	status,0,c
  3771  007974  D7EA               	goto	l2896
  3772  007976                     l2904:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;doprnt.c: 1183: }
  3776                           ;doprnt.c: 1188: if(flag & 0x03)
  3777  007976  0E03               	movlw	3
  3778  007978  0100               	movlb	0	; () banked
  3779  00797A  1565               	andwf	sprintf@flag& (0+255),w,b
  3780  00797C  6E4E               	movwf	??_sprintf& (0+255),c
  3781  00797E  0E00               	movlw	0
  3782  007980  0100               	movlb	0	; () banked
  3783  007982  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  3784  007984  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  3785  007986  504E               	movf	??_sprintf,w,c
  3786  007988  104F               	iorwf	??_sprintf+1,w,c
  3787  00798A  B4D8               	btfsc	status,2,c
  3788  00798C  D053               	goto	l2918
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3792  00798E  C040  FFD9         	movff	sprintf@sp,fsr2l
  3793  007992  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3794  007996  0E2D               	movlw	45
  3795  007998  D04B               	goto	L4
  3796  00799A                     l2908:
  3797                           
  3798                           ; BSR set to: 0
  3799  00799A  4A40               	infsnz	sprintf@sp,f,c
  3800  00799C  2A41               	incf	sprintf@sp+1,f,c
  3801                           
  3802                           ; BSR set to: 0
  3803                           ;doprnt.c: 1195: }
  3804                           ;doprnt.c: 1196: while(c--) {
  3805  00799E  D04A               	goto	l2918
  3806  0079A0                     l2910:
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;doprnt.c: 1200: {
  3810                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3811  0079A0  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  3812  0079A4  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  3813  0079A8  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  3814  0079AC  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  3815  0079B0  0100               	movlb	0	; () banked
  3816  0079B2  5178               	movf	sprintf@c& (0+255),w,b
  3817  0079B4  0D04               	mullw	4
  3818  0079B6  0EF5               	movlw	low _dpowers
  3819  0079B8  24F3               	addwf	prodl,w,c
  3820  0079BA  6EF6               	movwf	tblptrl,c
  3821  0079BC  0E7E               	movlw	high _dpowers
  3822  0079BE  20F4               	addwfc	prodh,w,c
  3823  0079C0  6EF7               	movwf	tblptrh,c
  3824  0079C2                     	if	0	;There are less than 3 active tblptr bytes
  3825  0079C2                     	endif
  3826  0079C2  0009               	tblrd		*+
  3827  0079C4  CFF5 F005          	movff	tablat,___lldiv@divisor
  3828  0079C8  0009               	tblrd		*+
  3829  0079CA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3830  0079CE  0009               	tblrd		*+
  3831  0079D0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3832  0079D4  000A               	tblrd		*-
  3833  0079D6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3834  0079DA  EC7C  F030         	call	___lldiv	;wreg free
  3835  0079DE  C001  F069         	movff	?___lldiv,sprintf@tmpval
  3836  0079E2  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  3837  0079E6  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  3838  0079EA  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  3839                           
  3840                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3841  0079EE  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  3842  0079F2  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3843  0079F6  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3844  0079FA  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3845  0079FE  0E0A               	movlw	10
  3846  007A00  6E12               	movwf	___llmod@divisor,c
  3847  007A02  0E00               	movlw	0
  3848  007A04  6E13               	movwf	___llmod@divisor+1,c
  3849  007A06  0E00               	movlw	0
  3850  007A08  6E14               	movwf	___llmod@divisor+2,c
  3851  007A0A  0E00               	movlw	0
  3852  007A0C  6E15               	movwf	___llmod@divisor+3,c
  3853  007A0E  EC11  F030         	call	___llmod	;wreg free
  3854  007A12  C00E  F069         	movff	?___llmod,sprintf@tmpval
  3855  007A16  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  3856  007A1A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  3857  007A1E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  3858                           
  3859                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3860  007A22  0100               	movlb	0	; () banked
  3861  007A24  5169               	movf	sprintf@tmpval& (0+255),w,b
  3862  007A26  0F30               	addlw	48
  3863  007A28  C040  FFD9         	movff	sprintf@sp,fsr2l
  3864  007A2C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3865  007A30                     L4:
  3866  007A30  6EDF               	movwf	indf2,c
  3867  007A32  D7B3               	goto	l2908
  3868  007A34                     l2918:
  3869                           
  3870                           ; BSR set to: 0
  3871  007A34  0100               	movlb	0	; () banked
  3872  007A36  0778               	decf	sprintf@c& (0+255),f,b
  3873  007A38  0100               	movlb	0	; () banked
  3874  007A3A  2978               	incf	sprintf@c& (0+255),w,b
  3875  007A3C  B4D8               	btfsc	status,2,c
  3876  007A3E  D00D               	goto	l2926
  3877  007A40  D7AF               	goto	l2910
  3878  007A42                     l2920:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3882  007A42  C040  FFD9         	movff	sprintf@sp,fsr2l
  3883  007A46  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3884  007A4A  0E30               	movlw	48
  3885  007A4C  6EDF               	movwf	indf2,c
  3886                           
  3887                           ; BSR set to: 0
  3888  007A4E  4A40               	infsnz	sprintf@sp,f,c
  3889  007A50  2A41               	incf	sprintf@sp+1,f,c
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;doprnt.c: 1209: exp--;
  3893  007A52  0100               	movlb	0	; () banked
  3894  007A54  0771               	decf	sprintf@exp& (0+255),f,b
  3895  007A56  A0D8               	btfss	status,0,c
  3896  007A58  0772               	decf	(sprintf@exp+1)& (0+255),f,b
  3897  007A5A                     l2926:
  3898                           
  3899                           ; BSR set to: 0
  3900  007A5A  0100               	movlb	0	; () banked
  3901  007A5C  BF72               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3902  007A5E  D007               	goto	l2928
  3903  007A60  0100               	movlb	0	; () banked
  3904  007A62  5172               	movf	(sprintf@exp+1)& (0+255),w,b
  3905  007A64  E1EE               	bnz	l2920
  3906  007A66  0100               	movlb	0	; () banked
  3907  007A68  0571               	decf	sprintf@exp& (0+255),w,b
  3908  007A6A  B0D8               	btfsc	status,0,c
  3909  007A6C  D7EA               	goto	l2920
  3910  007A6E                     l2928:
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;doprnt.c: 1210: }
  3914                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3915  007A6E  0100               	movlb	0	; () banked
  3916  007A70  BF77               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3917  007A72  D00C               	goto	l275
  3918  007A74  0100               	movlb	0	; () banked
  3919  007A76  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  3920  007A78  E105               	bnz	u2930
  3921  007A7A  0E09               	movlw	9
  3922  007A7C  0100               	movlb	0	; () banked
  3923  007A7E  5D76               	subwf	sprintf@prec& (0+255),w,b
  3924  007A80  A0D8               	btfss	status,0,c
  3925  007A82  D004               	goto	l275
  3926  007A84                     u2930:
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3930  007A84  0E08               	movlw	8
  3931  007A86  0100               	movlb	0	; () banked
  3932  007A88  6F78               	movwf	sprintf@c& (0+255),b
  3933  007A8A  D002               	goto	l2932
  3934  007A8C                     l275:
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;doprnt.c: 1213: else
  3938                           ;doprnt.c: 1214: c = prec;
  3939  007A8C  C076  F078         	movff	sprintf@prec,sprintf@c
  3940  007A90                     l2932:
  3941                           
  3942                           ; BSR set to: 0
  3943                           ;doprnt.c: 1215: prec -= c;
  3944  007A90  0100               	movlb	0	; () banked
  3945  007A92  5178               	movf	sprintf@c& (0+255),w,b
  3946  007A94  0100               	movlb	0	; () banked
  3947  007A96  5F76               	subwf	sprintf@prec& (0+255),f,b
  3948  007A98  0E00               	movlw	0
  3949  007A9A  0100               	movlb	0	; () banked
  3950  007A9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  3951  007A9E  0EFF               	movlw	255
  3952  007AA0  0100               	movlb	0	; () banked
  3953  007AA2  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;doprnt.c: 1219: if(c)
  3957  007AA4  0100               	movlb	0	; () banked
  3958  007AA6  5178               	movf	sprintf@c& (0+255),w,b
  3959  007AA8  0100               	movlb	0	; () banked
  3960  007AAA  B4D8               	btfsc	status,2,c
  3961  007AAC  D008               	goto	l2940
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3965  007AAE  C040  FFD9         	movff	sprintf@sp,fsr2l
  3966  007AB2  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  3967  007AB6  0E2E               	movlw	46
  3968  007AB8  6EDF               	movwf	indf2,c
  3969                           
  3970                           ; BSR set to: 0
  3971  007ABA  4A40               	infsnz	sprintf@sp,f,c
  3972  007ABC  2A41               	incf	sprintf@sp+1,f,c
  3973  007ABE                     l2940:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3977  007ABE  0100               	movlb	0	; () banked
  3978  007AC0  5178               	movf	sprintf@c& (0+255),w,b
  3979  007AC2  EC0E  F038         	call	_scale
  3980  007AC6  C024  F060         	movff	?_scale,_sprintf$960
  3981  007ACA  C025  F061         	movff	?_scale+1,_sprintf$960+1
  3982  007ACE  C026  F062         	movff	?_scale+2,_sprintf$960+2
  3983                           
  3984                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3985  007AD2  C073  F018         	movff	sprintf@fval,___ftmul@f2
  3986  007AD6  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  3987  007ADA  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  3988  007ADE  C060  F015         	movff	_sprintf$960,___ftmul@f1
  3989  007AE2  C061  F016         	movff	_sprintf$960+1,___ftmul@f1+1
  3990  007AE6  C062  F017         	movff	_sprintf$960+2,___ftmul@f1+2
  3991  007AEA  ECD2  F032         	call	___ftmul	;wreg free
  3992  007AEE  C015  F02B         	movff	?___ftmul,___fttol@f1
  3993  007AF2  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  3994  007AF6  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  3995  007AFA  EC58  F032         	call	___fttol	;wreg free
  3996  007AFE  C02B  F06D         	movff	?___fttol,sprintf@val
  3997  007B02  C02C  F06E         	movff	?___fttol+1,sprintf@val+1
  3998  007B06  C02D  F06F         	movff	?___fttol+2,sprintf@val+2
  3999  007B0A  C02E  F070         	movff	?___fttol+3,sprintf@val+3
  4000                           
  4001                           ;doprnt.c: 1228: while(c--) {
  4002  007B0E  D072               	goto	l2954
  4003  007B10                     l2944:
  4004                           
  4005                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4006  007B10  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  4007  007B14  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4008  007B18  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4009  007B1C  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4010  007B20  0100               	movlb	0	; () banked
  4011  007B22  5178               	movf	sprintf@c& (0+255),w,b
  4012  007B24  0D04               	mullw	4
  4013  007B26  0EF5               	movlw	low _dpowers
  4014  007B28  24F3               	addwf	prodl,w,c
  4015  007B2A  6EF6               	movwf	tblptrl,c
  4016  007B2C  0E7E               	movlw	high _dpowers
  4017  007B2E  20F4               	addwfc	prodh,w,c
  4018  007B30  6EF7               	movwf	tblptrh,c
  4019  007B32                     	if	0	;There are less than 3 active tblptr bytes
  4020  007B32                     	endif
  4021  007B32  0009               	tblrd		*+
  4022  007B34  CFF5 F005          	movff	tablat,___lldiv@divisor
  4023  007B38  0009               	tblrd		*+
  4024  007B3A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4025  007B3E  0009               	tblrd		*+
  4026  007B40  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4027  007B44  000A               	tblrd		*-
  4028  007B46  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4029  007B4A  EC7C  F030         	call	___lldiv	;wreg free
  4030  007B4E  C001  F069         	movff	?___lldiv,sprintf@tmpval
  4031  007B52  C002  F06A         	movff	?___lldiv+1,sprintf@tmpval+1
  4032  007B56  C003  F06B         	movff	?___lldiv+2,sprintf@tmpval+2
  4033  007B5A  C004  F06C         	movff	?___lldiv+3,sprintf@tmpval+3
  4034                           
  4035                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4036  007B5E  C069  F00E         	movff	sprintf@tmpval,___llmod@dividend
  4037  007B62  C06A  F00F         	movff	sprintf@tmpval+1,___llmod@dividend+1
  4038  007B66  C06B  F010         	movff	sprintf@tmpval+2,___llmod@dividend+2
  4039  007B6A  C06C  F011         	movff	sprintf@tmpval+3,___llmod@dividend+3
  4040  007B6E  0E0A               	movlw	10
  4041  007B70  6E12               	movwf	___llmod@divisor,c
  4042  007B72  0E00               	movlw	0
  4043  007B74  6E13               	movwf	___llmod@divisor+1,c
  4044  007B76  0E00               	movlw	0
  4045  007B78  6E14               	movwf	___llmod@divisor+2,c
  4046  007B7A  0E00               	movlw	0
  4047  007B7C  6E15               	movwf	___llmod@divisor+3,c
  4048  007B7E  EC11  F030         	call	___llmod	;wreg free
  4049  007B82  C00E  F069         	movff	?___llmod,sprintf@tmpval
  4050  007B86  C00F  F06A         	movff	?___llmod+1,sprintf@tmpval+1
  4051  007B8A  C010  F06B         	movff	?___llmod+2,sprintf@tmpval+2
  4052  007B8E  C011  F06C         	movff	?___llmod+3,sprintf@tmpval+3
  4053                           
  4054                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4055  007B92  0100               	movlb	0	; () banked
  4056  007B94  5169               	movf	sprintf@tmpval& (0+255),w,b
  4057  007B96  0F30               	addlw	48
  4058  007B98  C040  FFD9         	movff	sprintf@sp,fsr2l
  4059  007B9C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4060  007BA0  6EDF               	movwf	indf2,c
  4061                           
  4062                           ; BSR set to: 0
  4063  007BA2  4A40               	infsnz	sprintf@sp,f,c
  4064  007BA4  2A41               	incf	sprintf@sp+1,f,c
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;doprnt.c: 1232: val %= dpowers[c];
  4068  007BA6  C06D  F00E         	movff	sprintf@val,___llmod@dividend
  4069  007BAA  C06E  F00F         	movff	sprintf@val+1,___llmod@dividend+1
  4070  007BAE  C06F  F010         	movff	sprintf@val+2,___llmod@dividend+2
  4071  007BB2  C070  F011         	movff	sprintf@val+3,___llmod@dividend+3
  4072  007BB6  0100               	movlb	0	; () banked
  4073  007BB8  5178               	movf	sprintf@c& (0+255),w,b
  4074  007BBA  0D04               	mullw	4
  4075  007BBC  0EF5               	movlw	low _dpowers
  4076  007BBE  24F3               	addwf	prodl,w,c
  4077  007BC0  6EF6               	movwf	tblptrl,c
  4078  007BC2  0E7E               	movlw	high _dpowers
  4079  007BC4  20F4               	addwfc	prodh,w,c
  4080  007BC6  6EF7               	movwf	tblptrh,c
  4081  007BC8                     	if	0	;There are less than 3 active tblptr bytes
  4082  007BC8                     	endif
  4083  007BC8  0009               	tblrd		*+
  4084  007BCA  CFF5 F012          	movff	tablat,___llmod@divisor
  4085  007BCE  0009               	tblrd		*+
  4086  007BD0  CFF5 F013          	movff	tablat,___llmod@divisor+1
  4087  007BD4  0009               	tblrd		*+
  4088  007BD6  CFF5 F014          	movff	tablat,___llmod@divisor+2
  4089  007BDA  000A               	tblrd		*-
  4090  007BDC  CFF5 F015          	movff	tablat,___llmod@divisor+3
  4091  007BE0  EC11  F030         	call	___llmod	;wreg free
  4092  007BE4  C00E  F06D         	movff	?___llmod,sprintf@val
  4093  007BE8  C00F  F06E         	movff	?___llmod+1,sprintf@val+1
  4094  007BEC  C010  F06F         	movff	?___llmod+2,sprintf@val+2
  4095  007BF0  C011  F070         	movff	?___llmod+3,sprintf@val+3
  4096  007BF4                     l2954:
  4097  007BF4  0100               	movlb	0	; () banked
  4098  007BF6  0778               	decf	sprintf@c& (0+255),f,b
  4099  007BF8  0100               	movlb	0	; () banked
  4100  007BFA  2978               	incf	sprintf@c& (0+255),w,b
  4101  007BFC  B4D8               	btfsc	status,2,c
  4102  007BFE  D00D               	goto	l2962
  4103  007C00  D787               	goto	l2944
  4104  007C02                     l2956:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4108  007C02  C040  FFD9         	movff	sprintf@sp,fsr2l
  4109  007C06  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4110  007C0A  0E30               	movlw	48
  4111  007C0C  6EDF               	movwf	indf2,c
  4112                           
  4113                           ; BSR set to: 0
  4114  007C0E  4A40               	infsnz	sprintf@sp,f,c
  4115  007C10  2A41               	incf	sprintf@sp+1,f,c
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;doprnt.c: 1237: prec--;
  4119  007C12  0100               	movlb	0	; () banked
  4120  007C14  0776               	decf	sprintf@prec& (0+255),f,b
  4121  007C16  A0D8               	btfss	status,0,c
  4122  007C18  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4123  007C1A                     l2962:
  4124                           
  4125                           ; BSR set to: 0
  4126  007C1A  0100               	movlb	0	; () banked
  4127  007C1C  5176               	movf	sprintf@prec& (0+255),w,b
  4128  007C1E  0100               	movlb	0	; () banked
  4129  007C20  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4130  007C22  B4D8               	btfsc	status,2,c
  4131  007C24  D152               	goto	l3044
  4132  007C26  D7ED               	goto	l2956
  4133  007C28                     l2964:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;doprnt.c: 1246: }
  4137                           ;doprnt.c: 1253: {
  4138                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4139  007C28  C063  FFD9         	movff	sprintf@ap,fsr2l
  4140  007C2C  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  4141  007C30  CFDE F06D          	movff	postinc2,sprintf@val
  4142  007C34  CFDD F06E          	movff	postdec2,sprintf@val+1
  4143  007C38  0100               	movlb	0	; () banked
  4144  007C3A  0E00               	movlw	0
  4145  007C3C  BF6E               	btfsc	(sprintf@val+1)& (0+255),7,b
  4146  007C3E  0EFF               	movlw	-1
  4147  007C40  6F6F               	movwf	(sprintf@val+2)& (0+255),b
  4148  007C42  6F70               	movwf	(sprintf@val+3)& (0+255),b
  4149                           
  4150                           ; BSR set to: 0
  4151  007C44  0E02               	movlw	2
  4152  007C46  0100               	movlb	0	; () banked
  4153  007C48  2763               	addwf	sprintf@ap& (0+255),f,b
  4154  007C4A  0E00               	movlw	0
  4155  007C4C  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;doprnt.c: 1261: if((long)val < 0) {
  4159  007C4E  0100               	movlb	0	; () banked
  4160  007C50  AF70               	btfss	(sprintf@val+3)& (0+255),7,b
  4161  007C52  D00C               	goto	l2974
  4162                           
  4163                           ; BSR set to: 0
  4164                           ;doprnt.c: 1262: flag |= 0x03;
  4165  007C54  0E03               	movlw	3
  4166  007C56  0100               	movlb	0	; () banked
  4167  007C58  1365               	iorwf	sprintf@flag& (0+255),f,b
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;doprnt.c: 1263: val = -val;
  4171  007C5A  0100               	movlb	0	; () banked
  4172  007C5C  1F70               	comf	(sprintf@val+3)& (0+255),f,b
  4173  007C5E  1F6F               	comf	(sprintf@val+2)& (0+255),f,b
  4174  007C60  1F6E               	comf	(sprintf@val+1)& (0+255),f,b
  4175  007C62  6D6D               	negf	sprintf@val& (0+255),b
  4176  007C64  0E00               	movlw	0
  4177  007C66  236E               	addwfc	(sprintf@val+1)& (0+255),f,b
  4178  007C68  236F               	addwfc	(sprintf@val+2)& (0+255),f,b
  4179  007C6A  2370               	addwfc	(sprintf@val+3)& (0+255),f,b
  4180  007C6C                     l2974:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;doprnt.c: 1264: }
  4184                           ;doprnt.c: 1266: }
  4185                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4186  007C6C  0100               	movlb	0	; () banked
  4187  007C6E  5176               	movf	sprintf@prec& (0+255),w,b
  4188  007C70  0100               	movlb	0	; () banked
  4189  007C72  1177               	iorwf	(sprintf@prec+1)& (0+255),w,b
  4190  007C74  A4D8               	btfss	status,2,c
  4191  007C76  D00D               	goto	l2980
  4192                           
  4193                           ; BSR set to: 0
  4194  007C78  0100               	movlb	0	; () banked
  4195  007C7A  516D               	movf	sprintf@val& (0+255),w,b
  4196  007C7C  0100               	movlb	0	; () banked
  4197  007C7E  116E               	iorwf	(sprintf@val+1)& (0+255),w,b
  4198  007C80  0100               	movlb	0	; () banked
  4199  007C82  116F               	iorwf	(sprintf@val+2)& (0+255),w,b
  4200  007C84  0100               	movlb	0	; () banked
  4201  007C86  1170               	iorwf	(sprintf@val+3)& (0+255),w,b
  4202  007C88  A4D8               	btfss	status,2,c
  4203  007C8A  D003               	goto	l2980
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;doprnt.c: 1291: prec++;
  4207  007C8C  0100               	movlb	0	; () banked
  4208  007C8E  4B76               	infsnz	sprintf@prec& (0+255),f,b
  4209  007C90  2B77               	incf	(sprintf@prec+1)& (0+255),f,b
  4210  007C92                     l2980:
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4214  007C92  0E01               	movlw	1
  4215  007C94  0100               	movlb	0	; () banked
  4216  007C96  6F78               	movwf	sprintf@c& (0+255),b
  4217  007C98                     l2982:
  4218                           
  4219                           ; BSR set to: 0
  4220  007C98  0E0A               	movlw	10
  4221  007C9A  0100               	movlb	0	; () banked
  4222  007C9C  1978               	xorwf	sprintf@c& (0+255),w,b
  4223  007C9E  B4D8               	btfsc	status,2,c
  4224  007CA0  D01E               	goto	l2994
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 1306: if(val < dpowers[c])
  4228                           
  4229                           ; BSR set to: 0
  4230                           
  4231                           ; BSR set to: 0
  4232  007CA2  0100               	movlb	0	; () banked
  4233  007CA4  5178               	movf	sprintf@c& (0+255),w,b
  4234  007CA6  0D04               	mullw	4
  4235  007CA8  0EF5               	movlw	low _dpowers
  4236  007CAA  24F3               	addwf	prodl,w,c
  4237  007CAC  6EF6               	movwf	tblptrl,c
  4238  007CAE  0E7E               	movlw	high _dpowers
  4239  007CB0  20F4               	addwfc	prodh,w,c
  4240  007CB2  6EF7               	movwf	tblptrh,c
  4241  007CB4                     	if	0	;There are less than 3 active tblptr bytes
  4242  007CB4                     	endif
  4243  007CB4  0009               	tblrd		*+
  4244  007CB6  50F5               	movf	tablat,w,c
  4245  007CB8  0100               	movlb	0	; () banked
  4246  007CBA  5D6D               	subwf	sprintf@val& (0+255),w,b
  4247  007CBC  0009               	tblrd		*+
  4248  007CBE  50F5               	movf	tablat,w,c
  4249  007CC0  0100               	movlb	0	; () banked
  4250  007CC2  596E               	subwfb	(sprintf@val+1)& (0+255),w,b
  4251  007CC4  0009               	tblrd		*+
  4252  007CC6  50F5               	movf	tablat,w,c
  4253  007CC8  0100               	movlb	0	; () banked
  4254  007CCA  596F               	subwfb	(sprintf@val+2)& (0+255),w,b
  4255  007CCC  0009               	tblrd		*+
  4256  007CCE  50F5               	movf	tablat,w,c
  4257  007CD0  0100               	movlb	0	; () banked
  4258  007CD2  5970               	subwfb	(sprintf@val+3)& (0+255),w,b
  4259  007CD4  A0D8               	btfss	status,0,c
  4260  007CD6  D003               	goto	l2994
  4261                           
  4262                           ; BSR set to: 0
  4263                           
  4264                           ; BSR set to: 0
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;doprnt.c: 1307: break;
  4268  007CD8  0100               	movlb	0	; () banked
  4269  007CDA  2B78               	incf	sprintf@c& (0+255),f,b
  4270  007CDC  D7DD               	goto	l2982
  4271  007CDE                     l2994:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1339: if(c < prec)
  4275  007CDE  0E80               	movlw	128
  4276  007CE0  0100               	movlb	0	; () banked
  4277  007CE2  BF78               	btfsc	sprintf@c& (0+255),7,b
  4278  007CE4  0E7F               	movlw	127
  4279  007CE6  6E4E               	movwf	??_sprintf& (0+255),c
  4280  007CE8  0100               	movlb	0	; () banked
  4281  007CEA  5176               	movf	sprintf@prec& (0+255),w,b
  4282  007CEC  0100               	movlb	0	; () banked
  4283  007CEE  5D78               	subwf	sprintf@c& (0+255),w,b
  4284  007CF0  0100               	movlb	0	; () banked
  4285  007CF2  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4286  007CF4  0A80               	xorlw	128
  4287  007CF6  584E               	subwfb	??_sprintf& (0+255),w,c
  4288  007CF8  B0D8               	btfsc	status,0,c
  4289  007CFA  D003               	goto	l2998
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;doprnt.c: 1340: c = prec;
  4293  007CFC  C076  F078         	movff	sprintf@prec,sprintf@c
  4294  007D00  D016               	goto	l3002
  4295  007D02                     l2998:
  4296                           
  4297                           ; BSR set to: 0
  4298                           ;doprnt.c: 1341: else if(prec < c)
  4299  007D02  0100               	movlb	0	; () banked
  4300  007D04  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4301  007D06  0A80               	xorlw	128
  4302  007D08  6E4E               	movwf	??_sprintf& (0+255),c
  4303  007D0A  0100               	movlb	0	; () banked
  4304  007D0C  5178               	movf	sprintf@c& (0+255),w,b
  4305  007D0E  0100               	movlb	0	; () banked
  4306  007D10  5D76               	subwf	sprintf@prec& (0+255),w,b
  4307  007D12  0E80               	movlw	128
  4308  007D14  0100               	movlb	0	; () banked
  4309  007D16  BF78               	btfsc	sprintf@c& (0+255),7,b
  4310  007D18  0E7F               	movlw	127
  4311  007D1A  584E               	subwfb	??_sprintf& (0+255),w,c
  4312  007D1C  B0D8               	btfsc	status,0,c
  4313  007D1E  D007               	goto	l3002
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;doprnt.c: 1342: prec = c;
  4317  007D20  0100               	movlb	0	; () banked
  4318  007D22  5178               	movf	sprintf@c& (0+255),w,b
  4319  007D24  0100               	movlb	0	; () banked
  4320  007D26  6F76               	movwf	sprintf@prec& (0+255),b
  4321  007D28  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  4322  007D2A  BF76               	btfsc	sprintf@prec& (0+255),7,b
  4323  007D2C  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4324  007D2E                     l3002:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4328  007D2E  0100               	movlb	0	; () banked
  4329  007D30  5167               	movf	sprintf@width& (0+255),w,b
  4330  007D32  0100               	movlb	0	; () banked
  4331  007D34  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4332  007D36  B4D8               	btfsc	status,2,c
  4333  007D38  D010               	goto	l3008
  4334                           
  4335                           ; BSR set to: 0
  4336  007D3A  0E03               	movlw	3
  4337  007D3C  0100               	movlb	0	; () banked
  4338  007D3E  1565               	andwf	sprintf@flag& (0+255),w,b
  4339  007D40  6E4E               	movwf	??_sprintf& (0+255),c
  4340  007D42  0E00               	movlw	0
  4341  007D44  0100               	movlb	0	; () banked
  4342  007D46  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  4343  007D48  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  4344  007D4A  504E               	movf	??_sprintf,w,c
  4345  007D4C  104F               	iorwf	??_sprintf+1,w,c
  4346  007D4E  B4D8               	btfsc	status,2,c
  4347  007D50  D004               	goto	l3008
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;doprnt.c: 1346: width--;
  4351  007D52  0100               	movlb	0	; () banked
  4352  007D54  0767               	decf	sprintf@width& (0+255),f,b
  4353  007D56  A0D8               	btfss	status,0,c
  4354  007D58  0768               	decf	(sprintf@width+1)& (0+255),f,b
  4355  007D5A                     l3008:
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;doprnt.c: 1348: if(flag & 0x4000) {
  4359  007D5A  0100               	movlb	0	; () banked
  4360  007D5C  AD66               	btfss	(sprintf@flag+1)& (0+255),6,b
  4361  007D5E  D01C               	goto	l3016
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;doprnt.c: 1349: if(width > prec)
  4365  007D60  0100               	movlb	0	; () banked
  4366  007D62  5167               	movf	sprintf@width& (0+255),w,b
  4367  007D64  0100               	movlb	0	; () banked
  4368  007D66  5D76               	subwf	sprintf@prec& (0+255),w,b
  4369  007D68  0100               	movlb	0	; () banked
  4370  007D6A  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4371  007D6C  0A80               	xorlw	128
  4372  007D6E  6E4E               	movwf	??_sprintf& (0+255),c
  4373  007D70  0100               	movlb	0	; () banked
  4374  007D72  5168               	movf	(sprintf@width+1)& (0+255),w,b
  4375  007D74  0A80               	xorlw	128
  4376  007D76  584E               	subwfb	??_sprintf& (0+255),w,c
  4377  007D78  B0D8               	btfsc	status,0,c
  4378  007D7A  D009               	goto	l3014
  4379                           
  4380                           ; BSR set to: 0
  4381                           ;doprnt.c: 1350: width -= prec;
  4382  007D7C  0100               	movlb	0	; () banked
  4383  007D7E  5176               	movf	sprintf@prec& (0+255),w,b
  4384  007D80  0100               	movlb	0	; () banked
  4385  007D82  5F67               	subwf	sprintf@width& (0+255),f,b
  4386  007D84  0100               	movlb	0	; () banked
  4387  007D86  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  4388  007D88  0100               	movlb	0	; () banked
  4389  007D8A  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  4390  007D8C  D005               	goto	l3016
  4391  007D8E                     l3014:
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;doprnt.c: 1351: else
  4395                           ;doprnt.c: 1352: width = 0;
  4396  007D8E  0E00               	movlw	0
  4397  007D90  0100               	movlb	0	; () banked
  4398  007D92  6F68               	movwf	(sprintf@width+1)& (0+255),b
  4399  007D94  0E00               	movlw	0
  4400  007D96  6F67               	movwf	sprintf@width& (0+255),b
  4401  007D98                     l3016:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;doprnt.c: 1353: }
  4405                           ;doprnt.c: 1381: if(width > c)
  4406  007D98  0E80               	movlw	128
  4407  007D9A  0100               	movlb	0	; () banked
  4408  007D9C  BF78               	btfsc	sprintf@c& (0+255),7,b
  4409  007D9E  0E7F               	movlw	127
  4410  007DA0  6E4E               	movwf	??_sprintf& (0+255),c
  4411  007DA2  0100               	movlb	0	; () banked
  4412  007DA4  5167               	movf	sprintf@width& (0+255),w,b
  4413  007DA6  0100               	movlb	0	; () banked
  4414  007DA8  5D78               	subwf	sprintf@c& (0+255),w,b
  4415  007DAA  0100               	movlb	0	; () banked
  4416  007DAC  5168               	movf	(sprintf@width+1)& (0+255),w,b
  4417  007DAE  0A80               	xorlw	128
  4418  007DB0  584E               	subwfb	??_sprintf& (0+255),w,c
  4419  007DB2  B0D8               	btfsc	status,0,c
  4420  007DB4  D00B               	goto	l3020
  4421                           
  4422                           ; BSR set to: 0
  4423                           ;doprnt.c: 1382: width -= c;
  4424  007DB6  0100               	movlb	0	; () banked
  4425  007DB8  5178               	movf	sprintf@c& (0+255),w,b
  4426  007DBA  0100               	movlb	0	; () banked
  4427  007DBC  5F67               	subwf	sprintf@width& (0+255),f,b
  4428  007DBE  0E00               	movlw	0
  4429  007DC0  0100               	movlb	0	; () banked
  4430  007DC2  BF78               	btfsc	sprintf@c& (0+255),7,b
  4431  007DC4  0EFF               	movlw	255
  4432  007DC6  0100               	movlb	0	; () banked
  4433  007DC8  5B68               	subwfb	(sprintf@width+1)& (0+255),f,b
  4434  007DCA  D005               	goto	l3022
  4435  007DCC                     l3020:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;doprnt.c: 1383: else
  4439                           ;doprnt.c: 1384: width = 0;
  4440  007DCC  0E00               	movlw	0
  4441  007DCE  0100               	movlb	0	; () banked
  4442  007DD0  6F68               	movwf	(sprintf@width+1)& (0+255),b
  4443  007DD2  0E00               	movlw	0
  4444  007DD4  6F67               	movwf	sprintf@width& (0+255),b
  4445  007DD6                     l3022:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;doprnt.c: 1422: {
  4449                           ;doprnt.c: 1424: if(width
  4450                           ;doprnt.c: 1428: )
  4451  007DD6  0100               	movlb	0	; () banked
  4452  007DD8  5167               	movf	sprintf@width& (0+255),w,b
  4453  007DDA  0100               	movlb	0	; () banked
  4454  007DDC  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4455  007DDE  B4D8               	btfsc	status,2,c
  4456  007DE0  D012               	goto	l3030
  4457  007DE2                     l3024:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  4461  007DE2  C040  FFD9         	movff	sprintf@sp,fsr2l
  4462  007DE6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4463  007DEA  0E20               	movlw	32
  4464  007DEC  6EDF               	movwf	indf2,c
  4465                           
  4466                           ; BSR set to: 0
  4467  007DEE  4A40               	infsnz	sprintf@sp,f,c
  4468  007DF0  2A41               	incf	sprintf@sp+1,f,c
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;doprnt.c: 1431: while(--width);
  4472  007DF2  0100               	movlb	0	; () banked
  4473  007DF4  0767               	decf	sprintf@width& (0+255),f,b
  4474  007DF6  A0D8               	btfss	status,0,c
  4475  007DF8  0768               	decf	(sprintf@width+1)& (0+255),f,b
  4476  007DFA  0100               	movlb	0	; () banked
  4477  007DFC  5167               	movf	sprintf@width& (0+255),w,b
  4478  007DFE  0100               	movlb	0	; () banked
  4479  007E00  1168               	iorwf	(sprintf@width+1)& (0+255),w,b
  4480  007E02  A4D8               	btfss	status,2,c
  4481  007E04  D7EE               	goto	l3024
  4482  007E06                     l3030:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;doprnt.c: 1438: if(flag & 0x03)
  4486  007E06  0E03               	movlw	3
  4487  007E08  0100               	movlb	0	; () banked
  4488  007E0A  1565               	andwf	sprintf@flag& (0+255),w,b
  4489  007E0C  6E4E               	movwf	??_sprintf& (0+255),c
  4490  007E0E  0E00               	movlw	0
  4491  007E10  0100               	movlb	0	; () banked
  4492  007E12  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  4493  007E14  6E4F               	movwf	(??_sprintf+1)& (0+255),c
  4494  007E16  504E               	movf	??_sprintf,w,c
  4495  007E18  104F               	iorwf	??_sprintf+1,w,c
  4496  007E1A  B4D8               	btfsc	status,2,c
  4497  007E1C  D04B               	goto	l3042
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4501  007E1E  C040  FFD9         	movff	sprintf@sp,fsr2l
  4502  007E22  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4503  007E26  0E2D               	movlw	45
  4504  007E28  6EDF               	movwf	indf2,c
  4505  007E2A  D042               	goto	l3040
  4506  007E2C                     l3036:
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;doprnt.c: 1478: {
  4510                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4511  007E2C  C076  F04E         	movff	sprintf@prec,??_sprintf
  4512  007E30  C077  F04F         	movff	sprintf@prec+1,??_sprintf+1
  4513  007E34  90D8               	bcf	status,0,c
  4514  007E36  364E               	rlcf	??_sprintf,f,c
  4515  007E38  364F               	rlcf	??_sprintf+1,f,c
  4516  007E3A  90D8               	bcf	status,0,c
  4517  007E3C  364E               	rlcf	??_sprintf,f,c
  4518  007E3E  364F               	rlcf	??_sprintf+1,f,c
  4519  007E40  0EF5               	movlw	low _dpowers
  4520  007E42  244E               	addwf	??_sprintf,w,c
  4521  007E44  6EF6               	movwf	tblptrl,c
  4522  007E46  0E7E               	movlw	high _dpowers
  4523  007E48  204F               	addwfc	??_sprintf+1,w,c
  4524  007E4A  6EF7               	movwf	tblptrh,c
  4525  007E4C                     	if	0	;There are less than 3 active tblptr bytes
  4526  007E4C                     	endif
  4527  007E4C  0009               	tblrd		*+
  4528  007E4E  CFF5 F005          	movff	tablat,___lldiv@divisor
  4529  007E52  0009               	tblrd		*+
  4530  007E54  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  4531  007E58  0009               	tblrd		*+
  4532  007E5A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  4533  007E5E  000A               	tblrd		*-
  4534  007E60  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  4535  007E64  C06D  F001         	movff	sprintf@val,___lldiv@dividend
  4536  007E68  C06E  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  4537  007E6C  C06F  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  4538  007E70  C070  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  4539  007E74  EC7C  F030         	call	___lldiv	;wreg free
  4540  007E78  C001  F00E         	movff	?___lldiv,___llmod@dividend
  4541  007E7C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  4542  007E80  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  4543  007E84  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  4544  007E88  0E0A               	movlw	10
  4545  007E8A  6E12               	movwf	___llmod@divisor,c
  4546  007E8C  0E00               	movlw	0
  4547  007E8E  6E13               	movwf	___llmod@divisor+1,c
  4548  007E90  0E00               	movlw	0
  4549  007E92  6E14               	movwf	___llmod@divisor+2,c
  4550  007E94  0E00               	movlw	0
  4551  007E96  6E15               	movwf	___llmod@divisor+3,c
  4552  007E98  EC11  F030         	call	___llmod	;wreg free
  4553  007E9C  500E               	movf	?___llmod,w,c
  4554  007E9E  0F30               	addlw	48
  4555  007EA0  0100               	movlb	0	; () banked
  4556  007EA2  6F78               	movwf	sprintf@c& (0+255),b
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;doprnt.c: 1523: }
  4560                           ;doprnt.c: 1524: ((*sp++ = (c)));
  4561  007EA4  C040  FFD9         	movff	sprintf@sp,fsr2l
  4562  007EA8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4563  007EAC  C078  FFDF         	movff	sprintf@c,indf2
  4564  007EB0                     l3040:
  4565                           
  4566                           ; BSR set to: 0
  4567  007EB0  4A40               	infsnz	sprintf@sp,f,c
  4568  007EB2  2A41               	incf	sprintf@sp+1,f,c
  4569  007EB4                     l3042:
  4570                           
  4571                           ; BSR set to: 0
  4572  007EB4  0100               	movlb	0	; () banked
  4573  007EB6  0776               	decf	sprintf@prec& (0+255),f,b
  4574  007EB8  A0D8               	btfss	status,0,c
  4575  007EBA  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  4576  007EBC  0100               	movlb	0	; () banked
  4577  007EBE  2976               	incf	sprintf@prec& (0+255),w,b
  4578  007EC0  E1B5               	bnz	l3036
  4579  007EC2  0100               	movlb	0	; () banked
  4580  007EC4  2977               	incf	(sprintf@prec+1)& (0+255),w,b
  4581  007EC6  A4D8               	btfss	status,2,c
  4582  007EC8  D7B1               	goto	l3036
  4583  007ECA                     l3044:
  4584                           
  4585                           ; BSR set to: 0
  4586  007ECA  C042  FFF6         	movff	sprintf@f,tblptrl
  4587  007ECE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  4588  007ED2  4A42               	infsnz	sprintf@f,f,c
  4589  007ED4  2A43               	incf	sprintf@f+1,f,c
  4590  007ED6                     	if	0	;tblptru may be non-zero
  4591  007ED6                     	endif
  4592  007ED6                     	if	0	;tblptru may be non-zero
  4593  007ED6                     	endif
  4594  007ED6  0008               	tblrd		*
  4595  007ED8  CFF5 F078          	movff	tablat,sprintf@c
  4596  007EDC  0100               	movlb	0	; () banked
  4597  007EDE  5178               	movf	sprintf@c& (0+255),w,b
  4598  007EE0  A4D8               	btfss	status,2,c
  4599  007EE2  EF0E  F03A         	goto	l2758
  4600  007EE6                     l3046:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 1538: *sp = 0;
  4604  007EE6  C040  FFD9         	movff	sprintf@sp,fsr2l
  4605  007EEA  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  4606  007EEE  0E00               	movlw	0
  4607  007EF0  6EDF               	movwf	indf2,c
  4608  007EF2  0012               	return	
  4609  007EF4                     __end_of_sprintf:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           indf0	equ	0xFEF
  4618                           fsr0h	equ	0xFEA
  4619                           fsr0l	equ	0xFE9
  4620                           wreg	equ	0xFE8
  4621                           indf1	equ	0xFE7
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _scale *****************
  4632 ;; Defined at:
  4633 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;  scl             1    wreg     char 
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  scl             1   41[COMRAM] char 
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  3   35[COMRAM] char 
  4640 ;; Registers used:
  4641 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4647 ;;      Params:         3       0       0       0       0       0       0
  4648 ;;      Locals:         4       0       0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0
  4650 ;;      Totals:         7       0       0       0       0       0       0
  4651 ;;Total ram usage:        7 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    2
  4654 ;; This function calls:
  4655 ;;		___awdiv
  4656 ;;		___awmod
  4657 ;;		___ftmul
  4658 ;;		___wmul
  4659 ;; This function is called by:
  4660 ;;		_sprintf
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664                           	psect	text18
  4665  00701C                     __ptext18:
  4666                           	opt stack 0
  4667  00701C                     _scale:
  4668                           	opt stack 25
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;incstack = 0
  4672                           ;scale@scl stored from wreg
  4673  00701C  6E2A               	movwf	scale@scl,c
  4674                           
  4675                           ;doprnt.c: 428: if(scl < 0) {
  4676  00701E  AE2A               	btfss	scale@scl,7,c
  4677  007020  D0FB               	goto	l2472
  4678                           
  4679                           ;doprnt.c: 429: scl = -scl;
  4680  007022  6C2A               	negf	scale@scl,c
  4681                           
  4682                           ;doprnt.c: 430: if(scl>=110)
  4683  007024  502A               	movf	scale@scl,w,c
  4684  007026  0A80               	xorlw	128
  4685  007028  0F12               	addlw	-238
  4686  00702A  A0D8               	btfss	status,0,c
  4687  00702C  D091               	goto	l2462
  4688                           
  4689                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4690  00702E  0E00               	movlw	0
  4691  007030  6E12               	movwf	___wmul@multiplicand+1,c
  4692  007032  0E03               	movlw	3
  4693  007034  6E11               	movwf	___wmul@multiplicand,c
  4694  007036  0E00               	movlw	0
  4695  007038  6E0A               	movwf	___awdiv@divisor+1,c
  4696  00703A  0E0A               	movlw	10
  4697  00703C  6E09               	movwf	___awdiv@divisor,c
  4698  00703E  0E00               	movlw	0
  4699  007040  6E04               	movwf	___awmod@divisor+1,c
  4700  007042  0E64               	movlw	100
  4701  007044  6E03               	movwf	___awmod@divisor,c
  4702  007046  502A               	movf	scale@scl,w,c
  4703  007048  6E01               	movwf	___awmod@dividend,c
  4704  00704A  6A02               	clrf	___awmod@dividend+1,c
  4705  00704C  BE01               	btfsc	___awmod@dividend,7,c
  4706  00704E  0602               	decf	___awmod@dividend+1,f,c
  4707  007050  EC44  F030         	call	___awmod	;wreg free
  4708  007054  C001  F007         	movff	?___awmod,___awdiv@dividend
  4709  007058  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4710  00705C  ECBD  F030         	call	___awdiv	;wreg free
  4711  007060  0E09               	movlw	9
  4712  007062  2407               	addwf	?___awdiv,w,c
  4713  007064  6E0F               	movwf	___wmul@multiplier,c
  4714  007066  0E00               	movlw	0
  4715  007068  2008               	addwfc	?___awdiv+1,w,c
  4716  00706A  6E10               	movwf	___wmul@multiplier+1,c
  4717  00706C  ECA1  F02E         	call	___wmul	;wreg free
  4718  007070  0E1D               	movlw	low __npowers_
  4719  007072  240F               	addwf	?___wmul,w,c
  4720  007074  6EF6               	movwf	tblptrl,c
  4721  007076  0E7F               	movlw	high __npowers_
  4722  007078  2010               	addwfc	?___wmul+1,w,c
  4723  00707A  6EF7               	movwf	tblptrh,c
  4724  00707C                     	if	0	;There are less than 3 active tblptr bytes
  4725  00707C                     	endif
  4726  00707C  0009               	tblrd		*+
  4727  00707E  CFF5 F018          	movff	tablat,___ftmul@f2
  4728  007082  0009               	tblrd		*+
  4729  007084  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4730  007088  000A               	tblrd		*-
  4731  00708A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4732  00708E  0E00               	movlw	0
  4733  007090  6E0A               	movwf	___awdiv@divisor+1,c
  4734  007092  0E64               	movlw	100
  4735  007094  6E09               	movwf	___awdiv@divisor,c
  4736  007096  502A               	movf	scale@scl,w,c
  4737  007098  6E07               	movwf	___awdiv@dividend,c
  4738  00709A  6A08               	clrf	___awdiv@dividend+1,c
  4739  00709C  BE07               	btfsc	___awdiv@dividend,7,c
  4740  00709E  0608               	decf	___awdiv@dividend+1,f,c
  4741  0070A0  ECBD  F030         	call	___awdiv	;wreg free
  4742  0070A4  0E12               	movlw	18
  4743  0070A6  2407               	addwf	?___awdiv,w,c
  4744  0070A8  6E0F               	movwf	___wmul@multiplier,c
  4745  0070AA  0E00               	movlw	0
  4746  0070AC  2008               	addwfc	?___awdiv+1,w,c
  4747  0070AE  6E10               	movwf	___wmul@multiplier+1,c
  4748  0070B0  0E00               	movlw	0
  4749  0070B2  6E12               	movwf	___wmul@multiplicand+1,c
  4750  0070B4  0E03               	movlw	3
  4751  0070B6  6E11               	movwf	___wmul@multiplicand,c
  4752  0070B8  ECA1  F02E         	call	___wmul	;wreg free
  4753  0070BC  0E1D               	movlw	low __npowers_
  4754  0070BE  240F               	addwf	?___wmul,w,c
  4755  0070C0  6EF6               	movwf	tblptrl,c
  4756  0070C2  0E7F               	movlw	high __npowers_
  4757  0070C4  2010               	addwfc	?___wmul+1,w,c
  4758  0070C6  6EF7               	movwf	tblptrh,c
  4759  0070C8                     	if	0	;There are less than 3 active tblptr bytes
  4760  0070C8                     	endif
  4761  0070C8  0009               	tblrd		*+
  4762  0070CA  CFF5 F015          	movff	tablat,___ftmul@f1
  4763  0070CE  0009               	tblrd		*+
  4764  0070D0  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4765  0070D4  000A               	tblrd		*-
  4766  0070D6  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4767  0070DA  ECD2  F032         	call	___ftmul	;wreg free
  4768  0070DE  C015  F027         	movff	?___ftmul,_scale$959
  4769  0070E2  C016  F028         	movff	?___ftmul+1,_scale$959+1
  4770  0070E6  C017  F029         	movff	?___ftmul+2,_scale$959+2
  4771                           
  4772                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4773  0070EA  C027  F015         	movff	_scale$959,___ftmul@f1
  4774  0070EE  C028  F016         	movff	_scale$959+1,___ftmul@f1+1
  4775  0070F2  C029  F017         	movff	_scale$959+2,___ftmul@f1+2
  4776  0070F6  0E00               	movlw	0
  4777  0070F8  6E12               	movwf	___wmul@multiplicand+1,c
  4778  0070FA  0E03               	movlw	3
  4779  0070FC  6E11               	movwf	___wmul@multiplicand,c
  4780  0070FE  0E00               	movlw	0
  4781  007100  6E04               	movwf	___awmod@divisor+1,c
  4782  007102  0E0A               	movlw	10
  4783  007104  6E03               	movwf	___awmod@divisor,c
  4784  007106  502A               	movf	scale@scl,w,c
  4785  007108  6E01               	movwf	___awmod@dividend,c
  4786  00710A  6A02               	clrf	___awmod@dividend+1,c
  4787  00710C  BE01               	btfsc	___awmod@dividend,7,c
  4788  00710E  0602               	decf	___awmod@dividend+1,f,c
  4789  007110  EC44  F030         	call	___awmod	;wreg free
  4790  007114  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4791  007118  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4792  00711C  ECA1  F02E         	call	___wmul	;wreg free
  4793  007120  0E1D               	movlw	low __npowers_
  4794  007122  240F               	addwf	?___wmul,w,c
  4795  007124  6EF6               	movwf	tblptrl,c
  4796  007126  0E7F               	movlw	high __npowers_
  4797  007128  2010               	addwfc	?___wmul+1,w,c
  4798  00712A  6EF7               	movwf	tblptrh,c
  4799  00712C                     	if	0	;There are less than 3 active tblptr bytes
  4800  00712C                     	endif
  4801  00712C  0009               	tblrd		*+
  4802  00712E  CFF5 F018          	movff	tablat,___ftmul@f2
  4803  007132  0009               	tblrd		*+
  4804  007134  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4805  007138  000A               	tblrd		*-
  4806  00713A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4807  00713E  ECD2  F032         	call	___ftmul	;wreg free
  4808  007142  C015  F024         	movff	?___ftmul,?_scale
  4809  007146  C016  F025         	movff	?___ftmul+1,?_scale+1
  4810  00714A  C017  F026         	movff	?___ftmul+2,?_scale+2
  4811  00714E  0012               	return	
  4812  007150                     l2462:
  4813                           
  4814                           ;doprnt.c: 432: else if(scl > 10)
  4815  007150  502A               	movf	scale@scl,w,c
  4816  007152  0A80               	xorlw	128
  4817  007154  0F75               	addlw	-139
  4818  007156  A0D8               	btfss	status,0,c
  4819  007158  D04D               	goto	l2468
  4820                           
  4821                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4822  00715A  0E00               	movlw	0
  4823  00715C  6E0A               	movwf	___awdiv@divisor+1,c
  4824  00715E  0E0A               	movlw	10
  4825  007160  6E09               	movwf	___awdiv@divisor,c
  4826  007162  502A               	movf	scale@scl,w,c
  4827  007164  6E07               	movwf	___awdiv@dividend,c
  4828  007166  6A08               	clrf	___awdiv@dividend+1,c
  4829  007168  BE07               	btfsc	___awdiv@dividend,7,c
  4830  00716A  0608               	decf	___awdiv@dividend+1,f,c
  4831  00716C  ECBD  F030         	call	___awdiv	;wreg free
  4832  007170  0E09               	movlw	9
  4833  007172  2407               	addwf	?___awdiv,w,c
  4834  007174  6E0F               	movwf	___wmul@multiplier,c
  4835  007176  0E00               	movlw	0
  4836  007178  2008               	addwfc	?___awdiv+1,w,c
  4837  00717A  6E10               	movwf	___wmul@multiplier+1,c
  4838  00717C  0E00               	movlw	0
  4839  00717E  6E12               	movwf	___wmul@multiplicand+1,c
  4840  007180  0E03               	movlw	3
  4841  007182  6E11               	movwf	___wmul@multiplicand,c
  4842  007184  ECA1  F02E         	call	___wmul	;wreg free
  4843  007188  0E1D               	movlw	low __npowers_
  4844  00718A  240F               	addwf	?___wmul,w,c
  4845  00718C  6EF6               	movwf	tblptrl,c
  4846  00718E  0E7F               	movlw	high __npowers_
  4847  007190  2010               	addwfc	?___wmul+1,w,c
  4848  007192  6EF7               	movwf	tblptrh,c
  4849  007194                     	if	0	;There are less than 3 active tblptr bytes
  4850  007194                     	endif
  4851  007194  0009               	tblrd		*+
  4852  007196  CFF5 F015          	movff	tablat,___ftmul@f1
  4853  00719A  0009               	tblrd		*+
  4854  00719C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4855  0071A0  000A               	tblrd		*-
  4856  0071A2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4857  0071A6  0E00               	movlw	0
  4858  0071A8  6E12               	movwf	___wmul@multiplicand+1,c
  4859  0071AA  0E03               	movlw	3
  4860  0071AC  6E11               	movwf	___wmul@multiplicand,c
  4861  0071AE  0E00               	movlw	0
  4862  0071B0  6E04               	movwf	___awmod@divisor+1,c
  4863  0071B2  0E0A               	movlw	10
  4864  0071B4  6E03               	movwf	___awmod@divisor,c
  4865  0071B6  502A               	movf	scale@scl,w,c
  4866  0071B8  6E01               	movwf	___awmod@dividend,c
  4867  0071BA  6A02               	clrf	___awmod@dividend+1,c
  4868  0071BC  BE01               	btfsc	___awmod@dividend,7,c
  4869  0071BE  0602               	decf	___awmod@dividend+1,f,c
  4870  0071C0  EC44  F030         	call	___awmod	;wreg free
  4871  0071C4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4872  0071C8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4873  0071CC  ECA1  F02E         	call	___wmul	;wreg free
  4874  0071D0  0E1D               	movlw	low __npowers_
  4875  0071D2  240F               	addwf	?___wmul,w,c
  4876  0071D4  6EF6               	movwf	tblptrl,c
  4877  0071D6  0E7F               	movlw	high __npowers_
  4878  0071D8  2010               	addwfc	?___wmul+1,w,c
  4879  0071DA  6EF7               	movwf	tblptrh,c
  4880  0071DC                     	if	0	;There are less than 3 active tblptr bytes
  4881  0071DC                     	endif
  4882  0071DC  0009               	tblrd		*+
  4883  0071DE  CFF5 F018          	movff	tablat,___ftmul@f2
  4884  0071E2  0009               	tblrd		*+
  4885  0071E4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4886  0071E8  000A               	tblrd		*-
  4887  0071EA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4888  0071EE  ECD2  F032         	call	___ftmul	;wreg free
  4889  0071F2  D7A7               	goto	L5
  4890  0071F4                     l2468:
  4891                           
  4892                           ;doprnt.c: 434: return _npowers_[scl];
  4893  0071F4  502A               	movf	scale@scl,w,c
  4894  0071F6  0D03               	mullw	3
  4895  0071F8  0E1D               	movlw	low __npowers_
  4896  0071FA  24F3               	addwf	prodl,w,c
  4897  0071FC  6EF6               	movwf	tblptrl,c
  4898  0071FE  0E7F               	movlw	high __npowers_
  4899  007200  20F4               	addwfc	prodh,w,c
  4900  007202  6EF7               	movwf	tblptrh,c
  4901  007204                     	if	0	;There are less than 3 active tblptr bytes
  4902  007204                     	endif
  4903  007204  0009               	tblrd		*+
  4904  007206  CFF5 F024          	movff	tablat,?_scale
  4905  00720A  0009               	tblrd		*+
  4906  00720C  CFF5 F025          	movff	tablat,?_scale+1
  4907  007210  000A               	tblrd		*-
  4908  007212  CFF5 F026          	movff	tablat,?_scale+2
  4909  007216  0012               	return	
  4910  007218                     l2472:
  4911                           
  4912                           ;doprnt.c: 435: }
  4913                           ;doprnt.c: 436: if(scl>=110)
  4914  007218  502A               	movf	scale@scl,w,c
  4915  00721A  0A80               	xorlw	128
  4916  00721C  0F12               	addlw	-238
  4917  00721E  A0D8               	btfss	status,0,c
  4918  007220  D091               	goto	l2480
  4919                           
  4920                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4921  007222  0E00               	movlw	0
  4922  007224  6E12               	movwf	___wmul@multiplicand+1,c
  4923  007226  0E03               	movlw	3
  4924  007228  6E11               	movwf	___wmul@multiplicand,c
  4925  00722A  0E00               	movlw	0
  4926  00722C  6E0A               	movwf	___awdiv@divisor+1,c
  4927  00722E  0E0A               	movlw	10
  4928  007230  6E09               	movwf	___awdiv@divisor,c
  4929  007232  0E00               	movlw	0
  4930  007234  6E04               	movwf	___awmod@divisor+1,c
  4931  007236  0E64               	movlw	100
  4932  007238  6E03               	movwf	___awmod@divisor,c
  4933  00723A  502A               	movf	scale@scl,w,c
  4934  00723C  6E01               	movwf	___awmod@dividend,c
  4935  00723E  6A02               	clrf	___awmod@dividend+1,c
  4936  007240  BE01               	btfsc	___awmod@dividend,7,c
  4937  007242  0602               	decf	___awmod@dividend+1,f,c
  4938  007244  EC44  F030         	call	___awmod	;wreg free
  4939  007248  C001  F007         	movff	?___awmod,___awdiv@dividend
  4940  00724C  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4941  007250  ECBD  F030         	call	___awdiv	;wreg free
  4942  007254  0E09               	movlw	9
  4943  007256  2407               	addwf	?___awdiv,w,c
  4944  007258  6E0F               	movwf	___wmul@multiplier,c
  4945  00725A  0E00               	movlw	0
  4946  00725C  2008               	addwfc	?___awdiv+1,w,c
  4947  00725E  6E10               	movwf	___wmul@multiplier+1,c
  4948  007260  ECA1  F02E         	call	___wmul	;wreg free
  4949  007264  0E44               	movlw	low __powers_
  4950  007266  240F               	addwf	?___wmul,w,c
  4951  007268  6EF6               	movwf	tblptrl,c
  4952  00726A  0E7F               	movlw	high __powers_
  4953  00726C  2010               	addwfc	?___wmul+1,w,c
  4954  00726E  6EF7               	movwf	tblptrh,c
  4955  007270                     	if	0	;There are less than 3 active tblptr bytes
  4956  007270                     	endif
  4957  007270  0009               	tblrd		*+
  4958  007272  CFF5 F018          	movff	tablat,___ftmul@f2
  4959  007276  0009               	tblrd		*+
  4960  007278  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4961  00727C  000A               	tblrd		*-
  4962  00727E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4963  007282  0E00               	movlw	0
  4964  007284  6E0A               	movwf	___awdiv@divisor+1,c
  4965  007286  0E64               	movlw	100
  4966  007288  6E09               	movwf	___awdiv@divisor,c
  4967  00728A  502A               	movf	scale@scl,w,c
  4968  00728C  6E07               	movwf	___awdiv@dividend,c
  4969  00728E  6A08               	clrf	___awdiv@dividend+1,c
  4970  007290  BE07               	btfsc	___awdiv@dividend,7,c
  4971  007292  0608               	decf	___awdiv@dividend+1,f,c
  4972  007294  ECBD  F030         	call	___awdiv	;wreg free
  4973  007298  0E12               	movlw	18
  4974  00729A  2407               	addwf	?___awdiv,w,c
  4975  00729C  6E0F               	movwf	___wmul@multiplier,c
  4976  00729E  0E00               	movlw	0
  4977  0072A0  2008               	addwfc	?___awdiv+1,w,c
  4978  0072A2  6E10               	movwf	___wmul@multiplier+1,c
  4979  0072A4  0E00               	movlw	0
  4980  0072A6  6E12               	movwf	___wmul@multiplicand+1,c
  4981  0072A8  0E03               	movlw	3
  4982  0072AA  6E11               	movwf	___wmul@multiplicand,c
  4983  0072AC  ECA1  F02E         	call	___wmul	;wreg free
  4984  0072B0  0E44               	movlw	low __powers_
  4985  0072B2  240F               	addwf	?___wmul,w,c
  4986  0072B4  6EF6               	movwf	tblptrl,c
  4987  0072B6  0E7F               	movlw	high __powers_
  4988  0072B8  2010               	addwfc	?___wmul+1,w,c
  4989  0072BA  6EF7               	movwf	tblptrh,c
  4990  0072BC                     	if	0	;There are less than 3 active tblptr bytes
  4991  0072BC                     	endif
  4992  0072BC  0009               	tblrd		*+
  4993  0072BE  CFF5 F015          	movff	tablat,___ftmul@f1
  4994  0072C2  0009               	tblrd		*+
  4995  0072C4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4996  0072C8  000A               	tblrd		*-
  4997  0072CA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4998  0072CE  ECD2  F032         	call	___ftmul	;wreg free
  4999  0072D2  C015  F027         	movff	?___ftmul,_scale$959
  5000  0072D6  C016  F028         	movff	?___ftmul+1,_scale$959+1
  5001  0072DA  C017  F029         	movff	?___ftmul+2,_scale$959+2
  5002                           
  5003                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5004  0072DE  C027  F015         	movff	_scale$959,___ftmul@f1
  5005  0072E2  C028  F016         	movff	_scale$959+1,___ftmul@f1+1
  5006  0072E6  C029  F017         	movff	_scale$959+2,___ftmul@f1+2
  5007  0072EA  0E00               	movlw	0
  5008  0072EC  6E12               	movwf	___wmul@multiplicand+1,c
  5009  0072EE  0E03               	movlw	3
  5010  0072F0  6E11               	movwf	___wmul@multiplicand,c
  5011  0072F2  0E00               	movlw	0
  5012  0072F4  6E04               	movwf	___awmod@divisor+1,c
  5013  0072F6  0E0A               	movlw	10
  5014  0072F8  6E03               	movwf	___awmod@divisor,c
  5015  0072FA  502A               	movf	scale@scl,w,c
  5016  0072FC  6E01               	movwf	___awmod@dividend,c
  5017  0072FE  6A02               	clrf	___awmod@dividend+1,c
  5018  007300  BE01               	btfsc	___awmod@dividend,7,c
  5019  007302  0602               	decf	___awmod@dividend+1,f,c
  5020  007304  EC44  F030         	call	___awmod	;wreg free
  5021  007308  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5022  00730C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5023  007310  ECA1  F02E         	call	___wmul	;wreg free
  5024  007314  0E44               	movlw	low __powers_
  5025  007316  240F               	addwf	?___wmul,w,c
  5026  007318  6EF6               	movwf	tblptrl,c
  5027  00731A  0E7F               	movlw	high __powers_
  5028  00731C  2010               	addwfc	?___wmul+1,w,c
  5029  00731E  6EF7               	movwf	tblptrh,c
  5030  007320                     	if	0	;There are less than 3 active tblptr bytes
  5031  007320                     	endif
  5032  007320  0009               	tblrd		*+
  5033  007322  CFF5 F018          	movff	tablat,___ftmul@f2
  5034  007326  0009               	tblrd		*+
  5035  007328  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5036  00732C  000A               	tblrd		*-
  5037  00732E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5038  007332  ECD2  F032         	call	___ftmul	;wreg free
  5039  007336  C015  F024         	movff	?___ftmul,?_scale
  5040  00733A  C016  F025         	movff	?___ftmul+1,?_scale+1
  5041  00733E  C017  F026         	movff	?___ftmul+2,?_scale+2
  5042  007342  0012               	return	
  5043  007344                     l2480:
  5044                           
  5045                           ;doprnt.c: 438: else if(scl > 10)
  5046  007344  502A               	movf	scale@scl,w,c
  5047  007346  0A80               	xorlw	128
  5048  007348  0F75               	addlw	-139
  5049  00734A  A0D8               	btfss	status,0,c
  5050  00734C  D04D               	goto	l2486
  5051                           
  5052                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5053  00734E  0E00               	movlw	0
  5054  007350  6E0A               	movwf	___awdiv@divisor+1,c
  5055  007352  0E0A               	movlw	10
  5056  007354  6E09               	movwf	___awdiv@divisor,c
  5057  007356  502A               	movf	scale@scl,w,c
  5058  007358  6E07               	movwf	___awdiv@dividend,c
  5059  00735A  6A08               	clrf	___awdiv@dividend+1,c
  5060  00735C  BE07               	btfsc	___awdiv@dividend,7,c
  5061  00735E  0608               	decf	___awdiv@dividend+1,f,c
  5062  007360  ECBD  F030         	call	___awdiv	;wreg free
  5063  007364  0E09               	movlw	9
  5064  007366  2407               	addwf	?___awdiv,w,c
  5065  007368  6E0F               	movwf	___wmul@multiplier,c
  5066  00736A  0E00               	movlw	0
  5067  00736C  2008               	addwfc	?___awdiv+1,w,c
  5068  00736E  6E10               	movwf	___wmul@multiplier+1,c
  5069  007370  0E00               	movlw	0
  5070  007372  6E12               	movwf	___wmul@multiplicand+1,c
  5071  007374  0E03               	movlw	3
  5072  007376  6E11               	movwf	___wmul@multiplicand,c
  5073  007378  ECA1  F02E         	call	___wmul	;wreg free
  5074  00737C  0E44               	movlw	low __powers_
  5075  00737E  240F               	addwf	?___wmul,w,c
  5076  007380  6EF6               	movwf	tblptrl,c
  5077  007382  0E7F               	movlw	high __powers_
  5078  007384  2010               	addwfc	?___wmul+1,w,c
  5079  007386  6EF7               	movwf	tblptrh,c
  5080  007388                     	if	0	;There are less than 3 active tblptr bytes
  5081  007388                     	endif
  5082  007388  0009               	tblrd		*+
  5083  00738A  CFF5 F015          	movff	tablat,___ftmul@f1
  5084  00738E  0009               	tblrd		*+
  5085  007390  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5086  007394  000A               	tblrd		*-
  5087  007396  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5088  00739A  0E00               	movlw	0
  5089  00739C  6E12               	movwf	___wmul@multiplicand+1,c
  5090  00739E  0E03               	movlw	3
  5091  0073A0  6E11               	movwf	___wmul@multiplicand,c
  5092  0073A2  0E00               	movlw	0
  5093  0073A4  6E04               	movwf	___awmod@divisor+1,c
  5094  0073A6  0E0A               	movlw	10
  5095  0073A8  6E03               	movwf	___awmod@divisor,c
  5096  0073AA  502A               	movf	scale@scl,w,c
  5097  0073AC  6E01               	movwf	___awmod@dividend,c
  5098  0073AE  6A02               	clrf	___awmod@dividend+1,c
  5099  0073B0  BE01               	btfsc	___awmod@dividend,7,c
  5100  0073B2  0602               	decf	___awmod@dividend+1,f,c
  5101  0073B4  EC44  F030         	call	___awmod	;wreg free
  5102  0073B8  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5103  0073BC  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5104  0073C0  ECA1  F02E         	call	___wmul	;wreg free
  5105  0073C4  0E44               	movlw	low __powers_
  5106  0073C6  240F               	addwf	?___wmul,w,c
  5107  0073C8  6EF6               	movwf	tblptrl,c
  5108  0073CA  0E7F               	movlw	high __powers_
  5109  0073CC  2010               	addwfc	?___wmul+1,w,c
  5110  0073CE  6EF7               	movwf	tblptrh,c
  5111  0073D0                     	if	0	;There are less than 3 active tblptr bytes
  5112  0073D0                     	endif
  5113  0073D0  0009               	tblrd		*+
  5114  0073D2  CFF5 F018          	movff	tablat,___ftmul@f2
  5115  0073D6  0009               	tblrd		*+
  5116  0073D8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5117  0073DC  000A               	tblrd		*-
  5118  0073DE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5119  0073E2  ECD2  F032         	call	___ftmul	;wreg free
  5120  0073E6  D7A7               	goto	L6
  5121  0073E8                     l2486:
  5122                           
  5123                           ;doprnt.c: 440: return _powers_[scl];
  5124  0073E8  502A               	movf	scale@scl,w,c
  5125  0073EA  0D03               	mullw	3
  5126  0073EC  0E44               	movlw	low __powers_
  5127  0073EE  24F3               	addwf	prodl,w,c
  5128  0073F0  6EF6               	movwf	tblptrl,c
  5129  0073F2  0E7F               	movlw	high __powers_
  5130  0073F4  20F4               	addwfc	prodh,w,c
  5131  0073F6  6EF7               	movwf	tblptrh,c
  5132  0073F8                     	if	0	;There are less than 3 active tblptr bytes
  5133  0073F8                     	endif
  5134  0073F8  0009               	tblrd		*+
  5135  0073FA  CFF5 F024          	movff	tablat,?_scale
  5136  0073FE  0009               	tblrd		*+
  5137  007400  CFF5 F025          	movff	tablat,?_scale+1
  5138  007404  000A               	tblrd		*-
  5139  007406  CFF5 F026          	movff	tablat,?_scale+2
  5140  00740A  0012               	return	
  5141  00740C                     __end_of_scale:
  5142                           	opt stack 0
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           indf0	equ	0xFEF
  5150                           fsr0h	equ	0xFEA
  5151                           fsr0l	equ	0xFE9
  5152                           wreg	equ	0xFE8
  5153                           indf1	equ	0xFE7
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function _isdigit *****************
  5164 ;; Defined at:
  5165 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  c               1    wreg     unsigned char 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  c               1    2[COMRAM] unsigned char 
  5170 ;; Return value:  Size  Location     Type
  5171 ;;		None               void
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5179 ;;      Params:         0       0       0       0       0       0       0
  5180 ;;      Locals:         2       0       0       0       0       0       0
  5181 ;;      Temps:          1       0       0       0       0       0       0
  5182 ;;      Totals:         3       0       0       0       0       0       0
  5183 ;;Total ram usage:        3 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_sprintf
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text19
  5193  005CDC                     __ptext19:
  5194                           	opt stack 0
  5195  005CDC                     _isdigit:
  5196                           	opt stack 27
  5197                           
  5198                           ;incstack = 0
  5199                           ;isdigit@c stored from wreg
  5200  005CDC  6E03               	movwf	isdigit@c,c
  5201  005CDE  0E00               	movlw	0
  5202  005CE0  6E02               	movwf	_isdigit$614,c
  5203  005CE2  0E3A               	movlw	58
  5204  005CE4  6003               	cpfslt	isdigit@c,c
  5205  005CE6  D005               	goto	l2498
  5206  005CE8  0E2F               	movlw	47
  5207  005CEA  6403               	cpfsgt	isdigit@c,c
  5208  005CEC  D002               	goto	l2498
  5209  005CEE  0E01               	movlw	1
  5210  005CF0  6E02               	movwf	_isdigit$614,c
  5211  005CF2                     l2498:
  5212  005CF2  C002  F001         	movff	_isdigit$614,??_isdigit
  5213  005CF6  3001               	rrcf	??_isdigit,w,c
  5214  005CF8  0012               	return	
  5215  005CFA                     __end_of_isdigit:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           indf0	equ	0xFEF
  5224                           fsr0h	equ	0xFEA
  5225                           fsr0l	equ	0xFE9
  5226                           wreg	equ	0xFE8
  5227                           indf1	equ	0xFE7
  5228                           fsr1h	equ	0xFE2
  5229                           fsr1l	equ	0xFE1
  5230                           indf2	equ	0xFDF
  5231                           postinc2	equ	0xFDE
  5232                           postdec2	equ	0xFDD
  5233                           fsr2h	equ	0xFDA
  5234                           fsr2l	equ	0xFD9
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _fround *****************
  5238 ;; Defined at:
  5239 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;  prec            1    wreg     unsigned char 
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  prec            1   44[COMRAM] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;                  3   35[COMRAM] unsigned char 
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : 0/0
  5250 ;;		On exit  : 0/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5253 ;;      Params:         3       0       0       0       0       0       0
  5254 ;;      Locals:         7       0       0       0       0       0       0
  5255 ;;      Temps:          0       0       0       0       0       0       0
  5256 ;;      Totals:        10       0       0       0       0       0       0
  5257 ;;Total ram usage:       10 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:    2
  5260 ;; This function calls:
  5261 ;;		___awdiv
  5262 ;;		___awmod
  5263 ;;		___ftmul
  5264 ;;		___wmul
  5265 ;; This function is called by:
  5266 ;;		_sprintf
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text20
  5271  006A9E                     __ptext20:
  5272                           	opt stack 0
  5273  006A9E                     _fround:
  5274                           	opt stack 25
  5275                           
  5276                           ;incstack = 0
  5277                           ;fround@prec stored from wreg
  5278  006A9E  6E2D               	movwf	fround@prec,c
  5279                           
  5280                           ;doprnt.c: 413: if(prec>=110)
  5281  006AA0  0E6D               	movlw	109
  5282  006AA2  642D               	cpfsgt	fround@prec,c
  5283  006AA4  D09F               	goto	l2440
  5284                           
  5285                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5286  006AA6  0E00               	movlw	0
  5287  006AA8  6E12               	movwf	___wmul@multiplicand+1,c
  5288  006AAA  0E03               	movlw	3
  5289  006AAC  6E11               	movwf	___wmul@multiplicand,c
  5290  006AAE  0E00               	movlw	0
  5291  006AB0  6E0A               	movwf	___awdiv@divisor+1,c
  5292  006AB2  0E0A               	movlw	10
  5293  006AB4  6E09               	movwf	___awdiv@divisor,c
  5294  006AB6  0E00               	movlw	0
  5295  006AB8  6E04               	movwf	___awmod@divisor+1,c
  5296  006ABA  0E64               	movlw	100
  5297  006ABC  6E03               	movwf	___awmod@divisor,c
  5298  006ABE  C02D  F001         	movff	fround@prec,___awmod@dividend
  5299  006AC2  6A02               	clrf	___awmod@dividend+1,c
  5300  006AC4  EC44  F030         	call	___awmod	;wreg free
  5301  006AC8  C001  F007         	movff	?___awmod,___awdiv@dividend
  5302  006ACC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  5303  006AD0  ECBD  F030         	call	___awdiv	;wreg free
  5304  006AD4  0E09               	movlw	9
  5305  006AD6  2407               	addwf	?___awdiv,w,c
  5306  006AD8  6E0F               	movwf	___wmul@multiplier,c
  5307  006ADA  0E00               	movlw	0
  5308  006ADC  2008               	addwfc	?___awdiv+1,w,c
  5309  006ADE  6E10               	movwf	___wmul@multiplier+1,c
  5310  006AE0  ECA1  F02E         	call	___wmul	;wreg free
  5311  006AE4  0E1D               	movlw	low __npowers_
  5312  006AE6  240F               	addwf	?___wmul,w,c
  5313  006AE8  6EF6               	movwf	tblptrl,c
  5314  006AEA  0E7F               	movlw	high __npowers_
  5315  006AEC  2010               	addwfc	?___wmul+1,w,c
  5316  006AEE  6EF7               	movwf	tblptrh,c
  5317  006AF0                     	if	0	;There are less than 3 active tblptr bytes
  5318  006AF0                     	endif
  5319  006AF0  0009               	tblrd		*+
  5320  006AF2  CFF5 F018          	movff	tablat,___ftmul@f2
  5321  006AF6  0009               	tblrd		*+
  5322  006AF8  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5323  006AFC  000A               	tblrd		*-
  5324  006AFE  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5325  006B02  0E00               	movlw	0
  5326  006B04  6E0A               	movwf	___awdiv@divisor+1,c
  5327  006B06  0E64               	movlw	100
  5328  006B08  6E09               	movwf	___awdiv@divisor,c
  5329  006B0A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5330  006B0E  6A08               	clrf	___awdiv@dividend+1,c
  5331  006B10  ECBD  F030         	call	___awdiv	;wreg free
  5332  006B14  0E12               	movlw	18
  5333  006B16  2407               	addwf	?___awdiv,w,c
  5334  006B18  6E0F               	movwf	___wmul@multiplier,c
  5335  006B1A  0E00               	movlw	0
  5336  006B1C  2008               	addwfc	?___awdiv+1,w,c
  5337  006B1E  6E10               	movwf	___wmul@multiplier+1,c
  5338  006B20  0E00               	movlw	0
  5339  006B22  6E12               	movwf	___wmul@multiplicand+1,c
  5340  006B24  0E03               	movlw	3
  5341  006B26  6E11               	movwf	___wmul@multiplicand,c
  5342  006B28  ECA1  F02E         	call	___wmul	;wreg free
  5343  006B2C  0E1D               	movlw	low __npowers_
  5344  006B2E  240F               	addwf	?___wmul,w,c
  5345  006B30  6EF6               	movwf	tblptrl,c
  5346  006B32  0E7F               	movlw	high __npowers_
  5347  006B34  2010               	addwfc	?___wmul+1,w,c
  5348  006B36  6EF7               	movwf	tblptrh,c
  5349  006B38                     	if	0	;There are less than 3 active tblptr bytes
  5350  006B38                     	endif
  5351  006B38  0009               	tblrd		*+
  5352  006B3A  CFF5 F015          	movff	tablat,___ftmul@f1
  5353  006B3E  0009               	tblrd		*+
  5354  006B40  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5355  006B44  000A               	tblrd		*-
  5356  006B46  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5357  006B4A  ECD2  F032         	call	___ftmul	;wreg free
  5358  006B4E  C015  F02A         	movff	?___ftmul,_fround$957
  5359  006B52  C016  F02B         	movff	?___ftmul+1,_fround$957+1
  5360  006B56  C017  F02C         	movff	?___ftmul+2,_fround$957+2
  5361                           
  5362                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5363  006B5A  0E00               	movlw	0
  5364  006B5C  6E12               	movwf	___wmul@multiplicand+1,c
  5365  006B5E  0E03               	movlw	3
  5366  006B60  6E11               	movwf	___wmul@multiplicand,c
  5367  006B62  0E00               	movlw	0
  5368  006B64  6E04               	movwf	___awmod@divisor+1,c
  5369  006B66  0E0A               	movlw	10
  5370  006B68  6E03               	movwf	___awmod@divisor,c
  5371  006B6A  C02D  F001         	movff	fround@prec,___awmod@dividend
  5372  006B6E  6A02               	clrf	___awmod@dividend+1,c
  5373  006B70  EC44  F030         	call	___awmod	;wreg free
  5374  006B74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5375  006B78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5376  006B7C  ECA1  F02E         	call	___wmul	;wreg free
  5377  006B80  0E1D               	movlw	low __npowers_
  5378  006B82  240F               	addwf	?___wmul,w,c
  5379  006B84  6EF6               	movwf	tblptrl,c
  5380  006B86  0E7F               	movlw	high __npowers_
  5381  006B88  2010               	addwfc	?___wmul+1,w,c
  5382  006B8A  6EF7               	movwf	tblptrh,c
  5383  006B8C                     	if	0	;There are less than 3 active tblptr bytes
  5384  006B8C                     	endif
  5385  006B8C  0009               	tblrd		*+
  5386  006B8E  CFF5 F018          	movff	tablat,___ftmul@f2
  5387  006B92  0009               	tblrd		*+
  5388  006B94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5389  006B98  000A               	tblrd		*-
  5390  006B9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5391  006B9E  C02A  F015         	movff	_fround$957,___ftmul@f1
  5392  006BA2  C02B  F016         	movff	_fround$957+1,___ftmul@f1+1
  5393  006BA6  C02C  F017         	movff	_fround$957+2,___ftmul@f1+2
  5394  006BAA  ECD2  F032         	call	___ftmul	;wreg free
  5395  006BAE  C015  F027         	movff	?___ftmul,_fround$958
  5396  006BB2  C016  F028         	movff	?___ftmul+1,_fround$958+1
  5397  006BB6  C017  F029         	movff	?___ftmul+2,_fround$958+2
  5398                           
  5399                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5400  006BBA  C027  F015         	movff	_fround$958,___ftmul@f1
  5401  006BBE  C028  F016         	movff	_fround$958+1,___ftmul@f1+1
  5402  006BC2  C029  F017         	movff	_fround$958+2,___ftmul@f1+2
  5403  006BC6  0E00               	movlw	0
  5404  006BC8  6E18               	movwf	___ftmul@f2,c
  5405  006BCA  0E00               	movlw	0
  5406  006BCC  6E19               	movwf	___ftmul@f2+1,c
  5407  006BCE  0E3F               	movlw	63
  5408  006BD0  6E1A               	movwf	___ftmul@f2+2,c
  5409  006BD2  ECD2  F032         	call	___ftmul	;wreg free
  5410  006BD6  C015  F024         	movff	?___ftmul,?_fround
  5411  006BDA  C016  F025         	movff	?___ftmul+1,?_fround+1
  5412  006BDE  C017  F026         	movff	?___ftmul+2,?_fround+2
  5413  006BE2  0012               	return	
  5414  006BE4                     l2440:
  5415                           
  5416                           ;doprnt.c: 415: else if(prec > 10)
  5417  006BE4  0E0A               	movlw	10
  5418  006BE6  642D               	cpfsgt	fround@prec,c
  5419  006BE8  D05D               	goto	l2448
  5420                           
  5421                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5422  006BEA  0E00               	movlw	0
  5423  006BEC  6E12               	movwf	___wmul@multiplicand+1,c
  5424  006BEE  0E03               	movlw	3
  5425  006BF0  6E11               	movwf	___wmul@multiplicand,c
  5426  006BF2  0E00               	movlw	0
  5427  006BF4  6E04               	movwf	___awmod@divisor+1,c
  5428  006BF6  0E0A               	movlw	10
  5429  006BF8  6E03               	movwf	___awmod@divisor,c
  5430  006BFA  C02D  F001         	movff	fround@prec,___awmod@dividend
  5431  006BFE  6A02               	clrf	___awmod@dividend+1,c
  5432  006C00  EC44  F030         	call	___awmod	;wreg free
  5433  006C04  C001  F00F         	movff	?___awmod,___wmul@multiplier
  5434  006C08  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  5435  006C0C  ECA1  F02E         	call	___wmul	;wreg free
  5436  006C10  0E1D               	movlw	low __npowers_
  5437  006C12  240F               	addwf	?___wmul,w,c
  5438  006C14  6EF6               	movwf	tblptrl,c
  5439  006C16  0E7F               	movlw	high __npowers_
  5440  006C18  2010               	addwfc	?___wmul+1,w,c
  5441  006C1A  6EF7               	movwf	tblptrh,c
  5442  006C1C                     	if	0	;There are less than 3 active tblptr bytes
  5443  006C1C                     	endif
  5444  006C1C  0009               	tblrd		*+
  5445  006C1E  CFF5 F018          	movff	tablat,___ftmul@f2
  5446  006C22  0009               	tblrd		*+
  5447  006C24  CFF5 F019          	movff	tablat,___ftmul@f2+1
  5448  006C28  000A               	tblrd		*-
  5449  006C2A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  5450  006C2E  0E00               	movlw	0
  5451  006C30  6E0A               	movwf	___awdiv@divisor+1,c
  5452  006C32  0E0A               	movlw	10
  5453  006C34  6E09               	movwf	___awdiv@divisor,c
  5454  006C36  C02D  F007         	movff	fround@prec,___awdiv@dividend
  5455  006C3A  6A08               	clrf	___awdiv@dividend+1,c
  5456  006C3C  ECBD  F030         	call	___awdiv	;wreg free
  5457  006C40  0E09               	movlw	9
  5458  006C42  2407               	addwf	?___awdiv,w,c
  5459  006C44  6E0F               	movwf	___wmul@multiplier,c
  5460  006C46  0E00               	movlw	0
  5461  006C48  2008               	addwfc	?___awdiv+1,w,c
  5462  006C4A  6E10               	movwf	___wmul@multiplier+1,c
  5463  006C4C  0E00               	movlw	0
  5464  006C4E  6E12               	movwf	___wmul@multiplicand+1,c
  5465  006C50  0E03               	movlw	3
  5466  006C52  6E11               	movwf	___wmul@multiplicand,c
  5467  006C54  ECA1  F02E         	call	___wmul	;wreg free
  5468  006C58  0E1D               	movlw	low __npowers_
  5469  006C5A  240F               	addwf	?___wmul,w,c
  5470  006C5C  6EF6               	movwf	tblptrl,c
  5471  006C5E  0E7F               	movlw	high __npowers_
  5472  006C60  2010               	addwfc	?___wmul+1,w,c
  5473  006C62  6EF7               	movwf	tblptrh,c
  5474  006C64                     	if	0	;There are less than 3 active tblptr bytes
  5475  006C64                     	endif
  5476  006C64  0009               	tblrd		*+
  5477  006C66  CFF5 F015          	movff	tablat,___ftmul@f1
  5478  006C6A  0009               	tblrd		*+
  5479  006C6C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5480  006C70  000A               	tblrd		*-
  5481  006C72  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5482  006C76  ECD2  F032         	call	___ftmul	;wreg free
  5483  006C7A  C015  F02A         	movff	?___ftmul,_fround$957
  5484  006C7E  C016  F02B         	movff	?___ftmul+1,_fround$957+1
  5485  006C82  C017  F02C         	movff	?___ftmul+2,_fround$957+2
  5486                           
  5487                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5488  006C86  C02A  F015         	movff	_fround$957,___ftmul@f1
  5489  006C8A  C02B  F016         	movff	_fround$957+1,___ftmul@f1+1
  5490  006C8E  C02C  F017         	movff	_fround$957+2,___ftmul@f1+2
  5491  006C92  0E00               	movlw	0
  5492  006C94  6E18               	movwf	___ftmul@f2,c
  5493  006C96  0E00               	movlw	0
  5494  006C98  6E19               	movwf	___ftmul@f2+1,c
  5495  006C9A  0E3F               	movlw	63
  5496  006C9C  6E1A               	movwf	___ftmul@f2+2,c
  5497  006C9E  ECD2  F032         	call	___ftmul	;wreg free
  5498  006CA2  D799               	goto	L7
  5499  006CA4                     l2448:
  5500                           
  5501                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5502  006CA4  502D               	movf	fround@prec,w,c
  5503  006CA6  0D03               	mullw	3
  5504  006CA8  0E1D               	movlw	low __npowers_
  5505  006CAA  24F3               	addwf	prodl,w,c
  5506  006CAC  6EF6               	movwf	tblptrl,c
  5507  006CAE  0E7F               	movlw	high __npowers_
  5508  006CB0  20F4               	addwfc	prodh,w,c
  5509  006CB2  6EF7               	movwf	tblptrh,c
  5510  006CB4                     	if	0	;There are less than 3 active tblptr bytes
  5511  006CB4                     	endif
  5512  006CB4  0009               	tblrd		*+
  5513  006CB6  CFF5 F015          	movff	tablat,___ftmul@f1
  5514  006CBA  0009               	tblrd		*+
  5515  006CBC  CFF5 F016          	movff	tablat,___ftmul@f1+1
  5516  006CC0  000A               	tblrd		*-
  5517  006CC2  CFF5 F017          	movff	tablat,___ftmul@f1+2
  5518  006CC6  0E00               	movlw	0
  5519  006CC8  6E18               	movwf	___ftmul@f2,c
  5520  006CCA  0E00               	movlw	0
  5521  006CCC  6E19               	movwf	___ftmul@f2+1,c
  5522  006CCE  0E3F               	movlw	63
  5523  006CD0  6E1A               	movwf	___ftmul@f2+2,c
  5524  006CD2  ECD2  F032         	call	___ftmul	;wreg free
  5525  006CD6  C015  F024         	movff	?___ftmul,?_fround
  5526  006CDA  C016  F025         	movff	?___ftmul+1,?_fround+1
  5527  006CDE  C017  F026         	movff	?___ftmul+2,?_fround+2
  5528  006CE2  0012               	return	
  5529  006CE4                     __end_of_fround:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           indf0	equ	0xFEF
  5538                           fsr0h	equ	0xFEA
  5539                           fsr0l	equ	0xFE9
  5540                           wreg	equ	0xFE8
  5541                           indf1	equ	0xFE7
  5542                           fsr1h	equ	0xFE2
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8
  5550                           
  5551 ;; *************** function ___wmul *****************
  5552 ;; Defined at:
  5553 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;  multiplier      2   14[COMRAM] unsigned int 
  5556 ;;  multiplicand    2   16[COMRAM] unsigned int 
  5557 ;; Auto vars:     Size  Location     Type
  5558 ;;  product         2   18[COMRAM] unsigned int 
  5559 ;; Return value:  Size  Location     Type
  5560 ;;                  2   14[COMRAM] unsigned int 
  5561 ;; Registers used:
  5562 ;;		wreg, status,2, status,0, prodl, prodh
  5563 ;; Tracked objects:
  5564 ;;		On entry : 0/0
  5565 ;;		On exit  : 0/0
  5566 ;;		Unchanged: 0/0
  5567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5568 ;;      Params:         4       0       0       0       0       0       0
  5569 ;;      Locals:         2       0       0       0       0       0       0
  5570 ;;      Temps:          0       0       0       0       0       0       0
  5571 ;;      Totals:         6       0       0       0       0       0       0
  5572 ;;Total ram usage:        6 bytes
  5573 ;; Hardware stack levels used:    1
  5574 ;; This function calls:
  5575 ;;		Nothing
  5576 ;; This function is called by:
  5577 ;;		_fround
  5578 ;;		_scale
  5579 ;;		_sprintf
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	text21
  5584  005D42                     __ptext21:
  5585                           	opt stack 0
  5586  005D42                     ___wmul:
  5587                           	opt stack 26
  5588                           
  5589                           ;incstack = 0
  5590  005D42  500F               	movf	___wmul@multiplier,w,c
  5591  005D44  0211               	mulwf	___wmul@multiplicand,c
  5592  005D46  CFF3 F013          	movff	prodl,___wmul@product
  5593  005D4A  CFF4 F014          	movff	prodh,___wmul@product+1
  5594  005D4E  500F               	movf	___wmul@multiplier,w,c
  5595  005D50  0212               	mulwf	___wmul@multiplicand+1,c
  5596  005D52  50F3               	movf	prodl,w,c
  5597  005D54  2614               	addwf	___wmul@product+1,f,c
  5598  005D56  5010               	movf	___wmul@multiplier+1,w,c
  5599  005D58  0211               	mulwf	___wmul@multiplicand,c
  5600  005D5A  50F3               	movf	prodl,w,c
  5601  005D5C  2614               	addwf	___wmul@product+1,f,c
  5602  005D5E  C013  F00F         	movff	___wmul@product,?___wmul
  5603  005D62  C014  F010         	movff	___wmul@product+1,?___wmul+1
  5604  005D66  0012               	return	
  5605  005D68                     __end_of___wmul:
  5606                           	opt stack 0
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           indf0	equ	0xFEF
  5614                           fsr0h	equ	0xFEA
  5615                           fsr0l	equ	0xFE9
  5616                           wreg	equ	0xFE8
  5617                           indf1	equ	0xFE7
  5618                           fsr1h	equ	0xFE2
  5619                           fsr1l	equ	0xFE1
  5620                           indf2	equ	0xFDF
  5621                           postinc2	equ	0xFDE
  5622                           postdec2	equ	0xFDD
  5623                           fsr2h	equ	0xFDA
  5624                           fsr2l	equ	0xFD9
  5625                           status	equ	0xFD8
  5626                           
  5627 ;; *************** function ___ftmul *****************
  5628 ;; Defined at:
  5629 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  f1              3   20[COMRAM] float 
  5632 ;;  f2              3   23[COMRAM] float 
  5633 ;; Auto vars:     Size  Location     Type
  5634 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5635 ;;  sign            1   34[COMRAM] unsigned char 
  5636 ;;  cntr            1   33[COMRAM] unsigned char 
  5637 ;;  exp             1   29[COMRAM] unsigned char 
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  3   20[COMRAM] float 
  5640 ;; Registers used:
  5641 ;;		wreg, status,2, status,0, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 0/0
  5644 ;;		On exit  : 0/0
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5647 ;;      Params:         6       0       0       0       0       0       0
  5648 ;;      Locals:         6       0       0       0       0       0       0
  5649 ;;      Temps:          3       0       0       0       0       0       0
  5650 ;;      Totals:        15       0       0       0       0       0       0
  5651 ;;Total ram usage:       15 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    1
  5654 ;; This function calls:
  5655 ;;		___ftpack
  5656 ;; This function is called by:
  5657 ;;		_fround
  5658 ;;		_scale
  5659 ;;		_sprintf
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text22
  5664  0065A4                     __ptext22:
  5665                           	opt stack 0
  5666  0065A4                     ___ftmul:
  5667                           	opt stack 25
  5668                           
  5669                           ;incstack = 0
  5670  0065A4  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5671  0065A8  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5672  0065AA  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5673  0065AC  3416               	rlcf	___ftmul@f1+1,w,c
  5674  0065AE  361B               	rlcf	??___ftmul& (0+255),f,c
  5675  0065B0  E301               	bnc	u1991
  5676  0065B2  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5677  0065B4                     u1991:
  5678  0065B4  501B               	movf	??___ftmul,w,c
  5679  0065B6  6E1E               	movwf	___ftmul@exp,c
  5680  0065B8  501E               	movf	___ftmul@exp,w,c
  5681  0065BA  A4D8               	btfss	status,2,c
  5682  0065BC  D007               	goto	l2288
  5683  0065BE  0E00               	movlw	0
  5684  0065C0  6E15               	movwf	?___ftmul,c
  5685  0065C2  0E00               	movlw	0
  5686  0065C4  6E16               	movwf	?___ftmul+1,c
  5687  0065C6  0E00               	movlw	0
  5688  0065C8  6E17               	movwf	?___ftmul+2,c
  5689  0065CA  0012               	return	
  5690  0065CC                     l2288:
  5691  0065CC  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5692  0065D0  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5693  0065D2  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5694  0065D4  3419               	rlcf	___ftmul@f2+1,w,c
  5695  0065D6  361B               	rlcf	??___ftmul& (0+255),f,c
  5696  0065D8  E301               	bnc	u2011
  5697  0065DA  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5698  0065DC                     u2011:
  5699  0065DC  501B               	movf	??___ftmul,w,c
  5700  0065DE  6E23               	movwf	___ftmul@sign,c
  5701  0065E0  5023               	movf	___ftmul@sign,w,c
  5702  0065E2  A4D8               	btfss	status,2,c
  5703  0065E4  D007               	goto	l2294
  5704  0065E6  0E00               	movlw	0
  5705  0065E8  6E15               	movwf	?___ftmul,c
  5706  0065EA  0E00               	movlw	0
  5707  0065EC  6E16               	movwf	?___ftmul+1,c
  5708  0065EE  0E00               	movlw	0
  5709  0065F0  6E17               	movwf	?___ftmul+2,c
  5710  0065F2  0012               	return	
  5711  0065F4                     l2294:
  5712  0065F4  5023               	movf	___ftmul@sign,w,c
  5713  0065F6  0F7B               	addlw	123
  5714  0065F8  261E               	addwf	___ftmul@exp,f,c
  5715  0065FA  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5716  0065FE  501A               	movf	___ftmul@f2+2,w,c
  5717  006600  1A23               	xorwf	___ftmul@sign,f,c
  5718  006602  0E80               	movlw	128
  5719  006604  1623               	andwf	___ftmul@sign,f,c
  5720  006606  8E16               	bsf	___ftmul@f1+1,7,c
  5721  006608  8E19               	bsf	___ftmul@f2+1,7,c
  5722  00660A  0EFF               	movlw	255
  5723  00660C  1618               	andwf	___ftmul@f2,f,c
  5724  00660E  0EFF               	movlw	255
  5725  006610  1619               	andwf	___ftmul@f2+1,f,c
  5726  006612  0E00               	movlw	0
  5727  006614  161A               	andwf	___ftmul@f2+2,f,c
  5728  006616  0E00               	movlw	0
  5729  006618  6E1F               	movwf	___ftmul@f3_as_product,c
  5730  00661A  0E00               	movlw	0
  5731  00661C  6E20               	movwf	___ftmul@f3_as_product+1,c
  5732  00661E  0E00               	movlw	0
  5733  006620  6E21               	movwf	___ftmul@f3_as_product+2,c
  5734  006622  0E07               	movlw	7
  5735  006624  6E22               	movwf	___ftmul@cntr,c
  5736  006626                     l2308:
  5737  006626  A015               	btfss	___ftmul@f1,0,c
  5738  006628  D006               	goto	l2312
  5739  00662A  5018               	movf	___ftmul@f2,w,c
  5740  00662C  261F               	addwf	___ftmul@f3_as_product,f,c
  5741  00662E  5019               	movf	___ftmul@f2+1,w,c
  5742  006630  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5743  006632  501A               	movf	___ftmul@f2+2,w,c
  5744  006634  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5745  006636                     l2312:
  5746  006636  90D8               	bcf	status,0,c
  5747  006638  3217               	rrcf	___ftmul@f1+2,f,c
  5748  00663A  3216               	rrcf	___ftmul@f1+1,f,c
  5749  00663C  3215               	rrcf	___ftmul@f1,f,c
  5750  00663E  90D8               	bcf	status,0,c
  5751  006640  3618               	rlcf	___ftmul@f2,f,c
  5752  006642  3619               	rlcf	___ftmul@f2+1,f,c
  5753  006644  361A               	rlcf	___ftmul@f2+2,f,c
  5754  006646  2E22               	decfsz	___ftmul@cntr,f,c
  5755  006648  D7EE               	goto	l2308
  5756  00664A  0E09               	movlw	9
  5757  00664C  6E22               	movwf	___ftmul@cntr,c
  5758  00664E                     l2318:
  5759  00664E  A015               	btfss	___ftmul@f1,0,c
  5760  006650  D006               	goto	l2322
  5761  006652  5018               	movf	___ftmul@f2,w,c
  5762  006654  261F               	addwf	___ftmul@f3_as_product,f,c
  5763  006656  5019               	movf	___ftmul@f2+1,w,c
  5764  006658  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5765  00665A  501A               	movf	___ftmul@f2+2,w,c
  5766  00665C  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5767  00665E                     l2322:
  5768  00665E  90D8               	bcf	status,0,c
  5769  006660  3217               	rrcf	___ftmul@f1+2,f,c
  5770  006662  3216               	rrcf	___ftmul@f1+1,f,c
  5771  006664  3215               	rrcf	___ftmul@f1,f,c
  5772  006666  90D8               	bcf	status,0,c
  5773  006668  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  5774  00666A  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  5775  00666C  321F               	rrcf	___ftmul@f3_as_product,f,c
  5776  00666E  2E22               	decfsz	___ftmul@cntr,f,c
  5777  006670  D7EE               	goto	l2318
  5778  006672  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5779  006676  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5780  00667A  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5781  00667E  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  5782  006682  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  5783  006686  EC90  F031         	call	___ftpack	;wreg free
  5784  00668A  C001  F015         	movff	?___ftpack,?___ftmul
  5785  00668E  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  5786  006692  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  5787  006696  0012               	return	
  5788  006698                     __end_of___ftmul:
  5789                           	opt stack 0
  5790                           tblptru	equ	0xFF8
  5791                           tblptrh	equ	0xFF7
  5792                           tblptrl	equ	0xFF6
  5793                           tablat	equ	0xFF5
  5794                           prodh	equ	0xFF4
  5795                           prodl	equ	0xFF3
  5796                           indf0	equ	0xFEF
  5797                           fsr0h	equ	0xFEA
  5798                           fsr0l	equ	0xFE9
  5799                           wreg	equ	0xFE8
  5800                           indf1	equ	0xFE7
  5801                           fsr1h	equ	0xFE2
  5802                           fsr1l	equ	0xFE1
  5803                           indf2	equ	0xFDF
  5804                           postinc2	equ	0xFDE
  5805                           postdec2	equ	0xFDD
  5806                           fsr2h	equ	0xFDA
  5807                           fsr2l	equ	0xFD9
  5808                           status	equ	0xFD8
  5809                           
  5810 ;; *************** function ___awmod *****************
  5811 ;; Defined at:
  5812 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  5813 ;; Parameters:    Size  Location     Type
  5814 ;;  dividend        2    0[COMRAM] int 
  5815 ;;  divisor         2    2[COMRAM] int 
  5816 ;; Auto vars:     Size  Location     Type
  5817 ;;  sign            1    5[COMRAM] unsigned char 
  5818 ;;  counter         1    4[COMRAM] unsigned char 
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  2    0[COMRAM] int 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2, status,0
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5828 ;;      Params:         4       0       0       0       0       0       0
  5829 ;;      Locals:         2       0       0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0
  5831 ;;      Totals:         6       0       0       0       0       0       0
  5832 ;;Total ram usage:        6 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; This function calls:
  5835 ;;		Nothing
  5836 ;; This function is called by:
  5837 ;;		_fround
  5838 ;;		_scale
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text23
  5843  006088                     __ptext23:
  5844                           	opt stack 0
  5845  006088                     ___awmod:
  5846                           	opt stack 26
  5847                           
  5848                           ;incstack = 0
  5849  006088  0E00               	movlw	0
  5850  00608A  6E06               	movwf	___awmod@sign,c
  5851  00608C  AE02               	btfss	___awmod@dividend+1,7,c
  5852  00608E  D006               	goto	l2382
  5853  006090  6C01               	negf	___awmod@dividend,c
  5854  006092  1E02               	comf	___awmod@dividend+1,f,c
  5855  006094  B0D8               	btfsc	status,0,c
  5856  006096  2A02               	incf	___awmod@dividend+1,f,c
  5857  006098  0E01               	movlw	1
  5858  00609A  6E06               	movwf	___awmod@sign,c
  5859  00609C                     l2382:
  5860  00609C  AE04               	btfss	___awmod@divisor+1,7,c
  5861  00609E  D004               	goto	l2386
  5862  0060A0  6C03               	negf	___awmod@divisor,c
  5863  0060A2  1E04               	comf	___awmod@divisor+1,f,c
  5864  0060A4  B0D8               	btfsc	status,0,c
  5865  0060A6  2A04               	incf	___awmod@divisor+1,f,c
  5866  0060A8                     l2386:
  5867  0060A8  5003               	movf	___awmod@divisor,w,c
  5868  0060AA  1004               	iorwf	___awmod@divisor+1,w,c
  5869  0060AC  B4D8               	btfsc	status,2,c
  5870  0060AE  D018               	goto	l2402
  5871  0060B0  0E01               	movlw	1
  5872  0060B2  6E05               	movwf	___awmod@counter,c
  5873  0060B4  D004               	goto	l2392
  5874  0060B6                     l2390:
  5875  0060B6  90D8               	bcf	status,0,c
  5876  0060B8  3603               	rlcf	___awmod@divisor,f,c
  5877  0060BA  3604               	rlcf	___awmod@divisor+1,f,c
  5878  0060BC  2A05               	incf	___awmod@counter,f,c
  5879  0060BE                     l2392:
  5880  0060BE  AE04               	btfss	___awmod@divisor+1,7,c
  5881  0060C0  D7FA               	goto	l2390
  5882  0060C2                     l2394:
  5883  0060C2  5003               	movf	___awmod@divisor,w,c
  5884  0060C4  5C01               	subwf	___awmod@dividend,w,c
  5885  0060C6  5004               	movf	___awmod@divisor+1,w,c
  5886  0060C8  5802               	subwfb	___awmod@dividend+1,w,c
  5887  0060CA  A0D8               	btfss	status,0,c
  5888  0060CC  D004               	goto	l2398
  5889  0060CE  5003               	movf	___awmod@divisor,w,c
  5890  0060D0  5E01               	subwf	___awmod@dividend,f,c
  5891  0060D2  5004               	movf	___awmod@divisor+1,w,c
  5892  0060D4  5A02               	subwfb	___awmod@dividend+1,f,c
  5893  0060D6                     l2398:
  5894  0060D6  90D8               	bcf	status,0,c
  5895  0060D8  3204               	rrcf	___awmod@divisor+1,f,c
  5896  0060DA  3203               	rrcf	___awmod@divisor,f,c
  5897  0060DC  2E05               	decfsz	___awmod@counter,f,c
  5898  0060DE  D7F1               	goto	l2394
  5899  0060E0                     l2402:
  5900  0060E0  5006               	movf	___awmod@sign,w,c
  5901  0060E2  B4D8               	btfsc	status,2,c
  5902  0060E4  D004               	goto	l2406
  5903  0060E6  6C01               	negf	___awmod@dividend,c
  5904  0060E8  1E02               	comf	___awmod@dividend+1,f,c
  5905  0060EA  B0D8               	btfsc	status,0,c
  5906  0060EC  2A02               	incf	___awmod@dividend+1,f,c
  5907  0060EE                     l2406:
  5908  0060EE  C001  F001         	movff	___awmod@dividend,?___awmod
  5909  0060F2  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  5910  0060F6  0012               	return	
  5911  0060F8                     __end_of___awmod:
  5912                           	opt stack 0
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           indf0	equ	0xFEF
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           indf1	equ	0xFE7
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           postdec2	equ	0xFDD
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function ___awdiv *****************
  5934 ;; Defined at:
  5935 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  dividend        2    6[COMRAM] int 
  5938 ;;  divisor         2    8[COMRAM] int 
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;  quotient        2   12[COMRAM] int 
  5941 ;;  sign            1   11[COMRAM] unsigned char 
  5942 ;;  counter         1   10[COMRAM] unsigned char 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  2    6[COMRAM] int 
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5952 ;;      Params:         4       0       0       0       0       0       0
  5953 ;;      Locals:         4       0       0       0       0       0       0
  5954 ;;      Temps:          0       0       0       0       0       0       0
  5955 ;;      Totals:         8       0       0       0       0       0       0
  5956 ;;Total ram usage:        8 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_fround
  5962 ;;		_scale
  5963 ;;		_sprintf
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text24
  5968  00617A                     __ptext24:
  5969                           	opt stack 0
  5970  00617A                     ___awdiv:
  5971                           	opt stack 26
  5972                           
  5973                           ;incstack = 0
  5974  00617A  0E00               	movlw	0
  5975  00617C  6E0C               	movwf	___awdiv@sign,c
  5976  00617E  AE0A               	btfss	___awdiv@divisor+1,7,c
  5977  006180  D006               	goto	l2338
  5978  006182  6C09               	negf	___awdiv@divisor,c
  5979  006184  1E0A               	comf	___awdiv@divisor+1,f,c
  5980  006186  B0D8               	btfsc	status,0,c
  5981  006188  2A0A               	incf	___awdiv@divisor+1,f,c
  5982  00618A  0E01               	movlw	1
  5983  00618C  6E0C               	movwf	___awdiv@sign,c
  5984  00618E                     l2338:
  5985  00618E  AE08               	btfss	___awdiv@dividend+1,7,c
  5986  006190  D006               	goto	l2344
  5987  006192  6C07               	negf	___awdiv@dividend,c
  5988  006194  1E08               	comf	___awdiv@dividend+1,f,c
  5989  006196  B0D8               	btfsc	status,0,c
  5990  006198  2A08               	incf	___awdiv@dividend+1,f,c
  5991  00619A  0E01               	movlw	1
  5992  00619C  1A0C               	xorwf	___awdiv@sign,f,c
  5993  00619E                     l2344:
  5994  00619E  0E00               	movlw	0
  5995  0061A0  6E0E               	movwf	___awdiv@quotient+1,c
  5996  0061A2  0E00               	movlw	0
  5997  0061A4  6E0D               	movwf	___awdiv@quotient,c
  5998  0061A6  5009               	movf	___awdiv@divisor,w,c
  5999  0061A8  100A               	iorwf	___awdiv@divisor+1,w,c
  6000  0061AA  B4D8               	btfsc	status,2,c
  6001  0061AC  D01C               	goto	l2366
  6002  0061AE  0E01               	movlw	1
  6003  0061B0  6E0B               	movwf	___awdiv@counter,c
  6004  0061B2  D004               	goto	l2352
  6005  0061B4                     l2350:
  6006  0061B4  90D8               	bcf	status,0,c
  6007  0061B6  3609               	rlcf	___awdiv@divisor,f,c
  6008  0061B8  360A               	rlcf	___awdiv@divisor+1,f,c
  6009  0061BA  2A0B               	incf	___awdiv@counter,f,c
  6010  0061BC                     l2352:
  6011  0061BC  AE0A               	btfss	___awdiv@divisor+1,7,c
  6012  0061BE  D7FA               	goto	l2350
  6013  0061C0                     l2354:
  6014  0061C0  90D8               	bcf	status,0,c
  6015  0061C2  360D               	rlcf	___awdiv@quotient,f,c
  6016  0061C4  360E               	rlcf	___awdiv@quotient+1,f,c
  6017  0061C6  5009               	movf	___awdiv@divisor,w,c
  6018  0061C8  5C07               	subwf	___awdiv@dividend,w,c
  6019  0061CA  500A               	movf	___awdiv@divisor+1,w,c
  6020  0061CC  5808               	subwfb	___awdiv@dividend+1,w,c
  6021  0061CE  A0D8               	btfss	status,0,c
  6022  0061D0  D005               	goto	l2362
  6023  0061D2  5009               	movf	___awdiv@divisor,w,c
  6024  0061D4  5E07               	subwf	___awdiv@dividend,f,c
  6025  0061D6  500A               	movf	___awdiv@divisor+1,w,c
  6026  0061D8  5A08               	subwfb	___awdiv@dividend+1,f,c
  6027  0061DA  800D               	bsf	___awdiv@quotient,0,c
  6028  0061DC                     l2362:
  6029  0061DC  90D8               	bcf	status,0,c
  6030  0061DE  320A               	rrcf	___awdiv@divisor+1,f,c
  6031  0061E0  3209               	rrcf	___awdiv@divisor,f,c
  6032  0061E2  2E0B               	decfsz	___awdiv@counter,f,c
  6033  0061E4  D7ED               	goto	l2354
  6034  0061E6                     l2366:
  6035  0061E6  500C               	movf	___awdiv@sign,w,c
  6036  0061E8  B4D8               	btfsc	status,2,c
  6037  0061EA  D004               	goto	l2370
  6038  0061EC  6C0D               	negf	___awdiv@quotient,c
  6039  0061EE  1E0E               	comf	___awdiv@quotient+1,f,c
  6040  0061F0  B0D8               	btfsc	status,0,c
  6041  0061F2  2A0E               	incf	___awdiv@quotient+1,f,c
  6042  0061F4                     l2370:
  6043  0061F4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  6044  0061F8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  6045  0061FC  0012               	return	
  6046  0061FE                     __end_of___awdiv:
  6047                           	opt stack 0
  6048                           tblptru	equ	0xFF8
  6049                           tblptrh	equ	0xFF7
  6050                           tblptrl	equ	0xFF6
  6051                           tablat	equ	0xFF5
  6052                           prodh	equ	0xFF4
  6053                           prodl	equ	0xFF3
  6054                           indf0	equ	0xFEF
  6055                           fsr0h	equ	0xFEA
  6056                           fsr0l	equ	0xFE9
  6057                           wreg	equ	0xFE8
  6058                           indf1	equ	0xFE7
  6059                           fsr1h	equ	0xFE2
  6060                           fsr1l	equ	0xFE1
  6061                           indf2	equ	0xFDF
  6062                           postinc2	equ	0xFDE
  6063                           postdec2	equ	0xFDD
  6064                           fsr2h	equ	0xFDA
  6065                           fsr2l	equ	0xFD9
  6066                           status	equ	0xFD8
  6067                           
  6068 ;; *************** function __tdiv_to_l_ *****************
  6069 ;; Defined at:
  6070 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  f1              3    0[COMRAM] float 
  6073 ;;  f2              3    3[COMRAM] float 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  quot            4    9[COMRAM] unsigned long 
  6076 ;;  exp1            1   14[COMRAM] unsigned char 
  6077 ;;  cntr            1   13[COMRAM] unsigned char 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  4    0[COMRAM] unsigned long 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6087 ;;      Params:         6       0       0       0       0       0       0
  6088 ;;      Locals:         6       0       0       0       0       0       0
  6089 ;;      Temps:          3       0       0       0       0       0       0
  6090 ;;      Totals:        15       0       0       0       0       0       0
  6091 ;;Total ram usage:       15 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; This function calls:
  6094 ;;		Nothing
  6095 ;; This function is called by:
  6096 ;;		_sprintf
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           	psect	text25
  6101  0067C0                     __ptext25:
  6102                           	opt stack 0
  6103  0067C0                     __tdiv_to_l_:
  6104                           	opt stack 27
  6105                           
  6106                           ;incstack = 0
  6107  0067C0  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6108  0067C4  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6109  0067C6  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6110  0067C8  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  6111  0067CA  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6112  0067CC  E301               	bnc	u2271
  6113  0067CE  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6114  0067D0                     u2271:
  6115  0067D0  5007               	movf	??__tdiv_to_l_,w,c
  6116  0067D2  6E0F               	movwf	__tdiv_to_l_@exp1,c
  6117  0067D4  500F               	movf	__tdiv_to_l_@exp1,w,c
  6118  0067D6  A4D8               	btfss	status,2,c
  6119  0067D8  D009               	goto	l2508
  6120  0067DA  0E00               	movlw	0
  6121  0067DC  6E01               	movwf	?__tdiv_to_l_,c
  6122  0067DE  0E00               	movlw	0
  6123  0067E0  6E02               	movwf	?__tdiv_to_l_+1,c
  6124  0067E2  0E00               	movlw	0
  6125  0067E4  6E03               	movwf	?__tdiv_to_l_+2,c
  6126  0067E6  0E00               	movlw	0
  6127  0067E8  6E04               	movwf	?__tdiv_to_l_+3,c
  6128  0067EA  0012               	return	
  6129  0067EC                     l2508:
  6130  0067EC  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6131  0067F0  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  6132  0067F2  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  6133  0067F4  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  6134  0067F6  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  6135  0067F8  E301               	bnc	u2291
  6136  0067FA  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  6137  0067FC                     u2291:
  6138  0067FC  5007               	movf	??__tdiv_to_l_,w,c
  6139  0067FE  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6140  006800  500E               	movf	__tdiv_to_l_@cntr,w,c
  6141  006802  A4D8               	btfss	status,2,c
  6142  006804  D009               	goto	l2514
  6143  006806  0E00               	movlw	0
  6144  006808  6E01               	movwf	?__tdiv_to_l_,c
  6145  00680A  0E00               	movlw	0
  6146  00680C  6E02               	movwf	?__tdiv_to_l_+1,c
  6147  00680E  0E00               	movlw	0
  6148  006810  6E03               	movwf	?__tdiv_to_l_+2,c
  6149  006812  0E00               	movlw	0
  6150  006814  6E04               	movwf	?__tdiv_to_l_+3,c
  6151  006816  0012               	return	
  6152  006818                     l2514:
  6153  006818  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  6154  00681A  0EFF               	movlw	255
  6155  00681C  1601               	andwf	__tdiv_to_l_@f1,f,c
  6156  00681E  0EFF               	movlw	255
  6157  006820  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  6158  006822  0E00               	movlw	0
  6159  006824  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  6160  006826  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  6161  006828  0EFF               	movlw	255
  6162  00682A  1604               	andwf	__tdiv_to_l_@f2,f,c
  6163  00682C  0EFF               	movlw	255
  6164  00682E  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  6165  006830  0E00               	movlw	0
  6166  006832  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  6167  006834  0E00               	movlw	0
  6168  006836  6E0A               	movwf	__tdiv_to_l_@quot,c
  6169  006838  0E00               	movlw	0
  6170  00683A  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  6171  00683C  0E00               	movlw	0
  6172  00683E  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  6173  006840  0E00               	movlw	0
  6174  006842  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  6175  006844  0E7F               	movlw	127
  6176  006846  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6177  006848  500E               	movf	__tdiv_to_l_@cntr,w,c
  6178  00684A  0F98               	addlw	152
  6179  00684C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  6180  00684E  0E18               	movlw	24
  6181  006850  6E0E               	movwf	__tdiv_to_l_@cntr,c
  6182  006852                     l613:
  6183  006852  90D8               	bcf	status,0,c
  6184  006854  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6185  006856  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6186  006858  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6187  00685A  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6188  00685C  5004               	movf	__tdiv_to_l_@f2,w,c
  6189  00685E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  6190  006860  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6191  006862  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  6192  006864  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6193  006866  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  6194  006868  A0D8               	btfss	status,0,c
  6195  00686A  D007               	goto	l614
  6196  00686C  5004               	movf	__tdiv_to_l_@f2,w,c
  6197  00686E  5E01               	subwf	__tdiv_to_l_@f1,f,c
  6198  006870  5005               	movf	__tdiv_to_l_@f2+1,w,c
  6199  006872  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  6200  006874  5006               	movf	__tdiv_to_l_@f2+2,w,c
  6201  006876  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  6202  006878  800A               	bsf	__tdiv_to_l_@quot,0,c
  6203  00687A                     l614:
  6204  00687A  90D8               	bcf	status,0,c
  6205  00687C  3601               	rlcf	__tdiv_to_l_@f1,f,c
  6206  00687E  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  6207  006880  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  6208  006882  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  6209  006884  D7E6               	goto	l613
  6210  006886  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  6211  006888  D016               	goto	l2548
  6212  00688A  500F               	movf	__tdiv_to_l_@exp1,w,c
  6213  00688C  0A80               	xorlw	128
  6214  00688E  0F97               	addlw	151
  6215  006890  B0D8               	btfsc	status,0,c
  6216  006892  D009               	goto	l2544
  6217  006894  0E00               	movlw	0
  6218  006896  6E01               	movwf	?__tdiv_to_l_,c
  6219  006898  0E00               	movlw	0
  6220  00689A  6E02               	movwf	?__tdiv_to_l_+1,c
  6221  00689C  0E00               	movlw	0
  6222  00689E  6E03               	movwf	?__tdiv_to_l_+2,c
  6223  0068A0  0E00               	movlw	0
  6224  0068A2  6E04               	movwf	?__tdiv_to_l_+3,c
  6225  0068A4  0012               	return	
  6226  0068A6                     l2544:
  6227  0068A6  90D8               	bcf	status,0,c
  6228  0068A8  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  6229  0068AA  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  6230  0068AC  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  6231  0068AE  320A               	rrcf	__tdiv_to_l_@quot,f,c
  6232  0068B0  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  6233  0068B2  D7F9               	goto	l2544
  6234  0068B4  D015               	goto	l620
  6235  0068B6                     l2548:
  6236  0068B6  0E17               	movlw	23
  6237  0068B8  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  6238  0068BA  D00F               	goto	l2556
  6239  0068BC  0E00               	movlw	0
  6240  0068BE  6E01               	movwf	?__tdiv_to_l_,c
  6241  0068C0  0E00               	movlw	0
  6242  0068C2  6E02               	movwf	?__tdiv_to_l_+1,c
  6243  0068C4  0E00               	movlw	0
  6244  0068C6  6E03               	movwf	?__tdiv_to_l_+2,c
  6245  0068C8  0E00               	movlw	0
  6246  0068CA  6E04               	movwf	?__tdiv_to_l_+3,c
  6247  0068CC  0012               	return	
  6248  0068CE                     l2554:
  6249  0068CE  90D8               	bcf	status,0,c
  6250  0068D0  360A               	rlcf	__tdiv_to_l_@quot,f,c
  6251  0068D2  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  6252  0068D4  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  6253  0068D6  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  6254  0068D8  060F               	decf	__tdiv_to_l_@exp1,f,c
  6255  0068DA                     l2556:
  6256  0068DA  500F               	movf	__tdiv_to_l_@exp1,w,c
  6257  0068DC  A4D8               	btfss	status,2,c
  6258  0068DE  D7F7               	goto	l2554
  6259  0068E0                     l620:
  6260  0068E0  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6261  0068E4  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6262  0068E8  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6263  0068EC  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6264  0068F0  0012               	return		;funcret
  6265  0068F2                     __end_of__tdiv_to_l_:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           indf0	equ	0xFEF
  6274                           fsr0h	equ	0xFEA
  6275                           fsr0l	equ	0xFE9
  6276                           wreg	equ	0xFE8
  6277                           indf1	equ	0xFE7
  6278                           fsr1h	equ	0xFE2
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function __div_to_l_ *****************
  6288 ;; Defined at:
  6289 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  f1              3    0[COMRAM] unsigned long 
  6292 ;;  f2              3    3[COMRAM] unsigned long 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;  quot            4    6[COMRAM] unsigned long 
  6295 ;;  exp1            1   11[COMRAM] unsigned char 
  6296 ;;  cntr            1   10[COMRAM] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  4    0[COMRAM] unsigned long 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6306 ;;      Params:         6       0       0       0       0       0       0
  6307 ;;      Locals:         6       0       0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0
  6309 ;;      Totals:        12       0       0       0       0       0       0
  6310 ;;Total ram usage:       12 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; This function calls:
  6313 ;;		Nothing
  6314 ;; This function is called by:
  6315 ;;		_sprintf
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           	psect	text26
  6320  006698                     __ptext26:
  6321                           	opt stack 0
  6322  006698                     __div_to_l_:
  6323                           	opt stack 27
  6324                           
  6325                           ;incstack = 0
  6326  006698  3403               	rlcf	__div_to_l_@f1+2,w,c
  6327  00669A  3404               	rlcf	__div_to_l_@f1+3,w,c
  6328  00669C  6E0C               	movwf	__div_to_l_@exp1,c
  6329  00669E  500C               	movf	__div_to_l_@exp1,w,c
  6330  0066A0  A4D8               	btfss	status,2,c
  6331  0066A2  D009               	goto	l2564
  6332  0066A4  0E00               	movlw	0
  6333  0066A6  6E01               	movwf	?__div_to_l_,c
  6334  0066A8  0E00               	movlw	0
  6335  0066AA  6E02               	movwf	?__div_to_l_+1,c
  6336  0066AC  0E00               	movlw	0
  6337  0066AE  6E03               	movwf	?__div_to_l_+2,c
  6338  0066B0  0E00               	movlw	0
  6339  0066B2  6E04               	movwf	?__div_to_l_+3,c
  6340  0066B4  0012               	return	
  6341  0066B6                     l2564:
  6342  0066B6  3406               	rlcf	__div_to_l_@f2+2,w,c
  6343  0066B8  3407               	rlcf	__div_to_l_@f2+3,w,c
  6344  0066BA  6E0B               	movwf	__div_to_l_@cntr,c
  6345  0066BC  500B               	movf	__div_to_l_@cntr,w,c
  6346  0066BE  A4D8               	btfss	status,2,c
  6347  0066C0  D009               	goto	l2570
  6348  0066C2  0E00               	movlw	0
  6349  0066C4  6E01               	movwf	?__div_to_l_,c
  6350  0066C6  0E00               	movlw	0
  6351  0066C8  6E02               	movwf	?__div_to_l_+1,c
  6352  0066CA  0E00               	movlw	0
  6353  0066CC  6E03               	movwf	?__div_to_l_+2,c
  6354  0066CE  0E00               	movlw	0
  6355  0066D0  6E04               	movwf	?__div_to_l_+3,c
  6356  0066D2  0012               	return	
  6357  0066D4                     l2570:
  6358  0066D4  8E03               	bsf	__div_to_l_@f1+2,7,c
  6359  0066D6  0EFF               	movlw	255
  6360  0066D8  1601               	andwf	__div_to_l_@f1,f,c
  6361  0066DA  0EFF               	movlw	255
  6362  0066DC  1602               	andwf	__div_to_l_@f1+1,f,c
  6363  0066DE  0EFF               	movlw	255
  6364  0066E0  1603               	andwf	__div_to_l_@f1+2,f,c
  6365  0066E2  0E00               	movlw	0
  6366  0066E4  1604               	andwf	__div_to_l_@f1+3,f,c
  6367  0066E6  8E06               	bsf	__div_to_l_@f2+2,7,c
  6368  0066E8  0EFF               	movlw	255
  6369  0066EA  1604               	andwf	__div_to_l_@f2,f,c
  6370  0066EC  0EFF               	movlw	255
  6371  0066EE  1605               	andwf	__div_to_l_@f2+1,f,c
  6372  0066F0  0EFF               	movlw	255
  6373  0066F2  1606               	andwf	__div_to_l_@f2+2,f,c
  6374  0066F4  0E00               	movlw	0
  6375  0066F6  1607               	andwf	__div_to_l_@f2+3,f,c
  6376  0066F8  0E00               	movlw	0
  6377  0066FA  6E07               	movwf	__div_to_l_@quot,c
  6378  0066FC  0E00               	movlw	0
  6379  0066FE  6E08               	movwf	__div_to_l_@quot+1,c
  6380  006700  0E00               	movlw	0
  6381  006702  6E09               	movwf	__div_to_l_@quot+2,c
  6382  006704  0E00               	movlw	0
  6383  006706  6E0A               	movwf	__div_to_l_@quot+3,c
  6384  006708  0E7F               	movlw	127
  6385  00670A  5E0C               	subwf	__div_to_l_@exp1,f,c
  6386  00670C  500B               	movf	__div_to_l_@cntr,w,c
  6387  00670E  0FA0               	addlw	160
  6388  006710  5E0C               	subwf	__div_to_l_@exp1,f,c
  6389  006712  0E20               	movlw	32
  6390  006714  6E0B               	movwf	__div_to_l_@cntr,c
  6391  006716                     l2584:
  6392  006716  90D8               	bcf	status,0,c
  6393  006718  3607               	rlcf	__div_to_l_@quot,f,c
  6394  00671A  3608               	rlcf	__div_to_l_@quot+1,f,c
  6395  00671C  3609               	rlcf	__div_to_l_@quot+2,f,c
  6396  00671E  360A               	rlcf	__div_to_l_@quot+3,f,c
  6397  006720  5004               	movf	__div_to_l_@f2,w,c
  6398  006722  5C01               	subwf	__div_to_l_@f1,w,c
  6399  006724  5005               	movf	__div_to_l_@f2+1,w,c
  6400  006726  5802               	subwfb	__div_to_l_@f1+1,w,c
  6401  006728  5006               	movf	__div_to_l_@f2+2,w,c
  6402  00672A  5803               	subwfb	__div_to_l_@f1+2,w,c
  6403  00672C  5007               	movf	__div_to_l_@f2+3,w,c
  6404  00672E  5804               	subwfb	__div_to_l_@f1+3,w,c
  6405  006730  A0D8               	btfss	status,0,c
  6406  006732  D009               	goto	l2592
  6407  006734  5004               	movf	__div_to_l_@f2,w,c
  6408  006736  5E01               	subwf	__div_to_l_@f1,f,c
  6409  006738  5005               	movf	__div_to_l_@f2+1,w,c
  6410  00673A  5A02               	subwfb	__div_to_l_@f1+1,f,c
  6411  00673C  5006               	movf	__div_to_l_@f2+2,w,c
  6412  00673E  5A03               	subwfb	__div_to_l_@f1+2,f,c
  6413  006740  5007               	movf	__div_to_l_@f2+3,w,c
  6414  006742  5A04               	subwfb	__div_to_l_@f1+3,f,c
  6415  006744  8007               	bsf	__div_to_l_@quot,0,c
  6416  006746                     l2592:
  6417  006746  90D8               	bcf	status,0,c
  6418  006748  3601               	rlcf	__div_to_l_@f1,f,c
  6419  00674A  3602               	rlcf	__div_to_l_@f1+1,f,c
  6420  00674C  3603               	rlcf	__div_to_l_@f1+2,f,c
  6421  00674E  3604               	rlcf	__div_to_l_@f1+3,f,c
  6422  006750  2E0B               	decfsz	__div_to_l_@cntr,f,c
  6423  006752  D7E1               	goto	l2584
  6424  006754  AE0C               	btfss	__div_to_l_@exp1,7,c
  6425  006756  D016               	goto	l2608
  6426  006758  500C               	movf	__div_to_l_@exp1,w,c
  6427  00675A  0A80               	xorlw	128
  6428  00675C  0F9F               	addlw	159
  6429  00675E  B0D8               	btfsc	status,0,c
  6430  006760  D009               	goto	l2604
  6431  006762  0E00               	movlw	0
  6432  006764  6E01               	movwf	?__div_to_l_,c
  6433  006766  0E00               	movlw	0
  6434  006768  6E02               	movwf	?__div_to_l_+1,c
  6435  00676A  0E00               	movlw	0
  6436  00676C  6E03               	movwf	?__div_to_l_+2,c
  6437  00676E  0E00               	movlw	0
  6438  006770  6E04               	movwf	?__div_to_l_+3,c
  6439  006772  0012               	return	
  6440  006774                     l2604:
  6441  006774  90D8               	bcf	status,0,c
  6442  006776  320A               	rrcf	__div_to_l_@quot+3,f,c
  6443  006778  3209               	rrcf	__div_to_l_@quot+2,f,c
  6444  00677A  3208               	rrcf	__div_to_l_@quot+1,f,c
  6445  00677C  3207               	rrcf	__div_to_l_@quot,f,c
  6446  00677E  3E0C               	incfsz	__div_to_l_@exp1,f,c
  6447  006780  D7F9               	goto	l2604
  6448  006782  D015               	goto	l516
  6449  006784                     l2608:
  6450  006784  0E1F               	movlw	31
  6451  006786  640C               	cpfsgt	__div_to_l_@exp1,c
  6452  006788  D00F               	goto	l2616
  6453  00678A  0E00               	movlw	0
  6454  00678C  6E01               	movwf	?__div_to_l_,c
  6455  00678E  0E00               	movlw	0
  6456  006790  6E02               	movwf	?__div_to_l_+1,c
  6457  006792  0E00               	movlw	0
  6458  006794  6E03               	movwf	?__div_to_l_+2,c
  6459  006796  0E00               	movlw	0
  6460  006798  6E04               	movwf	?__div_to_l_+3,c
  6461  00679A  0012               	return	
  6462  00679C                     l2614:
  6463  00679C  90D8               	bcf	status,0,c
  6464  00679E  3607               	rlcf	__div_to_l_@quot,f,c
  6465  0067A0  3608               	rlcf	__div_to_l_@quot+1,f,c
  6466  0067A2  3609               	rlcf	__div_to_l_@quot+2,f,c
  6467  0067A4  360A               	rlcf	__div_to_l_@quot+3,f,c
  6468  0067A6  060C               	decf	__div_to_l_@exp1,f,c
  6469  0067A8                     l2616:
  6470  0067A8  500C               	movf	__div_to_l_@exp1,w,c
  6471  0067AA  A4D8               	btfss	status,2,c
  6472  0067AC  D7F7               	goto	l2614
  6473  0067AE                     l516:
  6474  0067AE  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  6475  0067B2  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6476  0067B6  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6477  0067BA  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6478  0067BE  0012               	return		;funcret
  6479  0067C0                     __end_of__div_to_l_:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           indf0	equ	0xFEF
  6488                           fsr0h	equ	0xFEA
  6489                           fsr0l	equ	0xFE9
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function ___lltoft *****************
  6502 ;; Defined at:
  6503 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  c               4    8[COMRAM] unsigned long 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  exp             1   16[COMRAM] unsigned char 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  3    8[COMRAM] float 
  6510 ;; Registers used:
  6511 ;;		wreg, status,2, status,0, cstack
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6517 ;;      Params:         4       0       0       0       0       0       0
  6518 ;;      Locals:         1       0       0       0       0       0       0
  6519 ;;      Temps:          4       0       0       0       0       0       0
  6520 ;;      Totals:         9       0       0       0       0       0       0
  6521 ;;Total ram usage:        9 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    1
  6524 ;; This function calls:
  6525 ;;		___ftpack
  6526 ;; This function is called by:
  6527 ;;		_sprintf
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text27
  6532  005F66                     __ptext27:
  6533                           	opt stack 0
  6534  005F66                     ___lltoft:
  6535                           	opt stack 26
  6536                           
  6537                           ;incstack = 0
  6538  005F66  0E8E               	movlw	142
  6539  005F68  6E11               	movwf	___lltoft@exp,c
  6540  005F6A  D006               	goto	l2736
  6541  005F6C                     l2734:
  6542  005F6C  90D8               	bcf	status,0,c
  6543  005F6E  320C               	rrcf	___lltoft@c+3,f,c
  6544  005F70  320B               	rrcf	___lltoft@c+2,f,c
  6545  005F72  320A               	rrcf	___lltoft@c+1,f,c
  6546  005F74  3209               	rrcf	___lltoft@c,f,c
  6547  005F76  2A11               	incf	___lltoft@exp,f,c
  6548  005F78                     l2736:
  6549  005F78  0E00               	movlw	0
  6550  005F7A  1409               	andwf	___lltoft@c,w,c
  6551  005F7C  6E0D               	movwf	??___lltoft& (0+255),c
  6552  005F7E  0E00               	movlw	0
  6553  005F80  140A               	andwf	___lltoft@c+1,w,c
  6554  005F82  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  6555  005F84  0E00               	movlw	0
  6556  005F86  140B               	andwf	___lltoft@c+2,w,c
  6557  005F88  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  6558  005F8A  0EFF               	movlw	255
  6559  005F8C  140C               	andwf	___lltoft@c+3,w,c
  6560  005F8E  6E10               	movwf	(??___lltoft+3)& (0+255),c
  6561  005F90  500D               	movf	??___lltoft,w,c
  6562  005F92  100E               	iorwf	??___lltoft+1,w,c
  6563  005F94  100F               	iorwf	??___lltoft+2,w,c
  6564  005F96  1010               	iorwf	??___lltoft+3,w,c
  6565  005F98  A4D8               	btfss	status,2,c
  6566  005F9A  D7E8               	goto	l2734
  6567  005F9C  C009  F001         	movff	___lltoft@c,___ftpack@arg
  6568  005FA0  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  6569  005FA4  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  6570  005FA8  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  6571  005FAC  0E00               	movlw	0
  6572  005FAE  6E05               	movwf	___ftpack@sign,c
  6573  005FB0  EC90  F031         	call	___ftpack	;wreg free
  6574  005FB4  C001  F009         	movff	?___ftpack,?___lltoft
  6575  005FB8  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  6576  005FBC  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  6577  005FC0  0012               	return	
  6578  005FC2                     __end_of___lltoft:
  6579                           	opt stack 0
  6580                           tblptru	equ	0xFF8
  6581                           tblptrh	equ	0xFF7
  6582                           tblptrl	equ	0xFF6
  6583                           tablat	equ	0xFF5
  6584                           prodh	equ	0xFF4
  6585                           prodl	equ	0xFF3
  6586                           indf0	equ	0xFEF
  6587                           fsr0h	equ	0xFEA
  6588                           fsr0l	equ	0xFE9
  6589                           wreg	equ	0xFE8
  6590                           indf1	equ	0xFE7
  6591                           fsr1h	equ	0xFE2
  6592                           fsr1l	equ	0xFE1
  6593                           indf2	equ	0xFDF
  6594                           postinc2	equ	0xFDE
  6595                           postdec2	equ	0xFDD
  6596                           fsr2h	equ	0xFDA
  6597                           fsr2l	equ	0xFD9
  6598                           status	equ	0xFD8
  6599                           
  6600 ;; *************** function ___llmod *****************
  6601 ;; Defined at:
  6602 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
  6603 ;; Parameters:    Size  Location     Type
  6604 ;;  dividend        4   13[COMRAM] unsigned long 
  6605 ;;  divisor         4   17[COMRAM] unsigned long 
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;  counter         1   21[COMRAM] unsigned char 
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  4   13[COMRAM] unsigned long 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6617 ;;      Params:         8       0       0       0       0       0       0
  6618 ;;      Locals:         1       0       0       0       0       0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0
  6620 ;;      Totals:         9       0       0       0       0       0       0
  6621 ;;Total ram usage:        9 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; This function calls:
  6624 ;;		Nothing
  6625 ;; This function is called by:
  6626 ;;		_sprintf
  6627 ;; This function uses a non-reentrant model
  6628 ;;
  6629                           
  6630                           	psect	text28
  6631  006022                     __ptext28:
  6632                           	opt stack 0
  6633  006022                     ___llmod:
  6634                           	opt stack 27
  6635                           
  6636                           ;incstack = 0
  6637  006022  5012               	movf	___llmod@divisor,w,c
  6638  006024  1013               	iorwf	___llmod@divisor+1,w,c
  6639  006026  1014               	iorwf	___llmod@divisor+2,w,c
  6640  006028  1015               	iorwf	___llmod@divisor+3,w,c
  6641  00602A  B4D8               	btfsc	status,2,c
  6642  00602C  D024               	goto	l705
  6643  00602E  0E01               	movlw	1
  6644  006030  6E16               	movwf	___llmod@counter,c
  6645  006032  D006               	goto	l2722
  6646  006034                     l2720:
  6647  006034  90D8               	bcf	status,0,c
  6648  006036  3612               	rlcf	___llmod@divisor,f,c
  6649  006038  3613               	rlcf	___llmod@divisor+1,f,c
  6650  00603A  3614               	rlcf	___llmod@divisor+2,f,c
  6651  00603C  3615               	rlcf	___llmod@divisor+3,f,c
  6652  00603E  2A16               	incf	___llmod@counter,f,c
  6653  006040                     l2722:
  6654  006040  AE15               	btfss	___llmod@divisor+3,7,c
  6655  006042  D7F8               	goto	l2720
  6656  006044                     l2724:
  6657  006044  5012               	movf	___llmod@divisor,w,c
  6658  006046  5C0E               	subwf	___llmod@dividend,w,c
  6659  006048  5013               	movf	___llmod@divisor+1,w,c
  6660  00604A  580F               	subwfb	___llmod@dividend+1,w,c
  6661  00604C  5014               	movf	___llmod@divisor+2,w,c
  6662  00604E  5810               	subwfb	___llmod@dividend+2,w,c
  6663  006050  5015               	movf	___llmod@divisor+3,w,c
  6664  006052  5811               	subwfb	___llmod@dividend+3,w,c
  6665  006054  A0D8               	btfss	status,0,c
  6666  006056  D008               	goto	l2728
  6667  006058  5012               	movf	___llmod@divisor,w,c
  6668  00605A  5E0E               	subwf	___llmod@dividend,f,c
  6669  00605C  5013               	movf	___llmod@divisor+1,w,c
  6670  00605E  5A0F               	subwfb	___llmod@dividend+1,f,c
  6671  006060  5014               	movf	___llmod@divisor+2,w,c
  6672  006062  5A10               	subwfb	___llmod@dividend+2,f,c
  6673  006064  5015               	movf	___llmod@divisor+3,w,c
  6674  006066  5A11               	subwfb	___llmod@dividend+3,f,c
  6675  006068                     l2728:
  6676  006068  90D8               	bcf	status,0,c
  6677  00606A  3215               	rrcf	___llmod@divisor+3,f,c
  6678  00606C  3214               	rrcf	___llmod@divisor+2,f,c
  6679  00606E  3213               	rrcf	___llmod@divisor+1,f,c
  6680  006070  3212               	rrcf	___llmod@divisor,f,c
  6681  006072  2E16               	decfsz	___llmod@counter,f,c
  6682  006074  D7E7               	goto	l2724
  6683  006076                     l705:
  6684  006076  C00E  F00E         	movff	___llmod@dividend,?___llmod
  6685  00607A  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  6686  00607E  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  6687  006082  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  6688  006086  0012               	return		;funcret
  6689  006088                     __end_of___llmod:
  6690                           	opt stack 0
  6691                           tblptru	equ	0xFF8
  6692                           tblptrh	equ	0xFF7
  6693                           tblptrl	equ	0xFF6
  6694                           tablat	equ	0xFF5
  6695                           prodh	equ	0xFF4
  6696                           prodl	equ	0xFF3
  6697                           indf0	equ	0xFEF
  6698                           fsr0h	equ	0xFEA
  6699                           fsr0l	equ	0xFE9
  6700                           wreg	equ	0xFE8
  6701                           indf1	equ	0xFE7
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function ___lldiv *****************
  6712 ;; Defined at:
  6713 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  dividend        4    0[COMRAM] unsigned long 
  6716 ;;  divisor         4    4[COMRAM] unsigned long 
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;  quotient        4    8[COMRAM] unsigned long 
  6719 ;;  counter         1   12[COMRAM] unsigned char 
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  4    0[COMRAM] unsigned long 
  6722 ;; Registers used:
  6723 ;;		wreg, status,2, status,0
  6724 ;; Tracked objects:
  6725 ;;		On entry : 0/0
  6726 ;;		On exit  : 0/0
  6727 ;;		Unchanged: 0/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6729 ;;      Params:         8       0       0       0       0       0       0
  6730 ;;      Locals:         5       0       0       0       0       0       0
  6731 ;;      Temps:          0       0       0       0       0       0       0
  6732 ;;      Totals:        13       0       0       0       0       0       0
  6733 ;;Total ram usage:       13 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_sprintf
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           	psect	text29
  6743  0060F8                     __ptext29:
  6744                           	opt stack 0
  6745  0060F8                     ___lldiv:
  6746                           	opt stack 27
  6747                           
  6748                           ;incstack = 0
  6749  0060F8  0E00               	movlw	0
  6750  0060FA  6E09               	movwf	___lldiv@quotient,c
  6751  0060FC  0E00               	movlw	0
  6752  0060FE  6E0A               	movwf	___lldiv@quotient+1,c
  6753  006100  0E00               	movlw	0
  6754  006102  6E0B               	movwf	___lldiv@quotient+2,c
  6755  006104  0E00               	movlw	0
  6756  006106  6E0C               	movwf	___lldiv@quotient+3,c
  6757  006108  5005               	movf	___lldiv@divisor,w,c
  6758  00610A  1006               	iorwf	___lldiv@divisor+1,w,c
  6759  00610C  1007               	iorwf	___lldiv@divisor+2,w,c
  6760  00610E  1008               	iorwf	___lldiv@divisor+3,w,c
  6761  006110  B4D8               	btfsc	status,2,c
  6762  006112  D02A               	goto	l695
  6763  006114  0E01               	movlw	1
  6764  006116  6E0D               	movwf	___lldiv@counter,c
  6765  006118  D006               	goto	l2702
  6766  00611A                     l2700:
  6767  00611A  90D8               	bcf	status,0,c
  6768  00611C  3605               	rlcf	___lldiv@divisor,f,c
  6769  00611E  3606               	rlcf	___lldiv@divisor+1,f,c
  6770  006120  3607               	rlcf	___lldiv@divisor+2,f,c
  6771  006122  3608               	rlcf	___lldiv@divisor+3,f,c
  6772  006124  2A0D               	incf	___lldiv@counter,f,c
  6773  006126                     l2702:
  6774  006126  AE08               	btfss	___lldiv@divisor+3,7,c
  6775  006128  D7F8               	goto	l2700
  6776  00612A                     l2704:
  6777  00612A  90D8               	bcf	status,0,c
  6778  00612C  3609               	rlcf	___lldiv@quotient,f,c
  6779  00612E  360A               	rlcf	___lldiv@quotient+1,f,c
  6780  006130  360B               	rlcf	___lldiv@quotient+2,f,c
  6781  006132  360C               	rlcf	___lldiv@quotient+3,f,c
  6782  006134  5005               	movf	___lldiv@divisor,w,c
  6783  006136  5C01               	subwf	___lldiv@dividend,w,c
  6784  006138  5006               	movf	___lldiv@divisor+1,w,c
  6785  00613A  5802               	subwfb	___lldiv@dividend+1,w,c
  6786  00613C  5007               	movf	___lldiv@divisor+2,w,c
  6787  00613E  5803               	subwfb	___lldiv@dividend+2,w,c
  6788  006140  5008               	movf	___lldiv@divisor+3,w,c
  6789  006142  5804               	subwfb	___lldiv@dividend+3,w,c
  6790  006144  A0D8               	btfss	status,0,c
  6791  006146  D009               	goto	l2712
  6792  006148  5005               	movf	___lldiv@divisor,w,c
  6793  00614A  5E01               	subwf	___lldiv@dividend,f,c
  6794  00614C  5006               	movf	___lldiv@divisor+1,w,c
  6795  00614E  5A02               	subwfb	___lldiv@dividend+1,f,c
  6796  006150  5007               	movf	___lldiv@divisor+2,w,c
  6797  006152  5A03               	subwfb	___lldiv@dividend+2,f,c
  6798  006154  5008               	movf	___lldiv@divisor+3,w,c
  6799  006156  5A04               	subwfb	___lldiv@dividend+3,f,c
  6800  006158  8009               	bsf	___lldiv@quotient,0,c
  6801  00615A                     l2712:
  6802  00615A  90D8               	bcf	status,0,c
  6803  00615C  3208               	rrcf	___lldiv@divisor+3,f,c
  6804  00615E  3207               	rrcf	___lldiv@divisor+2,f,c
  6805  006160  3206               	rrcf	___lldiv@divisor+1,f,c
  6806  006162  3205               	rrcf	___lldiv@divisor,f,c
  6807  006164  2E0D               	decfsz	___lldiv@counter,f,c
  6808  006166  D7E1               	goto	l2704
  6809  006168                     l695:
  6810  006168  C009  F001         	movff	___lldiv@quotient,?___lldiv
  6811  00616C  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  6812  006170  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  6813  006174  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  6814  006178  0012               	return		;funcret
  6815  00617A                     __end_of___lldiv:
  6816                           	opt stack 0
  6817                           tblptru	equ	0xFF8
  6818                           tblptrh	equ	0xFF7
  6819                           tblptrl	equ	0xFF6
  6820                           tablat	equ	0xFF5
  6821                           prodh	equ	0xFF4
  6822                           prodl	equ	0xFF3
  6823                           indf0	equ	0xFEF
  6824                           fsr0h	equ	0xFEA
  6825                           fsr0l	equ	0xFE9
  6826                           wreg	equ	0xFE8
  6827                           indf1	equ	0xFE7
  6828                           fsr1h	equ	0xFE2
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           fsr2h	equ	0xFDA
  6834                           fsr2l	equ	0xFD9
  6835                           status	equ	0xFD8
  6836                           
  6837 ;; *************** function ___fttol *****************
  6838 ;; Defined at:
  6839 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  6840 ;; Parameters:    Size  Location     Type
  6841 ;;  f1              3   42[COMRAM] float 
  6842 ;; Auto vars:     Size  Location     Type
  6843 ;;  lval            4   52[COMRAM] unsigned long 
  6844 ;;  exp1            1   56[COMRAM] unsigned char 
  6845 ;;  sign1           1   51[COMRAM] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  4   42[COMRAM] long 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6855 ;;      Params:         4       0       0       0       0       0       0
  6856 ;;      Locals:         6       0       0       0       0       0       0
  6857 ;;      Temps:          5       0       0       0       0       0       0
  6858 ;;      Totals:        15       0       0       0       0       0       0
  6859 ;;Total ram usage:       15 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_sprintf
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text30
  6869  0064B0                     __ptext30:
  6870                           	opt stack 0
  6871  0064B0                     ___fttol:
  6872                           	opt stack 27
  6873                           
  6874                           ;incstack = 0
  6875  0064B0  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  6876  0064B4  6A30               	clrf	(??___fttol+1)& (0+255),c
  6877  0064B6  6A31               	clrf	(??___fttol+2)& (0+255),c
  6878  0064B8  342C               	rlcf	___fttol@f1+1,w,c
  6879  0064BA  362F               	rlcf	??___fttol& (0+255),f,c
  6880  0064BC  E301               	bnc	u2481
  6881  0064BE  8030               	bsf	(??___fttol+1)& (0+255),0,c
  6882  0064C0                     u2481:
  6883  0064C0  502F               	movf	??___fttol,w,c
  6884  0064C2  6E39               	movwf	___fttol@exp1,c
  6885  0064C4  5039               	movf	___fttol@exp1,w,c
  6886  0064C6  A4D8               	btfss	status,2,c
  6887  0064C8  D009               	goto	l2654
  6888  0064CA  0E00               	movlw	0
  6889  0064CC  6E2B               	movwf	?___fttol,c
  6890  0064CE  0E00               	movlw	0
  6891  0064D0  6E2C               	movwf	?___fttol+1,c
  6892  0064D2  0E00               	movlw	0
  6893  0064D4  6E2D               	movwf	?___fttol+2,c
  6894  0064D6  0E00               	movlw	0
  6895  0064D8  6E2E               	movwf	?___fttol+3,c
  6896  0064DA  0012               	return	
  6897  0064DC                     l2654:
  6898  0064DC  0E17               	movlw	23
  6899  0064DE  6E2F               	movwf	??___fttol& (0+255),c
  6900  0064E0  C02B  F030         	movff	___fttol@f1,??___fttol+1
  6901  0064E4  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  6902  0064E8  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  6903  0064EC  282F               	incf	??___fttol,w,c
  6904  0064EE  6E33               	movwf	(??___fttol+4)& (0+255),c
  6905  0064F0  D004               	goto	u2500
  6906  0064F2                     u2505:
  6907  0064F2  90D8               	bcf	status,0,c
  6908  0064F4  3232               	rrcf	??___fttol+3,f,c
  6909  0064F6  3231               	rrcf	??___fttol+2,f,c
  6910  0064F8  3230               	rrcf	??___fttol+1,f,c
  6911  0064FA                     u2500:
  6912  0064FA  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  6913  0064FC  D7FA               	goto	u2505
  6914  0064FE  5030               	movf	??___fttol+1,w,c
  6915  006500  6E34               	movwf	___fttol@sign1,c
  6916  006502  8E2C               	bsf	___fttol@f1+1,7,c
  6917  006504  0EFF               	movlw	255
  6918  006506  162B               	andwf	___fttol@f1,f,c
  6919  006508  0EFF               	movlw	255
  6920  00650A  162C               	andwf	___fttol@f1+1,f,c
  6921  00650C  0E00               	movlw	0
  6922  00650E  162D               	andwf	___fttol@f1+2,f,c
  6923  006510  502B               	movf	___fttol@f1,w,c
  6924  006512  6E35               	movwf	___fttol@lval,c
  6925  006514  502C               	movf	___fttol@f1+1,w,c
  6926  006516  6E36               	movwf	___fttol@lval+1,c
  6927  006518  502D               	movf	___fttol@f1+2,w,c
  6928  00651A  6E37               	movwf	___fttol@lval+2,c
  6929  00651C  6A38               	clrf	___fttol@lval+3,c
  6930  00651E  0E8E               	movlw	142
  6931  006520  5E39               	subwf	___fttol@exp1,f,c
  6932  006522  AE39               	btfss	___fttol@exp1,7,c
  6933  006524  D016               	goto	l2676
  6934  006526  5039               	movf	___fttol@exp1,w,c
  6935  006528  0A80               	xorlw	128
  6936  00652A  0F8F               	addlw	143
  6937  00652C  B0D8               	btfsc	status,0,c
  6938  00652E  D009               	goto	l2672
  6939  006530  0E00               	movlw	0
  6940  006532  6E2B               	movwf	?___fttol,c
  6941  006534  0E00               	movlw	0
  6942  006536  6E2C               	movwf	?___fttol+1,c
  6943  006538  0E00               	movlw	0
  6944  00653A  6E2D               	movwf	?___fttol+2,c
  6945  00653C  0E00               	movlw	0
  6946  00653E  6E2E               	movwf	?___fttol+3,c
  6947  006540  0012               	return	
  6948  006542                     l2672:
  6949  006542  90D8               	bcf	status,0,c
  6950  006544  3238               	rrcf	___fttol@lval+3,f,c
  6951  006546  3237               	rrcf	___fttol@lval+2,f,c
  6952  006548  3236               	rrcf	___fttol@lval+1,f,c
  6953  00654A  3235               	rrcf	___fttol@lval,f,c
  6954  00654C  3E39               	incfsz	___fttol@exp1,f,c
  6955  00654E  D7F9               	goto	l2672
  6956  006550  D015               	goto	l2686
  6957  006552                     l2676:
  6958  006552  0E17               	movlw	23
  6959  006554  6439               	cpfsgt	___fttol@exp1,c
  6960  006556  D00F               	goto	l2684
  6961  006558  0E00               	movlw	0
  6962  00655A  6E2B               	movwf	?___fttol,c
  6963  00655C  0E00               	movlw	0
  6964  00655E  6E2C               	movwf	?___fttol+1,c
  6965  006560  0E00               	movlw	0
  6966  006562  6E2D               	movwf	?___fttol+2,c
  6967  006564  0E00               	movlw	0
  6968  006566  6E2E               	movwf	?___fttol+3,c
  6969  006568  0012               	return	
  6970  00656A                     l2682:
  6971  00656A  90D8               	bcf	status,0,c
  6972  00656C  3635               	rlcf	___fttol@lval,f,c
  6973  00656E  3636               	rlcf	___fttol@lval+1,f,c
  6974  006570  3637               	rlcf	___fttol@lval+2,f,c
  6975  006572  3638               	rlcf	___fttol@lval+3,f,c
  6976  006574  0639               	decf	___fttol@exp1,f,c
  6977  006576                     l2684:
  6978  006576  5039               	movf	___fttol@exp1,w,c
  6979  006578  A4D8               	btfss	status,2,c
  6980  00657A  D7F7               	goto	l2682
  6981  00657C                     l2686:
  6982  00657C  5034               	movf	___fttol@sign1,w,c
  6983  00657E  B4D8               	btfsc	status,2,c
  6984  006580  D008               	goto	l2690
  6985  006582  1E38               	comf	___fttol@lval+3,f,c
  6986  006584  1E37               	comf	___fttol@lval+2,f,c
  6987  006586  1E36               	comf	___fttol@lval+1,f,c
  6988  006588  6C35               	negf	___fttol@lval,c
  6989  00658A  0E00               	movlw	0
  6990  00658C  2236               	addwfc	___fttol@lval+1,f,c
  6991  00658E  2237               	addwfc	___fttol@lval+2,f,c
  6992  006590  2238               	addwfc	___fttol@lval+3,f,c
  6993  006592                     l2690:
  6994  006592  C035  F02B         	movff	___fttol@lval,?___fttol
  6995  006596  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  6996  00659A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  6997  00659E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  6998  0065A2  0012               	return	
  6999  0065A4                     __end_of___fttol:
  7000                           	opt stack 0
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           indf0	equ	0xFEF
  7008                           fsr0h	equ	0xFEA
  7009                           fsr0l	equ	0xFE9
  7010                           wreg	equ	0xFE8
  7011                           indf1	equ	0xFE7
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function ___ftsub *****************
  7022 ;; Defined at:
  7023 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  f1              3   57[COMRAM] float 
  7026 ;;  f2              3   60[COMRAM] float 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;		None
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  3   57[COMRAM] float 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7038 ;;      Params:         6       0       0       0       0       0       0
  7039 ;;      Locals:         0       0       0       0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0
  7041 ;;      Totals:         6       0       0       0       0       0       0
  7042 ;;Total ram usage:        6 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    2
  7045 ;; This function calls:
  7046 ;;		___ftadd
  7047 ;; This function is called by:
  7048 ;;		_sprintf
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text31
  7053  005E92                     __ptext31:
  7054                           	opt stack 0
  7055  005E92                     ___ftsub:
  7056                           	opt stack 25
  7057                           
  7058                           ;incstack = 0
  7059  005E92  503D               	movf	___ftsub@f2,w,c
  7060  005E94  103E               	iorwf	___ftsub@f2+1,w,c
  7061  005E96  103F               	iorwf	___ftsub@f2+2,w,c
  7062  005E98  B4D8               	btfsc	status,2,c
  7063  005E9A  D006               	goto	l2622
  7064  005E9C  0E00               	movlw	0
  7065  005E9E  1A3D               	xorwf	___ftsub@f2,f,c
  7066  005EA0  0E00               	movlw	0
  7067  005EA2  1A3E               	xorwf	___ftsub@f2+1,f,c
  7068  005EA4  0E80               	movlw	128
  7069  005EA6  1A3F               	xorwf	___ftsub@f2+2,f,c
  7070  005EA8                     l2622:
  7071  005EA8  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  7072  005EAC  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  7073  005EB0  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  7074  005EB4  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  7075  005EB8  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  7076  005EBC  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  7077  005EC0  EC79  F034         	call	___ftadd	;wreg free
  7078  005EC4  C02E  F03A         	movff	?___ftadd,?___ftsub
  7079  005EC8  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  7080  005ECC  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  7081  005ED0  0012               	return	
  7082  005ED2                     __end_of___ftsub:
  7083                           	opt stack 0
  7084                           tblptru	equ	0xFF8
  7085                           tblptrh	equ	0xFF7
  7086                           tblptrl	equ	0xFF6
  7087                           tablat	equ	0xFF5
  7088                           prodh	equ	0xFF4
  7089                           prodl	equ	0xFF3
  7090                           indf0	equ	0xFEF
  7091                           fsr0h	equ	0xFEA
  7092                           fsr0l	equ	0xFE9
  7093                           wreg	equ	0xFE8
  7094                           indf1	equ	0xFE7
  7095                           fsr1h	equ	0xFE2
  7096                           fsr1l	equ	0xFE1
  7097                           indf2	equ	0xFDF
  7098                           postinc2	equ	0xFDE
  7099                           postdec2	equ	0xFDD
  7100                           fsr2h	equ	0xFDA
  7101                           fsr2l	equ	0xFD9
  7102                           status	equ	0xFD8
  7103                           
  7104 ;; *************** function ___ftadd *****************
  7105 ;; Defined at:
  7106 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;  f1              3   45[COMRAM] float 
  7109 ;;  f2              3   48[COMRAM] float 
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;  exp1            1   56[COMRAM] unsigned char 
  7112 ;;  exp2            1   55[COMRAM] unsigned char 
  7113 ;;  sign            1   54[COMRAM] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;                  3   45[COMRAM] float 
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0, cstack
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7123 ;;      Params:         6       0       0       0       0       0       0
  7124 ;;      Locals:         3       0       0       0       0       0       0
  7125 ;;      Temps:          3       0       0       0       0       0       0
  7126 ;;      Totals:        12       0       0       0       0       0       0
  7127 ;;Total ram usage:       12 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    1
  7130 ;; This function calls:
  7131 ;;		___ftpack
  7132 ;; This function is called by:
  7133 ;;		_sprintf
  7134 ;;		___ftsub
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           	psect	text32
  7139  0068F2                     __ptext32:
  7140                           	opt stack 0
  7141  0068F2                     ___ftadd:
  7142                           	opt stack 25
  7143                           
  7144                           ;incstack = 0
  7145  0068F2  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  7146  0068F6  6A35               	clrf	(??___ftadd+1)& (0+255),c
  7147  0068F8  6A36               	clrf	(??___ftadd+2)& (0+255),c
  7148  0068FA  342F               	rlcf	___ftadd@f1+1,w,c
  7149  0068FC  3634               	rlcf	??___ftadd& (0+255),f,c
  7150  0068FE  E301               	bnc	u1781
  7151  006900  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  7152  006902                     u1781:
  7153  006902  5034               	movf	??___ftadd,w,c
  7154  006904  6E39               	movwf	___ftadd@exp1,c
  7155  006906  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  7156  00690A  6A35               	clrf	(??___ftadd+1)& (0+255),c
  7157  00690C  6A36               	clrf	(??___ftadd+2)& (0+255),c
  7158  00690E  3432               	rlcf	___ftadd@f2+1,w,c
  7159  006910  3634               	rlcf	??___ftadd& (0+255),f,c
  7160  006912  E301               	bnc	u1791
  7161  006914  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  7162  006916                     u1791:
  7163  006916  5034               	movf	??___ftadd,w,c
  7164  006918  6E38               	movwf	___ftadd@exp2,c
  7165  00691A  5039               	movf	___ftadd@exp1,w,c
  7166  00691C  B4D8               	btfsc	status,2,c
  7167  00691E  D00B               	goto	l571
  7168  006920  5038               	movf	___ftadd@exp2,w,c
  7169  006922  5C39               	subwf	___ftadd@exp1,w,c
  7170  006924  B0D8               	btfsc	status,0,c
  7171  006926  D00E               	goto	l2220
  7172  006928  5039               	movf	___ftadd@exp1,w,c
  7173  00692A  0800               	sublw	0
  7174  00692C  2438               	addwf	___ftadd@exp2,w,c
  7175  00692E  6E34               	movwf	??___ftadd& (0+255),c
  7176  006930  0E18               	movlw	24
  7177  006932  6434               	cpfsgt	??___ftadd,c
  7178  006934  D007               	goto	l2220
  7179  006936                     l571:
  7180  006936  C031  F02E         	movff	___ftadd@f2,?___ftadd
  7181  00693A  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  7182  00693E  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  7183  006942  0012               	return	
  7184  006944                     l2220:
  7185  006944  5038               	movf	___ftadd@exp2,w,c
  7186  006946  B4D8               	btfsc	status,2,c
  7187  006948  D00B               	goto	l575
  7188  00694A  5039               	movf	___ftadd@exp1,w,c
  7189  00694C  5C38               	subwf	___ftadd@exp2,w,c
  7190  00694E  B0D8               	btfsc	status,0,c
  7191  006950  D00E               	goto	l2226
  7192  006952  5038               	movf	___ftadd@exp2,w,c
  7193  006954  0800               	sublw	0
  7194  006956  2439               	addwf	___ftadd@exp1,w,c
  7195  006958  6E34               	movwf	??___ftadd& (0+255),c
  7196  00695A  0E18               	movlw	24
  7197  00695C  6434               	cpfsgt	??___ftadd,c
  7198  00695E  D007               	goto	l2226
  7199  006960                     l575:
  7200  006960  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  7201  006964  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  7202  006968  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  7203  00696C  0012               	return	
  7204  00696E                     l2226:
  7205  00696E  0E06               	movlw	6
  7206  006970  6E37               	movwf	___ftadd@sign,c
  7207  006972  BE30               	btfsc	___ftadd@f1+2,7,c
  7208  006974  8E37               	bsf	___ftadd@sign,7,c
  7209  006976  BE33               	btfsc	___ftadd@f2+2,7,c
  7210  006978  8C37               	bsf	___ftadd@sign,6,c
  7211  00697A  8E2F               	bsf	___ftadd@f1+1,7,c
  7212  00697C  0EFF               	movlw	255
  7213  00697E  162E               	andwf	___ftadd@f1,f,c
  7214  006980  0EFF               	movlw	255
  7215  006982  162F               	andwf	___ftadd@f1+1,f,c
  7216  006984  0E00               	movlw	0
  7217  006986  1630               	andwf	___ftadd@f1+2,f,c
  7218  006988  8E32               	bsf	___ftadd@f2+1,7,c
  7219  00698A  0EFF               	movlw	255
  7220  00698C  1631               	andwf	___ftadd@f2,f,c
  7221  00698E  0EFF               	movlw	255
  7222  006990  1632               	andwf	___ftadd@f2+1,f,c
  7223  006992  0E00               	movlw	0
  7224  006994  1633               	andwf	___ftadd@f2+2,f,c
  7225  006996  5038               	movf	___ftadd@exp2,w,c
  7226  006998  5C39               	subwf	___ftadd@exp1,w,c
  7227  00699A  B0D8               	btfsc	status,0,c
  7228  00699C  D01B               	goto	l2252
  7229  00699E                     l2242:
  7230  00699E  90D8               	bcf	status,0,c
  7231  0069A0  3631               	rlcf	___ftadd@f2,f,c
  7232  0069A2  3632               	rlcf	___ftadd@f2+1,f,c
  7233  0069A4  3633               	rlcf	___ftadd@f2+2,f,c
  7234  0069A6  0638               	decf	___ftadd@exp2,f,c
  7235  0069A8  5039               	movf	___ftadd@exp1,w,c
  7236  0069AA  1838               	xorwf	___ftadd@exp2,w,c
  7237  0069AC  B4D8               	btfsc	status,2,c
  7238  0069AE  D00D               	goto	l2250
  7239  0069B0  0637               	decf	___ftadd@sign,f,c
  7240  0069B2  C037  F034         	movff	___ftadd@sign,??___ftadd
  7241  0069B6  0E07               	movlw	7
  7242  0069B8  1634               	andwf	??___ftadd,f,c
  7243  0069BA  B4D8               	btfsc	status,2,c
  7244  0069BC  D006               	goto	l2250
  7245  0069BE  D7EF               	goto	l2242
  7246  0069C0                     l2248:
  7247  0069C0  90D8               	bcf	status,0,c
  7248  0069C2  3230               	rrcf	___ftadd@f1+2,f,c
  7249  0069C4  322F               	rrcf	___ftadd@f1+1,f,c
  7250  0069C6  322E               	rrcf	___ftadd@f1,f,c
  7251  0069C8  2A39               	incf	___ftadd@exp1,f,c
  7252  0069CA                     l2250:
  7253  0069CA  5038               	movf	___ftadd@exp2,w,c
  7254  0069CC  1839               	xorwf	___ftadd@exp1,w,c
  7255  0069CE  B4D8               	btfsc	status,2,c
  7256  0069D0  D01F               	goto	l586
  7257  0069D2  D7F6               	goto	l2248
  7258  0069D4                     l2252:
  7259  0069D4  5039               	movf	___ftadd@exp1,w,c
  7260  0069D6  5C38               	subwf	___ftadd@exp2,w,c
  7261  0069D8  B0D8               	btfsc	status,0,c
  7262  0069DA  D01A               	goto	l586
  7263  0069DC                     l2254:
  7264  0069DC  90D8               	bcf	status,0,c
  7265  0069DE  362E               	rlcf	___ftadd@f1,f,c
  7266  0069E0  362F               	rlcf	___ftadd@f1+1,f,c
  7267  0069E2  3630               	rlcf	___ftadd@f1+2,f,c
  7268  0069E4  0639               	decf	___ftadd@exp1,f,c
  7269  0069E6  5039               	movf	___ftadd@exp1,w,c
  7270  0069E8  1838               	xorwf	___ftadd@exp2,w,c
  7271  0069EA  B4D8               	btfsc	status,2,c
  7272  0069EC  D00D               	goto	l2262
  7273  0069EE  0637               	decf	___ftadd@sign,f,c
  7274  0069F0  C037  F034         	movff	___ftadd@sign,??___ftadd
  7275  0069F4  0E07               	movlw	7
  7276  0069F6  1634               	andwf	??___ftadd,f,c
  7277  0069F8  B4D8               	btfsc	status,2,c
  7278  0069FA  D006               	goto	l2262
  7279  0069FC  D7EF               	goto	l2254
  7280  0069FE                     l2260:
  7281  0069FE  90D8               	bcf	status,0,c
  7282  006A00  3233               	rrcf	___ftadd@f2+2,f,c
  7283  006A02  3232               	rrcf	___ftadd@f2+1,f,c
  7284  006A04  3231               	rrcf	___ftadd@f2,f,c
  7285  006A06  2A38               	incf	___ftadd@exp2,f,c
  7286  006A08                     l2262:
  7287  006A08  5038               	movf	___ftadd@exp2,w,c
  7288  006A0A  1839               	xorwf	___ftadd@exp1,w,c
  7289  006A0C  A4D8               	btfss	status,2,c
  7290  006A0E  D7F7               	goto	l2260
  7291  006A10                     l586:
  7292  006A10  AE37               	btfss	___ftadd@sign,7,c
  7293  006A12  D00C               	goto	l595
  7294  006A14  0EFF               	movlw	255
  7295  006A16  1A2E               	xorwf	___ftadd@f1,f,c
  7296  006A18  0EFF               	movlw	255
  7297  006A1A  1A2F               	xorwf	___ftadd@f1+1,f,c
  7298  006A1C  0EFF               	movlw	255
  7299  006A1E  1A30               	xorwf	___ftadd@f1+2,f,c
  7300  006A20  0E01               	movlw	1
  7301  006A22  262E               	addwf	___ftadd@f1,f,c
  7302  006A24  0E00               	movlw	0
  7303  006A26  222F               	addwfc	___ftadd@f1+1,f,c
  7304  006A28  0E00               	movlw	0
  7305  006A2A  2230               	addwfc	___ftadd@f1+2,f,c
  7306  006A2C                     l595:
  7307  006A2C  AC37               	btfss	___ftadd@sign,6,c
  7308  006A2E  D00C               	goto	l2268
  7309  006A30  0EFF               	movlw	255
  7310  006A32  1A31               	xorwf	___ftadd@f2,f,c
  7311  006A34  0EFF               	movlw	255
  7312  006A36  1A32               	xorwf	___ftadd@f2+1,f,c
  7313  006A38  0EFF               	movlw	255
  7314  006A3A  1A33               	xorwf	___ftadd@f2+2,f,c
  7315  006A3C  0E01               	movlw	1
  7316  006A3E  2631               	addwf	___ftadd@f2,f,c
  7317  006A40  0E00               	movlw	0
  7318  006A42  2232               	addwfc	___ftadd@f2+1,f,c
  7319  006A44  0E00               	movlw	0
  7320  006A46  2233               	addwfc	___ftadd@f2+2,f,c
  7321  006A48                     l2268:
  7322  006A48  0E00               	movlw	0
  7323  006A4A  6E37               	movwf	___ftadd@sign,c
  7324  006A4C  502E               	movf	___ftadd@f1,w,c
  7325  006A4E  2631               	addwf	___ftadd@f2,f,c
  7326  006A50  502F               	movf	___ftadd@f1+1,w,c
  7327  006A52  2232               	addwfc	___ftadd@f2+1,f,c
  7328  006A54  5030               	movf	___ftadd@f1+2,w,c
  7329  006A56  2233               	addwfc	___ftadd@f2+2,f,c
  7330  006A58  AE33               	btfss	___ftadd@f2+2,7,c
  7331  006A5A  D00E               	goto	l2278
  7332  006A5C  0EFF               	movlw	255
  7333  006A5E  1A31               	xorwf	___ftadd@f2,f,c
  7334  006A60  0EFF               	movlw	255
  7335  006A62  1A32               	xorwf	___ftadd@f2+1,f,c
  7336  006A64  0EFF               	movlw	255
  7337  006A66  1A33               	xorwf	___ftadd@f2+2,f,c
  7338  006A68  0E01               	movlw	1
  7339  006A6A  2631               	addwf	___ftadd@f2,f,c
  7340  006A6C  0E00               	movlw	0
  7341  006A6E  2232               	addwfc	___ftadd@f2+1,f,c
  7342  006A70  0E00               	movlw	0
  7343  006A72  2233               	addwfc	___ftadd@f2+2,f,c
  7344  006A74  0E01               	movlw	1
  7345  006A76  6E37               	movwf	___ftadd@sign,c
  7346  006A78                     l2278:
  7347  006A78  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  7348  006A7C  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  7349  006A80  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  7350  006A84  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  7351  006A88  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  7352  006A8C  EC90  F031         	call	___ftpack	;wreg free
  7353  006A90  C001  F02E         	movff	?___ftpack,?___ftadd
  7354  006A94  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  7355  006A98  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  7356  006A9C  0012               	return	
  7357  006A9E                     __end_of___ftadd:
  7358                           	opt stack 0
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           indf0	equ	0xFEF
  7366                           fsr0h	equ	0xFEA
  7367                           fsr0l	equ	0xFE9
  7368                           wreg	equ	0xFE8
  7369                           indf1	equ	0xFE7
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379 ;; *************** function ___ftpack *****************
  7380 ;; Defined at:
  7381 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  arg             3    0[COMRAM] unsigned um
  7384 ;;  exp             1    3[COMRAM] unsigned char 
  7385 ;;  sign            1    4[COMRAM] unsigned char 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;		None
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  3    0[COMRAM] float 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 0/0
  7394 ;;		On exit  : 0/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7397 ;;      Params:         5       0       0       0       0       0       0
  7398 ;;      Locals:         0       0       0       0       0       0       0
  7399 ;;      Temps:          3       0       0       0       0       0       0
  7400 ;;      Totals:         8       0       0       0       0       0       0
  7401 ;;Total ram usage:        8 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; This function calls:
  7404 ;;		Nothing
  7405 ;; This function is called by:
  7406 ;;		___ftadd
  7407 ;;		___ftmul
  7408 ;;		___lltoft
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text33
  7413  006320                     __ptext33:
  7414                           	opt stack 0
  7415  006320                     ___ftpack:
  7416                           	opt stack 25
  7417                           
  7418                           ;incstack = 0
  7419  006320  5004               	movf	___ftpack@exp,w,c
  7420  006322  B4D8               	btfsc	status,2,c
  7421  006324  D005               	goto	l2130
  7422  006326  5001               	movf	___ftpack@arg,w,c
  7423  006328  1002               	iorwf	___ftpack@arg+1,w,c
  7424  00632A  1003               	iorwf	___ftpack@arg+2,w,c
  7425  00632C  A4D8               	btfss	status,2,c
  7426  00632E  D00C               	goto	l2136
  7427  006330                     l2130:
  7428  006330  0E00               	movlw	0
  7429  006332  6E01               	movwf	?___ftpack,c
  7430  006334  0E00               	movlw	0
  7431  006336  6E02               	movwf	?___ftpack+1,c
  7432  006338  0E00               	movlw	0
  7433  00633A  6E03               	movwf	?___ftpack+2,c
  7434  00633C  0012               	return	
  7435  00633E                     l2134:
  7436  00633E  2A04               	incf	___ftpack@exp,f,c
  7437  006340  90D8               	bcf	status,0,c
  7438  006342  3203               	rrcf	___ftpack@arg+2,f,c
  7439  006344  3202               	rrcf	___ftpack@arg+1,f,c
  7440  006346  3201               	rrcf	___ftpack@arg,f,c
  7441  006348                     l2136:
  7442  006348  0E00               	movlw	0
  7443  00634A  1401               	andwf	___ftpack@arg,w,c
  7444  00634C  6E06               	movwf	??___ftpack& (0+255),c
  7445  00634E  0E00               	movlw	0
  7446  006350  1402               	andwf	___ftpack@arg+1,w,c
  7447  006352  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7448  006354  0EFE               	movlw	254
  7449  006356  1403               	andwf	___ftpack@arg+2,w,c
  7450  006358  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7451  00635A  5006               	movf	??___ftpack,w,c
  7452  00635C  1007               	iorwf	??___ftpack+1,w,c
  7453  00635E  1008               	iorwf	??___ftpack+2,w,c
  7454  006360  B4D8               	btfsc	status,2,c
  7455  006362  D00C               	goto	l2142
  7456  006364  D7EC               	goto	l2134
  7457  006366                     l2138:
  7458  006366  2A04               	incf	___ftpack@exp,f,c
  7459  006368  0E01               	movlw	1
  7460  00636A  2601               	addwf	___ftpack@arg,f,c
  7461  00636C  0E00               	movlw	0
  7462  00636E  2202               	addwfc	___ftpack@arg+1,f,c
  7463  006370  0E00               	movlw	0
  7464  006372  2203               	addwfc	___ftpack@arg+2,f,c
  7465  006374  90D8               	bcf	status,0,c
  7466  006376  3203               	rrcf	___ftpack@arg+2,f,c
  7467  006378  3202               	rrcf	___ftpack@arg+1,f,c
  7468  00637A  3201               	rrcf	___ftpack@arg,f,c
  7469  00637C                     l2142:
  7470  00637C  0E00               	movlw	0
  7471  00637E  1401               	andwf	___ftpack@arg,w,c
  7472  006380  6E06               	movwf	??___ftpack& (0+255),c
  7473  006382  0E00               	movlw	0
  7474  006384  1402               	andwf	___ftpack@arg+1,w,c
  7475  006386  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7476  006388  0EFF               	movlw	255
  7477  00638A  1403               	andwf	___ftpack@arg+2,w,c
  7478  00638C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7479  00638E  5006               	movf	??___ftpack,w,c
  7480  006390  1007               	iorwf	??___ftpack+1,w,c
  7481  006392  1008               	iorwf	??___ftpack+2,w,c
  7482  006394  B4D8               	btfsc	status,2,c
  7483  006396  D006               	goto	l2146
  7484  006398  D7E6               	goto	l2138
  7485  00639A                     l2144:
  7486  00639A  0604               	decf	___ftpack@exp,f,c
  7487  00639C  90D8               	bcf	status,0,c
  7488  00639E  3601               	rlcf	___ftpack@arg,f,c
  7489  0063A0  3602               	rlcf	___ftpack@arg+1,f,c
  7490  0063A2  3603               	rlcf	___ftpack@arg+2,f,c
  7491  0063A4                     l2146:
  7492  0063A4  BE02               	btfsc	___ftpack@arg+1,7,c
  7493  0063A6  D003               	goto	l548
  7494  0063A8  0E02               	movlw	2
  7495  0063AA  6004               	cpfslt	___ftpack@exp,c
  7496  0063AC  D7F6               	goto	l2144
  7497  0063AE                     l548:
  7498  0063AE  A004               	btfss	___ftpack@exp,0,c
  7499  0063B0  9E02               	bcf	___ftpack@arg+1,7,c
  7500  0063B2  90D8               	bcf	status,0,c
  7501  0063B4  3204               	rrcf	___ftpack@exp,f,c
  7502  0063B6  5004               	movf	___ftpack@exp,w,c
  7503  0063B8  1203               	iorwf	___ftpack@arg+2,f,c
  7504  0063BA  5005               	movf	___ftpack@sign,w,c
  7505  0063BC  A4D8               	btfss	status,2,c
  7506  0063BE  8E03               	bsf	___ftpack@arg+2,7,c
  7507  0063C0  C001  F001         	movff	___ftpack@arg,?___ftpack
  7508  0063C4  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7509  0063C8  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7510  0063CC  0012               	return	
  7511  0063CE                     __end_of___ftpack:
  7512                           	opt stack 0
  7513                           tblptru	equ	0xFF8
  7514                           tblptrh	equ	0xFF7
  7515                           tblptrl	equ	0xFF6
  7516                           tablat	equ	0xFF5
  7517                           prodh	equ	0xFF4
  7518                           prodl	equ	0xFF3
  7519                           indf0	equ	0xFEF
  7520                           fsr0h	equ	0xFEA
  7521                           fsr0l	equ	0xFE9
  7522                           wreg	equ	0xFE8
  7523                           indf1	equ	0xFE7
  7524                           fsr1h	equ	0xFE2
  7525                           fsr1l	equ	0xFE1
  7526                           indf2	equ	0xFDF
  7527                           postinc2	equ	0xFDE
  7528                           postdec2	equ	0xFDD
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function ___ftneg *****************
  7534 ;; Defined at:
  7535 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  f1              3    0[COMRAM] float 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;		None
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  3    0[COMRAM] float 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2, status,0
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7549 ;;      Params:         3       0       0       0       0       0       0
  7550 ;;      Locals:         0       0       0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0
  7552 ;;      Totals:         3       0       0       0       0       0       0
  7553 ;;Total ram usage:        3 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; This function calls:
  7556 ;;		Nothing
  7557 ;; This function is called by:
  7558 ;;		_sprintf
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text34
  7563  005CFA                     __ptext34:
  7564                           	opt stack 0
  7565  005CFA                     ___ftneg:
  7566                           	opt stack 27
  7567                           
  7568                           ;incstack = 0
  7569  005CFA  5001               	movf	___ftneg@f1,w,c
  7570  005CFC  1002               	iorwf	___ftneg@f1+1,w,c
  7571  005CFE  1003               	iorwf	___ftneg@f1+2,w,c
  7572  005D00  B4D8               	btfsc	status,2,c
  7573  005D02  D006               	goto	l645
  7574  005D04  0E00               	movlw	0
  7575  005D06  1A01               	xorwf	___ftneg@f1,f,c
  7576  005D08  0E00               	movlw	0
  7577  005D0A  1A02               	xorwf	___ftneg@f1+1,f,c
  7578  005D0C  0E80               	movlw	128
  7579  005D0E  1A03               	xorwf	___ftneg@f1+2,f,c
  7580  005D10                     l645:
  7581  005D10  C001  F001         	movff	___ftneg@f1,?___ftneg
  7582  005D14  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  7583  005D18  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  7584  005D1C  0012               	return		;funcret
  7585  005D1E                     __end_of___ftneg:
  7586                           	opt stack 0
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           indf0	equ	0xFEF
  7594                           fsr0h	equ	0xFEA
  7595                           fsr0l	equ	0xFE9
  7596                           wreg	equ	0xFE8
  7597                           indf1	equ	0xFE7
  7598                           fsr1h	equ	0xFE2
  7599                           fsr1l	equ	0xFE1
  7600                           indf2	equ	0xFDF
  7601                           postinc2	equ	0xFDE
  7602                           postdec2	equ	0xFDD
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function ___ftge *****************
  7608 ;; Defined at:
  7609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  ff1             3    0[COMRAM] float 
  7612 ;;  ff2             3    3[COMRAM] float 
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;		None
  7615 ;; Return value:  Size  Location     Type
  7616 ;;		None               void
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7624 ;;      Params:         6       0       0       0       0       0       0
  7625 ;;      Locals:         0       0       0       0       0       0       0
  7626 ;;      Temps:          3       0       0       0       0       0       0
  7627 ;;      Totals:         9       0       0       0       0       0       0
  7628 ;;Total ram usage:        9 bytes
  7629 ;; Hardware stack levels used:    1
  7630 ;; This function calls:
  7631 ;;		Nothing
  7632 ;; This function is called by:
  7633 ;;		_main_loop
  7634 ;;		_sprintf
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text35
  7639  0061FE                     __ptext35:
  7640                           	opt stack 0
  7641  0061FE                     ___ftge:
  7642                           	opt stack 27
  7643                           
  7644                           ;incstack = 0
  7645  0061FE  AE03               	btfss	___ftge@ff1+2,7,c
  7646  006200  D016               	goto	l2630
  7647  006202  C001  F007         	movff	___ftge@ff1,??___ftge
  7648  006206  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  7649  00620A  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  7650  00620E  1E07               	comf	??___ftge,f,c
  7651  006210  1E08               	comf	??___ftge+1,f,c
  7652  006212  1E09               	comf	??___ftge+2,f,c
  7653  006214  2A07               	incf	??___ftge,f,c
  7654  006216  0E00               	movlw	0
  7655  006218  2208               	addwfc	??___ftge+1,f,c
  7656  00621A  2209               	addwfc	??___ftge+2,f,c
  7657  00621C  0E00               	movlw	0
  7658  00621E  2407               	addwf	??___ftge,w,c
  7659  006220  6E01               	movwf	___ftge@ff1,c
  7660  006222  0E00               	movlw	0
  7661  006224  2008               	addwfc	??___ftge+1,w,c
  7662  006226  6E02               	movwf	___ftge@ff1+1,c
  7663  006228  0E80               	movlw	128
  7664  00622A  2009               	addwfc	??___ftge+2,w,c
  7665  00622C  6E03               	movwf	___ftge@ff1+2,c
  7666  00622E                     l2630:
  7667  00622E  AE06               	btfss	___ftge@ff2+2,7,c
  7668  006230  D016               	goto	l2634
  7669  006232  C004  F007         	movff	___ftge@ff2,??___ftge
  7670  006236  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  7671  00623A  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  7672  00623E  1E07               	comf	??___ftge,f,c
  7673  006240  1E08               	comf	??___ftge+1,f,c
  7674  006242  1E09               	comf	??___ftge+2,f,c
  7675  006244  2A07               	incf	??___ftge,f,c
  7676  006246  0E00               	movlw	0
  7677  006248  2208               	addwfc	??___ftge+1,f,c
  7678  00624A  2209               	addwfc	??___ftge+2,f,c
  7679  00624C  0E00               	movlw	0
  7680  00624E  2407               	addwf	??___ftge,w,c
  7681  006250  6E04               	movwf	___ftge@ff2,c
  7682  006252  0E00               	movlw	0
  7683  006254  2008               	addwfc	??___ftge+1,w,c
  7684  006256  6E05               	movwf	___ftge@ff2+1,c
  7685  006258  0E80               	movlw	128
  7686  00625A  2009               	addwfc	??___ftge+2,w,c
  7687  00625C  6E06               	movwf	___ftge@ff2+2,c
  7688  00625E                     l2634:
  7689  00625E  0E00               	movlw	0
  7690  006260  1A01               	xorwf	___ftge@ff1,f,c
  7691  006262  0E00               	movlw	0
  7692  006264  1A02               	xorwf	___ftge@ff1+1,f,c
  7693  006266  0E80               	movlw	128
  7694  006268  1A03               	xorwf	___ftge@ff1+2,f,c
  7695  00626A  0E00               	movlw	0
  7696  00626C  1A04               	xorwf	___ftge@ff2,f,c
  7697  00626E  0E00               	movlw	0
  7698  006270  1A05               	xorwf	___ftge@ff2+1,f,c
  7699  006272  0E80               	movlw	128
  7700  006274  1A06               	xorwf	___ftge@ff2+2,f,c
  7701  006276  5004               	movf	___ftge@ff2,w,c
  7702  006278  5C01               	subwf	___ftge@ff1,w,c
  7703  00627A  5005               	movf	___ftge@ff2+1,w,c
  7704  00627C  5802               	subwfb	___ftge@ff1+1,w,c
  7705  00627E  5006               	movf	___ftge@ff2+2,w,c
  7706  006280  5803               	subwfb	___ftge@ff1+2,w,c
  7707  006282  B0D8               	btfsc	status,0,c
  7708  006284  D002               	goto	l2640
  7709  006286  90D8               	bcf	status,0,c
  7710  006288  0012               	return	
  7711  00628A                     l2640:
  7712  00628A  80D8               	bsf	status,0,c
  7713  00628C  0012               	return	
  7714  00628E                     __end_of___ftge:
  7715                           	opt stack 0
  7716                           tblptru	equ	0xFF8
  7717                           tblptrh	equ	0xFF7
  7718                           tblptrl	equ	0xFF6
  7719                           tablat	equ	0xFF5
  7720                           prodh	equ	0xFF4
  7721                           prodl	equ	0xFF3
  7722                           indf0	equ	0xFEF
  7723                           fsr0h	equ	0xFEA
  7724                           fsr0l	equ	0xFE9
  7725                           wreg	equ	0xFE8
  7726                           indf1	equ	0xFE7
  7727                           fsr1h	equ	0xFE2
  7728                           fsr1l	equ	0xFE1
  7729                           indf2	equ	0xFDF
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           fsr2h	equ	0xFDA
  7733                           fsr2l	equ	0xFD9
  7734                           status	equ	0xFD8
  7735                           
  7736 ;; *************** function _memset *****************
  7737 ;; Defined at:
  7738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  p1              2    0[COMRAM] PTR void 
  7741 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
  7742 ;;  c               2    2[COMRAM] int 
  7743 ;;  n               2    4[COMRAM] unsigned int 
  7744 ;; Auto vars:     Size  Location     Type
  7745 ;;  p               2    6[COMRAM] PTR unsigned char 
  7746 ;;		 -> util_beacon_transmission@BEACON_BUFFER(64), util_beacon_transmission@BEACON_MESSAGE(128), 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  2    0[COMRAM] PTR void 
  7749 ;; Registers used:
  7750 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7756 ;;      Params:         6       0       0       0       0       0       0
  7757 ;;      Locals:         2       0       0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0
  7759 ;;      Totals:         8       0       0       0       0       0       0
  7760 ;;Total ram usage:        8 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_util_beacon_transmission
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text36
  7770  005D68                     __ptext36:
  7771                           	opt stack 0
  7772  005D68                     _memset:
  7773                           	opt stack 28
  7774                           
  7775                           ;incstack = 0
  7776  005D68  C001  F007         	movff	memset@p1,memset@p
  7777  005D6C  C002  F008         	movff	memset@p1+1,memset@p+1
  7778  005D70  D008               	goto	l2748
  7779  005D72                     l2744:
  7780  005D72  C007  FFD9         	movff	memset@p,fsr2l
  7781  005D76  C008  FFDA         	movff	memset@p+1,fsr2h
  7782  005D7A  C003  FFDF         	movff	memset@c,indf2
  7783  005D7E  4A07               	infsnz	memset@p,f,c
  7784  005D80  2A08               	incf	memset@p+1,f,c
  7785  005D82                     l2748:
  7786  005D82  0605               	decf	memset@n,f,c
  7787  005D84  A0D8               	btfss	status,0,c
  7788  005D86  0606               	decf	memset@n+1,f,c
  7789  005D88  2805               	incf	memset@n,w,c
  7790  005D8A  E1F3               	bnz	l2744
  7791  005D8C  2806               	incf	memset@n+1,w,c
  7792  005D8E  B4D8               	btfsc	status,2,c
  7793  005D90  0012               	return	
  7794  005D92  D7EF               	goto	l2744
  7795  005D94                     __end_of_memset:
  7796                           	opt stack 0
  7797                           tblptru	equ	0xFF8
  7798                           tblptrh	equ	0xFF7
  7799                           tblptrl	equ	0xFF6
  7800                           tablat	equ	0xFF5
  7801                           prodh	equ	0xFF4
  7802                           prodl	equ	0xFF3
  7803                           indf0	equ	0xFEF
  7804                           fsr0h	equ	0xFEA
  7805                           fsr0l	equ	0xFE9
  7806                           wreg	equ	0xFE8
  7807                           indf1	equ	0xFE7
  7808                           fsr1h	equ	0xFE2
  7809                           fsr1l	equ	0xFE1
  7810                           indf2	equ	0xFDF
  7811                           postinc2	equ	0xFDE
  7812                           postdec2	equ	0xFDD
  7813                           fsr2h	equ	0xFDA
  7814                           fsr2l	equ	0xFD9
  7815                           status	equ	0xFD8
  7816                           
  7817 ;; *************** function _getTemperature *****************
  7818 ;; Defined at:
  7819 ;;		line 39 in file "easat2_util_inputs.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;		None
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;		None
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  3    0[COMRAM] float 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7833 ;;      Params:         3       0       0       0       0       0       0
  7834 ;;      Locals:         0       0       0       0       0       0       0
  7835 ;;      Temps:          0       0       0       0       0       0       0
  7836 ;;      Totals:         3       0       0       0       0       0       0
  7837 ;;Total ram usage:        3 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; This function calls:
  7840 ;;		Nothing
  7841 ;; This function is called by:
  7842 ;;		_main_loop
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846                           	psect	text37
  7847  005CA4                     __ptext37:
  7848                           	opt stack 0
  7849  005CA4                     _getTemperature:
  7850                           	opt stack 29
  7851                           
  7852                           ;easat2_util_inputs.c: 41: return -12.502;
  7853                           
  7854                           ;incstack = 0
  7855  005CA4  0E08               	movlw	8
  7856  005CA6  6E01               	movwf	?_getTemperature,c
  7857  005CA8  0E48               	movlw	72
  7858  005CAA  6E02               	movwf	?_getTemperature+1,c
  7859  005CAC  0EC1               	movlw	193
  7860  005CAE  6E03               	movwf	?_getTemperature+2,c
  7861  005CB0  0012               	return	
  7862  005CB2                     __end_of_getTemperature:
  7863                           	opt stack 0
  7864                           tblptru	equ	0xFF8
  7865                           tblptrh	equ	0xFF7
  7866                           tblptrl	equ	0xFF6
  7867                           tablat	equ	0xFF5
  7868                           prodh	equ	0xFF4
  7869                           prodl	equ	0xFF3
  7870                           indf0	equ	0xFEF
  7871                           fsr0h	equ	0xFEA
  7872                           fsr0l	equ	0xFE9
  7873                           wreg	equ	0xFE8
  7874                           indf1	equ	0xFE7
  7875                           fsr1h	equ	0xFE2
  7876                           fsr1l	equ	0xFE1
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           postdec2	equ	0xFDD
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function _getSolarCurrent *****************
  7885 ;; Defined at:
  7886 ;;		line 24 in file "easat2_util_inputs.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;		None
  7889 ;; Auto vars:     Size  Location     Type
  7890 ;;		None
  7891 ;; Return value:  Size  Location     Type
  7892 ;;                  2    0[COMRAM] int 
  7893 ;; Registers used:
  7894 ;;		wreg, status,2
  7895 ;; Tracked objects:
  7896 ;;		On entry : 0/0
  7897 ;;		On exit  : 0/0
  7898 ;;		Unchanged: 0/0
  7899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7900 ;;      Params:         2       0       0       0       0       0       0
  7901 ;;      Locals:         0       0       0       0       0       0       0
  7902 ;;      Temps:          0       0       0       0       0       0       0
  7903 ;;      Totals:         2       0       0       0       0       0       0
  7904 ;;Total ram usage:        2 bytes
  7905 ;; Hardware stack levels used:    1
  7906 ;; This function calls:
  7907 ;;		Nothing
  7908 ;; This function is called by:
  7909 ;;		_main_loop
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text38
  7914  005C76                     __ptext38:
  7915                           	opt stack 0
  7916  005C76                     _getSolarCurrent:
  7917                           	opt stack 29
  7918                           
  7919                           ;easat2_util_inputs.c: 26: return 120;
  7920                           
  7921                           ;incstack = 0
  7922  005C76  0E00               	movlw	0
  7923  005C78  6E02               	movwf	?_getSolarCurrent+1,c
  7924  005C7A  0E78               	movlw	120
  7925  005C7C  6E01               	movwf	?_getSolarCurrent,c
  7926  005C7E  0012               	return	
  7927  005C80                     __end_of_getSolarCurrent:
  7928                           	opt stack 0
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           indf0	equ	0xFEF
  7936                           fsr0h	equ	0xFEA
  7937                           fsr0l	equ	0xFE9
  7938                           wreg	equ	0xFE8
  7939                           indf1	equ	0xFE7
  7940                           fsr1h	equ	0xFE2
  7941                           fsr1l	equ	0xFE1
  7942                           indf2	equ	0xFDF
  7943                           postinc2	equ	0xFDE
  7944                           postdec2	equ	0xFDD
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function _getBatteryVoltage *****************
  7950 ;; Defined at:
  7951 ;;		line 17 in file "easat2_util_inputs.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;		None
  7954 ;; Auto vars:     Size  Location     Type
  7955 ;;		None
  7956 ;; Return value:  Size  Location     Type
  7957 ;;                  3    0[COMRAM] float 
  7958 ;; Registers used:
  7959 ;;		wreg, status,2
  7960 ;; Tracked objects:
  7961 ;;		On entry : 0/0
  7962 ;;		On exit  : 0/0
  7963 ;;		Unchanged: 0/0
  7964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7965 ;;      Params:         3       0       0       0       0       0       0
  7966 ;;      Locals:         0       0       0       0       0       0       0
  7967 ;;      Temps:          0       0       0       0       0       0       0
  7968 ;;      Totals:         3       0       0       0       0       0       0
  7969 ;;Total ram usage:        3 bytes
  7970 ;; Hardware stack levels used:    1
  7971 ;; This function calls:
  7972 ;;		Nothing
  7973 ;; This function is called by:
  7974 ;;		_main_loop
  7975 ;; This function uses a non-reentrant model
  7976 ;;
  7977                           
  7978                           	psect	text39
  7979  005C96                     __ptext39:
  7980                           	opt stack 0
  7981  005C96                     _getBatteryVoltage:
  7982                           	opt stack 29
  7983                           
  7984                           ;easat2_util_inputs.c: 19: return 3.702;
  7985                           
  7986                           ;incstack = 0
  7987  005C96  0EEE               	movlw	238
  7988  005C98  6E01               	movwf	?_getBatteryVoltage,c
  7989  005C9A  0E6C               	movlw	108
  7990  005C9C  6E02               	movwf	?_getBatteryVoltage+1,c
  7991  005C9E  0E40               	movlw	64
  7992  005CA0  6E03               	movwf	?_getBatteryVoltage+2,c
  7993  005CA2  0012               	return	
  7994  005CA4                     __end_of_getBatteryVoltage:
  7995                           	opt stack 0
  7996                           tblptru	equ	0xFF8
  7997                           tblptrh	equ	0xFF7
  7998                           tblptrl	equ	0xFF6
  7999                           tablat	equ	0xFF5
  8000                           prodh	equ	0xFF4
  8001                           prodl	equ	0xFF3
  8002                           indf0	equ	0xFEF
  8003                           fsr0h	equ	0xFEA
  8004                           fsr0l	equ	0xFE9
  8005                           wreg	equ	0xFE8
  8006                           indf1	equ	0xFE7
  8007                           fsr1h	equ	0xFE2
  8008                           fsr1l	equ	0xFE1
  8009                           indf2	equ	0xFDF
  8010                           postinc2	equ	0xFDE
  8011                           postdec2	equ	0xFDD
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016 ;; *************** function _getBatteryCurrent *****************
  8017 ;; Defined at:
  8018 ;;		line 31 in file "easat2_util_inputs.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;		None
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;		None
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  2    0[COMRAM] int 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8032 ;;      Params:         2       0       0       0       0       0       0
  8033 ;;      Locals:         0       0       0       0       0       0       0
  8034 ;;      Temps:          0       0       0       0       0       0       0
  8035 ;;      Totals:         2       0       0       0       0       0       0
  8036 ;;Total ram usage:        2 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; This function calls:
  8039 ;;		Nothing
  8040 ;; This function is called by:
  8041 ;;		_main_loop
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text40
  8046  005C6C                     __ptext40:
  8047                           	opt stack 0
  8048  005C6C                     _getBatteryCurrent:
  8049                           	opt stack 29
  8050                           
  8051                           ;easat2_util_inputs.c: 33: return 100;
  8052                           
  8053                           ;incstack = 0
  8054  005C6C  0E00               	movlw	0
  8055  005C6E  6E02               	movwf	?_getBatteryCurrent+1,c
  8056  005C70  0E64               	movlw	100
  8057  005C72  6E01               	movwf	?_getBatteryCurrent,c
  8058  005C74  0012               	return	
  8059  005C76                     __end_of_getBatteryCurrent:
  8060                           	opt stack 0
  8061                           tblptru	equ	0xFF8
  8062                           tblptrh	equ	0xFF7
  8063                           tblptrl	equ	0xFF6
  8064                           tablat	equ	0xFF5
  8065                           prodh	equ	0xFF4
  8066                           prodl	equ	0xFF3
  8067                           indf0	equ	0xFEF
  8068                           fsr0h	equ	0xFEA
  8069                           fsr0l	equ	0xFE9
  8070                           wreg	equ	0xFE8
  8071                           indf1	equ	0xFE7
  8072                           fsr1h	equ	0xFE2
  8073                           fsr1l	equ	0xFE1
  8074                           indf2	equ	0xFDF
  8075                           postinc2	equ	0xFDE
  8076                           postdec2	equ	0xFDD
  8077                           fsr2h	equ	0xFDA
  8078                           fsr2l	equ	0xFD9
  8079                           status	equ	0xFD8
  8080                           
  8081 ;; *************** function _initialize *****************
  8082 ;; Defined at:
  8083 ;;		line 16 in file "easat2_util_initialize.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		None
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8097 ;;      Params:         0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0
  8099 ;;      Temps:          0       0       0       0       0       0       0
  8100 ;;      Totals:         0       0       0       0       0       0       0
  8101 ;;Total ram usage:        0 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; This function calls:
  8104 ;;		Nothing
  8105 ;; This function is called by:
  8106 ;;		_main
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           	psect	text41
  8111  005C68                     __ptext41:
  8112                           	opt stack 0
  8113  005C68                     _initialize:
  8114                           	opt stack 30
  8115                           
  8116                           ;incstack = 0
  8117  005C68  0012               	return		;funcret
  8118  005C6A                     __end_of_initialize:
  8119                           	opt stack 0
  8120                           tblptru	equ	0xFF8
  8121                           tblptrh	equ	0xFF7
  8122                           tblptrl	equ	0xFF6
  8123                           tablat	equ	0xFF5
  8124                           prodh	equ	0xFF4
  8125                           prodl	equ	0xFF3
  8126                           indf0	equ	0xFEF
  8127                           fsr0h	equ	0xFEA
  8128                           fsr0l	equ	0xFE9
  8129                           wreg	equ	0xFE8
  8130                           indf1	equ	0xFE7
  8131                           fsr1h	equ	0xFE2
  8132                           fsr1l	equ	0xFE1
  8133                           indf2	equ	0xFDF
  8134                           postinc2	equ	0xFDE
  8135                           postdec2	equ	0xFDD
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           indf0	equ	0xFEF
  8146                           fsr0h	equ	0xFEA
  8147                           fsr0l	equ	0xFE9
  8148                           wreg	equ	0xFE8
  8149                           indf1	equ	0xFE7
  8150                           fsr1h	equ	0xFE2
  8151                           fsr1l	equ	0xFE1
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           fsr2h	equ	0xFDA
  8156                           fsr2l	equ	0xFD9
  8157                           status	equ	0xFD8
  8158                           
  8159                           	psect	rparam
  8160  0000                     tblptru	equ	0xFF8
  8161                           tblptrh	equ	0xFF7
  8162                           tblptrl	equ	0xFF6
  8163                           tablat	equ	0xFF5
  8164                           prodh	equ	0xFF4
  8165                           prodl	equ	0xFF3
  8166                           indf0	equ	0xFEF
  8167                           fsr0h	equ	0xFEA
  8168                           fsr0l	equ	0xFE9
  8169                           wreg	equ	0xFE8
  8170                           indf1	equ	0xFE7
  8171                           fsr1h	equ	0xFE2
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           fsr2h	equ	0xFDA
  8177                           fsr2l	equ	0xFD9
  8178                           status	equ	0xFD8


Data Sizes:
    Strings     147
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     93      93
    BANK0           160     35      35
    BANK1           256    194     194
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 128
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p1	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    memset@p	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 23
		 -> STR_2(CODE[23]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 64
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    util_transmit_morse_sequence@morse_sequence	PTR unsigned char  size(2) Largest target is 7
		 -> STR_42(CODE[7]), STR_41(CODE[6]), STR_40(CODE[7]), STR_39(CODE[7]), 
		 -> STR_38(CODE[6]), STR_37(CODE[6]), STR_36(CODE[6]), STR_35(CODE[6]), 
		 -> STR_34(CODE[6]), STR_33(CODE[6]), STR_32(CODE[6]), STR_31(CODE[6]), 
		 -> STR_30(CODE[6]), STR_29(CODE[6]), STR_28(CODE[5]), STR_27(CODE[5]), 
		 -> STR_26(CODE[5]), STR_25(CODE[4]), STR_24(CODE[5]), STR_23(CODE[4]), 
		 -> STR_22(CODE[2]), STR_21(CODE[4]), STR_20(CODE[4]), STR_19(CODE[5]), 
		 -> STR_18(CODE[5]), STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[4]), STR_12(CODE[5]), STR_11(CODE[3]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[5]), STR_7(CODE[2]), 
		 -> STR_6(CODE[4]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[3]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 

    sp__memset	PTR void  size(2) Largest target is 128
		 -> util_beacon_transmission@BEACON_BUFFER(BANK1[64]), util_beacon_transmission@BEACON_MESSAGE(BANK1[128]), 


Critical Paths under _main in COMRAM

    _main_loop->_util_beacon_transmission
    _util_beacon_transmission->_sprintf
    _util_transmit_letter->_util_transmit_morse_sequence
    _util_transmit_space_between_words->_util_waits_delay_ms
    _util_transmit_space_between_letters->_util_waits_delay_ms
    _util_transmit_morse_sequence->_util_transmit_dash
    _util_transmit_morse_sequence->_util_transmit_dot
    _util_transmit_space_between_dots_dashs->_util_waits_delay_ms
    _util_transmit_dot->_util_transmit_buzzer_1ms_cycle
    _util_transmit_dash->_util_transmit_buzzer_1ms_cycle
    _util_transmit_buzzer_1ms_cycle->_util_waits_delay_us
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK0

    _main->_main_loop
    _util_beacon_transmission->_sprintf

Critical Paths under _main in BANK1

    _main_loop->_util_beacon_transmission

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   51586
                         _initialize
                          _main_loop
 ---------------------------------------------------------------------------------
 (1) _main_loop                                           10    10      0   51586
                                             25 BANK0     10    10      0
                             ___ftge
                  _getBatteryCurrent
                  _getBatteryVoltage
                    _getSolarCurrent
                     _getTemperature
           _util_beacon_transmission
               _util_wait_delay_mins
 ---------------------------------------------------------------------------------
 (2) _util_wait_delay_mins                                 2     0      2      64
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _util_beacon_transmission                           204   194     10   50760
                                             83 COMRAM    10     0     10
                                              0 BANK1    194   194      0
                             _memset
                            _sprintf
                             _strcat
                             _strcpy
                             _strlen
               _util_transmit_letter
 ---------------------------------------------------------------------------------
 (3) _util_transmit_letter                                 1     1      0    5252
                                             15 COMRAM     1     1      0
       _util_transmit_morse_sequence
_util_transmit_space_between_letters
  _util_transmit_space_between_words
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_words                    0     0      0     366
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_space_between_letters                  0     0      0     366
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (4) _util_transmit_morse_sequence                         6     4      2    4498
                                              9 COMRAM     6     4      2
                             _strlen
                 _util_transmit_dash
                  _util_transmit_dot
_util_transmit_space_between_dots_da
 ---------------------------------------------------------------------------------
 (5) _util_transmit_space_between_dots_dashs               0     0      0     366
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dot                                    2     2      0     632
                                              7 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_transmit_dash                                   2     2      0     632
                                              7 COMRAM     2     2      0
     _util_transmit_buzzer_1ms_cycle
                _util_waits_delay_ms
 ---------------------------------------------------------------------------------
 (5) _util_waits_delay_ms                                  5     3      2     366
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _util_transmit_buzzer_1ms_cycle                       2     2      0     220
                                              5 COMRAM     2     2      0
                _util_waits_delay_us
 ---------------------------------------------------------------------------------
 (7) _util_waits_delay_us                                  5     3      2     174
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     218
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4     203
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     226
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             51    37     14   43779
                                             63 COMRAM    20     6     14
                                              0 BANK0     25    25      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   10231
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   10033
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    4251
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2164
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3526
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    3229
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     480
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _getTemperature                                       3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _getSolarCurrent                                      2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getBatteryVoltage                                    3     0      3       0
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _getBatteryCurrent                                    2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
   _main_loop
     ___ftge
     _getBatteryCurrent
     _getBatteryVoltage
     _getSolarCurrent
     _getTemperature
     _util_beacon_transmission
       _memset
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _strcat
       _strcpy
       _strlen
       _util_transmit_letter
         _util_transmit_morse_sequence
           _strlen
           _util_transmit_dash
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_us
             _util_waits_delay_ms
           _util_transmit_dot
             _util_transmit_buzzer_1ms_cycle
               _util_waits_delay_us
             _util_waits_delay_ms
           _util_transmit_space_between_dots_dashs
             _util_waits_delay_ms
         _util_transmit_space_between_letters
           _util_waits_delay_ms
         _util_transmit_space_between_words
           _util_waits_delay_ms
     _util_wait_delay_mins

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     5D      5D       1       97.9%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      23       4       21.9%
BITBANK1           100      0       0       5        0.0%
BANK1              100     C2      C2       6       75.8%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Oct 27 21:32:51 2016

                                             l39 5DAA                                     ___awdiv@sign 000C  
                            ___wmul@multiplicand 0011                 __end_of_util_beacon_transmission 64B0  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                   ___ftadd@exp1 0039                                     ___ftadd@exp2 0038  
                               ??_getTemperature 0004                                     ___ftadd@sign 0037  
                                            l170 5E1E                                              l163 5E52  
                                            l147 6F1C                                              l185 5E6E  
                                            l275 7A8C                                              l187 5E90  
                                            l516 67AE                                              l620 68E0  
                                            l613 6852                                              l614 687A  
                                            l705 6076                                              l571 6936  
                                            l548 63AE                                              l645 5D10  
                                            l575 6960                                              l586 6A10  
                                            l595 6A2C                                              l695 6168  
                                   __CFG_CPB$OFF 000000                                     __CFG_CPD$OFF 000000  
                                   ___awmod@sign 0006                   ??_util_transmit_morse_sequence 000C  
                                            wreg 000FE8                                     __CFG_FOSC$XT 000000  
                                    _sprintf$960 0060                                     __CFG_LVP$OFF 000000  
     util_transmit_morse_sequence@morse_sequence 000A                                             l2102 5D28  
                                           l2104 5D2C                                             l2130 6330  
                                           l3002 7D2E                                             l2114 5E60  
                                           l2220 6944                                             l3020 7DCC  
                                           l2108 5D9E                                             l3100 6DF2  
                                           l2142 637C                                             l2134 633E  
                                           l3030 7E06                                             l3022 7DD6  
                                           l3014 7D8E                                             l3110 6E38  
                                           l3102 6E00                                             l2144 639A  
                                           l2136 6348                                             l2312 6636  
                                           l3040 7EB0                                             l3024 7DE2  
                                           l3016 7D98                                             l3008 7D5A  
                                           l3120 6E7E                                             l3112 6E46  
                                           l3104 6E0E                                             l2146 63A4  
                                           l2138 6366                                             l2250 69CA  
                                           l2242 699E                                             l2226 696E  
                                           l2402 60E0                                             l2322 665E  
                                           l3042 7EB4                                             l3130 6EC4  
                                           l3122 6E8C                                             l3114 6E54  
                                           l3106 6E1C                                             l2260 69FE  
                                           l2252 69D4                                             l2308 6626  
                                           l3036 7E2C                                             l3044 7ECA  
                                           l3052 5EDC                                             l2164 5F1E  
                                           l2180 5E40                                             l2412 5FCC  
                                           l2420 5FDE                                             l3140 6F0A  
                                           l3132 6ED2                                             l3124 6E9A  
                                           l3116 6E62                                             l3108 6E2A  
                                           l2262 6A08                                             l2254 69DC  
                                           l2350 61B4                                             l2406 60EE  
                                           l2318 664E                                             l3046 7EE6  
                                           l3054 5EE0                                             l2166 5F22  
                                           l2414 5FD2                                             l2422 6004  
                                           l3142 6F18                                             l3134 6EE0  
                                           l3126 6EA8                                             l3118 6E70  
                                           l3070 6D20                                             l3062 6CE8  
                                           l2248 69C0                                             l2352 61BC  
                                           l2344 619E                                             l2440 6BE4  
                                           l3056 5EF0                                             l2416 5FD8  
                                           l2424 6008                                             l3136 6EEE  
                                           l3128 6EB6                                             l3080 6D66  
                                           l3072 6D2E                                             l3064 6CF6  
                                           l2514 6818                                             l2370 61F4  
                                           l2362 61DC                                             l2354 61C0  
                                           l2338 618E                                             l3058 5EF8  
                                           l3138 6EFC                                             l3090 6DAC  
                                           l3082 6D74                                             l3074 6D3C  
                                           l3066 6D04                                             l3146 6F22  
                                           l2268 6A48                                             l2700 611A  
                                           l2604 6774                                             l2508 67EC  
                                           l2196 5E0C                                             l3092 6DBA  
                                           l3084 6D82                                             l3076 6D4A  
                                           l3068 6D12                                             l3180 6492  
                                           l2630 622E                                             l2278 6A78  
                                           l2622 5EA8                                             l2702 6126  
                                           l2614 679C                                             l2366 61E6  
                                           l2390 60B6                                             l2382 609C  
                                           l2294 65F4                                             l2462 7150  
                                           l3094 6DC8                                             l3086 6D90  
                                           l3078 6D58                                             l3182 628E  
                                           l2640 628A                                             l2712 615A  
                                           l2704 612A                                             l2720 6034  
                                           l2616 67A8                                             l2608 6784  
                                           l2544 68A6                                             l2392 60BE  
                                           l2288 65CC                                             l2448 6CA4  
                                           l2480 7344                                             l2472 7218  
                                           l2800 758A                                             l3096 6DD6  
                                           l3088 6D9E                                             l3176 6476  
                                           l2634 625E                                             l2722 6040  
                                           l2570 66D4                                             l2554 68CE  
                                           l2394 60C2                                             l2386 60A8  
                                           l3098 6DE4                                             l2724 6044  
                                           l2564 66B6                                             l2556 68DA  
                                           l2548 68B6                                             l2468 71F4  
                                           l2900 795A                                             l3188 6312  
                                           l2654 64DC                                             l2734 5F6C  
                                           l2398 60D6                                             l2486 73E8  
                                           l2910 79A0                                             l2902 7962  
                                           l2806 75A4                                             l2744 5D72  
                                           l2672 6542                                             l2728 6068  
                                           l2736 5F78                                             l2592 6746  
                                           l2584 6716                                             l2920 7A42  
                                           l2904 7976                                             l2840 76F4  
                                           l2832 768C                                             l2816 75EA  
                                           l2752 5DCA                                             l2690 6592  
                                           l2682 656A                                             l2498 5CF2  
                                           l2850 7776                                             l2770 746C  
                                           l2754 5DD2                                             l2748 5D82  
                                           l2684 6576                                             l2676 6552  
                                           l2940 7ABE                                             l2932 7A90  
                                           l2908 799A                                             l2860 77DE  
                                           l2844 771A                                             l2764 743A  
                                           l2686 657C                                             l2926 7A5A  
                                           l2918 7A34                                             l2870 783C  
                                           l2846 7730                                             l2790 7542  
                                           l2758 741C                                             l2944 7B10  
                                           l2928 7A6E                                             l2856 77B8  
                                           l2848 7760                                             l2784 74F2  
                                           l2962 7C1A                                             l2954 7BF4  
                                           l2874 78A2                                             l2794 7552  
                                           l2778 74CC                                             l2980 7C92  
                                           l2956 7C02                                             l2892 7930  
                                           l2876 78A8                                             l2964 7C28  
                                           l2788 752C                                             l2982 7C98  
                                           l2974 7C6C                                             l2798 7558  
                                           l2896 794A                                             l2888 78EE  
                                           l2994 7CDE                                             l2998 7D02  
                                           STR_1 7F97                                             STR_2 7F6B  
                                           STR_3 7FE7                                             STR_4 7FCF  
                                           STR_5 7FF4                                             STR_6 7FCA  
                                           STR_7 7FC0                                             STR_8 7FC3  
                                           STR_9 7FBE                                             u2011 65DC  
                                           u2500 64FA                                             u2271 67D0  
                                           u1720 5F42                                             u2505 64F2  
                                           u2291 67FC                                             u1750 5E52  
                                           u1727 5F38                                             u2481 64C0  
                                           u1770 5E1E                                             u2740 762A  
                                           u1781 6902                                             u3197 5DA0  
                                           u1791 6916                                             u2745 7620  
                                           u2930 7A84                                             u1991 65B4  
                                   __CFG_WRTC$ON 000000                                     __CFG_WRTD$ON 000000  
                                           _main 5C8A                                     ___ftpack@arg 0001  
                                   ___ftpack@exp 0004                                             fsr0h 000FEA  
                                           fsr1h 000FE2                                             indf0 000FEF  
                                           fsr0l 000FE9                                             fsr2h 000FDA  
                                           indf1 000FE7                                             fsr1l 000FE1  
                                           indf2 000FDF                                             fsr2l 000FD9  
                                  __CFG_BORV$190 000000                                             prodh 000FF4  
                                           prodl 000FF3                                             start 0000  
                                  __CFG_IESO$OFF 000000                                     ___ftmul@cntr 0022  
                                   ___param_bank 000010                                     ___ftmul@sign 0023  
                                   ___fttol@exp1 0039                                     ___fttol@lval 0035  
                             _util_transmit_dash 5DF0                                            ?_main 0001  
                                __end_of___awdiv 61FE                                  __end_of___ftadd 6A9E  
                                          STR_10 7FD5                                            STR_11 7FCB  
                                          STR_12 7FAB                                            STR_20 7FF5  
                                          STR_13 7FE6                                            STR_21 7FD0  
                                          STR_22 7FA2                                            STR_14 7FF9  
                                          STR_30 7FA4                                            STR_15 7FA1  
                                          STR_23 7FEB                                            STR_31 7FAA  
                                          STR_24 7FB7                                            STR_16 7FBF  
                                          STR_32 7FB0                                            STR_40 7F90  
                                          STR_17 7FA0                                            STR_25 7FE1  
                                          STR_41 7FC2                                            STR_33 7FB6  
                                          STR_18 7FEF                                            STR_26 7FEA  
                                          STR_34 7FDA                                            STR_42 7F89  
                                          STR_19 7FE5                                            STR_27 7FE0  
                                          STR_35 7FD4                                            STR_28 7FC9  
                                          STR_36 7FCE                                  __end_of___awmod 60F8  
                                          STR_37 7FC8                                            STR_29 7F9E  
                                          STR_38 7FBC                                            STR_39 7F82  
                                __end_of___ftneg 5D1E                                  __end_of___lldiv 617A  
                                __end_of___ftmul 6698                                  ___awdiv@divisor 0009  
                                __end_of___llmod 6088                                  __end_of___ftsub 5ED2  
                                __end_of___fttol 65A4                                ??_getSolarCurrent 0003  
                                ___awdiv@counter 000B                              ?_util_transmit_dash 0001  
                                  __CFG_WRT0$OFF 000000                                    __CFG_WRT1$OFF 000000  
                                  __CFG_WRT2$OFF 000000                                    __CFG_WRT3$OFF 000000  
                                   ___lltoft@exp 0011                                   __CFG_EBTR0$OFF 000000  
                                 __CFG_FCMEN$OFF 000000                                   __CFG_EBTR1$OFF 000000  
                                 __CFG_EBTR2$OFF 000000                                   __CFG_EBTR3$OFF 000000  
                                  __CFG_WRTB$OFF 000000                                   __CFG_EBTRB$OFF 000000  
                                __end_of_dpowers 7F1D                                            _scale 701C  
                                __end_of_isdigit 5CFA                               __CFG_MCLRE$EXTMCLR 000000  
                                  ___ftpack@sign 0005                                   __CFG_BOREN$OFF 000000  
                                          tablat 000FF5                                            status 000FD8  
                    __end_of_util_waits_delay_ms 5DC0                      __end_of_util_waits_delay_us 5D42  
                                __end_of_sprintf 7EF4                             ??_util_transmit_dash 0008  
                           _util_wait_delay_mins 5C6A                                  __initialization 5C80  
                      util_beacon_transmission@i 01C0                                     __end_of_main 5C96  
                   __end_of_util_transmit_letter 701C                                           ??_main 005E  
                                  ___fttol@sign1 0034                      util_wait_delay_mins@minutes 0001  
                                  __activetblptr 000002                             __size_of__tdiv_to_l_ 0132  
                               ___llmod@dividend 000E                                           ?_scale 0024  
                               ___awdiv@dividend 0007                                 __end_of___ftpack 63CE  
                               __end_of___lltoft 5FC2                                   __CFG_WDTEN$OFF 000000  
              __size_of_util_beacon_transmission 00E2                        ?_util_beacon_transmission 0054  
                          ?_util_wait_delay_mins 0001                                   __CFG_XINST$OFF 000000  
                               __end_of__powers_ 7F6B                                           ___ftge 61FE  
                                         ___wmul 5D42                                        ??___awdiv 000B  
                                      ??___ftadd 0034                                   __CFG_STVREN$ON 000000  
                                      ??___awmod 0005                                        ??___ftneg 0004  
                                      ??___lldiv 0009                                        ??___ftmul 001B  
                                      ??___llmod 0016                                        ??___ftsub 0040  
                                      ??___fttol 002F                                           _memset 5D68  
                                         _fround 6A9E                                 ___awdiv@quotient 000D  
                                ___awmod@divisor 0003                                  ___awmod@counter 0005  
                                         _strcat 5ED2                                           _strcpy 5DC0  
                                         _strlen 5F14                            ___ftmul@f3_as_product 001F  
                                      ??_isdigit 0001                                     __mediumconst 7EF4  
                                         tblptrh 000FF7                                           tblptrl 000FF6  
                                         tblptru 000FF8                                        ??_sprintf 004E  
                                __CFG_HFOFST$OFF 000000                                       __accesstop 0060  
                        __end_of__initialization 5C80                                  __CFG_PBADEN$OFF 000000  
                                     ___ftadd@f1 002E                                       ___ftadd@f2 0031  
                                     ___ftge@ff1 0001                                       ___ftge@ff2 0004  
                                  ___rparam_used 000001                                       ___ftneg@f1 0001  
                                     ___ftmul@f1 0015                                       ___ftmul@f2 0018  
                                     ___ftsub@f1 003A                                       ___ftsub@f2 003D  
                                     ___fttol@f1 002B                                   __pcstackCOMRAM 0001  
                                     ___lltoft@c 0009                         main_loop@battery_current 007E  
                                  __end_of_scale 740C                                       __div_to_l_ 6698  
                       main_loop@battery_voltage 0080                                  __div_to_l_@exp1 000C  
                                __div_to_l_@cntr 000B                                          ??_scale 0027  
                                __div_to_l_@quot 0007                                     sprintf@width 0067  
      __end_of_util_transmit_space_between_words 5CDC       __size_of_util_transmit_space_between_words 000E  
            ??_util_transmit_space_between_words 0006               ?_util_transmit_space_between_words 0001  
              _util_transmit_space_between_words 5CCE                               __size_of_main_loop 0092  
                                __CFG_PLLCFG$OFF 000000                             _util_transmit_letter 6CE4  
                         ??_util_wait_delay_mins 0003                                    __div_to_l_@f1 0001  
                                  __div_to_l_@f2 0004                               __CFG_CCP2MX$PORTC1 000000  
                                _getSolarCurrent 5C76                                          ?___ftge 0001  
                                        ?___wmul 000F                               __CFG_CCP3MX$PORTB5 000000  
                                        ?_memset 0001                                          ?_fround 0024  
                                      ?___ftpack 0001                                        ?___lltoft 0009  
                                        ?_strcat 0001                                          ?_strcpy 0001  
                                        ?_strlen 0001                            ?_util_transmit_letter 0001  
                           util_waits_delay_ms@i 0004                             util_waits_delay_us@i 0004  
                                __CFG_PWRTEN$OFF 000000                                __end_of__npowers_ 7F44  
                                        __Hparam 0000             __end_of_util_transmit_morse_sequence 6022  
          __size_of_util_transmit_morse_sequence 0060                     _util_transmit_morse_sequence 5FC2  
                                        __Lparam 0000      __end_of_util_transmit_space_between_letters 5CCE  
   __size_of_util_transmit_space_between_letters 000E            ??_util_transmit_space_between_letters 0006  
           ?_util_transmit_space_between_letters 0001              _util_transmit_space_between_letters 5CC0  
                                __size_of___ftge 0090                                          ___awdiv 617A  
                                        ___ftadd 68F2                                          ___awmod 6088  
                                        ___ftneg 5CFA                                          ___lldiv 60F8  
                                __size_of___wmul 0026                                          ___ftmul 65A4  
                                        ___llmod 6022                                          ___ftsub 5E92  
                                        ___fttol 64B0                                       _fround$957 002A  
                                     _fround$958 0027                                __end_of_main_loop 6320  
                                        __pcinit 5C80                                       ??___ftpack 0006  
                                __size_of_memset 002C                                  __size_of_fround 0246  
                                        __ramtop 0600                                       _initialize 5C68  
                                     ??___lltoft 000D                                          __ptext0 5C8A  
                                        __ptext1 628E                                          __ptext2 5C6A  
                                        __ptext3 63CE                                          __ptext4 6CE4  
                                        __ptext5 5CCE                                          __ptext6 5CC0  
                                        __ptext7 5FC2                                          __ptext8 5CB2  
                                        __ptext9 5E24                                  __size_of_strcat 0042  
                                __size_of_strcpy 0030                                  __size_of_strlen 0052  
                                    ?__div_to_l_ 0001                                          _dpowers 7EF5  
                                        _isdigit 5CDC                                 ___awmod@dividend 0001  
               ??_util_transmit_buzzer_1ms_cycle 0006                  ?_util_transmit_buzzer_1ms_cycle 0001  
                           main_loop@temperature 0079                                          _sprintf 740C  
                  util_transmit_morse_sequence@i 000E                             end_of_initialization 5C80  
                        __size_of_getTemperature 000E                                          memset@c 0003  
                        __end_of_getSolarCurrent 5C80                                          memset@n 0005  
                                        memset@p 0007                                    __Lmediumconst 7EF4  
                    __size_of_util_transmit_dash 0034                                  ___lldiv@divisor 0005  
                                ___lldiv@counter 000D                                          postdec2 000FDD  
                   __size_of_util_waits_delay_ms 002C                     __size_of_util_waits_delay_us 0024  
                                        postinc2 000FDE            util_beacon_transmission@solar_current 0057  
                                 __tdiv_to_l_@f1 0001                                   __tdiv_to_l_@f2 0004  
                                        strlen@s 0001                                    ??__tdiv_to_l_ 0007  
                                      _PORTDbits 000F83                           ??_util_transmit_letter 0010  
          util_beacon_transmission@BEACON_BUFFER 0180                              __size_of__div_to_l_ 0128  
                                    ___ftmul@exp 001E                                _util_transmit_dot 5E24  
                                 __end_of___ftge 628E                                   __end_of___wmul 5D68  
                             ?_util_transmit_dot 0001                                      ?_initialize 0001  
                                 __end_of_memset 5D94                                   __end_of_fround 6CE4  
                                 __end_of_strcat 5F14                                   __end_of_strcpy 5DF0  
                                 __end_of_strlen 5F66                              start_initialization 5C80  
                            ??_util_transmit_dot 0008                              __end_of__tdiv_to_l_ 68F2  
                       _util_beacon_transmission 63CE              util_beacon_transmission@temperature 005B  
                               ?_getSolarCurrent 0001                                  ___llmod@divisor 0012  
                                ___llmod@counter 0016                              util_transmit_dash@i 0008  
                      __end_of_util_transmit_dot 5E58                                         ??___ftge 0007  
                                       ??___wmul 0013                                         ??_memset 0007  
                                       ??_fround 0027                                    sprintf@tmpval 0069  
                                       ??_strcat 0005                                         ??_strcpy 0005  
                                       ??_strlen 0003                                       fround@prec 002D  
                              __size_of___ftpack 00AE                                __size_of___lltoft 005C  
                                  __pcstackBANK0 0060                                    __pcstackBANK1 0100  
                                 _getTemperature 5CA4           util_beacon_transmission@BEACON_MESSAGE 0100  
                                    sprintf@flag 0065                                      sprintf@fval 0073  
                                    sprintf@prec 0076                              __size_of_initialize 0002  
                  __size_of_util_wait_delay_mins 0002                                    __pmediumconst 7EF4  
                                       ?___awdiv 0007                                         ?___ftadd 002E  
                                       ?___awmod 0001                                         ?___ftneg 0001  
                                       ?___lldiv 0001                                         ?___ftmul 0015  
                                       ?___llmod 000E                                         ?___ftsub 003A  
                                      __npowers_ 7F1D                                         ?___fttol 002B  
                               __CFG_PRICLKEN$ON 000000                                      __tdiv_to_l_ 67C0  
                                   ??__div_to_l_ 0007                                         ?_isdigit 0001  
                                      _main_loop 628E                                        _scale$959 0027  
                         __end_of_getTemperature 5CB2                              _util_waits_delay_ms 5D94  
                            _util_waits_delay_us 5D1E                                         ?_sprintf 0040  
                                 __size_of_scale 03F0                                   ___wmul@product 0013  
                     __size_of_util_transmit_dot 0034                               __end_of__div_to_l_ 67C0  
         __end_of_util_transmit_buzzer_1ms_cycle 5E92          __size_of_util_transmit_buzzer_1ms_cycle 003A  
                 _util_transmit_buzzer_1ms_cycle 5E58                                _getBatteryCurrent 5C6C  
 __end_of_util_transmit_space_between_dots_dashs 5CC0  __size_of_util_transmit_space_between_dots_dashs 000E  
       ??_util_transmit_space_between_dots_dashs 0006          ?_util_transmit_space_between_dots_dashs 0001  
         _util_transmit_space_between_dots_dashs 5CB2                                 __CFG_WDTPS$32768 000000  
                           ?_util_waits_delay_ms 0001                             ?_util_waits_delay_us 0001  
                             ?_getBatteryCurrent 0001          util_beacon_transmission@battery_current 0059  
                              _getBatteryVoltage 5C96                                ___wmul@multiplier 000F  
                             ?_getBatteryVoltage 0001                       util_transmit_letter@letter 0010  
                            ??_getBatteryCurrent 0003                                       ?_main_loop 0001  
        util_beacon_transmission@battery_voltage 0054                                  ?_getTemperature 0001  
                            ??_getBatteryVoltage 0004                            util_waits_delay_ms@ms 0001  
                          util_waits_delay_us@us 0001                       __end_of_util_transmit_dash 5E24  
                      __end_of_getBatteryCurrent 5C76                                         __Hrparam 0000  
                             util_transmit_dot@i 0008                                         __Lrparam 0000  
                          ??_util_waits_delay_ms 0003                            ??_util_waits_delay_us 0003  
                              __CFG_P2BMX$PORTC0 000000                        __end_of_getBatteryVoltage 5CA4  
                               __size_of___awdiv 0084                                 __size_of___ftadd 01AC  
                               __size_of___awmod 0070                                 __size_of___ftneg 0024  
                               __size_of___lldiv 0082                                 __size_of___ftmul 00F4  
                               __size_of___llmod 0066                                 __size_of___ftsub 0040  
                               __size_of___fttol 00F4                                     ??_initialize 0001  
                                       ___ftpack 6320                                         ___lltoft 5F66  
                     ??_util_beacon_transmission 005E                                      _isdigit$614 0002  
                                     sprintf@exp 0071                                       sprintf@val 006D  
                                     strcat@from 0003                                 __size_of_isdigit 001E  
                                       __ptext10 5DF0                                         __ptext11 5D94  
                                       __ptext20 6A9E                                         __ptext12 5E58  
                                       __ptext21 5D42                                         __ptext13 5D1E  
                                       __ptext30 64B0                                         __ptext22 65A4  
                                       __ptext14 5F14                                         __ptext31 5E92  
                                       __ptext23 6088                                         __ptext15 5DC0  
                                       __ptext40 5C6C                                         __ptext32 68F2  
                                       __ptext24 617A                                         __ptext16 5ED2  
                                       __ptext41 5C68                                         __ptext33 6320  
                                       __ptext25 67C0                                         __ptext17 740C  
                                       __ptext34 5CFA                                         __ptext26 6698  
                                       __ptext18 701C                                         __ptext35 61FE  
                                       __ptext27 5F66                                         __ptext19 5CDC  
                                       __ptext36 5D68                                         __ptext28 6022  
                                       __ptext37 5CA4                                         __ptext29 60F8  
                                       __ptext38 5C76                                         __ptext39 5C96  
                                       __powers_ 7F44                                 __size_of_sprintf 0AE8  
                                     strcpy@from 0003                    __size_of_util_transmit_letter 0338  
                                  __size_of_main 000C                               __end_of_initialize 5C6A  
                  ?_util_transmit_morse_sequence 000A                                      ??_main_loop 005E  
                                       isdigit@c 0003                                         memset@p1 0001  
                         main_loop@solar_current 007C                                         scale@scl 002A  
                                      sprintf@ap 0063                                 __tdiv_to_l_@exp1 000F  
                                      sprintf@sp 0040                                 __tdiv_to_l_@cntr 000E  
                               __tdiv_to_l_@quot 000A                                 ___lldiv@dividend 0001  
                     __size_of_getBatteryCurrent 000A                  util_transmit_buzzer_1ms_cycle@j 0006  
                       __size_of_getSolarCurrent 000A                       __size_of_getBatteryVoltage 000E  
                                   ?__tdiv_to_l_ 0001                                         sprintf@c 0078  
                                       sprintf@f 0042                                         strcat@cp 0005  
                                       strcat@to 0001                     __end_of_util_wait_delay_mins 5C6C  
                               ___lldiv@quotient 0009                                         strcpy@cp 0005  
                                       strlen@cp 0005                                         strcpy@to 0001  
                              __CFG_T3CMX$PORTB5 000000  
